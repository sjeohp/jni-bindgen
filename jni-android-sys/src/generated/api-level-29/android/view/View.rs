// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-View"))]
__jni_bindgen! {
    /// public class [View](https://developer.android.com/reference/android/view/View.html)
    ///
    /// Required feature: android-view-View
    public class View ("android/view/View") extends crate::java::lang::Object, implements crate::android::graphics::drawable::Drawable_Callback, crate::android::view::KeyEvent_Callback, crate::android::view::accessibility::AccessibilityEventSource {

        /// [View](https://developer.android.com/reference/android/view/View.html#View(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::View>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [View](https://developer.android.com/reference/android/view/View.html#View(android.content.Context,%20android.util.AttributeSet))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::View>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [View](https://developer.android.com/reference/android/view/View.html#View(android.content.Context,%20android.util.AttributeSet,%20int))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::View>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [View](https://developer.android.com/reference/android/view/View.html#View(android.content.Context,%20android.util.AttributeSet,%20int,%20int))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::View>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeResolutionStack](https://developer.android.com/reference/android/view/View.html#getAttributeResolutionStack(int))
        pub fn getAttributeResolutionStack<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAttributeResolutionStack", .descriptor == "(I)[I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAttributeResolutionStack\0", "(I)[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeSourceResourceMap](https://developer.android.com/reference/android/view/View.html#getAttributeSourceResourceMap())
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn getAttributeSourceResourceMap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAttributeSourceResourceMap", .descriptor == "()Ljava/util/Map;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAttributeSourceResourceMap\0", "()Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExplicitStyle](https://developer.android.com/reference/android/view/View.html#getExplicitStyle())
        pub fn getExplicitStyle<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getExplicitStyle", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getExplicitStyle\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [saveAttributeDataForStyleable](https://developer.android.com/reference/android/view/View.html#saveAttributeDataForStyleable(android.content.Context,%20int%5B%5D,%20android.util.AttributeSet,%20android.content.res.TypedArray,%20int,%20int))
        ///
        /// Required features: "android-content-Context", "android-content-res-TypedArray", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-res-TypedArray", feature = "android-util-AttributeSet")))]
        pub fn saveAttributeDataForStyleable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::TypedArray>>, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "saveAttributeDataForStyleable", .descriptor == "(Landroid/content/Context;[ILandroid/util/AttributeSet;Landroid/content/res/TypedArray;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "saveAttributeDataForStyleable\0", "(Landroid/content/Context;[ILandroid/util/AttributeSet;Landroid/content/res/TypedArray;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/view/View.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVerticalFadingEdgeLength](https://developer.android.com/reference/android/view/View.html#getVerticalFadingEdgeLength())
        pub fn getVerticalFadingEdgeLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getVerticalFadingEdgeLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getVerticalFadingEdgeLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFadingEdgeLength](https://developer.android.com/reference/android/view/View.html#setFadingEdgeLength(int))
        pub fn setFadingEdgeLength<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setFadingEdgeLength", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setFadingEdgeLength\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHorizontalFadingEdgeLength](https://developer.android.com/reference/android/view/View.html#getHorizontalFadingEdgeLength())
        pub fn getHorizontalFadingEdgeLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getHorizontalFadingEdgeLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getHorizontalFadingEdgeLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVerticalScrollbarWidth](https://developer.android.com/reference/android/view/View.html#getVerticalScrollbarWidth())
        pub fn getVerticalScrollbarWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getVerticalScrollbarWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getVerticalScrollbarWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getHorizontalScrollbarHeight](https://developer.android.com/reference/android/view/View.html#getHorizontalScrollbarHeight())
        // fn getHorizontalScrollbarHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getHorizontalScrollbarHeight", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getHorizontalScrollbarHeight\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setVerticalScrollbarThumbDrawable](https://developer.android.com/reference/android/view/View.html#setVerticalScrollbarThumbDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setVerticalScrollbarThumbDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setVerticalScrollbarThumbDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setVerticalScrollbarThumbDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVerticalScrollbarTrackDrawable](https://developer.android.com/reference/android/view/View.html#setVerticalScrollbarTrackDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setVerticalScrollbarTrackDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setVerticalScrollbarTrackDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setVerticalScrollbarTrackDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHorizontalScrollbarThumbDrawable](https://developer.android.com/reference/android/view/View.html#setHorizontalScrollbarThumbDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setHorizontalScrollbarThumbDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setHorizontalScrollbarThumbDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setHorizontalScrollbarThumbDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHorizontalScrollbarTrackDrawable](https://developer.android.com/reference/android/view/View.html#setHorizontalScrollbarTrackDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setHorizontalScrollbarTrackDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setHorizontalScrollbarTrackDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setHorizontalScrollbarTrackDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVerticalScrollbarThumbDrawable](https://developer.android.com/reference/android/view/View.html#getVerticalScrollbarThumbDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getVerticalScrollbarThumbDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getVerticalScrollbarThumbDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getVerticalScrollbarThumbDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVerticalScrollbarTrackDrawable](https://developer.android.com/reference/android/view/View.html#getVerticalScrollbarTrackDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getVerticalScrollbarTrackDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getVerticalScrollbarTrackDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getVerticalScrollbarTrackDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHorizontalScrollbarThumbDrawable](https://developer.android.com/reference/android/view/View.html#getHorizontalScrollbarThumbDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getHorizontalScrollbarThumbDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getHorizontalScrollbarThumbDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getHorizontalScrollbarThumbDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHorizontalScrollbarTrackDrawable](https://developer.android.com/reference/android/view/View.html#getHorizontalScrollbarTrackDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getHorizontalScrollbarTrackDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getHorizontalScrollbarTrackDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getHorizontalScrollbarTrackDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVerticalScrollbarPosition](https://developer.android.com/reference/android/view/View.html#setVerticalScrollbarPosition(int))
        pub fn setVerticalScrollbarPosition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setVerticalScrollbarPosition", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setVerticalScrollbarPosition\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVerticalScrollbarPosition](https://developer.android.com/reference/android/view/View.html#getVerticalScrollbarPosition())
        pub fn getVerticalScrollbarPosition<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getVerticalScrollbarPosition", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getVerticalScrollbarPosition\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollIndicators](https://developer.android.com/reference/android/view/View.html#setScrollIndicators(int))
        pub fn setScrollIndicators_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollIndicators", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollIndicators\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollIndicators](https://developer.android.com/reference/android/view/View.html#setScrollIndicators(int,%20int))
        pub fn setScrollIndicators_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollIndicators", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollIndicators\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScrollIndicators](https://developer.android.com/reference/android/view/View.html#getScrollIndicators())
        pub fn getScrollIndicators<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getScrollIndicators", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getScrollIndicators\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnScrollChangeListener](https://developer.android.com/reference/android/view/View.html#setOnScrollChangeListener(android.view.View.OnScrollChangeListener))
        ///
        /// Required features: "android-view-View_OnScrollChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnScrollChangeListener")))]
        pub fn setOnScrollChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnScrollChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnScrollChangeListener", .descriptor == "(Landroid/view/View$OnScrollChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnScrollChangeListener\0", "(Landroid/view/View$OnScrollChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnFocusChangeListener](https://developer.android.com/reference/android/view/View.html#setOnFocusChangeListener(android.view.View.OnFocusChangeListener))
        ///
        /// Required features: "android-view-View_OnFocusChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnFocusChangeListener")))]
        pub fn setOnFocusChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnFocusChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnFocusChangeListener", .descriptor == "(Landroid/view/View$OnFocusChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnFocusChangeListener\0", "(Landroid/view/View$OnFocusChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnLayoutChangeListener](https://developer.android.com/reference/android/view/View.html#addOnLayoutChangeListener(android.view.View.OnLayoutChangeListener))
        ///
        /// Required features: "android-view-View_OnLayoutChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnLayoutChangeListener")))]
        pub fn addOnLayoutChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnLayoutChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "addOnLayoutChangeListener", .descriptor == "(Landroid/view/View$OnLayoutChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "addOnLayoutChangeListener\0", "(Landroid/view/View$OnLayoutChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnLayoutChangeListener](https://developer.android.com/reference/android/view/View.html#removeOnLayoutChangeListener(android.view.View.OnLayoutChangeListener))
        ///
        /// Required features: "android-view-View_OnLayoutChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnLayoutChangeListener")))]
        pub fn removeOnLayoutChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnLayoutChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "removeOnLayoutChangeListener", .descriptor == "(Landroid/view/View$OnLayoutChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "removeOnLayoutChangeListener\0", "(Landroid/view/View$OnLayoutChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnAttachStateChangeListener](https://developer.android.com/reference/android/view/View.html#addOnAttachStateChangeListener(android.view.View.OnAttachStateChangeListener))
        ///
        /// Required features: "android-view-View_OnAttachStateChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnAttachStateChangeListener")))]
        pub fn addOnAttachStateChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnAttachStateChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "addOnAttachStateChangeListener", .descriptor == "(Landroid/view/View$OnAttachStateChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "addOnAttachStateChangeListener\0", "(Landroid/view/View$OnAttachStateChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnAttachStateChangeListener](https://developer.android.com/reference/android/view/View.html#removeOnAttachStateChangeListener(android.view.View.OnAttachStateChangeListener))
        ///
        /// Required features: "android-view-View_OnAttachStateChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnAttachStateChangeListener")))]
        pub fn removeOnAttachStateChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnAttachStateChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "removeOnAttachStateChangeListener", .descriptor == "(Landroid/view/View$OnAttachStateChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "removeOnAttachStateChangeListener\0", "(Landroid/view/View$OnAttachStateChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOnFocusChangeListener](https://developer.android.com/reference/android/view/View.html#getOnFocusChangeListener())
        ///
        /// Required features: "android-view-View_OnFocusChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnFocusChangeListener")))]
        pub fn getOnFocusChangeListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View_OnFocusChangeListener>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getOnFocusChangeListener", .descriptor == "()Landroid/view/View$OnFocusChangeListener;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getOnFocusChangeListener\0", "()Landroid/view/View$OnFocusChangeListener;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnClickListener](https://developer.android.com/reference/android/view/View.html#setOnClickListener(android.view.View.OnClickListener))
        ///
        /// Required features: "android-view-View_OnClickListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnClickListener")))]
        pub fn setOnClickListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnClickListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnClickListener", .descriptor == "(Landroid/view/View$OnClickListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnClickListener\0", "(Landroid/view/View$OnClickListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasOnClickListeners](https://developer.android.com/reference/android/view/View.html#hasOnClickListeners())
        pub fn hasOnClickListeners<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "hasOnClickListeners", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "hasOnClickListeners\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnLongClickListener](https://developer.android.com/reference/android/view/View.html#setOnLongClickListener(android.view.View.OnLongClickListener))
        ///
        /// Required features: "android-view-View_OnLongClickListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnLongClickListener")))]
        pub fn setOnLongClickListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnLongClickListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnLongClickListener", .descriptor == "(Landroid/view/View$OnLongClickListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnLongClickListener\0", "(Landroid/view/View$OnLongClickListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnContextClickListener](https://developer.android.com/reference/android/view/View.html#setOnContextClickListener(android.view.View.OnContextClickListener))
        ///
        /// Required features: "android-view-View_OnContextClickListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnContextClickListener")))]
        pub fn setOnContextClickListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnContextClickListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnContextClickListener", .descriptor == "(Landroid/view/View$OnContextClickListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnContextClickListener\0", "(Landroid/view/View$OnContextClickListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnCreateContextMenuListener](https://developer.android.com/reference/android/view/View.html#setOnCreateContextMenuListener(android.view.View.OnCreateContextMenuListener))
        ///
        /// Required features: "android-view-View_OnCreateContextMenuListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnCreateContextMenuListener")))]
        pub fn setOnCreateContextMenuListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnCreateContextMenuListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnCreateContextMenuListener", .descriptor == "(Landroid/view/View$OnCreateContextMenuListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnCreateContextMenuListener\0", "(Landroid/view/View$OnCreateContextMenuListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performClick](https://developer.android.com/reference/android/view/View.html#performClick())
        pub fn performClick<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "performClick", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "performClick\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callOnClick](https://developer.android.com/reference/android/view/View.html#callOnClick())
        pub fn callOnClick<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "callOnClick", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "callOnClick\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performLongClick](https://developer.android.com/reference/android/view/View.html#performLongClick())
        pub fn performLongClick<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "performLongClick", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "performLongClick\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performLongClick](https://developer.android.com/reference/android/view/View.html#performLongClick(float,%20float))
        pub fn performLongClick_float_float<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "performLongClick", .descriptor == "(FF)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "performLongClick\0", "(FF)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performContextClick](https://developer.android.com/reference/android/view/View.html#performContextClick(float,%20float))
        pub fn performContextClick_float_float<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "performContextClick", .descriptor == "(FF)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "performContextClick\0", "(FF)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performContextClick](https://developer.android.com/reference/android/view/View.html#performContextClick())
        pub fn performContextClick<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "performContextClick", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "performContextClick\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showContextMenu](https://developer.android.com/reference/android/view/View.html#showContextMenu())
        pub fn showContextMenu<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "showContextMenu", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "showContextMenu\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showContextMenu](https://developer.android.com/reference/android/view/View.html#showContextMenu(float,%20float))
        pub fn showContextMenu_float_float<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "showContextMenu", .descriptor == "(FF)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "showContextMenu\0", "(FF)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActionMode](https://developer.android.com/reference/android/view/View.html#startActionMode(android.view.ActionMode.Callback))
        ///
        /// Required features: "android-view-ActionMode", "android-view-ActionMode_Callback"
        #[cfg(any(feature = "all", all(feature = "android-view-ActionMode", feature = "android-view-ActionMode_Callback")))]
        pub fn startActionMode_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ActionMode_Callback>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ActionMode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "startActionMode", .descriptor == "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "startActionMode\0", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActionMode](https://developer.android.com/reference/android/view/View.html#startActionMode(android.view.ActionMode.Callback,%20int))
        ///
        /// Required features: "android-view-ActionMode", "android-view-ActionMode_Callback"
        #[cfg(any(feature = "all", all(feature = "android-view-ActionMode", feature = "android-view-ActionMode_Callback")))]
        pub fn startActionMode_Callback_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ActionMode_Callback>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ActionMode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "startActionMode", .descriptor == "(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "startActionMode\0", "(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnKeyListener](https://developer.android.com/reference/android/view/View.html#setOnKeyListener(android.view.View.OnKeyListener))
        ///
        /// Required features: "android-view-View_OnKeyListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnKeyListener")))]
        pub fn setOnKeyListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnKeyListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnKeyListener", .descriptor == "(Landroid/view/View$OnKeyListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnKeyListener\0", "(Landroid/view/View$OnKeyListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnTouchListener](https://developer.android.com/reference/android/view/View.html#setOnTouchListener(android.view.View.OnTouchListener))
        ///
        /// Required features: "android-view-View_OnTouchListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnTouchListener")))]
        pub fn setOnTouchListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnTouchListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnTouchListener", .descriptor == "(Landroid/view/View$OnTouchListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnTouchListener\0", "(Landroid/view/View$OnTouchListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnGenericMotionListener](https://developer.android.com/reference/android/view/View.html#setOnGenericMotionListener(android.view.View.OnGenericMotionListener))
        ///
        /// Required features: "android-view-View_OnGenericMotionListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnGenericMotionListener")))]
        pub fn setOnGenericMotionListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnGenericMotionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnGenericMotionListener", .descriptor == "(Landroid/view/View$OnGenericMotionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnGenericMotionListener\0", "(Landroid/view/View$OnGenericMotionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnHoverListener](https://developer.android.com/reference/android/view/View.html#setOnHoverListener(android.view.View.OnHoverListener))
        ///
        /// Required features: "android-view-View_OnHoverListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnHoverListener")))]
        pub fn setOnHoverListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnHoverListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnHoverListener", .descriptor == "(Landroid/view/View$OnHoverListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnHoverListener\0", "(Landroid/view/View$OnHoverListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnDragListener](https://developer.android.com/reference/android/view/View.html#setOnDragListener(android.view.View.OnDragListener))
        ///
        /// Required features: "android-view-View_OnDragListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnDragListener")))]
        pub fn setOnDragListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnDragListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnDragListener", .descriptor == "(Landroid/view/View$OnDragListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnDragListener\0", "(Landroid/view/View$OnDragListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRevealOnFocusHint](https://developer.android.com/reference/android/view/View.html#setRevealOnFocusHint(boolean))
        pub fn setRevealOnFocusHint<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "setRevealOnFocusHint", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setRevealOnFocusHint\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRevealOnFocusHint](https://developer.android.com/reference/android/view/View.html#getRevealOnFocusHint())
        pub fn getRevealOnFocusHint<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getRevealOnFocusHint", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getRevealOnFocusHint\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestRectangleOnScreen](https://developer.android.com/reference/android/view/View.html#requestRectangleOnScreen(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn requestRectangleOnScreen_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "requestRectangleOnScreen", .descriptor == "(Landroid/graphics/Rect;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestRectangleOnScreen\0", "(Landroid/graphics/Rect;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestRectangleOnScreen](https://developer.android.com/reference/android/view/View.html#requestRectangleOnScreen(android.graphics.Rect,%20boolean))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn requestRectangleOnScreen_Rect_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "requestRectangleOnScreen", .descriptor == "(Landroid/graphics/Rect;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestRectangleOnScreen\0", "(Landroid/graphics/Rect;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearFocus](https://developer.android.com/reference/android/view/View.html#clearFocus())
        pub fn clearFocus<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "clearFocus", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "clearFocus\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasFocus](https://developer.android.com/reference/android/view/View.html#hasFocus())
        pub fn hasFocus<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "hasFocus", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "hasFocus\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasFocusable](https://developer.android.com/reference/android/view/View.html#hasFocusable())
        pub fn hasFocusable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "hasFocusable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "hasFocusable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasExplicitFocusable](https://developer.android.com/reference/android/view/View.html#hasExplicitFocusable())
        pub fn hasExplicitFocusable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "hasExplicitFocusable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "hasExplicitFocusable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onFocusChanged](https://developer.android.com/reference/android/view/View.html#onFocusChanged(boolean,%20int,%20android.graphics.Rect))
        // ///
        // /// Required features: "android-graphics-Rect"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        // fn onFocusChanged<'env>(&'env self, arg0: bool, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onFocusChanged", .descriptor == "(ZILandroid/graphics/Rect;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onFocusChanged\0", "(ZILandroid/graphics/Rect;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setAccessibilityPaneTitle](https://developer.android.com/reference/android/view/View.html#setAccessibilityPaneTitle(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setAccessibilityPaneTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAccessibilityPaneTitle", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAccessibilityPaneTitle\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityPaneTitle](https://developer.android.com/reference/android/view/View.html#getAccessibilityPaneTitle())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getAccessibilityPaneTitle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAccessibilityPaneTitle", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAccessibilityPaneTitle\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendAccessibilityEvent](https://developer.android.com/reference/android/view/View.html#sendAccessibilityEvent(int))
        pub fn sendAccessibilityEvent<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "sendAccessibilityEvent", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "sendAccessibilityEvent\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [announceForAccessibility](https://developer.android.com/reference/android/view/View.html#announceForAccessibility(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn announceForAccessibility<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "announceForAccessibility", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "announceForAccessibility\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendAccessibilityEventUnchecked](https://developer.android.com/reference/android/view/View.html#sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn sendAccessibilityEventUnchecked<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "sendAccessibilityEventUnchecked", .descriptor == "(Landroid/view/accessibility/AccessibilityEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "sendAccessibilityEventUnchecked\0", "(Landroid/view/accessibility/AccessibilityEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchPopulateAccessibilityEvent](https://developer.android.com/reference/android/view/View.html#dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn dispatchPopulateAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchPopulateAccessibilityEvent", .descriptor == "(Landroid/view/accessibility/AccessibilityEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchPopulateAccessibilityEvent\0", "(Landroid/view/accessibility/AccessibilityEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPopulateAccessibilityEvent](https://developer.android.com/reference/android/view/View.html#onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn onPopulateAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onPopulateAccessibilityEvent", .descriptor == "(Landroid/view/accessibility/AccessibilityEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onPopulateAccessibilityEvent\0", "(Landroid/view/accessibility/AccessibilityEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onInitializeAccessibilityEvent](https://developer.android.com/reference/android/view/View.html#onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn onInitializeAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onInitializeAccessibilityEvent", .descriptor == "(Landroid/view/accessibility/AccessibilityEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onInitializeAccessibilityEvent\0", "(Landroid/view/accessibility/AccessibilityEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createAccessibilityNodeInfo](https://developer.android.com/reference/android/view/View.html#createAccessibilityNodeInfo())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn createAccessibilityNodeInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "createAccessibilityNodeInfo", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "createAccessibilityNodeInfo\0", "()Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onInitializeAccessibilityNodeInfo](https://developer.android.com/reference/android/view/View.html#onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn onInitializeAccessibilityNodeInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onInitializeAccessibilityNodeInfo", .descriptor == "(Landroid/view/accessibility/AccessibilityNodeInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onInitializeAccessibilityNodeInfo\0", "(Landroid/view/accessibility/AccessibilityNodeInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityClassName](https://developer.android.com/reference/android/view/View.html#getAccessibilityClassName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getAccessibilityClassName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAccessibilityClassName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAccessibilityClassName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onProvideStructure](https://developer.android.com/reference/android/view/View.html#onProvideStructure(android.view.ViewStructure))
        ///
        /// Required features: "android-view-ViewStructure"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewStructure")))]
        pub fn onProvideStructure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewStructure>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onProvideStructure", .descriptor == "(Landroid/view/ViewStructure;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onProvideStructure\0", "(Landroid/view/ViewStructure;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onProvideAutofillStructure](https://developer.android.com/reference/android/view/View.html#onProvideAutofillStructure(android.view.ViewStructure,%20int))
        ///
        /// Required features: "android-view-ViewStructure"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewStructure")))]
        pub fn onProvideAutofillStructure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewStructure>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onProvideAutofillStructure", .descriptor == "(Landroid/view/ViewStructure;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onProvideAutofillStructure\0", "(Landroid/view/ViewStructure;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onProvideVirtualStructure](https://developer.android.com/reference/android/view/View.html#onProvideVirtualStructure(android.view.ViewStructure))
        ///
        /// Required features: "android-view-ViewStructure"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewStructure")))]
        pub fn onProvideVirtualStructure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewStructure>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onProvideVirtualStructure", .descriptor == "(Landroid/view/ViewStructure;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onProvideVirtualStructure\0", "(Landroid/view/ViewStructure;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onProvideAutofillVirtualStructure](https://developer.android.com/reference/android/view/View.html#onProvideAutofillVirtualStructure(android.view.ViewStructure,%20int))
        ///
        /// Required features: "android-view-ViewStructure"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewStructure")))]
        pub fn onProvideAutofillVirtualStructure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewStructure>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onProvideAutofillVirtualStructure", .descriptor == "(Landroid/view/ViewStructure;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onProvideAutofillVirtualStructure\0", "(Landroid/view/ViewStructure;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [autofill](https://developer.android.com/reference/android/view/View.html#autofill(android.view.autofill.AutofillValue))
        ///
        /// Required features: "android-view-autofill-AutofillValue"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillValue")))]
        pub fn autofill_AutofillValue<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillValue>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "autofill", .descriptor == "(Landroid/view/autofill/AutofillValue;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "autofill\0", "(Landroid/view/autofill/AutofillValue;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [autofill](https://developer.android.com/reference/android/view/View.html#autofill(android.util.SparseArray))
        ///
        /// Required features: "android-util-SparseArray"
        #[cfg(any(feature = "all", all(feature = "android-util-SparseArray")))]
        pub fn autofill_SparseArray<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::SparseArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "autofill", .descriptor == "(Landroid/util/SparseArray;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "autofill\0", "(Landroid/util/SparseArray;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillId](https://developer.android.com/reference/android/view/View.html#getAutofillId())
        ///
        /// Required features: "android-view-autofill-AutofillId"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillId")))]
        pub fn getAutofillId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::autofill::AutofillId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getAutofillId", .descriptor == "()Landroid/view/autofill/AutofillId;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAutofillId\0", "()Landroid/view/autofill/AutofillId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutofillId](https://developer.android.com/reference/android/view/View.html#setAutofillId(android.view.autofill.AutofillId))
        ///
        /// Required features: "android-view-autofill-AutofillId"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillId")))]
        pub fn setAutofillId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillId>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAutofillId", .descriptor == "(Landroid/view/autofill/AutofillId;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAutofillId\0", "(Landroid/view/autofill/AutofillId;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillType](https://developer.android.com/reference/android/view/View.html#getAutofillType())
        pub fn getAutofillType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAutofillType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAutofillType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillHints](https://developer.android.com/reference/android/view/View.html#getAutofillHints())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAutofillHints<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAutofillHints", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAutofillHints\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillValue](https://developer.android.com/reference/android/view/View.html#getAutofillValue())
        ///
        /// Required features: "android-view-autofill-AutofillValue"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillValue")))]
        pub fn getAutofillValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::autofill::AutofillValue>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAutofillValue", .descriptor == "()Landroid/view/autofill/AutofillValue;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAutofillValue\0", "()Landroid/view/autofill/AutofillValue;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImportantForAutofill](https://developer.android.com/reference/android/view/View.html#getImportantForAutofill())
        pub fn getImportantForAutofill<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getImportantForAutofill", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getImportantForAutofill\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setImportantForAutofill](https://developer.android.com/reference/android/view/View.html#setImportantForAutofill(int))
        pub fn setImportantForAutofill<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setImportantForAutofill", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setImportantForAutofill\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isImportantForAutofill](https://developer.android.com/reference/android/view/View.html#isImportantForAutofill())
        pub fn isImportantForAutofill<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "isImportantForAutofill", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isImportantForAutofill\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentCaptureSession](https://developer.android.com/reference/android/view/View.html#setContentCaptureSession(android.view.contentcapture.ContentCaptureSession))
        ///
        /// Required features: "android-view-contentcapture-ContentCaptureSession"
        #[cfg(any(feature = "all", all(feature = "android-view-contentcapture-ContentCaptureSession")))]
        pub fn setContentCaptureSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::contentcapture::ContentCaptureSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setContentCaptureSession", .descriptor == "(Landroid/view/contentcapture/ContentCaptureSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setContentCaptureSession\0", "(Landroid/view/contentcapture/ContentCaptureSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentCaptureSession](https://developer.android.com/reference/android/view/View.html#getContentCaptureSession())
        ///
        /// Required features: "android-view-contentcapture-ContentCaptureSession"
        #[cfg(any(feature = "all", all(feature = "android-view-contentcapture-ContentCaptureSession")))]
        pub fn getContentCaptureSession<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::contentcapture::ContentCaptureSession>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getContentCaptureSession", .descriptor == "()Landroid/view/contentcapture/ContentCaptureSession;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getContentCaptureSession\0", "()Landroid/view/contentcapture/ContentCaptureSession;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchProvideStructure](https://developer.android.com/reference/android/view/View.html#dispatchProvideStructure(android.view.ViewStructure))
        ///
        /// Required features: "android-view-ViewStructure"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewStructure")))]
        pub fn dispatchProvideStructure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewStructure>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchProvideStructure", .descriptor == "(Landroid/view/ViewStructure;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchProvideStructure\0", "(Landroid/view/ViewStructure;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchProvideAutofillStructure](https://developer.android.com/reference/android/view/View.html#dispatchProvideAutofillStructure(android.view.ViewStructure,%20int))
        ///
        /// Required features: "android-view-ViewStructure"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewStructure")))]
        pub fn dispatchProvideAutofillStructure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewStructure>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchProvideAutofillStructure", .descriptor == "(Landroid/view/ViewStructure;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchProvideAutofillStructure\0", "(Landroid/view/ViewStructure;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addExtraDataToAccessibilityNodeInfo](https://developer.android.com/reference/android/view/View.html#addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-view-accessibility-AccessibilityNodeInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-view-accessibility-AccessibilityNodeInfo", feature = "java-lang-String")))]
        pub fn addExtraDataToAccessibilityNodeInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "addExtraDataToAccessibilityNodeInfo", .descriptor == "(Landroid/view/accessibility/AccessibilityNodeInfo;Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "addExtraDataToAccessibilityNodeInfo\0", "(Landroid/view/accessibility/AccessibilityNodeInfo;Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVisibleToUserForAutofill](https://developer.android.com/reference/android/view/View.html#isVisibleToUserForAutofill(int))
        pub fn isVisibleToUserForAutofill<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isVisibleToUserForAutofill", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isVisibleToUserForAutofill\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityDelegate](https://developer.android.com/reference/android/view/View.html#getAccessibilityDelegate())
        ///
        /// Required features: "android-view-View_AccessibilityDelegate"
        #[cfg(any(feature = "all", all(feature = "android-view-View_AccessibilityDelegate")))]
        pub fn getAccessibilityDelegate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View_AccessibilityDelegate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAccessibilityDelegate", .descriptor == "()Landroid/view/View$AccessibilityDelegate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAccessibilityDelegate\0", "()Landroid/view/View$AccessibilityDelegate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAccessibilityDelegate](https://developer.android.com/reference/android/view/View.html#setAccessibilityDelegate(android.view.View.AccessibilityDelegate))
        ///
        /// Required features: "android-view-View_AccessibilityDelegate"
        #[cfg(any(feature = "all", all(feature = "android-view-View_AccessibilityDelegate")))]
        pub fn setAccessibilityDelegate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_AccessibilityDelegate>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAccessibilityDelegate", .descriptor == "(Landroid/view/View$AccessibilityDelegate;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAccessibilityDelegate\0", "(Landroid/view/View$AccessibilityDelegate;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityNodeProvider](https://developer.android.com/reference/android/view/View.html#getAccessibilityNodeProvider())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeProvider"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeProvider")))]
        pub fn getAccessibilityNodeProvider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeProvider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAccessibilityNodeProvider", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeProvider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAccessibilityNodeProvider\0", "()Landroid/view/accessibility/AccessibilityNodeProvider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentDescription](https://developer.android.com/reference/android/view/View.html#getContentDescription())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getContentDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getContentDescription", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getContentDescription\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentDescription](https://developer.android.com/reference/android/view/View.html#setContentDescription(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setContentDescription<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setContentDescription", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setContentDescription\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAccessibilityTraversalBefore](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalBefore(int))
        pub fn setAccessibilityTraversalBefore<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAccessibilityTraversalBefore", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAccessibilityTraversalBefore\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityTraversalBefore](https://developer.android.com/reference/android/view/View.html#getAccessibilityTraversalBefore())
        pub fn getAccessibilityTraversalBefore<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAccessibilityTraversalBefore", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAccessibilityTraversalBefore\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAccessibilityTraversalAfter](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalAfter(int))
        pub fn setAccessibilityTraversalAfter<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAccessibilityTraversalAfter", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAccessibilityTraversalAfter\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityTraversalAfter](https://developer.android.com/reference/android/view/View.html#getAccessibilityTraversalAfter())
        pub fn getAccessibilityTraversalAfter<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAccessibilityTraversalAfter", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAccessibilityTraversalAfter\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLabelFor](https://developer.android.com/reference/android/view/View.html#getLabelFor())
        pub fn getLabelFor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getLabelFor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLabelFor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLabelFor](https://developer.android.com/reference/android/view/View.html#setLabelFor(int))
        pub fn setLabelFor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setLabelFor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setLabelFor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFocused](https://developer.android.com/reference/android/view/View.html#isFocused())
        pub fn isFocused<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isFocused", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isFocused\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findFocus](https://developer.android.com/reference/android/view/View.html#findFocus())
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn findFocus<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "findFocus", .descriptor == "()Landroid/view/View;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "findFocus\0", "()Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScrollContainer](https://developer.android.com/reference/android/view/View.html#isScrollContainer())
        pub fn isScrollContainer<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isScrollContainer", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isScrollContainer\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollContainer](https://developer.android.com/reference/android/view/View.html#setScrollContainer(boolean))
        pub fn setScrollContainer<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollContainer", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollContainer\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawingCacheQuality](https://developer.android.com/reference/android/view/View.html#getDrawingCacheQuality())
        #[deprecated] pub fn getDrawingCacheQuality<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getDrawingCacheQuality", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getDrawingCacheQuality\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDrawingCacheQuality](https://developer.android.com/reference/android/view/View.html#setDrawingCacheQuality(int))
        #[deprecated] pub fn setDrawingCacheQuality<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setDrawingCacheQuality", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setDrawingCacheQuality\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeepScreenOn](https://developer.android.com/reference/android/view/View.html#getKeepScreenOn())
        pub fn getKeepScreenOn<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getKeepScreenOn", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getKeepScreenOn\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setKeepScreenOn](https://developer.android.com/reference/android/view/View.html#setKeepScreenOn(boolean))
        pub fn setKeepScreenOn<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setKeepScreenOn", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setKeepScreenOn\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNextFocusLeftId](https://developer.android.com/reference/android/view/View.html#getNextFocusLeftId())
        pub fn getNextFocusLeftId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getNextFocusLeftId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getNextFocusLeftId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextFocusLeftId](https://developer.android.com/reference/android/view/View.html#setNextFocusLeftId(int))
        pub fn setNextFocusLeftId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setNextFocusLeftId", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setNextFocusLeftId\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNextFocusRightId](https://developer.android.com/reference/android/view/View.html#getNextFocusRightId())
        pub fn getNextFocusRightId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getNextFocusRightId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getNextFocusRightId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextFocusRightId](https://developer.android.com/reference/android/view/View.html#setNextFocusRightId(int))
        pub fn setNextFocusRightId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setNextFocusRightId", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setNextFocusRightId\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNextFocusUpId](https://developer.android.com/reference/android/view/View.html#getNextFocusUpId())
        pub fn getNextFocusUpId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getNextFocusUpId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getNextFocusUpId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextFocusUpId](https://developer.android.com/reference/android/view/View.html#setNextFocusUpId(int))
        pub fn setNextFocusUpId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setNextFocusUpId", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setNextFocusUpId\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNextFocusDownId](https://developer.android.com/reference/android/view/View.html#getNextFocusDownId())
        pub fn getNextFocusDownId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getNextFocusDownId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getNextFocusDownId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextFocusDownId](https://developer.android.com/reference/android/view/View.html#setNextFocusDownId(int))
        pub fn setNextFocusDownId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setNextFocusDownId", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setNextFocusDownId\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNextFocusForwardId](https://developer.android.com/reference/android/view/View.html#getNextFocusForwardId())
        pub fn getNextFocusForwardId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getNextFocusForwardId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getNextFocusForwardId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextFocusForwardId](https://developer.android.com/reference/android/view/View.html#setNextFocusForwardId(int))
        pub fn setNextFocusForwardId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setNextFocusForwardId", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setNextFocusForwardId\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNextClusterForwardId](https://developer.android.com/reference/android/view/View.html#getNextClusterForwardId())
        pub fn getNextClusterForwardId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getNextClusterForwardId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getNextClusterForwardId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextClusterForwardId](https://developer.android.com/reference/android/view/View.html#setNextClusterForwardId(int))
        pub fn setNextClusterForwardId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setNextClusterForwardId", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setNextClusterForwardId\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isShown](https://developer.android.com/reference/android/view/View.html#isShown())
        pub fn isShown<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isShown", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isShown\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [fitSystemWindows](https://developer.android.com/reference/android/view/View.html#fitSystemWindows(android.graphics.Rect))
        // ///
        // /// Required features: "android-graphics-Rect"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        // #[deprecated] fn fitSystemWindows<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "fitSystemWindows", .descriptor == "(Landroid/graphics/Rect;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "fitSystemWindows\0", "(Landroid/graphics/Rect;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [onApplyWindowInsets](https://developer.android.com/reference/android/view/View.html#onApplyWindowInsets(android.view.WindowInsets))
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn onApplyWindowInsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::WindowInsets>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onApplyWindowInsets", .descriptor == "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onApplyWindowInsets\0", "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnApplyWindowInsetsListener](https://developer.android.com/reference/android/view/View.html#setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener))
        ///
        /// Required features: "android-view-View_OnApplyWindowInsetsListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnApplyWindowInsetsListener")))]
        pub fn setOnApplyWindowInsetsListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnApplyWindowInsetsListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnApplyWindowInsetsListener", .descriptor == "(Landroid/view/View$OnApplyWindowInsetsListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnApplyWindowInsetsListener\0", "(Landroid/view/View$OnApplyWindowInsetsListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchApplyWindowInsets](https://developer.android.com/reference/android/view/View.html#dispatchApplyWindowInsets(android.view.WindowInsets))
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn dispatchApplyWindowInsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::WindowInsets>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchApplyWindowInsets", .descriptor == "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchApplyWindowInsets\0", "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSystemGestureExclusionRects](https://developer.android.com/reference/android/view/View.html#setSystemGestureExclusionRects(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn setSystemGestureExclusionRects<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setSystemGestureExclusionRects", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setSystemGestureExclusionRects\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemGestureExclusionRects](https://developer.android.com/reference/android/view/View.html#getSystemGestureExclusionRects())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getSystemGestureExclusionRects<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getSystemGestureExclusionRects", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getSystemGestureExclusionRects\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocationInSurface](https://developer.android.com/reference/android/view/View.html#getLocationInSurface(int%5B%5D))
        pub fn getLocationInSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getLocationInSurface", .descriptor == "([I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLocationInSurface\0", "([I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRootWindowInsets](https://developer.android.com/reference/android/view/View.html#getRootWindowInsets())
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn getRootWindowInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getRootWindowInsets", .descriptor == "()Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getRootWindowInsets\0", "()Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [computeSystemWindowInsets](https://developer.android.com/reference/android/view/View.html#computeSystemWindowInsets(android.view.WindowInsets,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect", "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "android-view-WindowInsets")))]
        pub fn computeSystemWindowInsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::WindowInsets>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "computeSystemWindowInsets", .descriptor == "(Landroid/view/WindowInsets;Landroid/graphics/Rect;)Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "computeSystemWindowInsets\0", "(Landroid/view/WindowInsets;Landroid/graphics/Rect;)Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFitsSystemWindows](https://developer.android.com/reference/android/view/View.html#setFitsSystemWindows(boolean))
        pub fn setFitsSystemWindows<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setFitsSystemWindows", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setFitsSystemWindows\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFitsSystemWindows](https://developer.android.com/reference/android/view/View.html#getFitsSystemWindows())
        pub fn getFitsSystemWindows<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getFitsSystemWindows", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getFitsSystemWindows\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestFitSystemWindows](https://developer.android.com/reference/android/view/View.html#requestFitSystemWindows())
        #[deprecated] pub fn requestFitSystemWindows<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "requestFitSystemWindows", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestFitSystemWindows\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestApplyInsets](https://developer.android.com/reference/android/view/View.html#requestApplyInsets())
        pub fn requestApplyInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "requestApplyInsets", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestApplyInsets\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVisibility](https://developer.android.com/reference/android/view/View.html#getVisibility())
        pub fn getVisibility<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getVisibility", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getVisibility\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVisibility](https://developer.android.com/reference/android/view/View.html#setVisibility(int))
        pub fn setVisibility<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setVisibility", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setVisibility\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnabled](https://developer.android.com/reference/android/view/View.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEnabled](https://developer.android.com/reference/android/view/View.html#setEnabled(boolean))
        pub fn setEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFocusable](https://developer.android.com/reference/android/view/View.html#setFocusable(boolean))
        pub fn setFocusable_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setFocusable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setFocusable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFocusable](https://developer.android.com/reference/android/view/View.html#setFocusable(int))
        pub fn setFocusable_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setFocusable", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setFocusable\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFocusableInTouchMode](https://developer.android.com/reference/android/view/View.html#setFocusableInTouchMode(boolean))
        pub fn setFocusableInTouchMode<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setFocusableInTouchMode", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setFocusableInTouchMode\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutofillHints](https://developer.android.com/reference/android/view/View.html#setAutofillHints(java.lang.String...))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setAutofillHints<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | VARARGS, .name == "setAutofillHints", .descriptor == "([Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAutofillHints\0", "([Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSoundEffectsEnabled](https://developer.android.com/reference/android/view/View.html#setSoundEffectsEnabled(boolean))
        pub fn setSoundEffectsEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setSoundEffectsEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setSoundEffectsEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSoundEffectsEnabled](https://developer.android.com/reference/android/view/View.html#isSoundEffectsEnabled())
        pub fn isSoundEffectsEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isSoundEffectsEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isSoundEffectsEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHapticFeedbackEnabled](https://developer.android.com/reference/android/view/View.html#setHapticFeedbackEnabled(boolean))
        pub fn setHapticFeedbackEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setHapticFeedbackEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setHapticFeedbackEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHapticFeedbackEnabled](https://developer.android.com/reference/android/view/View.html#isHapticFeedbackEnabled())
        pub fn isHapticFeedbackEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isHapticFeedbackEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isHapticFeedbackEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLayoutDirection](https://developer.android.com/reference/android/view/View.html#setLayoutDirection(int))
        pub fn setLayoutDirection<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setLayoutDirection", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setLayoutDirection\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLayoutDirection](https://developer.android.com/reference/android/view/View.html#getLayoutDirection())
        pub fn getLayoutDirection<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getLayoutDirection", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLayoutDirection\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasTransientState](https://developer.android.com/reference/android/view/View.html#hasTransientState())
        pub fn hasTransientState<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "hasTransientState", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "hasTransientState\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHasTransientState](https://developer.android.com/reference/android/view/View.html#setHasTransientState(boolean))
        pub fn setHasTransientState<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setHasTransientState", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setHasTransientState\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAttachedToWindow](https://developer.android.com/reference/android/view/View.html#isAttachedToWindow())
        pub fn isAttachedToWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isAttachedToWindow", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isAttachedToWindow\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLaidOut](https://developer.android.com/reference/android/view/View.html#isLaidOut())
        pub fn isLaidOut<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isLaidOut", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isLaidOut\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWillNotDraw](https://developer.android.com/reference/android/view/View.html#setWillNotDraw(boolean))
        pub fn setWillNotDraw<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setWillNotDraw", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setWillNotDraw\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [willNotDraw](https://developer.android.com/reference/android/view/View.html#willNotDraw())
        pub fn willNotDraw<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "willNotDraw", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "willNotDraw\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWillNotCacheDrawing](https://developer.android.com/reference/android/view/View.html#setWillNotCacheDrawing(boolean))
        #[deprecated] pub fn setWillNotCacheDrawing<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setWillNotCacheDrawing", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setWillNotCacheDrawing\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [willNotCacheDrawing](https://developer.android.com/reference/android/view/View.html#willNotCacheDrawing())
        #[deprecated] pub fn willNotCacheDrawing<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "willNotCacheDrawing", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "willNotCacheDrawing\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isClickable](https://developer.android.com/reference/android/view/View.html#isClickable())
        pub fn isClickable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isClickable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isClickable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClickable](https://developer.android.com/reference/android/view/View.html#setClickable(boolean))
        pub fn setClickable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setClickable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setClickable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLongClickable](https://developer.android.com/reference/android/view/View.html#isLongClickable())
        pub fn isLongClickable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isLongClickable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isLongClickable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLongClickable](https://developer.android.com/reference/android/view/View.html#setLongClickable(boolean))
        pub fn setLongClickable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setLongClickable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setLongClickable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isContextClickable](https://developer.android.com/reference/android/view/View.html#isContextClickable())
        pub fn isContextClickable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isContextClickable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isContextClickable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContextClickable](https://developer.android.com/reference/android/view/View.html#setContextClickable(boolean))
        pub fn setContextClickable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setContextClickable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setContextClickable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPressed](https://developer.android.com/reference/android/view/View.html#setPressed(boolean))
        pub fn setPressed<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setPressed", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setPressed\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dispatchSetPressed](https://developer.android.com/reference/android/view/View.html#dispatchSetPressed(boolean))
        // fn dispatchSetPressed<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchSetPressed", .descriptor == "(Z)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchSetPressed\0", "(Z)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isPressed](https://developer.android.com/reference/android/view/View.html#isPressed())
        pub fn isPressed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isPressed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isPressed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSaveEnabled](https://developer.android.com/reference/android/view/View.html#isSaveEnabled())
        pub fn isSaveEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isSaveEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isSaveEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSaveEnabled](https://developer.android.com/reference/android/view/View.html#setSaveEnabled(boolean))
        pub fn setSaveEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setSaveEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setSaveEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFilterTouchesWhenObscured](https://developer.android.com/reference/android/view/View.html#getFilterTouchesWhenObscured())
        pub fn getFilterTouchesWhenObscured<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getFilterTouchesWhenObscured", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getFilterTouchesWhenObscured\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFilterTouchesWhenObscured](https://developer.android.com/reference/android/view/View.html#setFilterTouchesWhenObscured(boolean))
        pub fn setFilterTouchesWhenObscured<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setFilterTouchesWhenObscured", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setFilterTouchesWhenObscured\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSaveFromParentEnabled](https://developer.android.com/reference/android/view/View.html#isSaveFromParentEnabled())
        pub fn isSaveFromParentEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isSaveFromParentEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isSaveFromParentEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSaveFromParentEnabled](https://developer.android.com/reference/android/view/View.html#setSaveFromParentEnabled(boolean))
        pub fn setSaveFromParentEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setSaveFromParentEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setSaveFromParentEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFocusable](https://developer.android.com/reference/android/view/View.html#isFocusable())
        pub fn isFocusable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "isFocusable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isFocusable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFocusable](https://developer.android.com/reference/android/view/View.html#getFocusable())
        pub fn getFocusable<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getFocusable", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getFocusable\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFocusableInTouchMode](https://developer.android.com/reference/android/view/View.html#isFocusableInTouchMode())
        pub fn isFocusableInTouchMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "isFocusableInTouchMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isFocusableInTouchMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScreenReaderFocusable](https://developer.android.com/reference/android/view/View.html#isScreenReaderFocusable())
        pub fn isScreenReaderFocusable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isScreenReaderFocusable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isScreenReaderFocusable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScreenReaderFocusable](https://developer.android.com/reference/android/view/View.html#setScreenReaderFocusable(boolean))
        pub fn setScreenReaderFocusable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScreenReaderFocusable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScreenReaderFocusable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAccessibilityHeading](https://developer.android.com/reference/android/view/View.html#isAccessibilityHeading())
        pub fn isAccessibilityHeading<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isAccessibilityHeading", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isAccessibilityHeading\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAccessibilityHeading](https://developer.android.com/reference/android/view/View.html#setAccessibilityHeading(boolean))
        pub fn setAccessibilityHeading<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAccessibilityHeading", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAccessibilityHeading\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [focusSearch](https://developer.android.com/reference/android/view/View.html#focusSearch(int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn focusSearch<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "focusSearch", .descriptor == "(I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "focusSearch\0", "(I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isKeyboardNavigationCluster](https://developer.android.com/reference/android/view/View.html#isKeyboardNavigationCluster())
        pub fn isKeyboardNavigationCluster<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "isKeyboardNavigationCluster", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isKeyboardNavigationCluster\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setKeyboardNavigationCluster](https://developer.android.com/reference/android/view/View.html#setKeyboardNavigationCluster(boolean))
        pub fn setKeyboardNavigationCluster<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setKeyboardNavigationCluster", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setKeyboardNavigationCluster\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFocusedByDefault](https://developer.android.com/reference/android/view/View.html#isFocusedByDefault())
        pub fn isFocusedByDefault<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "isFocusedByDefault", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isFocusedByDefault\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFocusedByDefault](https://developer.android.com/reference/android/view/View.html#setFocusedByDefault(boolean))
        pub fn setFocusedByDefault<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setFocusedByDefault", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setFocusedByDefault\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [keyboardNavigationClusterSearch](https://developer.android.com/reference/android/view/View.html#keyboardNavigationClusterSearch(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn keyboardNavigationClusterSearch<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "keyboardNavigationClusterSearch", .descriptor == "(Landroid/view/View;I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "keyboardNavigationClusterSearch\0", "(Landroid/view/View;I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchUnhandledMove](https://developer.android.com/reference/android/view/View.html#dispatchUnhandledMove(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn dispatchUnhandledMove<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchUnhandledMove", .descriptor == "(Landroid/view/View;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchUnhandledMove\0", "(Landroid/view/View;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDefaultFocusHighlightEnabled](https://developer.android.com/reference/android/view/View.html#setDefaultFocusHighlightEnabled(boolean))
        pub fn setDefaultFocusHighlightEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setDefaultFocusHighlightEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setDefaultFocusHighlightEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultFocusHighlightEnabled](https://developer.android.com/reference/android/view/View.html#getDefaultFocusHighlightEnabled())
        pub fn getDefaultFocusHighlightEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getDefaultFocusHighlightEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getDefaultFocusHighlightEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFocusables](https://developer.android.com/reference/android/view/View.html#getFocusables(int))
        ///
        /// Required features: "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-util-ArrayList")))]
        pub fn getFocusables<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::ArrayList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getFocusables", .descriptor == "(I)Ljava/util/ArrayList;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getFocusables\0", "(I)Ljava/util/ArrayList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addFocusables](https://developer.android.com/reference/android/view/View.html#addFocusables(java.util.ArrayList,%20int))
        ///
        /// Required features: "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-util-ArrayList")))]
        pub fn addFocusables_ArrayList_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "addFocusables", .descriptor == "(Ljava/util/ArrayList;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "addFocusables\0", "(Ljava/util/ArrayList;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addFocusables](https://developer.android.com/reference/android/view/View.html#addFocusables(java.util.ArrayList,%20int,%20int))
        ///
        /// Required features: "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-util-ArrayList")))]
        pub fn addFocusables_ArrayList_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "addFocusables", .descriptor == "(Ljava/util/ArrayList;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "addFocusables\0", "(Ljava/util/ArrayList;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addKeyboardNavigationClusters](https://developer.android.com/reference/android/view/View.html#addKeyboardNavigationClusters(java.util.Collection,%20int))
        ///
        /// Required features: "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        pub fn addKeyboardNavigationClusters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "addKeyboardNavigationClusters", .descriptor == "(Ljava/util/Collection;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "addKeyboardNavigationClusters\0", "(Ljava/util/Collection;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findViewsWithText](https://developer.android.com/reference/android/view/View.html#findViewsWithText(java.util.ArrayList,%20java.lang.CharSequence,%20int))
        ///
        /// Required features: "java-lang-CharSequence", "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-util-ArrayList")))]
        pub fn findViewsWithText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "findViewsWithText", .descriptor == "(Ljava/util/ArrayList;Ljava/lang/CharSequence;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "findViewsWithText\0", "(Ljava/util/ArrayList;Ljava/lang/CharSequence;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTouchables](https://developer.android.com/reference/android/view/View.html#getTouchables())
        ///
        /// Required features: "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-util-ArrayList")))]
        pub fn getTouchables<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::ArrayList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTouchables", .descriptor == "()Ljava/util/ArrayList;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTouchables\0", "()Ljava/util/ArrayList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTouchables](https://developer.android.com/reference/android/view/View.html#addTouchables(java.util.ArrayList))
        ///
        /// Required features: "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-util-ArrayList")))]
        pub fn addTouchables<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "addTouchables", .descriptor == "(Ljava/util/ArrayList;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "addTouchables\0", "(Ljava/util/ArrayList;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAccessibilityFocused](https://developer.android.com/reference/android/view/View.html#isAccessibilityFocused())
        pub fn isAccessibilityFocused<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isAccessibilityFocused", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isAccessibilityFocused\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestFocus](https://developer.android.com/reference/android/view/View.html#requestFocus())
        pub fn requestFocus<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "requestFocus", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestFocus\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restoreDefaultFocus](https://developer.android.com/reference/android/view/View.html#restoreDefaultFocus())
        pub fn restoreDefaultFocus<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "restoreDefaultFocus", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "restoreDefaultFocus\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestFocus](https://developer.android.com/reference/android/view/View.html#requestFocus(int))
        pub fn requestFocus_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "requestFocus", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestFocus\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestFocus](https://developer.android.com/reference/android/view/View.html#requestFocus(int,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn requestFocus_int_Rect<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "requestFocus", .descriptor == "(ILandroid/graphics/Rect;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestFocus\0", "(ILandroid/graphics/Rect;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestFocusFromTouch](https://developer.android.com/reference/android/view/View.html#requestFocusFromTouch())
        pub fn requestFocusFromTouch<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "requestFocusFromTouch", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestFocusFromTouch\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImportantForAccessibility](https://developer.android.com/reference/android/view/View.html#getImportantForAccessibility())
        pub fn getImportantForAccessibility<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getImportantForAccessibility", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getImportantForAccessibility\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAccessibilityLiveRegion](https://developer.android.com/reference/android/view/View.html#setAccessibilityLiveRegion(int))
        pub fn setAccessibilityLiveRegion<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAccessibilityLiveRegion", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAccessibilityLiveRegion\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityLiveRegion](https://developer.android.com/reference/android/view/View.html#getAccessibilityLiveRegion())
        pub fn getAccessibilityLiveRegion<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAccessibilityLiveRegion", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAccessibilityLiveRegion\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setImportantForAccessibility](https://developer.android.com/reference/android/view/View.html#setImportantForAccessibility(int))
        pub fn setImportantForAccessibility<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setImportantForAccessibility", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setImportantForAccessibility\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isImportantForAccessibility](https://developer.android.com/reference/android/view/View.html#isImportantForAccessibility())
        pub fn isImportantForAccessibility<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isImportantForAccessibility", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isImportantForAccessibility\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParentForAccessibility](https://developer.android.com/reference/android/view/View.html#getParentForAccessibility())
        ///
        /// Required features: "android-view-ViewParent"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewParent")))]
        pub fn getParentForAccessibility<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewParent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getParentForAccessibility", .descriptor == "()Landroid/view/ViewParent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getParentForAccessibility\0", "()Landroid/view/ViewParent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addChildrenForAccessibility](https://developer.android.com/reference/android/view/View.html#addChildrenForAccessibility(java.util.ArrayList))
        ///
        /// Required features: "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-util-ArrayList")))]
        pub fn addChildrenForAccessibility<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "addChildrenForAccessibility", .descriptor == "(Ljava/util/ArrayList;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "addChildrenForAccessibility\0", "(Ljava/util/ArrayList;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTransitionVisibility](https://developer.android.com/reference/android/view/View.html#setTransitionVisibility(int))
        pub fn setTransitionVisibility<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTransitionVisibility", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTransitionVisibility\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchNestedPrePerformAccessibilityAction](https://developer.android.com/reference/android/view/View.html#dispatchNestedPrePerformAccessibilityAction(int,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn dispatchNestedPrePerformAccessibilityAction<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchNestedPrePerformAccessibilityAction", .descriptor == "(ILandroid/os/Bundle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchNestedPrePerformAccessibilityAction\0", "(ILandroid/os/Bundle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performAccessibilityAction](https://developer.android.com/reference/android/view/View.html#performAccessibilityAction(int,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn performAccessibilityAction<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "performAccessibilityAction", .descriptor == "(ILandroid/os/Bundle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "performAccessibilityAction\0", "(ILandroid/os/Bundle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTemporarilyDetached](https://developer.android.com/reference/android/view/View.html#isTemporarilyDetached())
        pub fn isTemporarilyDetached<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "isTemporarilyDetached", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isTemporarilyDetached\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchStartTemporaryDetach](https://developer.android.com/reference/android/view/View.html#dispatchStartTemporaryDetach())
        pub fn dispatchStartTemporaryDetach<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchStartTemporaryDetach", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchStartTemporaryDetach\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStartTemporaryDetach](https://developer.android.com/reference/android/view/View.html#onStartTemporaryDetach())
        pub fn onStartTemporaryDetach<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onStartTemporaryDetach", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onStartTemporaryDetach\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchFinishTemporaryDetach](https://developer.android.com/reference/android/view/View.html#dispatchFinishTemporaryDetach())
        pub fn dispatchFinishTemporaryDetach<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchFinishTemporaryDetach", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchFinishTemporaryDetach\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onFinishTemporaryDetach](https://developer.android.com/reference/android/view/View.html#onFinishTemporaryDetach())
        pub fn onFinishTemporaryDetach<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onFinishTemporaryDetach", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onFinishTemporaryDetach\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeyDispatcherState](https://developer.android.com/reference/android/view/View.html#getKeyDispatcherState())
        ///
        /// Required features: "android-view-KeyEvent_DispatcherState"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent_DispatcherState")))]
        pub fn getKeyDispatcherState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::KeyEvent_DispatcherState>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getKeyDispatcherState", .descriptor == "()Landroid/view/KeyEvent$DispatcherState;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getKeyDispatcherState\0", "()Landroid/view/KeyEvent$DispatcherState;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchKeyEventPreIme](https://developer.android.com/reference/android/view/View.html#dispatchKeyEventPreIme(android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn dispatchKeyEventPreIme<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchKeyEventPreIme", .descriptor == "(Landroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchKeyEventPreIme\0", "(Landroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchKeyEvent](https://developer.android.com/reference/android/view/View.html#dispatchKeyEvent(android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn dispatchKeyEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchKeyEvent", .descriptor == "(Landroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchKeyEvent\0", "(Landroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchKeyShortcutEvent](https://developer.android.com/reference/android/view/View.html#dispatchKeyShortcutEvent(android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn dispatchKeyShortcutEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchKeyShortcutEvent", .descriptor == "(Landroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchKeyShortcutEvent\0", "(Landroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchTouchEvent](https://developer.android.com/reference/android/view/View.html#dispatchTouchEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn dispatchTouchEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchTouchEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchTouchEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onFilterTouchEventForSecurity](https://developer.android.com/reference/android/view/View.html#onFilterTouchEventForSecurity(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn onFilterTouchEventForSecurity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onFilterTouchEventForSecurity", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onFilterTouchEventForSecurity\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchTrackballEvent](https://developer.android.com/reference/android/view/View.html#dispatchTrackballEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn dispatchTrackballEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchTrackballEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchTrackballEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchCapturedPointerEvent](https://developer.android.com/reference/android/view/View.html#dispatchCapturedPointerEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn dispatchCapturedPointerEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchCapturedPointerEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchCapturedPointerEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchGenericMotionEvent](https://developer.android.com/reference/android/view/View.html#dispatchGenericMotionEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn dispatchGenericMotionEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchGenericMotionEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchGenericMotionEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dispatchHoverEvent](https://developer.android.com/reference/android/view/View.html#dispatchHoverEvent(android.view.MotionEvent))
        // ///
        // /// Required features: "android-view-MotionEvent"
        // #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        // fn dispatchHoverEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchHoverEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchHoverEvent\0", "(Landroid/view/MotionEvent;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [dispatchGenericPointerEvent](https://developer.android.com/reference/android/view/View.html#dispatchGenericPointerEvent(android.view.MotionEvent))
        // ///
        // /// Required features: "android-view-MotionEvent"
        // #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        // fn dispatchGenericPointerEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchGenericPointerEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchGenericPointerEvent\0", "(Landroid/view/MotionEvent;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [dispatchGenericFocusedEvent](https://developer.android.com/reference/android/view/View.html#dispatchGenericFocusedEvent(android.view.MotionEvent))
        // ///
        // /// Required features: "android-view-MotionEvent"
        // #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        // fn dispatchGenericFocusedEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchGenericFocusedEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchGenericFocusedEvent\0", "(Landroid/view/MotionEvent;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [dispatchWindowFocusChanged](https://developer.android.com/reference/android/view/View.html#dispatchWindowFocusChanged(boolean))
        pub fn dispatchWindowFocusChanged<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchWindowFocusChanged", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchWindowFocusChanged\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onWindowFocusChanged](https://developer.android.com/reference/android/view/View.html#onWindowFocusChanged(boolean))
        pub fn onWindowFocusChanged<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onWindowFocusChanged", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onWindowFocusChanged\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasWindowFocus](https://developer.android.com/reference/android/view/View.html#hasWindowFocus())
        pub fn hasWindowFocus<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "hasWindowFocus", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "hasWindowFocus\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dispatchVisibilityChanged](https://developer.android.com/reference/android/view/View.html#dispatchVisibilityChanged(android.view.View,%20int))
        // ///
        // /// Required features: "android-view-View"
        // #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        // fn dispatchVisibilityChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchVisibilityChanged", .descriptor == "(Landroid/view/View;I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchVisibilityChanged\0", "(Landroid/view/View;I)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onVisibilityChanged](https://developer.android.com/reference/android/view/View.html#onVisibilityChanged(android.view.View,%20int))
        // ///
        // /// Required features: "android-view-View"
        // #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        // fn onVisibilityChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onVisibilityChanged", .descriptor == "(Landroid/view/View;I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onVisibilityChanged\0", "(Landroid/view/View;I)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [dispatchDisplayHint](https://developer.android.com/reference/android/view/View.html#dispatchDisplayHint(int))
        pub fn dispatchDisplayHint<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchDisplayHint", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchDisplayHint\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onDisplayHint](https://developer.android.com/reference/android/view/View.html#onDisplayHint(int))
        // fn onDisplayHint<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onDisplayHint", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onDisplayHint\0", "(I)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [dispatchWindowVisibilityChanged](https://developer.android.com/reference/android/view/View.html#dispatchWindowVisibilityChanged(int))
        pub fn dispatchWindowVisibilityChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchWindowVisibilityChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchWindowVisibilityChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onWindowVisibilityChanged](https://developer.android.com/reference/android/view/View.html#onWindowVisibilityChanged(int))
        // fn onWindowVisibilityChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onWindowVisibilityChanged", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onWindowVisibilityChanged\0", "(I)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [onVisibilityAggregated](https://developer.android.com/reference/android/view/View.html#onVisibilityAggregated(boolean))
        pub fn onVisibilityAggregated<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onVisibilityAggregated", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onVisibilityAggregated\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindowVisibility](https://developer.android.com/reference/android/view/View.html#getWindowVisibility())
        pub fn getWindowVisibility<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getWindowVisibility", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getWindowVisibility\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindowVisibleDisplayFrame](https://developer.android.com/reference/android/view/View.html#getWindowVisibleDisplayFrame(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getWindowVisibleDisplayFrame<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getWindowVisibleDisplayFrame", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getWindowVisibleDisplayFrame\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchConfigurationChanged](https://developer.android.com/reference/android/view/View.html#dispatchConfigurationChanged(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn dispatchConfigurationChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchConfigurationChanged", .descriptor == "(Landroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchConfigurationChanged\0", "(Landroid/content/res/Configuration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onConfigurationChanged](https://developer.android.com/reference/android/view/View.html#onConfigurationChanged(android.content.res.Configuration))
        // ///
        // /// Required features: "android-content-res-Configuration"
        // #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        // fn onConfigurationChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onConfigurationChanged", .descriptor == "(Landroid/content/res/Configuration;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onConfigurationChanged\0", "(Landroid/content/res/Configuration;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isInTouchMode](https://developer.android.com/reference/android/view/View.html#isInTouchMode())
        pub fn isInTouchMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isInTouchMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isInTouchMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContext](https://developer.android.com/reference/android/view/View.html#getContext())
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn getContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getContext", .descriptor == "()Landroid/content/Context;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getContext\0", "()Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyPreIme](https://developer.android.com/reference/android/view/View.html#onKeyPreIme(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyPreIme<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onKeyPreIme", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onKeyPreIme\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyDown](https://developer.android.com/reference/android/view/View.html#onKeyDown(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyDown<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onKeyDown", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onKeyDown\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyLongPress](https://developer.android.com/reference/android/view/View.html#onKeyLongPress(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyLongPress<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onKeyLongPress", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onKeyLongPress\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyUp](https://developer.android.com/reference/android/view/View.html#onKeyUp(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyUp<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onKeyUp", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onKeyUp\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyMultiple](https://developer.android.com/reference/android/view/View.html#onKeyMultiple(int,%20int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyMultiple<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onKeyMultiple", .descriptor == "(IILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onKeyMultiple\0", "(IILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyShortcut](https://developer.android.com/reference/android/view/View.html#onKeyShortcut(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyShortcut<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onKeyShortcut", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onKeyShortcut\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCheckIsTextEditor](https://developer.android.com/reference/android/view/View.html#onCheckIsTextEditor())
        pub fn onCheckIsTextEditor<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onCheckIsTextEditor", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onCheckIsTextEditor\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCreateInputConnection](https://developer.android.com/reference/android/view/View.html#onCreateInputConnection(android.view.inputmethod.EditorInfo))
        ///
        /// Required features: "android-view-inputmethod-EditorInfo", "android-view-inputmethod-InputConnection"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-EditorInfo", feature = "android-view-inputmethod-InputConnection")))]
        pub fn onCreateInputConnection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::EditorInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::inputmethod::InputConnection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onCreateInputConnection", .descriptor == "(Landroid/view/inputmethod/EditorInfo;)Landroid/view/inputmethod/InputConnection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onCreateInputConnection\0", "(Landroid/view/inputmethod/EditorInfo;)Landroid/view/inputmethod/InputConnection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkInputConnectionProxy](https://developer.android.com/reference/android/view/View.html#checkInputConnectionProxy(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn checkInputConnectionProxy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "checkInputConnectionProxy", .descriptor == "(Landroid/view/View;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "checkInputConnectionProxy\0", "(Landroid/view/View;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createContextMenu](https://developer.android.com/reference/android/view/View.html#createContextMenu(android.view.ContextMenu))
        ///
        /// Required features: "android-view-ContextMenu"
        #[cfg(any(feature = "all", all(feature = "android-view-ContextMenu")))]
        pub fn createContextMenu<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ContextMenu>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "createContextMenu", .descriptor == "(Landroid/view/ContextMenu;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "createContextMenu\0", "(Landroid/view/ContextMenu;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getContextMenuInfo](https://developer.android.com/reference/android/view/View.html#getContextMenuInfo())
        // ///
        // /// Required features: "android-view-ContextMenu_ContextMenuInfo"
        // #[cfg(any(feature = "all", all(feature = "android-view-ContextMenu_ContextMenuInfo")))]
        // fn getContextMenuInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ContextMenu_ContextMenuInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getContextMenuInfo", .descriptor == "()Landroid/view/ContextMenu$ContextMenuInfo;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getContextMenuInfo\0", "()Landroid/view/ContextMenu$ContextMenuInfo;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onCreateContextMenu](https://developer.android.com/reference/android/view/View.html#onCreateContextMenu(android.view.ContextMenu))
        // ///
        // /// Required features: "android-view-ContextMenu"
        // #[cfg(any(feature = "all", all(feature = "android-view-ContextMenu")))]
        // fn onCreateContextMenu<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ContextMenu>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onCreateContextMenu", .descriptor == "(Landroid/view/ContextMenu;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onCreateContextMenu\0", "(Landroid/view/ContextMenu;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [onTrackballEvent](https://developer.android.com/reference/android/view/View.html#onTrackballEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn onTrackballEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onTrackballEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onTrackballEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGenericMotionEvent](https://developer.android.com/reference/android/view/View.html#onGenericMotionEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn onGenericMotionEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onGenericMotionEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onGenericMotionEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHoverEvent](https://developer.android.com/reference/android/view/View.html#onHoverEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn onHoverEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onHoverEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onHoverEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHovered](https://developer.android.com/reference/android/view/View.html#isHovered())
        pub fn isHovered<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isHovered", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isHovered\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHovered](https://developer.android.com/reference/android/view/View.html#setHovered(boolean))
        pub fn setHovered<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setHovered", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setHovered\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHoverChanged](https://developer.android.com/reference/android/view/View.html#onHoverChanged(boolean))
        pub fn onHoverChanged<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onHoverChanged", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onHoverChanged\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTouchEvent](https://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn onTouchEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onTouchEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onTouchEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelLongPress](https://developer.android.com/reference/android/view/View.html#cancelLongPress())
        pub fn cancelLongPress<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "cancelLongPress", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "cancelLongPress\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTouchDelegate](https://developer.android.com/reference/android/view/View.html#setTouchDelegate(android.view.TouchDelegate))
        ///
        /// Required features: "android-view-TouchDelegate"
        #[cfg(any(feature = "all", all(feature = "android-view-TouchDelegate")))]
        pub fn setTouchDelegate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::TouchDelegate>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTouchDelegate", .descriptor == "(Landroid/view/TouchDelegate;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTouchDelegate\0", "(Landroid/view/TouchDelegate;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTouchDelegate](https://developer.android.com/reference/android/view/View.html#getTouchDelegate())
        ///
        /// Required features: "android-view-TouchDelegate"
        #[cfg(any(feature = "all", all(feature = "android-view-TouchDelegate")))]
        pub fn getTouchDelegate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::TouchDelegate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTouchDelegate", .descriptor == "()Landroid/view/TouchDelegate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTouchDelegate\0", "()Landroid/view/TouchDelegate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestUnbufferedDispatch](https://developer.android.com/reference/android/view/View.html#requestUnbufferedDispatch(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn requestUnbufferedDispatch<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "requestUnbufferedDispatch", .descriptor == "(Landroid/view/MotionEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestUnbufferedDispatch\0", "(Landroid/view/MotionEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bringToFront](https://developer.android.com/reference/android/view/View.html#bringToFront())
        pub fn bringToFront<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "bringToFront", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "bringToFront\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onScrollChanged](https://developer.android.com/reference/android/view/View.html#onScrollChanged(int,%20int,%20int,%20int))
        // fn onScrollChanged<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onScrollChanged", .descriptor == "(IIII)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onScrollChanged\0", "(IIII)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onSizeChanged](https://developer.android.com/reference/android/view/View.html#onSizeChanged(int,%20int,%20int,%20int))
        // fn onSizeChanged<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onSizeChanged", .descriptor == "(IIII)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onSizeChanged\0", "(IIII)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [dispatchDraw](https://developer.android.com/reference/android/view/View.html#dispatchDraw(android.graphics.Canvas))
        // ///
        // /// Required features: "android-graphics-Canvas"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        // fn dispatchDraw<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchDraw", .descriptor == "(Landroid/graphics/Canvas;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchDraw\0", "(Landroid/graphics/Canvas;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getParent](https://developer.android.com/reference/android/view/View.html#getParent())
        ///
        /// Required features: "android-view-ViewParent"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewParent")))]
        pub fn getParent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewParent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getParent", .descriptor == "()Landroid/view/ViewParent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getParent\0", "()Landroid/view/ViewParent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollX](https://developer.android.com/reference/android/view/View.html#setScrollX(int))
        pub fn setScrollX<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollX", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollX\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollY](https://developer.android.com/reference/android/view/View.html#setScrollY(int))
        pub fn setScrollY<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollY", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollY\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScrollX](https://developer.android.com/reference/android/view/View.html#getScrollX())
        pub fn getScrollX<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getScrollX", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getScrollX\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScrollY](https://developer.android.com/reference/android/view/View.html#getScrollY())
        pub fn getScrollY<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getScrollY", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getScrollY\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWidth](https://developer.android.com/reference/android/view/View.html#getWidth())
        pub fn getWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeight](https://developer.android.com/reference/android/view/View.html#getHeight())
        pub fn getHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawingRect](https://developer.android.com/reference/android/view/View.html#getDrawingRect(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getDrawingRect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getDrawingRect", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getDrawingRect\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMeasuredWidth](https://developer.android.com/reference/android/view/View.html#getMeasuredWidth())
        pub fn getMeasuredWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getMeasuredWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getMeasuredWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMeasuredWidthAndState](https://developer.android.com/reference/android/view/View.html#getMeasuredWidthAndState())
        pub fn getMeasuredWidthAndState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getMeasuredWidthAndState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getMeasuredWidthAndState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMeasuredHeight](https://developer.android.com/reference/android/view/View.html#getMeasuredHeight())
        pub fn getMeasuredHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getMeasuredHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getMeasuredHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMeasuredHeightAndState](https://developer.android.com/reference/android/view/View.html#getMeasuredHeightAndState())
        pub fn getMeasuredHeightAndState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getMeasuredHeightAndState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getMeasuredHeightAndState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMeasuredState](https://developer.android.com/reference/android/view/View.html#getMeasuredState())
        pub fn getMeasuredState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getMeasuredState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getMeasuredState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMatrix](https://developer.android.com/reference/android/view/View.html#getMatrix())
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn getMatrix<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Matrix>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getMatrix", .descriptor == "()Landroid/graphics/Matrix;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getMatrix\0", "()Landroid/graphics/Matrix;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCameraDistance](https://developer.android.com/reference/android/view/View.html#getCameraDistance())
        pub fn getCameraDistance<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getCameraDistance", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getCameraDistance\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCameraDistance](https://developer.android.com/reference/android/view/View.html#setCameraDistance(float))
        pub fn setCameraDistance<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setCameraDistance", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setCameraDistance\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRotation](https://developer.android.com/reference/android/view/View.html#getRotation())
        pub fn getRotation<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getRotation", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getRotation\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRotation](https://developer.android.com/reference/android/view/View.html#setRotation(float))
        pub fn setRotation<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setRotation", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setRotation\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRotationY](https://developer.android.com/reference/android/view/View.html#getRotationY())
        pub fn getRotationY<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getRotationY", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getRotationY\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRotationY](https://developer.android.com/reference/android/view/View.html#setRotationY(float))
        pub fn setRotationY<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setRotationY", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setRotationY\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRotationX](https://developer.android.com/reference/android/view/View.html#getRotationX())
        pub fn getRotationX<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getRotationX", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getRotationX\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRotationX](https://developer.android.com/reference/android/view/View.html#setRotationX(float))
        pub fn setRotationX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setRotationX", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setRotationX\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScaleX](https://developer.android.com/reference/android/view/View.html#getScaleX())
        pub fn getScaleX<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getScaleX", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getScaleX\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScaleX](https://developer.android.com/reference/android/view/View.html#setScaleX(float))
        pub fn setScaleX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScaleX", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScaleX\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScaleY](https://developer.android.com/reference/android/view/View.html#getScaleY())
        pub fn getScaleY<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getScaleY", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getScaleY\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScaleY](https://developer.android.com/reference/android/view/View.html#setScaleY(float))
        pub fn setScaleY<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScaleY", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScaleY\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPivotX](https://developer.android.com/reference/android/view/View.html#getPivotX())
        pub fn getPivotX<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getPivotX", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getPivotX\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPivotX](https://developer.android.com/reference/android/view/View.html#setPivotX(float))
        pub fn setPivotX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setPivotX", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setPivotX\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPivotY](https://developer.android.com/reference/android/view/View.html#getPivotY())
        pub fn getPivotY<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getPivotY", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getPivotY\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPivotY](https://developer.android.com/reference/android/view/View.html#setPivotY(float))
        pub fn setPivotY<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setPivotY", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setPivotY\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPivotSet](https://developer.android.com/reference/android/view/View.html#isPivotSet())
        pub fn isPivotSet<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isPivotSet", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isPivotSet\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resetPivot](https://developer.android.com/reference/android/view/View.html#resetPivot())
        pub fn resetPivot<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "resetPivot", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "resetPivot\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlpha](https://developer.android.com/reference/android/view/View.html#getAlpha())
        pub fn getAlpha<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAlpha", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAlpha\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forceHasOverlappingRendering](https://developer.android.com/reference/android/view/View.html#forceHasOverlappingRendering(boolean))
        pub fn forceHasOverlappingRendering<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "forceHasOverlappingRendering", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "forceHasOverlappingRendering\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHasOverlappingRendering](https://developer.android.com/reference/android/view/View.html#getHasOverlappingRendering())
        pub fn getHasOverlappingRendering<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getHasOverlappingRendering", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getHasOverlappingRendering\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasOverlappingRendering](https://developer.android.com/reference/android/view/View.html#hasOverlappingRendering())
        pub fn hasOverlappingRendering<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "hasOverlappingRendering", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "hasOverlappingRendering\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlpha](https://developer.android.com/reference/android/view/View.html#setAlpha(float))
        pub fn setAlpha<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAlpha", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAlpha\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTransitionAlpha](https://developer.android.com/reference/android/view/View.html#setTransitionAlpha(float))
        pub fn setTransitionAlpha<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTransitionAlpha", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTransitionAlpha\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransitionAlpha](https://developer.android.com/reference/android/view/View.html#getTransitionAlpha())
        pub fn getTransitionAlpha<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTransitionAlpha", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTransitionAlpha\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setForceDarkAllowed](https://developer.android.com/reference/android/view/View.html#setForceDarkAllowed(boolean))
        pub fn setForceDarkAllowed<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setForceDarkAllowed", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setForceDarkAllowed\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isForceDarkAllowed](https://developer.android.com/reference/android/view/View.html#isForceDarkAllowed())
        pub fn isForceDarkAllowed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isForceDarkAllowed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isForceDarkAllowed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTop](https://developer.android.com/reference/android/view/View.html#getTop())
        pub fn getTop<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getTop", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTop\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTop](https://developer.android.com/reference/android/view/View.html#setTop(int))
        pub fn setTop<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "setTop", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTop\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBottom](https://developer.android.com/reference/android/view/View.html#getBottom())
        pub fn getBottom<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getBottom", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getBottom\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDirty](https://developer.android.com/reference/android/view/View.html#isDirty())
        pub fn isDirty<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isDirty", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isDirty\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBottom](https://developer.android.com/reference/android/view/View.html#setBottom(int))
        pub fn setBottom<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "setBottom", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setBottom\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLeft](https://developer.android.com/reference/android/view/View.html#getLeft())
        pub fn getLeft<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getLeft", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLeft\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLeft](https://developer.android.com/reference/android/view/View.html#setLeft(int))
        pub fn setLeft<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "setLeft", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setLeft\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRight](https://developer.android.com/reference/android/view/View.html#getRight())
        pub fn getRight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getRight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getRight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRight](https://developer.android.com/reference/android/view/View.html#setRight(int))
        pub fn setRight<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "setRight", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setRight\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getX](https://developer.android.com/reference/android/view/View.html#getX())
        pub fn getX<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getX", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getX\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setX](https://developer.android.com/reference/android/view/View.html#setX(float))
        pub fn setX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setX", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setX\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getY](https://developer.android.com/reference/android/view/View.html#getY())
        pub fn getY<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getY", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getY\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setY](https://developer.android.com/reference/android/view/View.html#setY(float))
        pub fn setY<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setY", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setY\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getZ](https://developer.android.com/reference/android/view/View.html#getZ())
        pub fn getZ<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getZ", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getZ\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setZ](https://developer.android.com/reference/android/view/View.html#setZ(float))
        pub fn setZ<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setZ", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setZ\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getElevation](https://developer.android.com/reference/android/view/View.html#getElevation())
        pub fn getElevation<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getElevation", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getElevation\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setElevation](https://developer.android.com/reference/android/view/View.html#setElevation(float))
        pub fn setElevation<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setElevation", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setElevation\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTranslationX](https://developer.android.com/reference/android/view/View.html#getTranslationX())
        pub fn getTranslationX<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTranslationX", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTranslationX\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTranslationX](https://developer.android.com/reference/android/view/View.html#setTranslationX(float))
        pub fn setTranslationX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTranslationX", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTranslationX\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTranslationY](https://developer.android.com/reference/android/view/View.html#getTranslationY())
        pub fn getTranslationY<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTranslationY", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTranslationY\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTranslationY](https://developer.android.com/reference/android/view/View.html#setTranslationY(float))
        pub fn setTranslationY<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTranslationY", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTranslationY\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTranslationZ](https://developer.android.com/reference/android/view/View.html#getTranslationZ())
        pub fn getTranslationZ<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTranslationZ", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTranslationZ\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTranslationZ](https://developer.android.com/reference/android/view/View.html#setTranslationZ(float))
        pub fn setTranslationZ<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTranslationZ", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTranslationZ\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAnimationMatrix](https://developer.android.com/reference/android/view/View.html#setAnimationMatrix(android.graphics.Matrix))
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn setAnimationMatrix<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Matrix>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAnimationMatrix", .descriptor == "(Landroid/graphics/Matrix;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAnimationMatrix\0", "(Landroid/graphics/Matrix;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnimationMatrix](https://developer.android.com/reference/android/view/View.html#getAnimationMatrix())
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn getAnimationMatrix<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Matrix>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAnimationMatrix", .descriptor == "()Landroid/graphics/Matrix;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAnimationMatrix\0", "()Landroid/graphics/Matrix;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStateListAnimator](https://developer.android.com/reference/android/view/View.html#getStateListAnimator())
        ///
        /// Required features: "android-animation-StateListAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-StateListAnimator")))]
        pub fn getStateListAnimator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::StateListAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getStateListAnimator", .descriptor == "()Landroid/animation/StateListAnimator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getStateListAnimator\0", "()Landroid/animation/StateListAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStateListAnimator](https://developer.android.com/reference/android/view/View.html#setStateListAnimator(android.animation.StateListAnimator))
        ///
        /// Required features: "android-animation-StateListAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-StateListAnimator")))]
        pub fn setStateListAnimator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::StateListAnimator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setStateListAnimator", .descriptor == "(Landroid/animation/StateListAnimator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setStateListAnimator\0", "(Landroid/animation/StateListAnimator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClipToOutline](https://developer.android.com/reference/android/view/View.html#getClipToOutline())
        pub fn getClipToOutline<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getClipToOutline", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getClipToOutline\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClipToOutline](https://developer.android.com/reference/android/view/View.html#setClipToOutline(boolean))
        pub fn setClipToOutline<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setClipToOutline", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setClipToOutline\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutlineProvider](https://developer.android.com/reference/android/view/View.html#setOutlineProvider(android.view.ViewOutlineProvider))
        ///
        /// Required features: "android-view-ViewOutlineProvider"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewOutlineProvider")))]
        pub fn setOutlineProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewOutlineProvider>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOutlineProvider", .descriptor == "(Landroid/view/ViewOutlineProvider;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOutlineProvider\0", "(Landroid/view/ViewOutlineProvider;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutlineProvider](https://developer.android.com/reference/android/view/View.html#getOutlineProvider())
        ///
        /// Required features: "android-view-ViewOutlineProvider"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewOutlineProvider")))]
        pub fn getOutlineProvider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewOutlineProvider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getOutlineProvider", .descriptor == "()Landroid/view/ViewOutlineProvider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getOutlineProvider\0", "()Landroid/view/ViewOutlineProvider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invalidateOutline](https://developer.android.com/reference/android/view/View.html#invalidateOutline())
        pub fn invalidateOutline<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "invalidateOutline", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "invalidateOutline\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutlineSpotShadowColor](https://developer.android.com/reference/android/view/View.html#setOutlineSpotShadowColor(int))
        pub fn setOutlineSpotShadowColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOutlineSpotShadowColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOutlineSpotShadowColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutlineSpotShadowColor](https://developer.android.com/reference/android/view/View.html#getOutlineSpotShadowColor())
        pub fn getOutlineSpotShadowColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getOutlineSpotShadowColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getOutlineSpotShadowColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutlineAmbientShadowColor](https://developer.android.com/reference/android/view/View.html#setOutlineAmbientShadowColor(int))
        pub fn setOutlineAmbientShadowColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOutlineAmbientShadowColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOutlineAmbientShadowColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutlineAmbientShadowColor](https://developer.android.com/reference/android/view/View.html#getOutlineAmbientShadowColor())
        pub fn getOutlineAmbientShadowColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getOutlineAmbientShadowColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getOutlineAmbientShadowColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHitRect](https://developer.android.com/reference/android/view/View.html#getHitRect(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getHitRect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getHitRect", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getHitRect\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFocusedRect](https://developer.android.com/reference/android/view/View.html#getFocusedRect(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getFocusedRect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getFocusedRect", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getFocusedRect\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGlobalVisibleRect](https://developer.android.com/reference/android/view/View.html#getGlobalVisibleRect(android.graphics.Rect,%20android.graphics.Point))
        ///
        /// Required features: "android-graphics-Point", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Point", feature = "android-graphics-Rect")))]
        pub fn getGlobalVisibleRect_Rect_Point<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Point>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getGlobalVisibleRect", .descriptor == "(Landroid/graphics/Rect;Landroid/graphics/Point;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getGlobalVisibleRect\0", "(Landroid/graphics/Rect;Landroid/graphics/Point;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGlobalVisibleRect](https://developer.android.com/reference/android/view/View.html#getGlobalVisibleRect(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getGlobalVisibleRect_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getGlobalVisibleRect", .descriptor == "(Landroid/graphics/Rect;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getGlobalVisibleRect\0", "(Landroid/graphics/Rect;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalVisibleRect](https://developer.android.com/reference/android/view/View.html#getLocalVisibleRect(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getLocalVisibleRect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getLocalVisibleRect", .descriptor == "(Landroid/graphics/Rect;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLocalVisibleRect\0", "(Landroid/graphics/Rect;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [offsetTopAndBottom](https://developer.android.com/reference/android/view/View.html#offsetTopAndBottom(int))
        pub fn offsetTopAndBottom<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "offsetTopAndBottom", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "offsetTopAndBottom\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [offsetLeftAndRight](https://developer.android.com/reference/android/view/View.html#offsetLeftAndRight(int))
        pub fn offsetLeftAndRight<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "offsetLeftAndRight", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "offsetLeftAndRight\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLayoutParams](https://developer.android.com/reference/android/view/View.html#getLayoutParams())
        ///
        /// Required features: "android-view-ViewGroup_LayoutParams"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewGroup_LayoutParams")))]
        pub fn getLayoutParams<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewGroup_LayoutParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getLayoutParams", .descriptor == "()Landroid/view/ViewGroup$LayoutParams;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLayoutParams\0", "()Landroid/view/ViewGroup$LayoutParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLayoutParams](https://developer.android.com/reference/android/view/View.html#setLayoutParams(android.view.ViewGroup.LayoutParams))
        ///
        /// Required features: "android-view-ViewGroup_LayoutParams"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewGroup_LayoutParams")))]
        pub fn setLayoutParams<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup_LayoutParams>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setLayoutParams", .descriptor == "(Landroid/view/ViewGroup$LayoutParams;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setLayoutParams\0", "(Landroid/view/ViewGroup$LayoutParams;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scrollTo](https://developer.android.com/reference/android/view/View.html#scrollTo(int,%20int))
        pub fn scrollTo<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "scrollTo", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "scrollTo\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scrollBy](https://developer.android.com/reference/android/view/View.html#scrollBy(int,%20int))
        pub fn scrollBy<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "scrollBy", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "scrollBy\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [awakenScrollBars](https://developer.android.com/reference/android/view/View.html#awakenScrollBars())
        // fn awakenScrollBars<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "awakenScrollBars", .descriptor == "()Z"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "awakenScrollBars\0", "()Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [awakenScrollBars](https://developer.android.com/reference/android/view/View.html#awakenScrollBars(int))
        // fn awakenScrollBars<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "awakenScrollBars", .descriptor == "(I)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "awakenScrollBars\0", "(I)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [awakenScrollBars](https://developer.android.com/reference/android/view/View.html#awakenScrollBars(int,%20boolean))
        // fn awakenScrollBars<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "awakenScrollBars", .descriptor == "(IZ)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "awakenScrollBars\0", "(IZ)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [invalidate](https://developer.android.com/reference/android/view/View.html#invalidate(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        #[deprecated] pub fn invalidate_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "invalidate", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "invalidate\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invalidate](https://developer.android.com/reference/android/view/View.html#invalidate(int,%20int,%20int,%20int))
        #[deprecated] pub fn invalidate_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "invalidate", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "invalidate\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invalidate](https://developer.android.com/reference/android/view/View.html#invalidate())
        pub fn invalidate<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "invalidate", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "invalidate\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOpaque](https://developer.android.com/reference/android/view/View.html#isOpaque())
        pub fn isOpaque<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isOpaque", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isOpaque\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHandler](https://developer.android.com/reference/android/view/View.html#getHandler())
        ///
        /// Required features: "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler")))]
        pub fn getHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Handler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getHandler", .descriptor == "()Landroid/os/Handler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getHandler\0", "()Landroid/os/Handler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [post](https://developer.android.com/reference/android/view/View.html#post(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn post<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "post", .descriptor == "(Ljava/lang/Runnable;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "post\0", "(Ljava/lang/Runnable;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postDelayed](https://developer.android.com/reference/android/view/View.html#postDelayed(java.lang.Runnable,%20long))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn postDelayed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "postDelayed", .descriptor == "(Ljava/lang/Runnable;J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "postDelayed\0", "(Ljava/lang/Runnable;J)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postOnAnimation](https://developer.android.com/reference/android/view/View.html#postOnAnimation(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn postOnAnimation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "postOnAnimation", .descriptor == "(Ljava/lang/Runnable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "postOnAnimation\0", "(Ljava/lang/Runnable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postOnAnimationDelayed](https://developer.android.com/reference/android/view/View.html#postOnAnimationDelayed(java.lang.Runnable,%20long))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn postOnAnimationDelayed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "postOnAnimationDelayed", .descriptor == "(Ljava/lang/Runnable;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "postOnAnimationDelayed\0", "(Ljava/lang/Runnable;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeCallbacks](https://developer.android.com/reference/android/view/View.html#removeCallbacks(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn removeCallbacks<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "removeCallbacks", .descriptor == "(Ljava/lang/Runnable;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "removeCallbacks\0", "(Ljava/lang/Runnable;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postInvalidate](https://developer.android.com/reference/android/view/View.html#postInvalidate())
        pub fn postInvalidate<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "postInvalidate", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "postInvalidate\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postInvalidate](https://developer.android.com/reference/android/view/View.html#postInvalidate(int,%20int,%20int,%20int))
        pub fn postInvalidate_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "postInvalidate", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "postInvalidate\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postInvalidateDelayed](https://developer.android.com/reference/android/view/View.html#postInvalidateDelayed(long))
        pub fn postInvalidateDelayed_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "postInvalidateDelayed", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "postInvalidateDelayed\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postInvalidateDelayed](https://developer.android.com/reference/android/view/View.html#postInvalidateDelayed(long,%20int,%20int,%20int,%20int))
        pub fn postInvalidateDelayed_long_int_int_int_int<'env>(&'env self, arg0: i64, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "postInvalidateDelayed", .descriptor == "(JIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "postInvalidateDelayed\0", "(JIIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postInvalidateOnAnimation](https://developer.android.com/reference/android/view/View.html#postInvalidateOnAnimation())
        pub fn postInvalidateOnAnimation<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "postInvalidateOnAnimation", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "postInvalidateOnAnimation\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postInvalidateOnAnimation](https://developer.android.com/reference/android/view/View.html#postInvalidateOnAnimation(int,%20int,%20int,%20int))
        pub fn postInvalidateOnAnimation_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "postInvalidateOnAnimation", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "postInvalidateOnAnimation\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [computeScroll](https://developer.android.com/reference/android/view/View.html#computeScroll())
        pub fn computeScroll<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "computeScroll", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "computeScroll\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHorizontalFadingEdgeEnabled](https://developer.android.com/reference/android/view/View.html#isHorizontalFadingEdgeEnabled())
        pub fn isHorizontalFadingEdgeEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isHorizontalFadingEdgeEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isHorizontalFadingEdgeEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHorizontalFadingEdgeEnabled](https://developer.android.com/reference/android/view/View.html#setHorizontalFadingEdgeEnabled(boolean))
        pub fn setHorizontalFadingEdgeEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setHorizontalFadingEdgeEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setHorizontalFadingEdgeEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVerticalFadingEdgeEnabled](https://developer.android.com/reference/android/view/View.html#isVerticalFadingEdgeEnabled())
        pub fn isVerticalFadingEdgeEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isVerticalFadingEdgeEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isVerticalFadingEdgeEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVerticalFadingEdgeEnabled](https://developer.android.com/reference/android/view/View.html#setVerticalFadingEdgeEnabled(boolean))
        pub fn setVerticalFadingEdgeEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setVerticalFadingEdgeEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setVerticalFadingEdgeEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getTopFadingEdgeStrength](https://developer.android.com/reference/android/view/View.html#getTopFadingEdgeStrength())
        // fn getTopFadingEdgeStrength<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getTopFadingEdgeStrength", .descriptor == "()F"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTopFadingEdgeStrength\0", "()F\0");
        //         __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getBottomFadingEdgeStrength](https://developer.android.com/reference/android/view/View.html#getBottomFadingEdgeStrength())
        // fn getBottomFadingEdgeStrength<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getBottomFadingEdgeStrength", .descriptor == "()F"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getBottomFadingEdgeStrength\0", "()F\0");
        //         __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getLeftFadingEdgeStrength](https://developer.android.com/reference/android/view/View.html#getLeftFadingEdgeStrength())
        // fn getLeftFadingEdgeStrength<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getLeftFadingEdgeStrength", .descriptor == "()F"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLeftFadingEdgeStrength\0", "()F\0");
        //         __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getRightFadingEdgeStrength](https://developer.android.com/reference/android/view/View.html#getRightFadingEdgeStrength())
        // fn getRightFadingEdgeStrength<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getRightFadingEdgeStrength", .descriptor == "()F"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getRightFadingEdgeStrength\0", "()F\0");
        //         __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isHorizontalScrollBarEnabled](https://developer.android.com/reference/android/view/View.html#isHorizontalScrollBarEnabled())
        pub fn isHorizontalScrollBarEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isHorizontalScrollBarEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isHorizontalScrollBarEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHorizontalScrollBarEnabled](https://developer.android.com/reference/android/view/View.html#setHorizontalScrollBarEnabled(boolean))
        pub fn setHorizontalScrollBarEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setHorizontalScrollBarEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setHorizontalScrollBarEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVerticalScrollBarEnabled](https://developer.android.com/reference/android/view/View.html#isVerticalScrollBarEnabled())
        pub fn isVerticalScrollBarEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isVerticalScrollBarEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isVerticalScrollBarEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVerticalScrollBarEnabled](https://developer.android.com/reference/android/view/View.html#setVerticalScrollBarEnabled(boolean))
        pub fn setVerticalScrollBarEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setVerticalScrollBarEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setVerticalScrollBarEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollbarFadingEnabled](https://developer.android.com/reference/android/view/View.html#setScrollbarFadingEnabled(boolean))
        pub fn setScrollbarFadingEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollbarFadingEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollbarFadingEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScrollbarFadingEnabled](https://developer.android.com/reference/android/view/View.html#isScrollbarFadingEnabled())
        pub fn isScrollbarFadingEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isScrollbarFadingEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isScrollbarFadingEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScrollBarDefaultDelayBeforeFade](https://developer.android.com/reference/android/view/View.html#getScrollBarDefaultDelayBeforeFade())
        pub fn getScrollBarDefaultDelayBeforeFade<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getScrollBarDefaultDelayBeforeFade", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getScrollBarDefaultDelayBeforeFade\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollBarDefaultDelayBeforeFade](https://developer.android.com/reference/android/view/View.html#setScrollBarDefaultDelayBeforeFade(int))
        pub fn setScrollBarDefaultDelayBeforeFade<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollBarDefaultDelayBeforeFade", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollBarDefaultDelayBeforeFade\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScrollBarFadeDuration](https://developer.android.com/reference/android/view/View.html#getScrollBarFadeDuration())
        pub fn getScrollBarFadeDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getScrollBarFadeDuration", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getScrollBarFadeDuration\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollBarFadeDuration](https://developer.android.com/reference/android/view/View.html#setScrollBarFadeDuration(int))
        pub fn setScrollBarFadeDuration<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollBarFadeDuration", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollBarFadeDuration\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScrollBarSize](https://developer.android.com/reference/android/view/View.html#getScrollBarSize())
        pub fn getScrollBarSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getScrollBarSize", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getScrollBarSize\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollBarSize](https://developer.android.com/reference/android/view/View.html#setScrollBarSize(int))
        pub fn setScrollBarSize<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollBarSize", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollBarSize\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollBarStyle](https://developer.android.com/reference/android/view/View.html#setScrollBarStyle(int))
        pub fn setScrollBarStyle<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setScrollBarStyle", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setScrollBarStyle\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScrollBarStyle](https://developer.android.com/reference/android/view/View.html#getScrollBarStyle())
        pub fn getScrollBarStyle<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getScrollBarStyle", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getScrollBarStyle\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [computeHorizontalScrollRange](https://developer.android.com/reference/android/view/View.html#computeHorizontalScrollRange())
        // fn computeHorizontalScrollRange<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "computeHorizontalScrollRange", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "computeHorizontalScrollRange\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [computeHorizontalScrollOffset](https://developer.android.com/reference/android/view/View.html#computeHorizontalScrollOffset())
        // fn computeHorizontalScrollOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "computeHorizontalScrollOffset", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "computeHorizontalScrollOffset\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [computeHorizontalScrollExtent](https://developer.android.com/reference/android/view/View.html#computeHorizontalScrollExtent())
        // fn computeHorizontalScrollExtent<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "computeHorizontalScrollExtent", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "computeHorizontalScrollExtent\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [computeVerticalScrollRange](https://developer.android.com/reference/android/view/View.html#computeVerticalScrollRange())
        // fn computeVerticalScrollRange<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "computeVerticalScrollRange", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "computeVerticalScrollRange\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [computeVerticalScrollOffset](https://developer.android.com/reference/android/view/View.html#computeVerticalScrollOffset())
        // fn computeVerticalScrollOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "computeVerticalScrollOffset", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "computeVerticalScrollOffset\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [computeVerticalScrollExtent](https://developer.android.com/reference/android/view/View.html#computeVerticalScrollExtent())
        // fn computeVerticalScrollExtent<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "computeVerticalScrollExtent", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "computeVerticalScrollExtent\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [canScrollHorizontally](https://developer.android.com/reference/android/view/View.html#canScrollHorizontally(int))
        pub fn canScrollHorizontally<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "canScrollHorizontally", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "canScrollHorizontally\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canScrollVertically](https://developer.android.com/reference/android/view/View.html#canScrollVertically(int))
        pub fn canScrollVertically<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "canScrollVertically", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "canScrollVertically\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onDrawScrollBars](https://developer.android.com/reference/android/view/View.html#onDrawScrollBars(android.graphics.Canvas))
        // ///
        // /// Required features: "android-graphics-Canvas"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        // fn onDrawScrollBars<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED | FINAL, .name == "onDrawScrollBars", .descriptor == "(Landroid/graphics/Canvas;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onDrawScrollBars\0", "(Landroid/graphics/Canvas;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onDraw](https://developer.android.com/reference/android/view/View.html#onDraw(android.graphics.Canvas))
        // ///
        // /// Required features: "android-graphics-Canvas"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        // fn onDraw<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onDraw", .descriptor == "(Landroid/graphics/Canvas;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onDraw\0", "(Landroid/graphics/Canvas;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onAttachedToWindow](https://developer.android.com/reference/android/view/View.html#onAttachedToWindow())
        // fn onAttachedToWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onAttachedToWindow", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onAttachedToWindow\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [onScreenStateChanged](https://developer.android.com/reference/android/view/View.html#onScreenStateChanged(int))
        pub fn onScreenStateChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onScreenStateChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onScreenStateChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRtlPropertiesChanged](https://developer.android.com/reference/android/view/View.html#onRtlPropertiesChanged(int))
        pub fn onRtlPropertiesChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onRtlPropertiesChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onRtlPropertiesChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canResolveLayoutDirection](https://developer.android.com/reference/android/view/View.html#canResolveLayoutDirection())
        pub fn canResolveLayoutDirection<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "canResolveLayoutDirection", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "canResolveLayoutDirection\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLayoutDirectionResolved](https://developer.android.com/reference/android/view/View.html#isLayoutDirectionResolved())
        pub fn isLayoutDirectionResolved<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isLayoutDirectionResolved", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isLayoutDirectionResolved\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onDetachedFromWindow](https://developer.android.com/reference/android/view/View.html#onDetachedFromWindow())
        // fn onDetachedFromWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onDetachedFromWindow", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onDetachedFromWindow\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getWindowAttachCount](https://developer.android.com/reference/android/view/View.html#getWindowAttachCount())
        // fn getWindowAttachCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getWindowAttachCount", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getWindowAttachCount\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getWindowToken](https://developer.android.com/reference/android/view/View.html#getWindowToken())
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn getWindowToken<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getWindowToken", .descriptor == "()Landroid/os/IBinder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getWindowToken\0", "()Landroid/os/IBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindowId](https://developer.android.com/reference/android/view/View.html#getWindowId())
        ///
        /// Required features: "android-view-WindowId"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowId")))]
        pub fn getWindowId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getWindowId", .descriptor == "()Landroid/view/WindowId;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getWindowId\0", "()Landroid/view/WindowId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationWindowToken](https://developer.android.com/reference/android/view/View.html#getApplicationWindowToken())
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn getApplicationWindowToken<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getApplicationWindowToken", .descriptor == "()Landroid/os/IBinder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getApplicationWindowToken\0", "()Landroid/os/IBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplay](https://developer.android.com/reference/android/view/View.html#getDisplay())
        ///
        /// Required features: "android-view-Display"
        #[cfg(any(feature = "all", all(feature = "android-view-Display")))]
        pub fn getDisplay<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Display>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getDisplay", .descriptor == "()Landroid/view/Display;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getDisplay\0", "()Landroid/view/Display;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelPendingInputEvents](https://developer.android.com/reference/android/view/View.html#cancelPendingInputEvents())
        pub fn cancelPendingInputEvents<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "cancelPendingInputEvents", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "cancelPendingInputEvents\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCancelPendingInputEvents](https://developer.android.com/reference/android/view/View.html#onCancelPendingInputEvents())
        pub fn onCancelPendingInputEvents<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onCancelPendingInputEvents", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onCancelPendingInputEvents\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [saveHierarchyState](https://developer.android.com/reference/android/view/View.html#saveHierarchyState(android.util.SparseArray))
        ///
        /// Required features: "android-util-SparseArray"
        #[cfg(any(feature = "all", all(feature = "android-util-SparseArray")))]
        pub fn saveHierarchyState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::SparseArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "saveHierarchyState", .descriptor == "(Landroid/util/SparseArray;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "saveHierarchyState\0", "(Landroid/util/SparseArray;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dispatchSaveInstanceState](https://developer.android.com/reference/android/view/View.html#dispatchSaveInstanceState(android.util.SparseArray))
        // ///
        // /// Required features: "android-util-SparseArray"
        // #[cfg(any(feature = "all", all(feature = "android-util-SparseArray")))]
        // fn dispatchSaveInstanceState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::SparseArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchSaveInstanceState", .descriptor == "(Landroid/util/SparseArray;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchSaveInstanceState\0", "(Landroid/util/SparseArray;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onSaveInstanceState](https://developer.android.com/reference/android/view/View.html#onSaveInstanceState())
        // ///
        // /// Required features: "android-os-Parcelable"
        // #[cfg(any(feature = "all", all(feature = "android-os-Parcelable")))]
        // fn onSaveInstanceState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onSaveInstanceState", .descriptor == "()Landroid/os/Parcelable;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onSaveInstanceState\0", "()Landroid/os/Parcelable;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [restoreHierarchyState](https://developer.android.com/reference/android/view/View.html#restoreHierarchyState(android.util.SparseArray))
        ///
        /// Required features: "android-util-SparseArray"
        #[cfg(any(feature = "all", all(feature = "android-util-SparseArray")))]
        pub fn restoreHierarchyState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::SparseArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "restoreHierarchyState", .descriptor == "(Landroid/util/SparseArray;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "restoreHierarchyState\0", "(Landroid/util/SparseArray;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dispatchRestoreInstanceState](https://developer.android.com/reference/android/view/View.html#dispatchRestoreInstanceState(android.util.SparseArray))
        // ///
        // /// Required features: "android-util-SparseArray"
        // #[cfg(any(feature = "all", all(feature = "android-util-SparseArray")))]
        // fn dispatchRestoreInstanceState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::SparseArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchRestoreInstanceState", .descriptor == "(Landroid/util/SparseArray;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchRestoreInstanceState\0", "(Landroid/util/SparseArray;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onRestoreInstanceState](https://developer.android.com/reference/android/view/View.html#onRestoreInstanceState(android.os.Parcelable))
        // ///
        // /// Required features: "android-os-Parcelable"
        // #[cfg(any(feature = "all", all(feature = "android-os-Parcelable")))]
        // fn onRestoreInstanceState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcelable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onRestoreInstanceState", .descriptor == "(Landroid/os/Parcelable;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onRestoreInstanceState\0", "(Landroid/os/Parcelable;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDrawingTime](https://developer.android.com/reference/android/view/View.html#getDrawingTime())
        pub fn getDrawingTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getDrawingTime", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getDrawingTime\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDuplicateParentStateEnabled](https://developer.android.com/reference/android/view/View.html#setDuplicateParentStateEnabled(boolean))
        pub fn setDuplicateParentStateEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setDuplicateParentStateEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setDuplicateParentStateEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDuplicateParentStateEnabled](https://developer.android.com/reference/android/view/View.html#isDuplicateParentStateEnabled())
        pub fn isDuplicateParentStateEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isDuplicateParentStateEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isDuplicateParentStateEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLayerType](https://developer.android.com/reference/android/view/View.html#setLayerType(int,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn setLayerType<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setLayerType", .descriptor == "(ILandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setLayerType\0", "(ILandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLayerPaint](https://developer.android.com/reference/android/view/View.html#setLayerPaint(android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn setLayerPaint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setLayerPaint", .descriptor == "(Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setLayerPaint\0", "(Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLayerType](https://developer.android.com/reference/android/view/View.html#getLayerType())
        pub fn getLayerType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getLayerType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLayerType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildLayer](https://developer.android.com/reference/android/view/View.html#buildLayer())
        pub fn buildLayer<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "buildLayer", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "buildLayer\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDrawingCacheEnabled](https://developer.android.com/reference/android/view/View.html#setDrawingCacheEnabled(boolean))
        #[deprecated] pub fn setDrawingCacheEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setDrawingCacheEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setDrawingCacheEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDrawingCacheEnabled](https://developer.android.com/reference/android/view/View.html#isDrawingCacheEnabled())
        #[deprecated] pub fn isDrawingCacheEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isDrawingCacheEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isDrawingCacheEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawingCache](https://developer.android.com/reference/android/view/View.html#getDrawingCache())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        #[deprecated] pub fn getDrawingCache<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getDrawingCache", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getDrawingCache\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawingCache](https://developer.android.com/reference/android/view/View.html#getDrawingCache(boolean))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        #[deprecated] pub fn getDrawingCache_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getDrawingCache", .descriptor == "(Z)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getDrawingCache\0", "(Z)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [destroyDrawingCache](https://developer.android.com/reference/android/view/View.html#destroyDrawingCache())
        #[deprecated] pub fn destroyDrawingCache<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "destroyDrawingCache", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "destroyDrawingCache\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDrawingCacheBackgroundColor](https://developer.android.com/reference/android/view/View.html#setDrawingCacheBackgroundColor(int))
        #[deprecated] pub fn setDrawingCacheBackgroundColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setDrawingCacheBackgroundColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setDrawingCacheBackgroundColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawingCacheBackgroundColor](https://developer.android.com/reference/android/view/View.html#getDrawingCacheBackgroundColor())
        #[deprecated] pub fn getDrawingCacheBackgroundColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getDrawingCacheBackgroundColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getDrawingCacheBackgroundColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildDrawingCache](https://developer.android.com/reference/android/view/View.html#buildDrawingCache())
        #[deprecated] pub fn buildDrawingCache<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "buildDrawingCache", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "buildDrawingCache\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildDrawingCache](https://developer.android.com/reference/android/view/View.html#buildDrawingCache(boolean))
        #[deprecated] pub fn buildDrawingCache_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "buildDrawingCache", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "buildDrawingCache\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInEditMode](https://developer.android.com/reference/android/view/View.html#isInEditMode())
        pub fn isInEditMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isInEditMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isInEditMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [isPaddingOffsetRequired](https://developer.android.com/reference/android/view/View.html#isPaddingOffsetRequired())
        // fn isPaddingOffsetRequired<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "isPaddingOffsetRequired", .descriptor == "()Z"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isPaddingOffsetRequired\0", "()Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getLeftPaddingOffset](https://developer.android.com/reference/android/view/View.html#getLeftPaddingOffset())
        // fn getLeftPaddingOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getLeftPaddingOffset", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLeftPaddingOffset\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getRightPaddingOffset](https://developer.android.com/reference/android/view/View.html#getRightPaddingOffset())
        // fn getRightPaddingOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getRightPaddingOffset", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getRightPaddingOffset\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getTopPaddingOffset](https://developer.android.com/reference/android/view/View.html#getTopPaddingOffset())
        // fn getTopPaddingOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getTopPaddingOffset", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTopPaddingOffset\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getBottomPaddingOffset](https://developer.android.com/reference/android/view/View.html#getBottomPaddingOffset())
        // fn getBottomPaddingOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getBottomPaddingOffset", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getBottomPaddingOffset\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isHardwareAccelerated](https://developer.android.com/reference/android/view/View.html#isHardwareAccelerated())
        pub fn isHardwareAccelerated<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isHardwareAccelerated", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isHardwareAccelerated\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClipBounds](https://developer.android.com/reference/android/view/View.html#setClipBounds(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn setClipBounds<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setClipBounds", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setClipBounds\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClipBounds](https://developer.android.com/reference/android/view/View.html#getClipBounds())
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getClipBounds<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Rect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getClipBounds", .descriptor == "()Landroid/graphics/Rect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getClipBounds\0", "()Landroid/graphics/Rect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClipBounds](https://developer.android.com/reference/android/view/View.html#getClipBounds(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getClipBounds_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getClipBounds", .descriptor == "(Landroid/graphics/Rect;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getClipBounds\0", "(Landroid/graphics/Rect;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [draw](https://developer.android.com/reference/android/view/View.html#draw(android.graphics.Canvas))
        ///
        /// Required features: "android-graphics-Canvas"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        pub fn draw<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "draw", .descriptor == "(Landroid/graphics/Canvas;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "draw\0", "(Landroid/graphics/Canvas;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOverlay](https://developer.android.com/reference/android/view/View.html#getOverlay())
        ///
        /// Required features: "android-view-ViewOverlay"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewOverlay")))]
        pub fn getOverlay<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewOverlay>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getOverlay", .descriptor == "()Landroid/view/ViewOverlay;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getOverlay\0", "()Landroid/view/ViewOverlay;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSolidColor](https://developer.android.com/reference/android/view/View.html#getSolidColor())
        pub fn getSolidColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getSolidColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getSolidColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLayoutRequested](https://developer.android.com/reference/android/view/View.html#isLayoutRequested())
        pub fn isLayoutRequested<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isLayoutRequested", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isLayoutRequested\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [layout](https://developer.android.com/reference/android/view/View.html#layout(int,%20int,%20int,%20int))
        pub fn layout<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "layout", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "layout\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onLayout](https://developer.android.com/reference/android/view/View.html#onLayout(boolean,%20int,%20int,%20int,%20int))
        // fn onLayout<'env>(&'env self, arg0: bool, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onLayout", .descriptor == "(ZIIII)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onLayout\0", "(ZIIII)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setLeftTopRightBottom](https://developer.android.com/reference/android/view/View.html#setLeftTopRightBottom(int,%20int,%20int,%20int))
        pub fn setLeftTopRightBottom<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "setLeftTopRightBottom", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setLeftTopRightBottom\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onFinishInflate](https://developer.android.com/reference/android/view/View.html#onFinishInflate())
        // fn onFinishInflate<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onFinishInflate", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onFinishInflate\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getResources](https://developer.android.com/reference/android/view/View.html#getResources())
        ///
        /// Required features: "android-content-res-Resources"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources")))]
        pub fn getResources<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getResources", .descriptor == "()Landroid/content/res/Resources;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getResources\0", "()Landroid/content/res/Resources;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invalidateDrawable](https://developer.android.com/reference/android/view/View.html#invalidateDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn invalidateDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "invalidateDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "invalidateDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scheduleDrawable](https://developer.android.com/reference/android/view/View.html#scheduleDrawable(android.graphics.drawable.Drawable,%20java.lang.Runnable,%20long))
        ///
        /// Required features: "android-graphics-drawable-Drawable", "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable", feature = "java-lang-Runnable")))]
        pub fn scheduleDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "scheduleDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "scheduleDrawable\0", "(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unscheduleDrawable](https://developer.android.com/reference/android/view/View.html#unscheduleDrawable(android.graphics.drawable.Drawable,%20java.lang.Runnable))
        ///
        /// Required features: "android-graphics-drawable-Drawable", "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable", feature = "java-lang-Runnable")))]
        pub fn unscheduleDrawable_Drawable_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "unscheduleDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "unscheduleDrawable\0", "(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unscheduleDrawable](https://developer.android.com/reference/android/view/View.html#unscheduleDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn unscheduleDrawable_Drawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "unscheduleDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "unscheduleDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [verifyDrawable](https://developer.android.com/reference/android/view/View.html#verifyDrawable(android.graphics.drawable.Drawable))
        // ///
        // /// Required features: "android-graphics-drawable-Drawable"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        // fn verifyDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "verifyDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "verifyDrawable\0", "(Landroid/graphics/drawable/Drawable;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [drawableStateChanged](https://developer.android.com/reference/android/view/View.html#drawableStateChanged())
        // fn drawableStateChanged<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "drawableStateChanged", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "drawableStateChanged\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [drawableHotspotChanged](https://developer.android.com/reference/android/view/View.html#drawableHotspotChanged(float,%20float))
        pub fn drawableHotspotChanged<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "drawableHotspotChanged", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "drawableHotspotChanged\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchDrawableHotspotChanged](https://developer.android.com/reference/android/view/View.html#dispatchDrawableHotspotChanged(float,%20float))
        pub fn dispatchDrawableHotspotChanged<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchDrawableHotspotChanged", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchDrawableHotspotChanged\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [refreshDrawableState](https://developer.android.com/reference/android/view/View.html#refreshDrawableState())
        pub fn refreshDrawableState<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "refreshDrawableState", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "refreshDrawableState\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawableState](https://developer.android.com/reference/android/view/View.html#getDrawableState())
        pub fn getDrawableState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "getDrawableState", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getDrawableState\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onCreateDrawableState](https://developer.android.com/reference/android/view/View.html#onCreateDrawableState(int))
        // fn onCreateDrawableState<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onCreateDrawableState", .descriptor == "(I)[I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onCreateDrawableState\0", "(I)[I\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [mergeDrawableStates](https://developer.android.com/reference/android/view/View.html#mergeDrawableStates(int%5B%5D,%20int%5B%5D))
        // fn mergeDrawableStates<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED | STATIC, .name == "mergeDrawableStates", .descriptor == "([I[I)[I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/View\0", "mergeDrawableStates\0", "([I[I)[I\0");
        //         __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [jumpDrawablesToCurrentState](https://developer.android.com/reference/android/view/View.html#jumpDrawablesToCurrentState())
        pub fn jumpDrawablesToCurrentState<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "jumpDrawablesToCurrentState", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "jumpDrawablesToCurrentState\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackgroundColor](https://developer.android.com/reference/android/view/View.html#setBackgroundColor(int))
        pub fn setBackgroundColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setBackgroundColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setBackgroundColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackgroundResource](https://developer.android.com/reference/android/view/View.html#setBackgroundResource(int))
        pub fn setBackgroundResource<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setBackgroundResource", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setBackgroundResource\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackground](https://developer.android.com/reference/android/view/View.html#setBackground(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setBackground<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setBackground", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setBackground\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackgroundDrawable](https://developer.android.com/reference/android/view/View.html#setBackgroundDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        #[deprecated] pub fn setBackgroundDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setBackgroundDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setBackgroundDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBackground](https://developer.android.com/reference/android/view/View.html#getBackground())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getBackground<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getBackground", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getBackground\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackgroundTintList](https://developer.android.com/reference/android/view/View.html#setBackgroundTintList(android.content.res.ColorStateList))
        ///
        /// Required features: "android-content-res-ColorStateList"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList")))]
        pub fn setBackgroundTintList<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::ColorStateList>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setBackgroundTintList", .descriptor == "(Landroid/content/res/ColorStateList;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setBackgroundTintList\0", "(Landroid/content/res/ColorStateList;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBackgroundTintList](https://developer.android.com/reference/android/view/View.html#getBackgroundTintList())
        ///
        /// Required features: "android-content-res-ColorStateList"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList")))]
        pub fn getBackgroundTintList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::ColorStateList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getBackgroundTintList", .descriptor == "()Landroid/content/res/ColorStateList;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getBackgroundTintList\0", "()Landroid/content/res/ColorStateList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackgroundTintMode](https://developer.android.com/reference/android/view/View.html#setBackgroundTintMode(android.graphics.PorterDuff.Mode))
        ///
        /// Required features: "android-graphics-PorterDuff_Mode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PorterDuff_Mode")))]
        pub fn setBackgroundTintMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::PorterDuff_Mode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setBackgroundTintMode", .descriptor == "(Landroid/graphics/PorterDuff$Mode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setBackgroundTintMode\0", "(Landroid/graphics/PorterDuff$Mode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackgroundTintBlendMode](https://developer.android.com/reference/android/view/View.html#setBackgroundTintBlendMode(android.graphics.BlendMode))
        ///
        /// Required features: "android-graphics-BlendMode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode")))]
        pub fn setBackgroundTintBlendMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::BlendMode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setBackgroundTintBlendMode", .descriptor == "(Landroid/graphics/BlendMode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setBackgroundTintBlendMode\0", "(Landroid/graphics/BlendMode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBackgroundTintMode](https://developer.android.com/reference/android/view/View.html#getBackgroundTintMode())
        ///
        /// Required features: "android-graphics-PorterDuff_Mode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PorterDuff_Mode")))]
        pub fn getBackgroundTintMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::PorterDuff_Mode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getBackgroundTintMode", .descriptor == "()Landroid/graphics/PorterDuff$Mode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getBackgroundTintMode\0", "()Landroid/graphics/PorterDuff$Mode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBackgroundTintBlendMode](https://developer.android.com/reference/android/view/View.html#getBackgroundTintBlendMode())
        ///
        /// Required features: "android-graphics-BlendMode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode")))]
        pub fn getBackgroundTintBlendMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::BlendMode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getBackgroundTintBlendMode", .descriptor == "()Landroid/graphics/BlendMode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getBackgroundTintBlendMode\0", "()Landroid/graphics/BlendMode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getForeground](https://developer.android.com/reference/android/view/View.html#getForeground())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getForeground<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getForeground", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getForeground\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setForeground](https://developer.android.com/reference/android/view/View.html#setForeground(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setForeground<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setForeground", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setForeground\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getForegroundGravity](https://developer.android.com/reference/android/view/View.html#getForegroundGravity())
        pub fn getForegroundGravity<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getForegroundGravity", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getForegroundGravity\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setForegroundGravity](https://developer.android.com/reference/android/view/View.html#setForegroundGravity(int))
        pub fn setForegroundGravity<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setForegroundGravity", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setForegroundGravity\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setForegroundTintList](https://developer.android.com/reference/android/view/View.html#setForegroundTintList(android.content.res.ColorStateList))
        ///
        /// Required features: "android-content-res-ColorStateList"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList")))]
        pub fn setForegroundTintList<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::ColorStateList>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setForegroundTintList", .descriptor == "(Landroid/content/res/ColorStateList;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setForegroundTintList\0", "(Landroid/content/res/ColorStateList;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getForegroundTintList](https://developer.android.com/reference/android/view/View.html#getForegroundTintList())
        ///
        /// Required features: "android-content-res-ColorStateList"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList")))]
        pub fn getForegroundTintList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::ColorStateList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getForegroundTintList", .descriptor == "()Landroid/content/res/ColorStateList;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getForegroundTintList\0", "()Landroid/content/res/ColorStateList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setForegroundTintMode](https://developer.android.com/reference/android/view/View.html#setForegroundTintMode(android.graphics.PorterDuff.Mode))
        ///
        /// Required features: "android-graphics-PorterDuff_Mode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PorterDuff_Mode")))]
        pub fn setForegroundTintMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::PorterDuff_Mode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setForegroundTintMode", .descriptor == "(Landroid/graphics/PorterDuff$Mode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setForegroundTintMode\0", "(Landroid/graphics/PorterDuff$Mode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setForegroundTintBlendMode](https://developer.android.com/reference/android/view/View.html#setForegroundTintBlendMode(android.graphics.BlendMode))
        ///
        /// Required features: "android-graphics-BlendMode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode")))]
        pub fn setForegroundTintBlendMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::BlendMode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setForegroundTintBlendMode", .descriptor == "(Landroid/graphics/BlendMode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setForegroundTintBlendMode\0", "(Landroid/graphics/BlendMode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getForegroundTintMode](https://developer.android.com/reference/android/view/View.html#getForegroundTintMode())
        ///
        /// Required features: "android-graphics-PorterDuff_Mode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PorterDuff_Mode")))]
        pub fn getForegroundTintMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::PorterDuff_Mode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getForegroundTintMode", .descriptor == "()Landroid/graphics/PorterDuff$Mode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getForegroundTintMode\0", "()Landroid/graphics/PorterDuff$Mode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getForegroundTintBlendMode](https://developer.android.com/reference/android/view/View.html#getForegroundTintBlendMode())
        ///
        /// Required features: "android-graphics-BlendMode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode")))]
        pub fn getForegroundTintBlendMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::BlendMode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getForegroundTintBlendMode", .descriptor == "()Landroid/graphics/BlendMode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getForegroundTintBlendMode\0", "()Landroid/graphics/BlendMode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDrawForeground](https://developer.android.com/reference/android/view/View.html#onDrawForeground(android.graphics.Canvas))
        ///
        /// Required features: "android-graphics-Canvas"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        pub fn onDrawForeground<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onDrawForeground", .descriptor == "(Landroid/graphics/Canvas;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onDrawForeground\0", "(Landroid/graphics/Canvas;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPadding](https://developer.android.com/reference/android/view/View.html#setPadding(int,%20int,%20int,%20int))
        pub fn setPadding<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setPadding", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setPadding\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPaddingRelative](https://developer.android.com/reference/android/view/View.html#setPaddingRelative(int,%20int,%20int,%20int))
        pub fn setPaddingRelative<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setPaddingRelative", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setPaddingRelative\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSourceLayoutResId](https://developer.android.com/reference/android/view/View.html#getSourceLayoutResId())
        pub fn getSourceLayoutResId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getSourceLayoutResId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getSourceLayoutResId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPaddingTop](https://developer.android.com/reference/android/view/View.html#getPaddingTop())
        pub fn getPaddingTop<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getPaddingTop", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getPaddingTop\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPaddingBottom](https://developer.android.com/reference/android/view/View.html#getPaddingBottom())
        pub fn getPaddingBottom<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getPaddingBottom", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getPaddingBottom\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPaddingLeft](https://developer.android.com/reference/android/view/View.html#getPaddingLeft())
        pub fn getPaddingLeft<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getPaddingLeft", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getPaddingLeft\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPaddingStart](https://developer.android.com/reference/android/view/View.html#getPaddingStart())
        pub fn getPaddingStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getPaddingStart", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getPaddingStart\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPaddingRight](https://developer.android.com/reference/android/view/View.html#getPaddingRight())
        pub fn getPaddingRight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getPaddingRight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getPaddingRight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPaddingEnd](https://developer.android.com/reference/android/view/View.html#getPaddingEnd())
        pub fn getPaddingEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getPaddingEnd", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getPaddingEnd\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPaddingRelative](https://developer.android.com/reference/android/view/View.html#isPaddingRelative())
        pub fn isPaddingRelative<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isPaddingRelative", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isPaddingRelative\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSelected](https://developer.android.com/reference/android/view/View.html#setSelected(boolean))
        pub fn setSelected<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setSelected", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setSelected\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dispatchSetSelected](https://developer.android.com/reference/android/view/View.html#dispatchSetSelected(boolean))
        // fn dispatchSetSelected<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchSetSelected", .descriptor == "(Z)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchSetSelected\0", "(Z)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isSelected](https://developer.android.com/reference/android/view/View.html#isSelected())
        pub fn isSelected<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isSelected", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isSelected\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setActivated](https://developer.android.com/reference/android/view/View.html#setActivated(boolean))
        pub fn setActivated<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setActivated", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setActivated\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dispatchSetActivated](https://developer.android.com/reference/android/view/View.html#dispatchSetActivated(boolean))
        // fn dispatchSetActivated<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "dispatchSetActivated", .descriptor == "(Z)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchSetActivated\0", "(Z)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isActivated](https://developer.android.com/reference/android/view/View.html#isActivated())
        pub fn isActivated<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isActivated", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isActivated\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getViewTreeObserver](https://developer.android.com/reference/android/view/View.html#getViewTreeObserver())
        ///
        /// Required features: "android-view-ViewTreeObserver"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver")))]
        pub fn getViewTreeObserver<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewTreeObserver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getViewTreeObserver", .descriptor == "()Landroid/view/ViewTreeObserver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getViewTreeObserver\0", "()Landroid/view/ViewTreeObserver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRootView](https://developer.android.com/reference/android/view/View.html#getRootView())
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn getRootView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getRootView", .descriptor == "()Landroid/view/View;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getRootView\0", "()Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transformMatrixToGlobal](https://developer.android.com/reference/android/view/View.html#transformMatrixToGlobal(android.graphics.Matrix))
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn transformMatrixToGlobal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Matrix>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "transformMatrixToGlobal", .descriptor == "(Landroid/graphics/Matrix;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "transformMatrixToGlobal\0", "(Landroid/graphics/Matrix;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transformMatrixToLocal](https://developer.android.com/reference/android/view/View.html#transformMatrixToLocal(android.graphics.Matrix))
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn transformMatrixToLocal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Matrix>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "transformMatrixToLocal", .descriptor == "(Landroid/graphics/Matrix;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "transformMatrixToLocal\0", "(Landroid/graphics/Matrix;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocationOnScreen](https://developer.android.com/reference/android/view/View.html#getLocationOnScreen(int%5B%5D))
        pub fn getLocationOnScreen<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getLocationOnScreen", .descriptor == "([I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLocationOnScreen\0", "([I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocationInWindow](https://developer.android.com/reference/android/view/View.html#getLocationInWindow(int%5B%5D))
        pub fn getLocationInWindow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getLocationInWindow", .descriptor == "([I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getLocationInWindow\0", "([I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findViewById](https://developer.android.com/reference/android/view/View.html#findViewById(int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn findViewById<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "findViewById", .descriptor == "(I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "findViewById\0", "(I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requireViewById](https://developer.android.com/reference/android/view/View.html#requireViewById(int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn requireViewById<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "requireViewById", .descriptor == "(I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requireViewById\0", "(I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findViewWithTag](https://developer.android.com/reference/android/view/View.html#findViewWithTag(java.lang.Object))
        ///
        /// Required features: "android-view-View", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "java-lang-Object")))]
        pub fn findViewWithTag<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "findViewWithTag", .descriptor == "(Ljava/lang/Object;)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "findViewWithTag\0", "(Ljava/lang/Object;)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setId](https://developer.android.com/reference/android/view/View.html#setId(int))
        pub fn setId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setId", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setId\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getId](https://developer.android.com/reference/android/view/View.html#getId())
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUniqueDrawingId](https://developer.android.com/reference/android/view/View.html#getUniqueDrawingId())
        pub fn getUniqueDrawingId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getUniqueDrawingId", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getUniqueDrawingId\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTag](https://developer.android.com/reference/android/view/View.html#getTag())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getTag<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTag", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTag\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTag](https://developer.android.com/reference/android/view/View.html#setTag(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn setTag_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTag", .descriptor == "(Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTag\0", "(Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTag](https://developer.android.com/reference/android/view/View.html#getTag(int))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getTag_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTag", .descriptor == "(I)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTag\0", "(I)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTag](https://developer.android.com/reference/android/view/View.html#setTag(int,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn setTag_int_Object<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTag", .descriptor == "(ILjava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTag\0", "(ILjava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBaseline](https://developer.android.com/reference/android/view/View.html#getBaseline())
        pub fn getBaseline<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getBaseline", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getBaseline\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInLayout](https://developer.android.com/reference/android/view/View.html#isInLayout())
        pub fn isInLayout<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isInLayout", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isInLayout\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestLayout](https://developer.android.com/reference/android/view/View.html#requestLayout())
        pub fn requestLayout<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "requestLayout", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestLayout\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forceLayout](https://developer.android.com/reference/android/view/View.html#forceLayout())
        pub fn forceLayout<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "forceLayout", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "forceLayout\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [measure](https://developer.android.com/reference/android/view/View.html#measure(int,%20int))
        pub fn measure<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "measure", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "measure\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onMeasure](https://developer.android.com/reference/android/view/View.html#onMeasure(int,%20int))
        // fn onMeasure<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onMeasure", .descriptor == "(II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onMeasure\0", "(II)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [setMeasuredDimension](https://developer.android.com/reference/android/view/View.html#setMeasuredDimension(int,%20int))
        // fn setMeasuredDimension<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED | FINAL, .name == "setMeasuredDimension", .descriptor == "(II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setMeasuredDimension\0", "(II)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [combineMeasuredStates](https://developer.android.com/reference/android/view/View.html#combineMeasuredStates(int,%20int))
        pub fn combineMeasuredStates<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | STATIC, .name == "combineMeasuredStates", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/View\0", "combineMeasuredStates\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveSize](https://developer.android.com/reference/android/view/View.html#resolveSize(int,%20int))
        pub fn resolveSize<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | STATIC, .name == "resolveSize", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/View\0", "resolveSize\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveSizeAndState](https://developer.android.com/reference/android/view/View.html#resolveSizeAndState(int,%20int,%20int))
        pub fn resolveSizeAndState<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | STATIC, .name == "resolveSizeAndState", .descriptor == "(III)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/View\0", "resolveSizeAndState\0", "(III)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultSize](https://developer.android.com/reference/android/view/View.html#getDefaultSize(int,%20int))
        pub fn getDefaultSize<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | STATIC, .name == "getDefaultSize", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/View\0", "getDefaultSize\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getSuggestedMinimumHeight](https://developer.android.com/reference/android/view/View.html#getSuggestedMinimumHeight())
        // fn getSuggestedMinimumHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getSuggestedMinimumHeight", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getSuggestedMinimumHeight\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getSuggestedMinimumWidth](https://developer.android.com/reference/android/view/View.html#getSuggestedMinimumWidth())
        // fn getSuggestedMinimumWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "getSuggestedMinimumWidth", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getSuggestedMinimumWidth\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getMinimumHeight](https://developer.android.com/reference/android/view/View.html#getMinimumHeight())
        pub fn getMinimumHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getMinimumHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getMinimumHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinimumHeight](https://developer.android.com/reference/android/view/View.html#setMinimumHeight(int))
        pub fn setMinimumHeight<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setMinimumHeight", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setMinimumHeight\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinimumWidth](https://developer.android.com/reference/android/view/View.html#getMinimumWidth())
        pub fn getMinimumWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getMinimumWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getMinimumWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinimumWidth](https://developer.android.com/reference/android/view/View.html#setMinimumWidth(int))
        pub fn setMinimumWidth<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setMinimumWidth", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setMinimumWidth\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnimation](https://developer.android.com/reference/android/view/View.html#getAnimation())
        ///
        /// Required features: "android-view-animation-Animation"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Animation")))]
        pub fn getAnimation<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::animation::Animation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getAnimation", .descriptor == "()Landroid/view/animation/Animation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getAnimation\0", "()Landroid/view/animation/Animation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startAnimation](https://developer.android.com/reference/android/view/View.html#startAnimation(android.view.animation.Animation))
        ///
        /// Required features: "android-view-animation-Animation"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Animation")))]
        pub fn startAnimation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::animation::Animation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "startAnimation", .descriptor == "(Landroid/view/animation/Animation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "startAnimation\0", "(Landroid/view/animation/Animation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearAnimation](https://developer.android.com/reference/android/view/View.html#clearAnimation())
        pub fn clearAnimation<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "clearAnimation", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "clearAnimation\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAnimation](https://developer.android.com/reference/android/view/View.html#setAnimation(android.view.animation.Animation))
        ///
        /// Required features: "android-view-animation-Animation"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Animation")))]
        pub fn setAnimation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::animation::Animation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setAnimation", .descriptor == "(Landroid/view/animation/Animation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setAnimation\0", "(Landroid/view/animation/Animation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onAnimationStart](https://developer.android.com/reference/android/view/View.html#onAnimationStart())
        // fn onAnimationStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onAnimationStart", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onAnimationStart\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onAnimationEnd](https://developer.android.com/reference/android/view/View.html#onAnimationEnd())
        // fn onAnimationEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onAnimationEnd", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onAnimationEnd\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onSetAlpha](https://developer.android.com/reference/android/view/View.html#onSetAlpha(int))
        // fn onSetAlpha<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onSetAlpha", .descriptor == "(I)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onSetAlpha\0", "(I)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [playSoundEffect](https://developer.android.com/reference/android/view/View.html#playSoundEffect(int))
        pub fn playSoundEffect<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "playSoundEffect", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "playSoundEffect\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performHapticFeedback](https://developer.android.com/reference/android/view/View.html#performHapticFeedback(int))
        pub fn performHapticFeedback_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "performHapticFeedback", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "performHapticFeedback\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performHapticFeedback](https://developer.android.com/reference/android/view/View.html#performHapticFeedback(int,%20int))
        pub fn performHapticFeedback_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "performHapticFeedback", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "performHapticFeedback\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSystemUiVisibility](https://developer.android.com/reference/android/view/View.html#setSystemUiVisibility(int))
        pub fn setSystemUiVisibility<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setSystemUiVisibility", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setSystemUiVisibility\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemUiVisibility](https://developer.android.com/reference/android/view/View.html#getSystemUiVisibility())
        pub fn getSystemUiVisibility<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getSystemUiVisibility", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getSystemUiVisibility\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindowSystemUiVisibility](https://developer.android.com/reference/android/view/View.html#getWindowSystemUiVisibility())
        pub fn getWindowSystemUiVisibility<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getWindowSystemUiVisibility", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getWindowSystemUiVisibility\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onWindowSystemUiVisibilityChanged](https://developer.android.com/reference/android/view/View.html#onWindowSystemUiVisibilityChanged(int))
        pub fn onWindowSystemUiVisibilityChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onWindowSystemUiVisibilityChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onWindowSystemUiVisibilityChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchWindowSystemUiVisiblityChanged](https://developer.android.com/reference/android/view/View.html#dispatchWindowSystemUiVisiblityChanged(int))
        pub fn dispatchWindowSystemUiVisiblityChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchWindowSystemUiVisiblityChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchWindowSystemUiVisiblityChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnSystemUiVisibilityChangeListener](https://developer.android.com/reference/android/view/View.html#setOnSystemUiVisibilityChangeListener(android.view.View.OnSystemUiVisibilityChangeListener))
        ///
        /// Required features: "android-view-View_OnSystemUiVisibilityChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnSystemUiVisibilityChangeListener")))]
        pub fn setOnSystemUiVisibilityChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnSystemUiVisibilityChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnSystemUiVisibilityChangeListener", .descriptor == "(Landroid/view/View$OnSystemUiVisibilityChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnSystemUiVisibilityChangeListener\0", "(Landroid/view/View$OnSystemUiVisibilityChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchSystemUiVisibilityChanged](https://developer.android.com/reference/android/view/View.html#dispatchSystemUiVisibilityChanged(int))
        pub fn dispatchSystemUiVisibilityChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchSystemUiVisibilityChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchSystemUiVisibilityChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startDrag](https://developer.android.com/reference/android/view/View.html#startDrag(android.content.ClipData,%20android.view.View.DragShadowBuilder,%20java.lang.Object,%20int))
        ///
        /// Required features: "android-content-ClipData", "android-view-View_DragShadowBuilder", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData", feature = "android-view-View_DragShadowBuilder", feature = "java-lang-Object")))]
        #[deprecated] pub fn startDrag<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipData>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_DragShadowBuilder>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "startDrag", .descriptor == "(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "startDrag\0", "(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startDragAndDrop](https://developer.android.com/reference/android/view/View.html#startDragAndDrop(android.content.ClipData,%20android.view.View.DragShadowBuilder,%20java.lang.Object,%20int))
        ///
        /// Required features: "android-content-ClipData", "android-view-View_DragShadowBuilder", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData", feature = "android-view-View_DragShadowBuilder", feature = "java-lang-Object")))]
        pub fn startDragAndDrop<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipData>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_DragShadowBuilder>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "startDragAndDrop", .descriptor == "(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "startDragAndDrop\0", "(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelDragAndDrop](https://developer.android.com/reference/android/view/View.html#cancelDragAndDrop())
        pub fn cancelDragAndDrop<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "cancelDragAndDrop", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "cancelDragAndDrop\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateDragShadow](https://developer.android.com/reference/android/view/View.html#updateDragShadow(android.view.View.DragShadowBuilder))
        ///
        /// Required features: "android-view-View_DragShadowBuilder"
        #[cfg(any(feature = "all", all(feature = "android-view-View_DragShadowBuilder")))]
        pub fn updateDragShadow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_DragShadowBuilder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "updateDragShadow", .descriptor == "(Landroid/view/View$DragShadowBuilder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "updateDragShadow\0", "(Landroid/view/View$DragShadowBuilder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDragEvent](https://developer.android.com/reference/android/view/View.html#onDragEvent(android.view.DragEvent))
        ///
        /// Required features: "android-view-DragEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-DragEvent")))]
        pub fn onDragEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::DragEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onDragEvent", .descriptor == "(Landroid/view/DragEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onDragEvent\0", "(Landroid/view/DragEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchDragEvent](https://developer.android.com/reference/android/view/View.html#dispatchDragEvent(android.view.DragEvent))
        ///
        /// Required features: "android-view-DragEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-DragEvent")))]
        pub fn dispatchDragEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::DragEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchDragEvent", .descriptor == "(Landroid/view/DragEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchDragEvent\0", "(Landroid/view/DragEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [inflate](https://developer.android.com/reference/android/view/View.html#inflate(android.content.Context,%20int,%20android.view.ViewGroup))
        ///
        /// Required features: "android-content-Context", "android-view-View", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-view-View", feature = "android-view-ViewGroup")))]
        pub fn inflate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | STATIC, .name == "inflate", .descriptor == "(Landroid/content/Context;ILandroid/view/ViewGroup;)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/View\0", "inflate\0", "(Landroid/content/Context;ILandroid/view/ViewGroup;)Landroid/view/View;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [overScrollBy](https://developer.android.com/reference/android/view/View.html#overScrollBy(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20boolean))
        // fn overScrollBy<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32, arg8: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "overScrollBy", .descriptor == "(IIIIIIIIZ)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "overScrollBy\0", "(IIIIIIIIZ)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onOverScrolled](https://developer.android.com/reference/android/view/View.html#onOverScrolled(int,%20int,%20boolean,%20boolean))
        // fn onOverScrolled<'env>(&'env self, arg0: i32, arg1: i32, arg2: bool, arg3: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/View", java.flags == PROTECTED, .name == "onOverScrolled", .descriptor == "(IIZZ)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onOverScrolled\0", "(IIZZ)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getOverScrollMode](https://developer.android.com/reference/android/view/View.html#getOverScrollMode())
        pub fn getOverScrollMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getOverScrollMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getOverScrollMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOverScrollMode](https://developer.android.com/reference/android/view/View.html#setOverScrollMode(int))
        pub fn setOverScrollMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOverScrollMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOverScrollMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNestedScrollingEnabled](https://developer.android.com/reference/android/view/View.html#setNestedScrollingEnabled(boolean))
        pub fn setNestedScrollingEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setNestedScrollingEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setNestedScrollingEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNestedScrollingEnabled](https://developer.android.com/reference/android/view/View.html#isNestedScrollingEnabled())
        pub fn isNestedScrollingEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isNestedScrollingEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isNestedScrollingEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startNestedScroll](https://developer.android.com/reference/android/view/View.html#startNestedScroll(int))
        pub fn startNestedScroll<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "startNestedScroll", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "startNestedScroll\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopNestedScroll](https://developer.android.com/reference/android/view/View.html#stopNestedScroll())
        pub fn stopNestedScroll<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "stopNestedScroll", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "stopNestedScroll\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasNestedScrollingParent](https://developer.android.com/reference/android/view/View.html#hasNestedScrollingParent())
        pub fn hasNestedScrollingParent<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "hasNestedScrollingParent", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "hasNestedScrollingParent\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchNestedScroll](https://developer.android.com/reference/android/view/View.html#dispatchNestedScroll(int,%20int,%20int,%20int,%20int%5B%5D))
        pub fn dispatchNestedScroll<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchNestedScroll", .descriptor == "(IIII[I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchNestedScroll\0", "(IIII[I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchNestedPreScroll](https://developer.android.com/reference/android/view/View.html#dispatchNestedPreScroll(int,%20int,%20int%5B%5D,%20int%5B%5D))
        pub fn dispatchNestedPreScroll<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchNestedPreScroll", .descriptor == "(II[I[I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchNestedPreScroll\0", "(II[I[I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchNestedFling](https://developer.android.com/reference/android/view/View.html#dispatchNestedFling(float,%20float,%20boolean))
        pub fn dispatchNestedFling<'env>(&'env self, arg0: f32, arg1: f32, arg2: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchNestedFling", .descriptor == "(FFZ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchNestedFling\0", "(FFZ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchNestedPreFling](https://developer.android.com/reference/android/view/View.html#dispatchNestedPreFling(float,%20float))
        pub fn dispatchNestedPreFling<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchNestedPreFling", .descriptor == "(FF)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchNestedPreFling\0", "(FF)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextDirection](https://developer.android.com/reference/android/view/View.html#setTextDirection(int))
        pub fn setTextDirection<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTextDirection", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTextDirection\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextDirection](https://developer.android.com/reference/android/view/View.html#getTextDirection())
        pub fn getTextDirection<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTextDirection", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTextDirection\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canResolveTextDirection](https://developer.android.com/reference/android/view/View.html#canResolveTextDirection())
        pub fn canResolveTextDirection<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "canResolveTextDirection", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "canResolveTextDirection\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTextDirectionResolved](https://developer.android.com/reference/android/view/View.html#isTextDirectionResolved())
        pub fn isTextDirectionResolved<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isTextDirectionResolved", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isTextDirectionResolved\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextAlignment](https://developer.android.com/reference/android/view/View.html#setTextAlignment(int))
        pub fn setTextAlignment<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTextAlignment", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTextAlignment\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextAlignment](https://developer.android.com/reference/android/view/View.html#getTextAlignment())
        pub fn getTextAlignment<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTextAlignment", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTextAlignment\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canResolveTextAlignment](https://developer.android.com/reference/android/view/View.html#canResolveTextAlignment())
        pub fn canResolveTextAlignment<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "canResolveTextAlignment", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "canResolveTextAlignment\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTextAlignmentResolved](https://developer.android.com/reference/android/view/View.html#isTextAlignmentResolved())
        pub fn isTextAlignmentResolved<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "isTextAlignmentResolved", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "isTextAlignmentResolved\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateViewId](https://developer.android.com/reference/android/view/View.html#generateViewId())
        pub fn generateViewId<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | STATIC, .name == "generateViewId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/View\0", "generateViewId\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onResolvePointerIcon](https://developer.android.com/reference/android/view/View.html#onResolvePointerIcon(android.view.MotionEvent,%20int))
        ///
        /// Required features: "android-view-MotionEvent", "android-view-PointerIcon"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent", feature = "android-view-PointerIcon")))]
        pub fn onResolvePointerIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::PointerIcon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onResolvePointerIcon", .descriptor == "(Landroid/view/MotionEvent;I)Landroid/view/PointerIcon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onResolvePointerIcon\0", "(Landroid/view/MotionEvent;I)Landroid/view/PointerIcon;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPointerIcon](https://developer.android.com/reference/android/view/View.html#setPointerIcon(android.view.PointerIcon))
        ///
        /// Required features: "android-view-PointerIcon"
        #[cfg(any(feature = "all", all(feature = "android-view-PointerIcon")))]
        pub fn setPointerIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::PointerIcon>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setPointerIcon", .descriptor == "(Landroid/view/PointerIcon;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setPointerIcon\0", "(Landroid/view/PointerIcon;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPointerIcon](https://developer.android.com/reference/android/view/View.html#getPointerIcon())
        ///
        /// Required features: "android-view-PointerIcon"
        #[cfg(any(feature = "all", all(feature = "android-view-PointerIcon")))]
        pub fn getPointerIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::PointerIcon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getPointerIcon", .descriptor == "()Landroid/view/PointerIcon;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getPointerIcon\0", "()Landroid/view/PointerIcon;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasPointerCapture](https://developer.android.com/reference/android/view/View.html#hasPointerCapture())
        pub fn hasPointerCapture<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "hasPointerCapture", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "hasPointerCapture\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestPointerCapture](https://developer.android.com/reference/android/view/View.html#requestPointerCapture())
        pub fn requestPointerCapture<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "requestPointerCapture", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "requestPointerCapture\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releasePointerCapture](https://developer.android.com/reference/android/view/View.html#releasePointerCapture())
        pub fn releasePointerCapture<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "releasePointerCapture", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "releasePointerCapture\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPointerCaptureChange](https://developer.android.com/reference/android/view/View.html#onPointerCaptureChange(boolean))
        pub fn onPointerCaptureChange<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onPointerCaptureChange", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onPointerCaptureChange\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchPointerCaptureChanged](https://developer.android.com/reference/android/view/View.html#dispatchPointerCaptureChanged(boolean))
        pub fn dispatchPointerCaptureChanged<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "dispatchPointerCaptureChanged", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "dispatchPointerCaptureChanged\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCapturedPointerEvent](https://developer.android.com/reference/android/view/View.html#onCapturedPointerEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn onCapturedPointerEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "onCapturedPointerEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "onCapturedPointerEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnCapturedPointerListener](https://developer.android.com/reference/android/view/View.html#setOnCapturedPointerListener(android.view.View.OnCapturedPointerListener))
        ///
        /// Required features: "android-view-View_OnCapturedPointerListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnCapturedPointerListener")))]
        pub fn setOnCapturedPointerListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnCapturedPointerListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setOnCapturedPointerListener", .descriptor == "(Landroid/view/View$OnCapturedPointerListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setOnCapturedPointerListener\0", "(Landroid/view/View$OnCapturedPointerListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [animate](https://developer.android.com/reference/android/view/View.html#animate())
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn animate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "animate", .descriptor == "()Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "animate\0", "()Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTransitionName](https://developer.android.com/reference/android/view/View.html#setTransitionName(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setTransitionName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC | FINAL, .name == "setTransitionName", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTransitionName\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransitionName](https://developer.android.com/reference/android/view/View.html#getTransitionName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getTransitionName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTransitionName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTransitionName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTooltipText](https://developer.android.com/reference/android/view/View.html#setTooltipText(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setTooltipText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "setTooltipText", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "setTooltipText\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTooltipText](https://developer.android.com/reference/android/view/View.html#getTooltipText())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getTooltipText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "getTooltipText", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "getTooltipText\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnUnhandledKeyEventListener](https://developer.android.com/reference/android/view/View.html#addOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener))
        ///
        /// Required features: "android-view-View_OnUnhandledKeyEventListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnUnhandledKeyEventListener")))]
        pub fn addOnUnhandledKeyEventListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnUnhandledKeyEventListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "addOnUnhandledKeyEventListener", .descriptor == "(Landroid/view/View$OnUnhandledKeyEventListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "addOnUnhandledKeyEventListener\0", "(Landroid/view/View$OnUnhandledKeyEventListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnUnhandledKeyEventListener](https://developer.android.com/reference/android/view/View.html#removeOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener))
        ///
        /// Required features: "android-view-View_OnUnhandledKeyEventListener"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnUnhandledKeyEventListener")))]
        pub fn removeOnUnhandledKeyEventListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnUnhandledKeyEventListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View", java.flags == PUBLIC, .name == "removeOnUnhandledKeyEventListener", .descriptor == "(Landroid/view/View$OnUnhandledKeyEventListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View\0", "removeOnUnhandledKeyEventListener\0", "(Landroid/view/View$OnUnhandledKeyEventListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACCESSIBILITY_LIVE_REGION_ASSERTIVE](https://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_LIVE_REGION_ASSERTIVE)
        pub const ACCESSIBILITY_LIVE_REGION_ASSERTIVE : i32 = 2;

        /// public static final [ACCESSIBILITY_LIVE_REGION_NONE](https://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_LIVE_REGION_NONE)
        pub const ACCESSIBILITY_LIVE_REGION_NONE : i32 = 0;

        /// public static final [ACCESSIBILITY_LIVE_REGION_POLITE](https://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_LIVE_REGION_POLITE)
        pub const ACCESSIBILITY_LIVE_REGION_POLITE : i32 = 1;

        /// **get** public static final [ALPHA](https://developer.android.com/reference/android/view/View.html#ALPHA)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn ALPHA<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "ALPHA\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS](https://developer.android.com/reference/android/view/View.html#AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS)
        pub const AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS : i32 = 1;

        /// public static final [AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE)
        pub const AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE : &'static str = "creditCardExpirationDate";

        /// public static final [AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY)
        pub const AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY : &'static str = "creditCardExpirationDay";

        /// public static final [AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH)
        pub const AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH : &'static str = "creditCardExpirationMonth";

        /// public static final [AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR)
        pub const AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR : &'static str = "creditCardExpirationYear";

        /// public static final [AUTOFILL_HINT_CREDIT_CARD_NUMBER](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_NUMBER)
        pub const AUTOFILL_HINT_CREDIT_CARD_NUMBER : &'static str = "creditCardNumber";

        /// public static final [AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE)
        pub const AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE : &'static str = "creditCardSecurityCode";

        /// public static final [AUTOFILL_HINT_EMAIL_ADDRESS](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_EMAIL_ADDRESS)
        pub const AUTOFILL_HINT_EMAIL_ADDRESS : &'static str = "emailAddress";

        /// public static final [AUTOFILL_HINT_NAME](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_NAME)
        pub const AUTOFILL_HINT_NAME : &'static str = "name";

        /// public static final [AUTOFILL_HINT_PASSWORD](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_PASSWORD)
        pub const AUTOFILL_HINT_PASSWORD : &'static str = "password";

        /// public static final [AUTOFILL_HINT_PHONE](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_PHONE)
        pub const AUTOFILL_HINT_PHONE : &'static str = "phone";

        /// public static final [AUTOFILL_HINT_POSTAL_ADDRESS](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_POSTAL_ADDRESS)
        pub const AUTOFILL_HINT_POSTAL_ADDRESS : &'static str = "postalAddress";

        /// public static final [AUTOFILL_HINT_POSTAL_CODE](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_POSTAL_CODE)
        pub const AUTOFILL_HINT_POSTAL_CODE : &'static str = "postalCode";

        /// public static final [AUTOFILL_HINT_USERNAME](https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_USERNAME)
        pub const AUTOFILL_HINT_USERNAME : &'static str = "username";

        /// public static final [AUTOFILL_TYPE_DATE](https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_DATE)
        pub const AUTOFILL_TYPE_DATE : i32 = 4;

        /// public static final [AUTOFILL_TYPE_LIST](https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_LIST)
        pub const AUTOFILL_TYPE_LIST : i32 = 3;

        /// public static final [AUTOFILL_TYPE_NONE](https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_NONE)
        pub const AUTOFILL_TYPE_NONE : i32 = 0;

        /// public static final [AUTOFILL_TYPE_TEXT](https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_TEXT)
        pub const AUTOFILL_TYPE_TEXT : i32 = 1;

        /// public static final [AUTOFILL_TYPE_TOGGLE](https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_TOGGLE)
        pub const AUTOFILL_TYPE_TOGGLE : i32 = 2;

        /// public static final [DRAG_FLAG_GLOBAL](https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL)
        pub const DRAG_FLAG_GLOBAL : i32 = 256;

        /// public static final [DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION](https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION)
        pub const DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION : i32 = 64;

        /// public static final [DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION](https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION)
        pub const DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION : i32 = 128;

        /// public static final [DRAG_FLAG_GLOBAL_URI_READ](https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL_URI_READ)
        pub const DRAG_FLAG_GLOBAL_URI_READ : i32 = 1;

        /// public static final [DRAG_FLAG_GLOBAL_URI_WRITE](https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL_URI_WRITE)
        pub const DRAG_FLAG_GLOBAL_URI_WRITE : i32 = 2;

        /// public static final [DRAG_FLAG_OPAQUE](https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_OPAQUE)
        pub const DRAG_FLAG_OPAQUE : i32 = 512;

        /// public static final [DRAWING_CACHE_QUALITY_AUTO](https://developer.android.com/reference/android/view/View.html#DRAWING_CACHE_QUALITY_AUTO)
        #[deprecated] pub const DRAWING_CACHE_QUALITY_AUTO : i32 = 0;

        /// public static final [DRAWING_CACHE_QUALITY_HIGH](https://developer.android.com/reference/android/view/View.html#DRAWING_CACHE_QUALITY_HIGH)
        #[deprecated] pub const DRAWING_CACHE_QUALITY_HIGH : i32 = 1048576;

        /// public static final [DRAWING_CACHE_QUALITY_LOW](https://developer.android.com/reference/android/view/View.html#DRAWING_CACHE_QUALITY_LOW)
        #[deprecated] pub const DRAWING_CACHE_QUALITY_LOW : i32 = 524288;

        // // Not emitting: Non-public field
        // /// **get** protected static final [EMPTY_STATE_SET](https://developer.android.com/reference/android/view/View.html#EMPTY_STATE_SET)
        // pub fn EMPTY_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "EMPTY_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [ENABLED_FOCUSED_SELECTED_STATE_SET](https://developer.android.com/reference/android/view/View.html#ENABLED_FOCUSED_SELECTED_STATE_SET)
        // pub fn ENABLED_FOCUSED_SELECTED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "ENABLED_FOCUSED_SELECTED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET)
        // pub fn ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [ENABLED_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#ENABLED_FOCUSED_STATE_SET)
        // pub fn ENABLED_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "ENABLED_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET)
        // pub fn ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [ENABLED_SELECTED_STATE_SET](https://developer.android.com/reference/android/view/View.html#ENABLED_SELECTED_STATE_SET)
        // pub fn ENABLED_SELECTED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "ENABLED_SELECTED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET)
        // pub fn ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [ENABLED_STATE_SET](https://developer.android.com/reference/android/view/View.html#ENABLED_STATE_SET)
        // pub fn ENABLED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "ENABLED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [ENABLED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#ENABLED_WINDOW_FOCUSED_STATE_SET)
        // pub fn ENABLED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "ENABLED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        /// public static final [FIND_VIEWS_WITH_CONTENT_DESCRIPTION](https://developer.android.com/reference/android/view/View.html#FIND_VIEWS_WITH_CONTENT_DESCRIPTION)
        pub const FIND_VIEWS_WITH_CONTENT_DESCRIPTION : i32 = 2;

        /// public static final [FIND_VIEWS_WITH_TEXT](https://developer.android.com/reference/android/view/View.html#FIND_VIEWS_WITH_TEXT)
        pub const FIND_VIEWS_WITH_TEXT : i32 = 1;

        /// public static final [FOCUSABLE](https://developer.android.com/reference/android/view/View.html#FOCUSABLE)
        pub const FOCUSABLE : i32 = 1;

        /// public static final [FOCUSABLES_ALL](https://developer.android.com/reference/android/view/View.html#FOCUSABLES_ALL)
        pub const FOCUSABLES_ALL : i32 = 0;

        /// public static final [FOCUSABLES_TOUCH_MODE](https://developer.android.com/reference/android/view/View.html#FOCUSABLES_TOUCH_MODE)
        pub const FOCUSABLES_TOUCH_MODE : i32 = 1;

        /// public static final [FOCUSABLE_AUTO](https://developer.android.com/reference/android/view/View.html#FOCUSABLE_AUTO)
        pub const FOCUSABLE_AUTO : i32 = 16;

        // // Not emitting: Non-public field
        // /// **get** protected static final [FOCUSED_SELECTED_STATE_SET](https://developer.android.com/reference/android/view/View.html#FOCUSED_SELECTED_STATE_SET)
        // pub fn FOCUSED_SELECTED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "FOCUSED_SELECTED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET)
        // pub fn FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#FOCUSED_STATE_SET)
        // pub fn FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [FOCUSED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#FOCUSED_WINDOW_FOCUSED_STATE_SET)
        // pub fn FOCUSED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "FOCUSED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        /// public static final [FOCUS_BACKWARD](https://developer.android.com/reference/android/view/View.html#FOCUS_BACKWARD)
        pub const FOCUS_BACKWARD : i32 = 1;

        /// public static final [FOCUS_DOWN](https://developer.android.com/reference/android/view/View.html#FOCUS_DOWN)
        pub const FOCUS_DOWN : i32 = 130;

        /// public static final [FOCUS_FORWARD](https://developer.android.com/reference/android/view/View.html#FOCUS_FORWARD)
        pub const FOCUS_FORWARD : i32 = 2;

        /// public static final [FOCUS_LEFT](https://developer.android.com/reference/android/view/View.html#FOCUS_LEFT)
        pub const FOCUS_LEFT : i32 = 17;

        /// public static final [FOCUS_RIGHT](https://developer.android.com/reference/android/view/View.html#FOCUS_RIGHT)
        pub const FOCUS_RIGHT : i32 = 66;

        /// public static final [FOCUS_UP](https://developer.android.com/reference/android/view/View.html#FOCUS_UP)
        pub const FOCUS_UP : i32 = 33;

        /// public static final [GONE](https://developer.android.com/reference/android/view/View.html#GONE)
        pub const GONE : i32 = 8;

        /// public static final [HAPTIC_FEEDBACK_ENABLED](https://developer.android.com/reference/android/view/View.html#HAPTIC_FEEDBACK_ENABLED)
        pub const HAPTIC_FEEDBACK_ENABLED : i32 = 268435456;

        /// public static final [IMPORTANT_FOR_ACCESSIBILITY_AUTO](https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_AUTO)
        pub const IMPORTANT_FOR_ACCESSIBILITY_AUTO : i32 = 0;

        /// public static final [IMPORTANT_FOR_ACCESSIBILITY_NO](https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_NO)
        pub const IMPORTANT_FOR_ACCESSIBILITY_NO : i32 = 2;

        /// public static final [IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS](https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS)
        pub const IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS : i32 = 4;

        /// public static final [IMPORTANT_FOR_ACCESSIBILITY_YES](https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_YES)
        pub const IMPORTANT_FOR_ACCESSIBILITY_YES : i32 = 1;

        /// public static final [IMPORTANT_FOR_AUTOFILL_AUTO](https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_AUTO)
        pub const IMPORTANT_FOR_AUTOFILL_AUTO : i32 = 0;

        /// public static final [IMPORTANT_FOR_AUTOFILL_NO](https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_NO)
        pub const IMPORTANT_FOR_AUTOFILL_NO : i32 = 2;

        /// public static final [IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS](https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS)
        pub const IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS : i32 = 8;

        /// public static final [IMPORTANT_FOR_AUTOFILL_YES](https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_YES)
        pub const IMPORTANT_FOR_AUTOFILL_YES : i32 = 1;

        /// public static final [IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS](https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS)
        pub const IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS : i32 = 4;

        /// public static final [INVISIBLE](https://developer.android.com/reference/android/view/View.html#INVISIBLE)
        pub const INVISIBLE : i32 = 4;

        /// public static final [KEEP_SCREEN_ON](https://developer.android.com/reference/android/view/View.html#KEEP_SCREEN_ON)
        pub const KEEP_SCREEN_ON : i32 = 67108864;

        /// public static final [LAYER_TYPE_HARDWARE](https://developer.android.com/reference/android/view/View.html#LAYER_TYPE_HARDWARE)
        pub const LAYER_TYPE_HARDWARE : i32 = 2;

        /// public static final [LAYER_TYPE_NONE](https://developer.android.com/reference/android/view/View.html#LAYER_TYPE_NONE)
        pub const LAYER_TYPE_NONE : i32 = 0;

        /// public static final [LAYER_TYPE_SOFTWARE](https://developer.android.com/reference/android/view/View.html#LAYER_TYPE_SOFTWARE)
        pub const LAYER_TYPE_SOFTWARE : i32 = 1;

        /// public static final [LAYOUT_DIRECTION_INHERIT](https://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_INHERIT)
        pub const LAYOUT_DIRECTION_INHERIT : i32 = 2;

        /// public static final [LAYOUT_DIRECTION_LOCALE](https://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_LOCALE)
        pub const LAYOUT_DIRECTION_LOCALE : i32 = 3;

        /// public static final [LAYOUT_DIRECTION_LTR](https://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_LTR)
        pub const LAYOUT_DIRECTION_LTR : i32 = 0;

        /// public static final [LAYOUT_DIRECTION_RTL](https://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_RTL)
        pub const LAYOUT_DIRECTION_RTL : i32 = 1;

        /// public static final [MEASURED_HEIGHT_STATE_SHIFT](https://developer.android.com/reference/android/view/View.html#MEASURED_HEIGHT_STATE_SHIFT)
        pub const MEASURED_HEIGHT_STATE_SHIFT : i32 = 16;

        /// public static final [MEASURED_SIZE_MASK](https://developer.android.com/reference/android/view/View.html#MEASURED_SIZE_MASK)
        pub const MEASURED_SIZE_MASK : i32 = 16777215;

        /// public static final [MEASURED_STATE_MASK](https://developer.android.com/reference/android/view/View.html#MEASURED_STATE_MASK)
        pub const MEASURED_STATE_MASK : i32 = -16777216;

        /// public static final [MEASURED_STATE_TOO_SMALL](https://developer.android.com/reference/android/view/View.html#MEASURED_STATE_TOO_SMALL)
        pub const MEASURED_STATE_TOO_SMALL : i32 = 16777216;

        /// public static final [NOT_FOCUSABLE](https://developer.android.com/reference/android/view/View.html#NOT_FOCUSABLE)
        pub const NOT_FOCUSABLE : i32 = 0;

        /// public static final [NO_ID](https://developer.android.com/reference/android/view/View.html#NO_ID)
        pub const NO_ID : i32 = -1;

        /// public static final [OVER_SCROLL_ALWAYS](https://developer.android.com/reference/android/view/View.html#OVER_SCROLL_ALWAYS)
        pub const OVER_SCROLL_ALWAYS : i32 = 0;

        /// public static final [OVER_SCROLL_IF_CONTENT_SCROLLS](https://developer.android.com/reference/android/view/View.html#OVER_SCROLL_IF_CONTENT_SCROLLS)
        pub const OVER_SCROLL_IF_CONTENT_SCROLLS : i32 = 1;

        /// public static final [OVER_SCROLL_NEVER](https://developer.android.com/reference/android/view/View.html#OVER_SCROLL_NEVER)
        pub const OVER_SCROLL_NEVER : i32 = 2;

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET)
        // pub fn PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET)
        // pub fn PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_ENABLED_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_FOCUSED_STATE_SET)
        // pub fn PRESSED_ENABLED_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_ENABLED_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET)
        // pub fn PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_ENABLED_SELECTED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_SELECTED_STATE_SET)
        // pub fn PRESSED_ENABLED_SELECTED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_ENABLED_SELECTED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET)
        // pub fn PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_ENABLED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_STATE_SET)
        // pub fn PRESSED_ENABLED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_ENABLED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET)
        // pub fn PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_FOCUSED_SELECTED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_FOCUSED_SELECTED_STATE_SET)
        // pub fn PRESSED_FOCUSED_SELECTED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_FOCUSED_SELECTED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET)
        // pub fn PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_FOCUSED_STATE_SET)
        // pub fn PRESSED_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET)
        // pub fn PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_SELECTED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_SELECTED_STATE_SET)
        // pub fn PRESSED_SELECTED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_SELECTED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET)
        // pub fn PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_STATE_SET)
        // pub fn PRESSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [PRESSED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#PRESSED_WINDOW_FOCUSED_STATE_SET)
        // pub fn PRESSED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "PRESSED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        /// **get** public static final [ROTATION](https://developer.android.com/reference/android/view/View.html#ROTATION)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn ROTATION<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "ROTATION\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ROTATION_X](https://developer.android.com/reference/android/view/View.html#ROTATION_X)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn ROTATION_X<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "ROTATION_X\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ROTATION_Y](https://developer.android.com/reference/android/view/View.html#ROTATION_Y)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn ROTATION_Y<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "ROTATION_Y\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [SCALE_X](https://developer.android.com/reference/android/view/View.html#SCALE_X)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn SCALE_X<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "SCALE_X\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [SCALE_Y](https://developer.android.com/reference/android/view/View.html#SCALE_Y)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn SCALE_Y<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "SCALE_Y\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [SCREEN_STATE_OFF](https://developer.android.com/reference/android/view/View.html#SCREEN_STATE_OFF)
        pub const SCREEN_STATE_OFF : i32 = 0;

        /// public static final [SCREEN_STATE_ON](https://developer.android.com/reference/android/view/View.html#SCREEN_STATE_ON)
        pub const SCREEN_STATE_ON : i32 = 1;

        /// public static final [SCROLLBARS_INSIDE_INSET](https://developer.android.com/reference/android/view/View.html#SCROLLBARS_INSIDE_INSET)
        pub const SCROLLBARS_INSIDE_INSET : i32 = 16777216;

        /// public static final [SCROLLBARS_INSIDE_OVERLAY](https://developer.android.com/reference/android/view/View.html#SCROLLBARS_INSIDE_OVERLAY)
        pub const SCROLLBARS_INSIDE_OVERLAY : i32 = 0;

        /// public static final [SCROLLBARS_OUTSIDE_INSET](https://developer.android.com/reference/android/view/View.html#SCROLLBARS_OUTSIDE_INSET)
        pub const SCROLLBARS_OUTSIDE_INSET : i32 = 50331648;

        /// public static final [SCROLLBARS_OUTSIDE_OVERLAY](https://developer.android.com/reference/android/view/View.html#SCROLLBARS_OUTSIDE_OVERLAY)
        pub const SCROLLBARS_OUTSIDE_OVERLAY : i32 = 33554432;

        /// public static final [SCROLLBAR_POSITION_DEFAULT](https://developer.android.com/reference/android/view/View.html#SCROLLBAR_POSITION_DEFAULT)
        pub const SCROLLBAR_POSITION_DEFAULT : i32 = 0;

        /// public static final [SCROLLBAR_POSITION_LEFT](https://developer.android.com/reference/android/view/View.html#SCROLLBAR_POSITION_LEFT)
        pub const SCROLLBAR_POSITION_LEFT : i32 = 1;

        /// public static final [SCROLLBAR_POSITION_RIGHT](https://developer.android.com/reference/android/view/View.html#SCROLLBAR_POSITION_RIGHT)
        pub const SCROLLBAR_POSITION_RIGHT : i32 = 2;

        /// public static final [SCROLL_AXIS_HORIZONTAL](https://developer.android.com/reference/android/view/View.html#SCROLL_AXIS_HORIZONTAL)
        pub const SCROLL_AXIS_HORIZONTAL : i32 = 1;

        /// public static final [SCROLL_AXIS_NONE](https://developer.android.com/reference/android/view/View.html#SCROLL_AXIS_NONE)
        pub const SCROLL_AXIS_NONE : i32 = 0;

        /// public static final [SCROLL_AXIS_VERTICAL](https://developer.android.com/reference/android/view/View.html#SCROLL_AXIS_VERTICAL)
        pub const SCROLL_AXIS_VERTICAL : i32 = 2;

        /// public static final [SCROLL_INDICATOR_BOTTOM](https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_BOTTOM)
        pub const SCROLL_INDICATOR_BOTTOM : i32 = 2;

        /// public static final [SCROLL_INDICATOR_END](https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_END)
        pub const SCROLL_INDICATOR_END : i32 = 32;

        /// public static final [SCROLL_INDICATOR_LEFT](https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_LEFT)
        pub const SCROLL_INDICATOR_LEFT : i32 = 4;

        /// public static final [SCROLL_INDICATOR_RIGHT](https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_RIGHT)
        pub const SCROLL_INDICATOR_RIGHT : i32 = 8;

        /// public static final [SCROLL_INDICATOR_START](https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_START)
        pub const SCROLL_INDICATOR_START : i32 = 16;

        /// public static final [SCROLL_INDICATOR_TOP](https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_TOP)
        pub const SCROLL_INDICATOR_TOP : i32 = 1;

        // // Not emitting: Non-public field
        // /// **get** protected static final [SELECTED_STATE_SET](https://developer.android.com/reference/android/view/View.html#SELECTED_STATE_SET)
        // pub fn SELECTED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "SELECTED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected static final [SELECTED_WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#SELECTED_WINDOW_FOCUSED_STATE_SET)
        // pub fn SELECTED_WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "SELECTED_WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        /// public static final [SOUND_EFFECTS_ENABLED](https://developer.android.com/reference/android/view/View.html#SOUND_EFFECTS_ENABLED)
        pub const SOUND_EFFECTS_ENABLED : i32 = 134217728;

        /// public static final [STATUS_BAR_HIDDEN](https://developer.android.com/reference/android/view/View.html#STATUS_BAR_HIDDEN)
        #[deprecated] pub const STATUS_BAR_HIDDEN : i32 = 1;

        /// public static final [STATUS_BAR_VISIBLE](https://developer.android.com/reference/android/view/View.html#STATUS_BAR_VISIBLE)
        #[deprecated] pub const STATUS_BAR_VISIBLE : i32 = 0;

        /// public static final [SYSTEM_UI_FLAG_FULLSCREEN](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_FULLSCREEN)
        pub const SYSTEM_UI_FLAG_FULLSCREEN : i32 = 4;

        /// public static final [SYSTEM_UI_FLAG_HIDE_NAVIGATION](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_HIDE_NAVIGATION)
        pub const SYSTEM_UI_FLAG_HIDE_NAVIGATION : i32 = 2;

        /// public static final [SYSTEM_UI_FLAG_IMMERSIVE](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_IMMERSIVE)
        pub const SYSTEM_UI_FLAG_IMMERSIVE : i32 = 2048;

        /// public static final [SYSTEM_UI_FLAG_IMMERSIVE_STICKY](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_IMMERSIVE_STICKY)
        pub const SYSTEM_UI_FLAG_IMMERSIVE_STICKY : i32 = 4096;

        /// public static final [SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN)
        pub const SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN : i32 = 1024;

        /// public static final [SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION)
        pub const SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION : i32 = 512;

        /// public static final [SYSTEM_UI_FLAG_LAYOUT_STABLE](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LAYOUT_STABLE)
        pub const SYSTEM_UI_FLAG_LAYOUT_STABLE : i32 = 256;

        /// public static final [SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR)
        pub const SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR : i32 = 16;

        /// public static final [SYSTEM_UI_FLAG_LIGHT_STATUS_BAR](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LIGHT_STATUS_BAR)
        pub const SYSTEM_UI_FLAG_LIGHT_STATUS_BAR : i32 = 8192;

        /// public static final [SYSTEM_UI_FLAG_LOW_PROFILE](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LOW_PROFILE)
        pub const SYSTEM_UI_FLAG_LOW_PROFILE : i32 = 1;

        /// public static final [SYSTEM_UI_FLAG_VISIBLE](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_VISIBLE)
        pub const SYSTEM_UI_FLAG_VISIBLE : i32 = 0;

        /// public static final [SYSTEM_UI_LAYOUT_FLAGS](https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_LAYOUT_FLAGS)
        pub const SYSTEM_UI_LAYOUT_FLAGS : i32 = 1536;

        /// public static final [TEXT_ALIGNMENT_CENTER](https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_CENTER)
        pub const TEXT_ALIGNMENT_CENTER : i32 = 4;

        /// public static final [TEXT_ALIGNMENT_GRAVITY](https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_GRAVITY)
        pub const TEXT_ALIGNMENT_GRAVITY : i32 = 1;

        /// public static final [TEXT_ALIGNMENT_INHERIT](https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_INHERIT)
        pub const TEXT_ALIGNMENT_INHERIT : i32 = 0;

        /// public static final [TEXT_ALIGNMENT_TEXT_END](https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_TEXT_END)
        pub const TEXT_ALIGNMENT_TEXT_END : i32 = 3;

        /// public static final [TEXT_ALIGNMENT_TEXT_START](https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_TEXT_START)
        pub const TEXT_ALIGNMENT_TEXT_START : i32 = 2;

        /// public static final [TEXT_ALIGNMENT_VIEW_END](https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_VIEW_END)
        pub const TEXT_ALIGNMENT_VIEW_END : i32 = 6;

        /// public static final [TEXT_ALIGNMENT_VIEW_START](https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_VIEW_START)
        pub const TEXT_ALIGNMENT_VIEW_START : i32 = 5;

        /// public static final [TEXT_DIRECTION_ANY_RTL](https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_ANY_RTL)
        pub const TEXT_DIRECTION_ANY_RTL : i32 = 2;

        /// public static final [TEXT_DIRECTION_FIRST_STRONG](https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_FIRST_STRONG)
        pub const TEXT_DIRECTION_FIRST_STRONG : i32 = 1;

        /// public static final [TEXT_DIRECTION_FIRST_STRONG_LTR](https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_FIRST_STRONG_LTR)
        pub const TEXT_DIRECTION_FIRST_STRONG_LTR : i32 = 6;

        /// public static final [TEXT_DIRECTION_FIRST_STRONG_RTL](https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_FIRST_STRONG_RTL)
        pub const TEXT_DIRECTION_FIRST_STRONG_RTL : i32 = 7;

        /// public static final [TEXT_DIRECTION_INHERIT](https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_INHERIT)
        pub const TEXT_DIRECTION_INHERIT : i32 = 0;

        /// public static final [TEXT_DIRECTION_LOCALE](https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_LOCALE)
        pub const TEXT_DIRECTION_LOCALE : i32 = 5;

        /// public static final [TEXT_DIRECTION_LTR](https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_LTR)
        pub const TEXT_DIRECTION_LTR : i32 = 3;

        /// public static final [TEXT_DIRECTION_RTL](https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_RTL)
        pub const TEXT_DIRECTION_RTL : i32 = 4;

        /// **get** public static final [TRANSLATION_X](https://developer.android.com/reference/android/view/View.html#TRANSLATION_X)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn TRANSLATION_X<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "TRANSLATION_X\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [TRANSLATION_Y](https://developer.android.com/reference/android/view/View.html#TRANSLATION_Y)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn TRANSLATION_Y<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "TRANSLATION_Y\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [TRANSLATION_Z](https://developer.android.com/reference/android/view/View.html#TRANSLATION_Z)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn TRANSLATION_Z<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "TRANSLATION_Z\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        // // Not emitting: Non-public field
        // /// protected static final [VIEW_LOG_TAG](https://developer.android.com/reference/android/view/View.html#VIEW_LOG_TAG)
        // pub const VIEW_LOG_TAG : &'static str = "View";

        /// public static final [VISIBLE](https://developer.android.com/reference/android/view/View.html#VISIBLE)
        pub const VISIBLE : i32 = 0;

        // // Not emitting: Non-public field
        // /// **get** protected static final [WINDOW_FOCUSED_STATE_SET](https://developer.android.com/reference/android/view/View.html#WINDOW_FOCUSED_STATE_SET)
        // pub fn WINDOW_FOCUSED_STATE_SET<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let (class, field) = env.require_class_static_field("android/view/View\0", "WINDOW_FOCUSED_STATE_SET\0", "[I\0");
        //         env.get_static_object_field(class, field)
        //     }
        // }

        /// **get** public static final [X](https://developer.android.com/reference/android/view/View.html#X)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn X<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "X\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [Y](https://developer.android.com/reference/android/view/View.html#Y)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn Y<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "Y\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [Z](https://developer.android.com/reference/android/view/View.html#Z)
        ///
        /// Required feature: android-util-Property
        #[cfg(any(feature = "all", feature = "android-util-Property"))]
        pub fn Z<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Property>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/View\0", "Z\0", "Landroid/util/Property;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
