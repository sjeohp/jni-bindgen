// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-WindowInsets_Builder"))]
__jni_bindgen! {
    /// public final class [WindowInsets.Builder](https://developer.android.com/reference/android/view/WindowInsets.Builder.html)
    ///
    /// Required feature: android-view-WindowInsets_Builder
    public final class WindowInsets_Builder ("android/view/WindowInsets$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/view/WindowInsets.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowInsets_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/view/WindowInsets.Builder.html#Builder(android.view.WindowInsets))
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn new_WindowInsets<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::WindowInsets>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowInsets_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/view/WindowInsets;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets$Builder\0", "<init>\0", "(Landroid/view/WindowInsets;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSystemWindowInsets](https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setSystemWindowInsets(android.graphics.Insets))
        ///
        /// Required features: "android-graphics-Insets", "android-view-WindowInsets_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets", feature = "android-view-WindowInsets_Builder")))]
        pub fn setSystemWindowInsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Insets>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets$Builder", java.flags == PUBLIC, .name == "setSystemWindowInsets", .descriptor == "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets$Builder\0", "setSystemWindowInsets\0", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSystemGestureInsets](https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setSystemGestureInsets(android.graphics.Insets))
        ///
        /// Required features: "android-graphics-Insets", "android-view-WindowInsets_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets", feature = "android-view-WindowInsets_Builder")))]
        pub fn setSystemGestureInsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Insets>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets$Builder", java.flags == PUBLIC, .name == "setSystemGestureInsets", .descriptor == "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets$Builder\0", "setSystemGestureInsets\0", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMandatorySystemGestureInsets](https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setMandatorySystemGestureInsets(android.graphics.Insets))
        ///
        /// Required features: "android-graphics-Insets", "android-view-WindowInsets_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets", feature = "android-view-WindowInsets_Builder")))]
        pub fn setMandatorySystemGestureInsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Insets>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets$Builder", java.flags == PUBLIC, .name == "setMandatorySystemGestureInsets", .descriptor == "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets$Builder\0", "setMandatorySystemGestureInsets\0", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTappableElementInsets](https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setTappableElementInsets(android.graphics.Insets))
        ///
        /// Required features: "android-graphics-Insets", "android-view-WindowInsets_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets", feature = "android-view-WindowInsets_Builder")))]
        pub fn setTappableElementInsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Insets>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets$Builder", java.flags == PUBLIC, .name == "setTappableElementInsets", .descriptor == "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets$Builder\0", "setTappableElementInsets\0", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStableInsets](https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setStableInsets(android.graphics.Insets))
        ///
        /// Required features: "android-graphics-Insets", "android-view-WindowInsets_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets", feature = "android-view-WindowInsets_Builder")))]
        pub fn setStableInsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Insets>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets$Builder", java.flags == PUBLIC, .name == "setStableInsets", .descriptor == "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets$Builder\0", "setStableInsets\0", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDisplayCutout](https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setDisplayCutout(android.view.DisplayCutout))
        ///
        /// Required features: "android-view-DisplayCutout", "android-view-WindowInsets_Builder"
        #[cfg(any(feature = "all", all(feature = "android-view-DisplayCutout", feature = "android-view-WindowInsets_Builder")))]
        pub fn setDisplayCutout<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::DisplayCutout>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets$Builder", java.flags == PUBLIC, .name == "setDisplayCutout", .descriptor == "(Landroid/view/DisplayCutout;)Landroid/view/WindowInsets$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets$Builder\0", "setDisplayCutout\0", "(Landroid/view/DisplayCutout;)Landroid/view/WindowInsets$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/view/WindowInsets.Builder.html#build())
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets$Builder\0", "build\0", "()Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
