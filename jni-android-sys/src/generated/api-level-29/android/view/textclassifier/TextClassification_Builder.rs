// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-textclassifier-TextClassification_Builder"))]
__jni_bindgen! {
    /// public final class [TextClassification.Builder](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html)
    ///
    /// Required feature: android-view-textclassifier-TextClassification_Builder
    public final class TextClassification_Builder ("android/view/textclassifier/TextClassification$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setText](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#setText(java.lang.String))
        ///
        /// Required features: "android-view-textclassifier-TextClassification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-view-textclassifier-TextClassification_Builder", feature = "java-lang-String")))]
        pub fn setText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "setText", .descriptor == "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "setText\0", "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEntityType](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#setEntityType(java.lang.String,%20float))
        ///
        /// Required features: "android-view-textclassifier-TextClassification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-view-textclassifier-TextClassification_Builder", feature = "java-lang-String")))]
        pub fn setEntityType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "setEntityType", .descriptor == "(Ljava/lang/String;F)Landroid/view/textclassifier/TextClassification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "setEntityType\0", "(Ljava/lang/String;F)Landroid/view/textclassifier/TextClassification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAction](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#addAction(android.app.RemoteAction))
        ///
        /// Required features: "android-app-RemoteAction", "android-view-textclassifier-TextClassification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-RemoteAction", feature = "android-view-textclassifier-TextClassification_Builder")))]
        pub fn addAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::RemoteAction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "addAction", .descriptor == "(Landroid/app/RemoteAction;)Landroid/view/textclassifier/TextClassification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "addAction\0", "(Landroid/app/RemoteAction;)Landroid/view/textclassifier/TextClassification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIcon](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#setIcon(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable", "android-view-textclassifier-TextClassification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable", feature = "android-view-textclassifier-TextClassification_Builder")))]
        #[deprecated] pub fn setIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "setIcon", .descriptor == "(Landroid/graphics/drawable/Drawable;)Landroid/view/textclassifier/TextClassification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "setIcon\0", "(Landroid/graphics/drawable/Drawable;)Landroid/view/textclassifier/TextClassification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLabel](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#setLabel(java.lang.String))
        ///
        /// Required features: "android-view-textclassifier-TextClassification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-view-textclassifier-TextClassification_Builder", feature = "java-lang-String")))]
        #[deprecated] pub fn setLabel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "setLabel", .descriptor == "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "setLabel\0", "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIntent](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#setIntent(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-view-textclassifier-TextClassification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-view-textclassifier-TextClassification_Builder")))]
        #[deprecated] pub fn setIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "setIntent", .descriptor == "(Landroid/content/Intent;)Landroid/view/textclassifier/TextClassification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "setIntent\0", "(Landroid/content/Intent;)Landroid/view/textclassifier/TextClassification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnClickListener](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#setOnClickListener(android.view.View.OnClickListener))
        ///
        /// Required features: "android-view-View_OnClickListener", "android-view-textclassifier-TextClassification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-view-View_OnClickListener", feature = "android-view-textclassifier-TextClassification_Builder")))]
        #[deprecated] pub fn setOnClickListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View_OnClickListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "setOnClickListener", .descriptor == "(Landroid/view/View$OnClickListener;)Landroid/view/textclassifier/TextClassification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "setOnClickListener\0", "(Landroid/view/View$OnClickListener;)Landroid/view/textclassifier/TextClassification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setId](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#setId(java.lang.String))
        ///
        /// Required features: "android-view-textclassifier-TextClassification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-view-textclassifier-TextClassification_Builder", feature = "java-lang-String")))]
        pub fn setId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "setId", .descriptor == "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "setId\0", "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setExtras](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#setExtras(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-view-textclassifier-TextClassification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-view-textclassifier-TextClassification_Builder")))]
        pub fn setExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "setExtras", .descriptor == "(Landroid/os/Bundle;)Landroid/view/textclassifier/TextClassification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "setExtras\0", "(Landroid/os/Bundle;)Landroid/view/textclassifier/TextClassification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/view/textclassifier/TextClassification.Builder.html#build())
        ///
        /// Required features: "android-view-textclassifier-TextClassification"
        #[cfg(any(feature = "all", all(feature = "android-view-textclassifier-TextClassification")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textclassifier::TextClassification>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textclassifier/TextClassification$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/view/textclassifier/TextClassification;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textclassifier/TextClassification$Builder\0", "build\0", "()Landroid/view/textclassifier/TextClassification;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
