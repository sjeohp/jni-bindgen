// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-inputmethod-InputMethod"))]
__jni_bindgen! {
    /// public interface [InputMethod](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html)
    ///
    /// Required feature: android-view-inputmethod-InputMethod
    public interface InputMethod ("android/view/inputmethod/InputMethod") extends crate::java::lang::Object {

        /// [attachToken](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#attachToken(android.os.IBinder))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn attachToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "attachToken", .descriptor == "(Landroid/os/IBinder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "attachToken\0", "(Landroid/os/IBinder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindInput](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#bindInput(android.view.inputmethod.InputBinding))
        ///
        /// Required features: "android-view-inputmethod-InputBinding"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputBinding")))]
        pub fn bindInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputBinding>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "bindInput", .descriptor == "(Landroid/view/inputmethod/InputBinding;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "bindInput\0", "(Landroid/view/inputmethod/InputBinding;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unbindInput](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#unbindInput())
        pub fn unbindInput<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "unbindInput", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "unbindInput\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startInput](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#startInput(android.view.inputmethod.InputConnection,%20android.view.inputmethod.EditorInfo))
        ///
        /// Required features: "android-view-inputmethod-EditorInfo", "android-view-inputmethod-InputConnection"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-EditorInfo", feature = "android-view-inputmethod-InputConnection")))]
        pub fn startInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputConnection>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::EditorInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "startInput", .descriptor == "(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "startInput\0", "(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restartInput](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#restartInput(android.view.inputmethod.InputConnection,%20android.view.inputmethod.EditorInfo))
        ///
        /// Required features: "android-view-inputmethod-EditorInfo", "android-view-inputmethod-InputConnection"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-EditorInfo", feature = "android-view-inputmethod-InputConnection")))]
        pub fn restartInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputConnection>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::EditorInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "restartInput", .descriptor == "(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "restartInput\0", "(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSession](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#createSession(android.view.inputmethod.InputMethod.SessionCallback))
        ///
        /// Required features: "android-view-inputmethod-InputMethod_SessionCallback"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethod_SessionCallback")))]
        pub fn createSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputMethod_SessionCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "createSession", .descriptor == "(Landroid/view/inputmethod/InputMethod$SessionCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "createSession\0", "(Landroid/view/inputmethod/InputMethod$SessionCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSessionEnabled](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#setSessionEnabled(android.view.inputmethod.InputMethodSession,%20boolean))
        ///
        /// Required features: "android-view-inputmethod-InputMethodSession"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethodSession")))]
        pub fn setSessionEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputMethodSession>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "setSessionEnabled", .descriptor == "(Landroid/view/inputmethod/InputMethodSession;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "setSessionEnabled\0", "(Landroid/view/inputmethod/InputMethodSession;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [revokeSession](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#revokeSession(android.view.inputmethod.InputMethodSession))
        ///
        /// Required features: "android-view-inputmethod-InputMethodSession"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethodSession")))]
        pub fn revokeSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputMethodSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "revokeSession", .descriptor == "(Landroid/view/inputmethod/InputMethodSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "revokeSession\0", "(Landroid/view/inputmethod/InputMethodSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showSoftInput](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#showSoftInput(int,%20android.os.ResultReceiver))
        ///
        /// Required features: "android-os-ResultReceiver"
        #[cfg(any(feature = "all", all(feature = "android-os-ResultReceiver")))]
        pub fn showSoftInput<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ResultReceiver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "showSoftInput", .descriptor == "(ILandroid/os/ResultReceiver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "showSoftInput\0", "(ILandroid/os/ResultReceiver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hideSoftInput](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#hideSoftInput(int,%20android.os.ResultReceiver))
        ///
        /// Required features: "android-os-ResultReceiver"
        #[cfg(any(feature = "all", all(feature = "android-os-ResultReceiver")))]
        pub fn hideSoftInput<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ResultReceiver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "hideSoftInput", .descriptor == "(ILandroid/os/ResultReceiver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "hideSoftInput\0", "(ILandroid/os/ResultReceiver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [changeInputMethodSubtype](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype))
        ///
        /// Required features: "android-view-inputmethod-InputMethodSubtype"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethodSubtype")))]
        pub fn changeInputMethodSubtype<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputMethodSubtype>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethod", java.flags == PUBLIC | ABSTRACT, .name == "changeInputMethodSubtype", .descriptor == "(Landroid/view/inputmethod/InputMethodSubtype;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethod\0", "changeInputMethodSubtype\0", "(Landroid/view/inputmethod/InputMethodSubtype;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SERVICE_INTERFACE](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#SERVICE_INTERFACE)
        pub const SERVICE_INTERFACE : &'static str = "android.view.InputMethod";

        /// public static final [SERVICE_META_DATA](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#SERVICE_META_DATA)
        pub const SERVICE_META_DATA : &'static str = "android.view.im";

        /// public static final [SHOW_EXPLICIT](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#SHOW_EXPLICIT)
        pub const SHOW_EXPLICIT : i32 = 1;

        /// public static final [SHOW_FORCED](https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#SHOW_FORCED)
        pub const SHOW_FORCED : i32 = 2;
    }
}
