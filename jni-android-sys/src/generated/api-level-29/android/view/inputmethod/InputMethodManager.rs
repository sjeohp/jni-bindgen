// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-inputmethod-InputMethodManager"))]
__jni_bindgen! {
    /// public final class [InputMethodManager](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html)
    ///
    /// Required feature: android-view-inputmethod-InputMethodManager
    public final class InputMethodManager ("android/view/inputmethod/InputMethodManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [InputMethodManager](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#InputMethodManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::inputmethod::InputMethodManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/inputmethod/InputMethodManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInputMethodList](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getInputMethodList())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getInputMethodList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "getInputMethodList", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "getInputMethodList\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEnabledInputMethodList](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getEnabledInputMethodList())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getEnabledInputMethodList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "getEnabledInputMethodList", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "getEnabledInputMethodList\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEnabledInputMethodSubtypeList](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,%20boolean))
        ///
        /// Required features: "android-view-inputmethod-InputMethodInfo", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethodInfo", feature = "java-util-List")))]
        pub fn getEnabledInputMethodSubtypeList<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputMethodInfo>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "getEnabledInputMethodSubtypeList", .descriptor == "(Landroid/view/inputmethod/InputMethodInfo;Z)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "getEnabledInputMethodSubtypeList\0", "(Landroid/view/inputmethod/InputMethodInfo;Z)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showStatusIcon](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showStatusIcon(android.os.IBinder,%20java.lang.String,%20int))
        ///
        /// Required features: "android-os-IBinder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder", feature = "java-lang-String")))]
        #[deprecated] pub fn showStatusIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "showStatusIcon", .descriptor == "(Landroid/os/IBinder;Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "showStatusIcon\0", "(Landroid/os/IBinder;Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hideStatusIcon](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideStatusIcon(android.os.IBinder))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        #[deprecated] pub fn hideStatusIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "hideStatusIcon", .descriptor == "(Landroid/os/IBinder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "hideStatusIcon\0", "(Landroid/os/IBinder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFullscreenMode](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isFullscreenMode())
        pub fn isFullscreenMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "isFullscreenMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "isFullscreenMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActive](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isActive(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn isActive_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "isActive", .descriptor == "(Landroid/view/View;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "isActive\0", "(Landroid/view/View;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActive](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isActive())
        pub fn isActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "isActive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "isActive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAcceptingText](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isAcceptingText())
        pub fn isAcceptingText<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "isAcceptingText", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "isAcceptingText\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [displayCompletions](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#displayCompletions(android.view.View,%20android.view.inputmethod.CompletionInfo%5B%5D))
        ///
        /// Required features: "android-view-View", "android-view-inputmethod-CompletionInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-inputmethod-CompletionInfo")))]
        pub fn displayCompletions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::view::inputmethod::CompletionInfo, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "displayCompletions", .descriptor == "(Landroid/view/View;[Landroid/view/inputmethod/CompletionInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "displayCompletions\0", "(Landroid/view/View;[Landroid/view/inputmethod/CompletionInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateExtractedText](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#updateExtractedText(android.view.View,%20int,%20android.view.inputmethod.ExtractedText))
        ///
        /// Required features: "android-view-View", "android-view-inputmethod-ExtractedText"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-inputmethod-ExtractedText")))]
        pub fn updateExtractedText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::ExtractedText>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "updateExtractedText", .descriptor == "(Landroid/view/View;ILandroid/view/inputmethod/ExtractedText;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "updateExtractedText\0", "(Landroid/view/View;ILandroid/view/inputmethod/ExtractedText;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showSoftInput](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showSoftInput(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn showSoftInput_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "showSoftInput", .descriptor == "(Landroid/view/View;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "showSoftInput\0", "(Landroid/view/View;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showSoftInput](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showSoftInput(android.view.View,%20int,%20android.os.ResultReceiver))
        ///
        /// Required features: "android-os-ResultReceiver", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-os-ResultReceiver", feature = "android-view-View")))]
        pub fn showSoftInput_View_int_ResultReceiver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ResultReceiver>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "showSoftInput", .descriptor == "(Landroid/view/View;ILandroid/os/ResultReceiver;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "showSoftInput\0", "(Landroid/view/View;ILandroid/os/ResultReceiver;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hideSoftInputFromWindow](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideSoftInputFromWindow(android.os.IBinder,%20int))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn hideSoftInputFromWindow_IBinder_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "hideSoftInputFromWindow", .descriptor == "(Landroid/os/IBinder;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "hideSoftInputFromWindow\0", "(Landroid/os/IBinder;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hideSoftInputFromWindow](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideSoftInputFromWindow(android.os.IBinder,%20int,%20android.os.ResultReceiver))
        ///
        /// Required features: "android-os-IBinder", "android-os-ResultReceiver"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder", feature = "android-os-ResultReceiver")))]
        pub fn hideSoftInputFromWindow_IBinder_int_ResultReceiver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ResultReceiver>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "hideSoftInputFromWindow", .descriptor == "(Landroid/os/IBinder;ILandroid/os/ResultReceiver;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "hideSoftInputFromWindow\0", "(Landroid/os/IBinder;ILandroid/os/ResultReceiver;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toggleSoftInputFromWindow](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#toggleSoftInputFromWindow(android.os.IBinder,%20int,%20int))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn toggleSoftInputFromWindow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "toggleSoftInputFromWindow", .descriptor == "(Landroid/os/IBinder;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "toggleSoftInputFromWindow\0", "(Landroid/os/IBinder;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toggleSoftInput](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#toggleSoftInput(int,%20int))
        pub fn toggleSoftInput<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "toggleSoftInput", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "toggleSoftInput\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restartInput](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#restartInput(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn restartInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "restartInput", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "restartInput\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateSelection](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#updateSelection(android.view.View,%20int,%20int,%20int,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn updateSelection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "updateSelection", .descriptor == "(Landroid/view/View;IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "updateSelection\0", "(Landroid/view/View;IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [viewClicked](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#viewClicked(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        #[deprecated] pub fn viewClicked<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "viewClicked", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "viewClicked\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWatchingCursor](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isWatchingCursor(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        #[deprecated] pub fn isWatchingCursor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "isWatchingCursor", .descriptor == "(Landroid/view/View;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "isWatchingCursor\0", "(Landroid/view/View;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCursor](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#updateCursor(android.view.View,%20int,%20int,%20int,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        #[deprecated] pub fn updateCursor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "updateCursor", .descriptor == "(Landroid/view/View;IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "updateCursor\0", "(Landroid/view/View;IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCursorAnchorInfo](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#updateCursorAnchorInfo(android.view.View,%20android.view.inputmethod.CursorAnchorInfo))
        ///
        /// Required features: "android-view-View", "android-view-inputmethod-CursorAnchorInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-inputmethod-CursorAnchorInfo")))]
        pub fn updateCursorAnchorInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::CursorAnchorInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "updateCursorAnchorInfo", .descriptor == "(Landroid/view/View;Landroid/view/inputmethod/CursorAnchorInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "updateCursorAnchorInfo\0", "(Landroid/view/View;Landroid/view/inputmethod/CursorAnchorInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendAppPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#sendAppPrivateCommand(android.view.View,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-view-View", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-view-View", feature = "java-lang-String")))]
        pub fn sendAppPrivateCommand<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "sendAppPrivateCommand", .descriptor == "(Landroid/view/View;Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "sendAppPrivateCommand\0", "(Landroid/view/View;Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputMethod](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setInputMethod(android.os.IBinder,%20java.lang.String))
        ///
        /// Required features: "android-os-IBinder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder", feature = "java-lang-String")))]
        #[deprecated] pub fn setInputMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "setInputMethod", .descriptor == "(Landroid/os/IBinder;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "setInputMethod\0", "(Landroid/os/IBinder;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputMethodAndSubtype](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setInputMethodAndSubtype(android.os.IBinder,%20java.lang.String,%20android.view.inputmethod.InputMethodSubtype))
        ///
        /// Required features: "android-os-IBinder", "android-view-inputmethod-InputMethodSubtype", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder", feature = "android-view-inputmethod-InputMethodSubtype", feature = "java-lang-String")))]
        #[deprecated] pub fn setInputMethodAndSubtype<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputMethodSubtype>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "setInputMethodAndSubtype", .descriptor == "(Landroid/os/IBinder;Ljava/lang/String;Landroid/view/inputmethod/InputMethodSubtype;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "setInputMethodAndSubtype\0", "(Landroid/os/IBinder;Ljava/lang/String;Landroid/view/inputmethod/InputMethodSubtype;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hideSoftInputFromInputMethod](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideSoftInputFromInputMethod(android.os.IBinder,%20int))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        #[deprecated] pub fn hideSoftInputFromInputMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "hideSoftInputFromInputMethod", .descriptor == "(Landroid/os/IBinder;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "hideSoftInputFromInputMethod\0", "(Landroid/os/IBinder;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showSoftInputFromInputMethod](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showSoftInputFromInputMethod(android.os.IBinder,%20int))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        #[deprecated] pub fn showSoftInputFromInputMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "showSoftInputFromInputMethod", .descriptor == "(Landroid/os/IBinder;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "showSoftInputFromInputMethod\0", "(Landroid/os/IBinder;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchKeyEventFromInputMethod](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#dispatchKeyEventFromInputMethod(android.view.View,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent", feature = "android-view-View")))]
        pub fn dispatchKeyEventFromInputMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "dispatchKeyEventFromInputMethod", .descriptor == "(Landroid/view/View;Landroid/view/KeyEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "dispatchKeyEventFromInputMethod\0", "(Landroid/view/View;Landroid/view/KeyEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showInputMethodPicker](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showInputMethodPicker())
        pub fn showInputMethodPicker<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "showInputMethodPicker", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "showInputMethodPicker\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showInputMethodAndSubtypeEnabler](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showInputMethodAndSubtypeEnabler(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn showInputMethodAndSubtypeEnabler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "showInputMethodAndSubtypeEnabler", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "showInputMethodAndSubtypeEnabler\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentInputMethodSubtype](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getCurrentInputMethodSubtype())
        ///
        /// Required features: "android-view-inputmethod-InputMethodSubtype"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethodSubtype")))]
        pub fn getCurrentInputMethodSubtype<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::inputmethod::InputMethodSubtype>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "getCurrentInputMethodSubtype", .descriptor == "()Landroid/view/inputmethod/InputMethodSubtype;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "getCurrentInputMethodSubtype\0", "()Landroid/view/inputmethod/InputMethodSubtype;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCurrentInputMethodSubtype](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype))
        ///
        /// Required features: "android-view-inputmethod-InputMethodSubtype"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethodSubtype")))]
        #[deprecated] pub fn setCurrentInputMethodSubtype<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputMethodSubtype>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "setCurrentInputMethodSubtype", .descriptor == "(Landroid/view/inputmethod/InputMethodSubtype;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "setCurrentInputMethodSubtype\0", "(Landroid/view/inputmethod/InputMethodSubtype;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShortcutInputMethodsAndSubtypes](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getShortcutInputMethodsAndSubtypes())
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn getShortcutInputMethodsAndSubtypes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "getShortcutInputMethodsAndSubtypes", .descriptor == "()Ljava/util/Map;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "getShortcutInputMethodsAndSubtypes\0", "()Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [switchToLastInputMethod](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#switchToLastInputMethod(android.os.IBinder))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        #[deprecated] pub fn switchToLastInputMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "switchToLastInputMethod", .descriptor == "(Landroid/os/IBinder;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "switchToLastInputMethod\0", "(Landroid/os/IBinder;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [switchToNextInputMethod](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#switchToNextInputMethod(android.os.IBinder,%20boolean))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        #[deprecated] pub fn switchToNextInputMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "switchToNextInputMethod", .descriptor == "(Landroid/os/IBinder;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "switchToNextInputMethod\0", "(Landroid/os/IBinder;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shouldOfferSwitchingToNextInputMethod](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#shouldOfferSwitchingToNextInputMethod(android.os.IBinder))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        #[deprecated] pub fn shouldOfferSwitchingToNextInputMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "shouldOfferSwitchingToNextInputMethod", .descriptor == "(Landroid/os/IBinder;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "shouldOfferSwitchingToNextInputMethod\0", "(Landroid/os/IBinder;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAdditionalInputMethodSubtypes](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setAdditionalInputMethodSubtypes(java.lang.String,%20android.view.inputmethod.InputMethodSubtype%5B%5D))
        ///
        /// Required features: "android-view-inputmethod-InputMethodSubtype", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethodSubtype", feature = "java-lang-String")))]
        #[deprecated] pub fn setAdditionalInputMethodSubtypes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::view::inputmethod::InputMethodSubtype, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "setAdditionalInputMethodSubtypes", .descriptor == "(Ljava/lang/String;[Landroid/view/inputmethod/InputMethodSubtype;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "setAdditionalInputMethodSubtypes\0", "(Ljava/lang/String;[Landroid/view/inputmethod/InputMethodSubtype;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLastInputMethodSubtype](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getLastInputMethodSubtype())
        ///
        /// Required features: "android-view-inputmethod-InputMethodSubtype"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethodSubtype")))]
        pub fn getLastInputMethodSubtype<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::inputmethod::InputMethodSubtype>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/inputmethod/InputMethodManager", java.flags == PUBLIC, .name == "getLastInputMethodSubtype", .descriptor == "()Landroid/view/inputmethod/InputMethodSubtype;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/inputmethod/InputMethodManager\0", "getLastInputMethodSubtype\0", "()Landroid/view/inputmethod/InputMethodSubtype;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [HIDE_IMPLICIT_ONLY](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#HIDE_IMPLICIT_ONLY)
        pub const HIDE_IMPLICIT_ONLY : i32 = 1;

        /// public static final [HIDE_NOT_ALWAYS](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#HIDE_NOT_ALWAYS)
        pub const HIDE_NOT_ALWAYS : i32 = 2;

        /// public static final [RESULT_HIDDEN](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#RESULT_HIDDEN)
        pub const RESULT_HIDDEN : i32 = 3;

        /// public static final [RESULT_SHOWN](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#RESULT_SHOWN)
        pub const RESULT_SHOWN : i32 = 2;

        /// public static final [RESULT_UNCHANGED_HIDDEN](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#RESULT_UNCHANGED_HIDDEN)
        pub const RESULT_UNCHANGED_HIDDEN : i32 = 1;

        /// public static final [RESULT_UNCHANGED_SHOWN](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#RESULT_UNCHANGED_SHOWN)
        pub const RESULT_UNCHANGED_SHOWN : i32 = 0;

        /// public static final [SHOW_FORCED](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#SHOW_FORCED)
        pub const SHOW_FORCED : i32 = 2;

        /// public static final [SHOW_IMPLICIT](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#SHOW_IMPLICIT)
        pub const SHOW_IMPLICIT : i32 = 1;
    }
}
