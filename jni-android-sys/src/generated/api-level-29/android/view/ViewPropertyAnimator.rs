// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-ViewPropertyAnimator"))]
__jni_bindgen! {
    /// public class [ViewPropertyAnimator](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html)
    ///
    /// Required feature: android-view-ViewPropertyAnimator
    public class ViewPropertyAnimator ("android/view/ViewPropertyAnimator") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ViewPropertyAnimator](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#ViewPropertyAnimator(android.view.View))
        // ///
        // /// Required features: "android-view-View"
        // #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/ViewPropertyAnimator", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/view/View;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "<init>\0", "(Landroid/view/View;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setDuration](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#setDuration(long))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn setDuration<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "setDuration", .descriptor == "(J)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "setDuration\0", "(J)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDuration](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#getDuration())
        pub fn getDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "getDuration", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "getDuration\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStartDelay](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#getStartDelay())
        pub fn getStartDelay<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "getStartDelay", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "getStartDelay\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStartDelay](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#setStartDelay(long))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn setStartDelay<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "setStartDelay", .descriptor == "(J)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "setStartDelay\0", "(J)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInterpolator](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#setInterpolator(android.animation.TimeInterpolator))
        ///
        /// Required features: "android-animation-TimeInterpolator", "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-TimeInterpolator", feature = "android-view-ViewPropertyAnimator")))]
        pub fn setInterpolator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TimeInterpolator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "setInterpolator", .descriptor == "(Landroid/animation/TimeInterpolator;)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "setInterpolator\0", "(Landroid/animation/TimeInterpolator;)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInterpolator](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#getInterpolator())
        ///
        /// Required features: "android-animation-TimeInterpolator"
        #[cfg(any(feature = "all", all(feature = "android-animation-TimeInterpolator")))]
        pub fn getInterpolator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::TimeInterpolator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "getInterpolator", .descriptor == "()Landroid/animation/TimeInterpolator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "getInterpolator\0", "()Landroid/animation/TimeInterpolator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setListener](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#setListener(android.animation.Animator.AnimatorListener))
        ///
        /// Required features: "android-animation-Animator_AnimatorListener", "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator_AnimatorListener", feature = "android-view-ViewPropertyAnimator")))]
        pub fn setListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator_AnimatorListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "setListener", .descriptor == "(Landroid/animation/Animator$AnimatorListener;)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "setListener\0", "(Landroid/animation/Animator$AnimatorListener;)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUpdateListener](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#setUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener))
        ///
        /// Required features: "android-animation-ValueAnimator_AnimatorUpdateListener", "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-ValueAnimator_AnimatorUpdateListener", feature = "android-view-ViewPropertyAnimator")))]
        pub fn setUpdateListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::ValueAnimator_AnimatorUpdateListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "setUpdateListener", .descriptor == "(Landroid/animation/ValueAnimator$AnimatorUpdateListener;)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "setUpdateListener\0", "(Landroid/animation/ValueAnimator$AnimatorUpdateListener;)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#start())
        pub fn start<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "start", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "start\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancel](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#cancel())
        pub fn cancel<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "cancel", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "cancel\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [x](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#x(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn x<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "x", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "x\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [xBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#xBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn xBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "xBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "xBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [y](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#y(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn y<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "y", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "y\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [yBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#yBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn yBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "yBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "yBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [z](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#z(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn z<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "z", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "z\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [zBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#zBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn zBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "zBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "zBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rotation](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#rotation(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn rotation<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "rotation", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "rotation\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rotationBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#rotationBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn rotationBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "rotationBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "rotationBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rotationX](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#rotationX(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn rotationX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "rotationX", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "rotationX\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rotationXBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#rotationXBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn rotationXBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "rotationXBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "rotationXBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rotationY](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#rotationY(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn rotationY<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "rotationY", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "rotationY\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rotationYBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#rotationYBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn rotationYBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "rotationYBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "rotationYBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [translationX](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#translationX(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn translationX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "translationX", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "translationX\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [translationXBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#translationXBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn translationXBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "translationXBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "translationXBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [translationY](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#translationY(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn translationY<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "translationY", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "translationY\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [translationYBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#translationYBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn translationYBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "translationYBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "translationYBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [translationZ](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#translationZ(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn translationZ<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "translationZ", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "translationZ\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [translationZBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#translationZBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn translationZBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "translationZBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "translationZBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scaleX](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#scaleX(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn scaleX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "scaleX", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "scaleX\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scaleXBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#scaleXBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn scaleXBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "scaleXBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "scaleXBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scaleY](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#scaleY(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn scaleY<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "scaleY", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "scaleY\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scaleYBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#scaleYBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn scaleYBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "scaleYBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "scaleYBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [alpha](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#alpha(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn alpha<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "alpha", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "alpha\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [alphaBy](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#alphaBy(float))
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn alphaBy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "alphaBy", .descriptor == "(F)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "alphaBy\0", "(F)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withLayer](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#withLayer())
        ///
        /// Required features: "android-view-ViewPropertyAnimator"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator")))]
        pub fn withLayer<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "withLayer", .descriptor == "()Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "withLayer\0", "()Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withStartAction](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#withStartAction(java.lang.Runnable))
        ///
        /// Required features: "android-view-ViewPropertyAnimator", "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator", feature = "java-lang-Runnable")))]
        pub fn withStartAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "withStartAction", .descriptor == "(Ljava/lang/Runnable;)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "withStartAction\0", "(Ljava/lang/Runnable;)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withEndAction](https://developer.android.com/reference/android/view/ViewPropertyAnimator.html#withEndAction(java.lang.Runnable))
        ///
        /// Required features: "android-view-ViewPropertyAnimator", "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewPropertyAnimator", feature = "java-lang-Runnable")))]
        pub fn withEndAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewPropertyAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewPropertyAnimator", java.flags == PUBLIC, .name == "withEndAction", .descriptor == "(Ljava/lang/Runnable;)Landroid/view/ViewPropertyAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewPropertyAnimator\0", "withEndAction\0", "(Ljava/lang/Runnable;)Landroid/view/ViewPropertyAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
