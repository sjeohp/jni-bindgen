// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-telephony-data-ApnSetting"))]
__jni_bindgen! {
    /// public class [ApnSetting](https://developer.android.com/reference/android/telephony/data/ApnSetting.html)
    ///
    /// Required feature: android-telephony-data-ApnSetting
    public class ApnSetting ("android/telephony/data/ApnSetting") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [ApnSetting](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#ApnSetting(android.telephony.data.ApnSetting.Builder))
        // ///
        // /// Required features: "android-telephony-data-ApnSetting_Builder"
        // #[cfg(any(feature = "all", all(feature = "android-telephony-data-ApnSetting_Builder")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::data::ApnSetting_Builder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::telephony::data::ApnSetting>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/telephony/data/ApnSetting", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/telephony/data/ApnSetting$Builder;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "<init>\0", "(Landroid/telephony/data/ApnSetting$Builder;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getEntryName](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getEntryName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getEntryName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getEntryName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getEntryName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApnName](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getApnName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getApnName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getApnName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getApnName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProxyAddress](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getProxyAddress())
        ///
        /// Required features: "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress")))]
        #[deprecated] pub fn getProxyAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::InetAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getProxyAddress", .descriptor == "()Ljava/net/InetAddress;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getProxyAddress\0", "()Ljava/net/InetAddress;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProxyAddressAsString](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getProxyAddressAsString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getProxyAddressAsString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getProxyAddressAsString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getProxyAddressAsString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProxyPort](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getProxyPort())
        pub fn getProxyPort<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getProxyPort", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getProxyPort\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMmsc](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getMmsc())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getMmsc<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getMmsc", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getMmsc\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMmsProxyAddress](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getMmsProxyAddress())
        ///
        /// Required features: "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress")))]
        #[deprecated] pub fn getMmsProxyAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::InetAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getMmsProxyAddress", .descriptor == "()Ljava/net/InetAddress;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getMmsProxyAddress\0", "()Ljava/net/InetAddress;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMmsProxyAddressAsString](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getMmsProxyAddressAsString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMmsProxyAddressAsString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getMmsProxyAddressAsString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getMmsProxyAddressAsString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMmsProxyPort](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getMmsProxyPort())
        pub fn getMmsProxyPort<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getMmsProxyPort", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getMmsProxyPort\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUser](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getUser())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getUser<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getUser", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getUser\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPassword](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getPassword())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPassword<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getPassword", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getPassword\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAuthType](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getAuthType())
        pub fn getAuthType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getAuthType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getAuthType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApnTypeBitmask](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getApnTypeBitmask())
        pub fn getApnTypeBitmask<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getApnTypeBitmask", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getApnTypeBitmask\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getId](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getId())
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOperatorNumeric](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getOperatorNumeric())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getOperatorNumeric<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getOperatorNumeric", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getOperatorNumeric\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProtocol](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getProtocol())
        pub fn getProtocol<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getProtocol", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getProtocol\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRoamingProtocol](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getRoamingProtocol())
        pub fn getRoamingProtocol<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getRoamingProtocol", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getRoamingProtocol\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnabled](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkTypeBitmask](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getNetworkTypeBitmask())
        pub fn getNetworkTypeBitmask<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getNetworkTypeBitmask", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getNetworkTypeBitmask\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMvnoType](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getMvnoType())
        pub fn getMvnoType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getMvnoType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getMvnoType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCarrierId](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#getCarrierId())
        pub fn getCarrierId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "getCarrierId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "getCarrierId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/data/ApnSetting", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/data/ApnSetting\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [AUTH_TYPE_CHAP](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#AUTH_TYPE_CHAP)
        pub const AUTH_TYPE_CHAP : i32 = 2;

        /// public static final [AUTH_TYPE_NONE](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#AUTH_TYPE_NONE)
        pub const AUTH_TYPE_NONE : i32 = 0;

        /// public static final [AUTH_TYPE_PAP](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#AUTH_TYPE_PAP)
        pub const AUTH_TYPE_PAP : i32 = 1;

        /// public static final [AUTH_TYPE_PAP_OR_CHAP](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#AUTH_TYPE_PAP_OR_CHAP)
        pub const AUTH_TYPE_PAP_OR_CHAP : i32 = 3;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/telephony/data/ApnSetting\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [MVNO_TYPE_GID](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#MVNO_TYPE_GID)
        pub const MVNO_TYPE_GID : i32 = 2;

        /// public static final [MVNO_TYPE_ICCID](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#MVNO_TYPE_ICCID)
        pub const MVNO_TYPE_ICCID : i32 = 3;

        /// public static final [MVNO_TYPE_IMSI](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#MVNO_TYPE_IMSI)
        pub const MVNO_TYPE_IMSI : i32 = 1;

        /// public static final [MVNO_TYPE_SPN](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#MVNO_TYPE_SPN)
        pub const MVNO_TYPE_SPN : i32 = 0;

        /// public static final [PROTOCOL_IP](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#PROTOCOL_IP)
        pub const PROTOCOL_IP : i32 = 0;

        /// public static final [PROTOCOL_IPV4V6](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#PROTOCOL_IPV4V6)
        pub const PROTOCOL_IPV4V6 : i32 = 2;

        /// public static final [PROTOCOL_IPV6](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#PROTOCOL_IPV6)
        pub const PROTOCOL_IPV6 : i32 = 1;

        /// public static final [PROTOCOL_NON_IP](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#PROTOCOL_NON_IP)
        pub const PROTOCOL_NON_IP : i32 = 4;

        /// public static final [PROTOCOL_PPP](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#PROTOCOL_PPP)
        pub const PROTOCOL_PPP : i32 = 3;

        /// public static final [PROTOCOL_UNSTRUCTURED](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#PROTOCOL_UNSTRUCTURED)
        pub const PROTOCOL_UNSTRUCTURED : i32 = 5;

        /// public static final [TYPE_CBS](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_CBS)
        pub const TYPE_CBS : i32 = 128;

        /// public static final [TYPE_DEFAULT](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_DEFAULT)
        pub const TYPE_DEFAULT : i32 = 17;

        /// public static final [TYPE_DUN](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_DUN)
        pub const TYPE_DUN : i32 = 8;

        /// public static final [TYPE_EMERGENCY](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_EMERGENCY)
        pub const TYPE_EMERGENCY : i32 = 512;

        /// public static final [TYPE_FOTA](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_FOTA)
        pub const TYPE_FOTA : i32 = 32;

        /// public static final [TYPE_HIPRI](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_HIPRI)
        pub const TYPE_HIPRI : i32 = 16;

        /// public static final [TYPE_IA](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_IA)
        pub const TYPE_IA : i32 = 256;

        /// public static final [TYPE_IMS](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_IMS)
        pub const TYPE_IMS : i32 = 64;

        /// public static final [TYPE_MCX](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_MCX)
        pub const TYPE_MCX : i32 = 1024;

        /// public static final [TYPE_MMS](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_MMS)
        pub const TYPE_MMS : i32 = 2;

        /// public static final [TYPE_SUPL](https://developer.android.com/reference/android/telephony/data/ApnSetting.html#TYPE_SUPL)
        pub const TYPE_SUPL : i32 = 4;
    }
}
