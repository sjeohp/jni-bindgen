// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-telephony-SmsManager"))]
__jni_bindgen! {
    /// public final class [SmsManager](https://developer.android.com/reference/android/telephony/SmsManager.html)
    ///
    /// Required feature: android-telephony-SmsManager
    public final class SmsManager ("android/telephony/SmsManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SmsManager](https://developer.android.com/reference/android/telephony/SmsManager.html#SmsManager(int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::telephony::SmsManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/telephony/SmsManager", java.flags == (empty), .name == "<init>", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "<init>\0", "(I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [sendTextMessage](https://developer.android.com/reference/android/telephony/SmsManager.html#sendTextMessage(java.lang.String,%20java.lang.String,%20java.lang.String,%20android.app.PendingIntent,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-String")))]
        pub fn sendTextMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "sendTextMessage", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "sendTextMessage\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendTextMessageWithoutPersisting](https://developer.android.com/reference/android/telephony/SmsManager.html#sendTextMessageWithoutPersisting(java.lang.String,%20java.lang.String,%20java.lang.String,%20android.app.PendingIntent,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-String")))]
        pub fn sendTextMessageWithoutPersisting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "sendTextMessageWithoutPersisting", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "sendTextMessageWithoutPersisting\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [injectSmsPdu](https://developer.android.com/reference/android/telephony/SmsManager.html#injectSmsPdu(byte%5B%5D,%20java.lang.String,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-String")))]
        pub fn injectSmsPdu<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "injectSmsPdu", .descriptor == "([BLjava/lang/String;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "injectSmsPdu\0", "([BLjava/lang/String;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [divideMessage](https://developer.android.com/reference/android/telephony/SmsManager.html#divideMessage(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-ArrayList")))]
        pub fn divideMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::ArrayList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "divideMessage", .descriptor == "(Ljava/lang/String;)Ljava/util/ArrayList;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "divideMessage\0", "(Ljava/lang/String;)Ljava/util/ArrayList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendMultipartTextMessage](https://developer.android.com/reference/android/telephony/SmsManager.html#sendMultipartTextMessage(java.lang.String,%20java.lang.String,%20java.util.ArrayList,%20java.util.ArrayList,%20java.util.ArrayList))
        ///
        /// Required features: "java-lang-String", "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-ArrayList")))]
        pub fn sendMultipartTextMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "sendMultipartTextMessage", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "sendMultipartTextMessage\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendDataMessage](https://developer.android.com/reference/android/telephony/SmsManager.html#sendDataMessage(java.lang.String,%20java.lang.String,%20short,%20byte%5B%5D,%20android.app.PendingIntent,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-String")))]
        pub fn sendDataMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i16, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "sendDataMessage", .descriptor == "(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "sendDataMessage\0", "(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefault](https://developer.android.com/reference/android/telephony/SmsManager.html#getDefault())
        ///
        /// Required features: "android-telephony-SmsManager"
        #[cfg(any(feature = "all", all(feature = "android-telephony-SmsManager")))]
        pub fn getDefault<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::SmsManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC | STATIC, .name == "getDefault", .descriptor == "()Landroid/telephony/SmsManager;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/telephony/SmsManager\0", "getDefault\0", "()Landroid/telephony/SmsManager;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSmsManagerForSubscriptionId](https://developer.android.com/reference/android/telephony/SmsManager.html#getSmsManagerForSubscriptionId(int))
        ///
        /// Required features: "android-telephony-SmsManager"
        #[cfg(any(feature = "all", all(feature = "android-telephony-SmsManager")))]
        pub fn getSmsManagerForSubscriptionId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::SmsManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC | STATIC, .name == "getSmsManagerForSubscriptionId", .descriptor == "(I)Landroid/telephony/SmsManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/telephony/SmsManager\0", "getSmsManagerForSubscriptionId\0", "(I)Landroid/telephony/SmsManager;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubscriptionId](https://developer.android.com/reference/android/telephony/SmsManager.html#getSubscriptionId())
        pub fn getSubscriptionId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "getSubscriptionId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "getSubscriptionId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultSmsSubscriptionId](https://developer.android.com/reference/android/telephony/SmsManager.html#getDefaultSmsSubscriptionId())
        pub fn getDefaultSmsSubscriptionId<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC | STATIC, .name == "getDefaultSmsSubscriptionId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/telephony/SmsManager\0", "getDefaultSmsSubscriptionId\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendMultimediaMessage](https://developer.android.com/reference/android/telephony/SmsManager.html#sendMultimediaMessage(android.content.Context,%20android.net.Uri,%20java.lang.String,%20android.os.Bundle,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "android-content-Context", "android-net-Uri", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-content-Context", feature = "android-net-Uri", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn sendMultimediaMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "sendMultimediaMessage", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "sendMultimediaMessage\0", "(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [downloadMultimediaMessage](https://developer.android.com/reference/android/telephony/SmsManager.html#downloadMultimediaMessage(android.content.Context,%20java.lang.String,%20android.net.Uri,%20android.os.Bundle,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "android-content-Context", "android-net-Uri", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-content-Context", feature = "android-net-Uri", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn downloadMultimediaMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "downloadMultimediaMessage", .descriptor == "(Landroid/content/Context;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "downloadMultimediaMessage\0", "(Landroid/content/Context;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCarrierConfigValues](https://developer.android.com/reference/android/telephony/SmsManager.html#getCarrierConfigValues())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getCarrierConfigValues<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "getCarrierConfigValues", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "getCarrierConfigValues\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createAppSpecificSmsToken](https://developer.android.com/reference/android/telephony/SmsManager.html#createAppSpecificSmsToken(android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-String")))]
        pub fn createAppSpecificSmsToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "createAppSpecificSmsToken", .descriptor == "(Landroid/app/PendingIntent;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "createAppSpecificSmsToken\0", "(Landroid/app/PendingIntent;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSmsMessagesForFinancialApp](https://developer.android.com/reference/android/telephony/SmsManager.html#getSmsMessagesForFinancialApp(android.os.Bundle,%20java.util.concurrent.Executor,%20android.telephony.SmsManager.FinancialSmsCallback))
        ///
        /// Required features: "android-os-Bundle", "android-telephony-SmsManager_FinancialSmsCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-telephony-SmsManager_FinancialSmsCallback", feature = "java-util-concurrent-Executor")))]
        pub fn getSmsMessagesForFinancialApp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::SmsManager_FinancialSmsCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "getSmsMessagesForFinancialApp", .descriptor == "(Landroid/os/Bundle;Ljava/util/concurrent/Executor;Landroid/telephony/SmsManager$FinancialSmsCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "getSmsMessagesForFinancialApp\0", "(Landroid/os/Bundle;Ljava/util/concurrent/Executor;Landroid/telephony/SmsManager$FinancialSmsCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createAppSpecificSmsTokenWithPackageInfo](https://developer.android.com/reference/android/telephony/SmsManager.html#createAppSpecificSmsTokenWithPackageInfo(java.lang.String,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-String")))]
        pub fn createAppSpecificSmsTokenWithPackageInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/SmsManager", java.flags == PUBLIC, .name == "createAppSpecificSmsTokenWithPackageInfo", .descriptor == "(Ljava/lang/String;Landroid/app/PendingIntent;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/SmsManager\0", "createAppSpecificSmsTokenWithPackageInfo\0", "(Ljava/lang/String;Landroid/app/PendingIntent;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EXTRA_MMS_DATA](https://developer.android.com/reference/android/telephony/SmsManager.html#EXTRA_MMS_DATA)
        pub const EXTRA_MMS_DATA : &'static str = "android.telephony.extra.MMS_DATA";

        /// public static final [EXTRA_MMS_HTTP_STATUS](https://developer.android.com/reference/android/telephony/SmsManager.html#EXTRA_MMS_HTTP_STATUS)
        pub const EXTRA_MMS_HTTP_STATUS : &'static str = "android.telephony.extra.MMS_HTTP_STATUS";

        /// public static final [MMS_CONFIG_ALIAS_ENABLED](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_ALIAS_ENABLED)
        pub const MMS_CONFIG_ALIAS_ENABLED : &'static str = "aliasEnabled";

        /// public static final [MMS_CONFIG_ALIAS_MAX_CHARS](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_ALIAS_MAX_CHARS)
        pub const MMS_CONFIG_ALIAS_MAX_CHARS : &'static str = "aliasMaxChars";

        /// public static final [MMS_CONFIG_ALIAS_MIN_CHARS](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_ALIAS_MIN_CHARS)
        pub const MMS_CONFIG_ALIAS_MIN_CHARS : &'static str = "aliasMinChars";

        /// public static final [MMS_CONFIG_ALLOW_ATTACH_AUDIO](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_ALLOW_ATTACH_AUDIO)
        pub const MMS_CONFIG_ALLOW_ATTACH_AUDIO : &'static str = "allowAttachAudio";

        /// public static final [MMS_CONFIG_APPEND_TRANSACTION_ID](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_APPEND_TRANSACTION_ID)
        pub const MMS_CONFIG_APPEND_TRANSACTION_ID : &'static str = "enabledTransID";

        /// public static final [MMS_CONFIG_EMAIL_GATEWAY_NUMBER](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_EMAIL_GATEWAY_NUMBER)
        pub const MMS_CONFIG_EMAIL_GATEWAY_NUMBER : &'static str = "emailGatewayNumber";

        /// public static final [MMS_CONFIG_GROUP_MMS_ENABLED](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_GROUP_MMS_ENABLED)
        pub const MMS_CONFIG_GROUP_MMS_ENABLED : &'static str = "enableGroupMms";

        /// public static final [MMS_CONFIG_HTTP_PARAMS](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_HTTP_PARAMS)
        pub const MMS_CONFIG_HTTP_PARAMS : &'static str = "httpParams";

        /// public static final [MMS_CONFIG_HTTP_SOCKET_TIMEOUT](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_HTTP_SOCKET_TIMEOUT)
        pub const MMS_CONFIG_HTTP_SOCKET_TIMEOUT : &'static str = "httpSocketTimeout";

        /// public static final [MMS_CONFIG_MAX_IMAGE_HEIGHT](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MAX_IMAGE_HEIGHT)
        pub const MMS_CONFIG_MAX_IMAGE_HEIGHT : &'static str = "maxImageHeight";

        /// public static final [MMS_CONFIG_MAX_IMAGE_WIDTH](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MAX_IMAGE_WIDTH)
        pub const MMS_CONFIG_MAX_IMAGE_WIDTH : &'static str = "maxImageWidth";

        /// public static final [MMS_CONFIG_MAX_MESSAGE_SIZE](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MAX_MESSAGE_SIZE)
        pub const MMS_CONFIG_MAX_MESSAGE_SIZE : &'static str = "maxMessageSize";

        /// public static final [MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE)
        pub const MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE : &'static str = "maxMessageTextSize";

        /// public static final [MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED)
        pub const MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED : &'static str = "enableMMSDeliveryReports";

        /// public static final [MMS_CONFIG_MMS_ENABLED](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MMS_ENABLED)
        pub const MMS_CONFIG_MMS_ENABLED : &'static str = "enabledMMS";

        /// public static final [MMS_CONFIG_MMS_READ_REPORT_ENABLED](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MMS_READ_REPORT_ENABLED)
        pub const MMS_CONFIG_MMS_READ_REPORT_ENABLED : &'static str = "enableMMSReadReports";

        /// public static final [MMS_CONFIG_MULTIPART_SMS_ENABLED](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MULTIPART_SMS_ENABLED)
        pub const MMS_CONFIG_MULTIPART_SMS_ENABLED : &'static str = "enableMultipartSMS";

        /// public static final [MMS_CONFIG_NAI_SUFFIX](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_NAI_SUFFIX)
        pub const MMS_CONFIG_NAI_SUFFIX : &'static str = "naiSuffix";

        /// public static final [MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED)
        pub const MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED : &'static str = "enabledNotifyWapMMSC";

        /// public static final [MMS_CONFIG_RECIPIENT_LIMIT](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_RECIPIENT_LIMIT)
        pub const MMS_CONFIG_RECIPIENT_LIMIT : &'static str = "recipientLimit";

        /// public static final [MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES)
        pub const MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES : &'static str = "sendMultipartSmsAsSeparateMessages";

        /// public static final [MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS)
        pub const MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS : &'static str = "config_cellBroadcastAppLinks";

        /// public static final [MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED)
        pub const MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED : &'static str = "enableSMSDeliveryReports";

        /// public static final [MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD)
        pub const MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD : &'static str = "smsToMmsTextLengthThreshold";

        /// public static final [MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD)
        pub const MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD : &'static str = "smsToMmsTextThreshold";

        /// public static final [MMS_CONFIG_SUBJECT_MAX_LENGTH](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SUBJECT_MAX_LENGTH)
        pub const MMS_CONFIG_SUBJECT_MAX_LENGTH : &'static str = "maxSubjectLength";

        /// public static final [MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER)
        pub const MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER : &'static str = "supportHttpCharsetHeader";

        /// public static final [MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION)
        pub const MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION : &'static str = "supportMmsContentDisposition";

        /// public static final [MMS_CONFIG_UA_PROF_TAG_NAME](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_UA_PROF_TAG_NAME)
        pub const MMS_CONFIG_UA_PROF_TAG_NAME : &'static str = "uaProfTagName";

        /// public static final [MMS_CONFIG_UA_PROF_URL](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_UA_PROF_URL)
        pub const MMS_CONFIG_UA_PROF_URL : &'static str = "uaProfUrl";

        /// public static final [MMS_CONFIG_USER_AGENT](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_USER_AGENT)
        pub const MMS_CONFIG_USER_AGENT : &'static str = "userAgent";

        /// public static final [MMS_ERROR_CONFIGURATION_ERROR](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_CONFIGURATION_ERROR)
        pub const MMS_ERROR_CONFIGURATION_ERROR : i32 = 7;

        /// public static final [MMS_ERROR_HTTP_FAILURE](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_HTTP_FAILURE)
        pub const MMS_ERROR_HTTP_FAILURE : i32 = 4;

        /// public static final [MMS_ERROR_INVALID_APN](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_INVALID_APN)
        pub const MMS_ERROR_INVALID_APN : i32 = 2;

        /// public static final [MMS_ERROR_IO_ERROR](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_IO_ERROR)
        pub const MMS_ERROR_IO_ERROR : i32 = 5;

        /// public static final [MMS_ERROR_NO_DATA_NETWORK](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_NO_DATA_NETWORK)
        pub const MMS_ERROR_NO_DATA_NETWORK : i32 = 8;

        /// public static final [MMS_ERROR_RETRY](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_RETRY)
        pub const MMS_ERROR_RETRY : i32 = 6;

        /// public static final [MMS_ERROR_UNABLE_CONNECT_MMS](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_UNABLE_CONNECT_MMS)
        pub const MMS_ERROR_UNABLE_CONNECT_MMS : i32 = 3;

        /// public static final [MMS_ERROR_UNSPECIFIED](https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_UNSPECIFIED)
        pub const MMS_ERROR_UNSPECIFIED : i32 = 1;

        /// public static final [RESULT_ERROR_GENERIC_FAILURE](https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_GENERIC_FAILURE)
        pub const RESULT_ERROR_GENERIC_FAILURE : i32 = 1;

        /// public static final [RESULT_ERROR_LIMIT_EXCEEDED](https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_LIMIT_EXCEEDED)
        pub const RESULT_ERROR_LIMIT_EXCEEDED : i32 = 5;

        /// public static final [RESULT_ERROR_NO_SERVICE](https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_NO_SERVICE)
        pub const RESULT_ERROR_NO_SERVICE : i32 = 4;

        /// public static final [RESULT_ERROR_NULL_PDU](https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_NULL_PDU)
        pub const RESULT_ERROR_NULL_PDU : i32 = 3;

        /// public static final [RESULT_ERROR_RADIO_OFF](https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_RADIO_OFF)
        pub const RESULT_ERROR_RADIO_OFF : i32 = 2;

        /// public static final [RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED](https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED)
        pub const RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED : i32 = 8;

        /// public static final [RESULT_ERROR_SHORT_CODE_NOT_ALLOWED](https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_SHORT_CODE_NOT_ALLOWED)
        pub const RESULT_ERROR_SHORT_CODE_NOT_ALLOWED : i32 = 7;

        /// public static final [STATUS_ON_ICC_FREE](https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_FREE)
        pub const STATUS_ON_ICC_FREE : i32 = 0;

        /// public static final [STATUS_ON_ICC_READ](https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_READ)
        pub const STATUS_ON_ICC_READ : i32 = 1;

        /// public static final [STATUS_ON_ICC_SENT](https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_SENT)
        pub const STATUS_ON_ICC_SENT : i32 = 5;

        /// public static final [STATUS_ON_ICC_UNREAD](https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_UNREAD)
        pub const STATUS_ON_ICC_UNREAD : i32 = 3;

        /// public static final [STATUS_ON_ICC_UNSENT](https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_UNSENT)
        pub const STATUS_ON_ICC_UNSENT : i32 = 7;
    }
}
