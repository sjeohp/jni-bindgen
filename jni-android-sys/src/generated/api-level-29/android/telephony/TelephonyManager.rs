// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-telephony-TelephonyManager"))]
__jni_bindgen! {
    /// public class [TelephonyManager](https://developer.android.com/reference/android/telephony/TelephonyManager.html)
    ///
    /// Required feature: android-telephony-TelephonyManager
    public class TelephonyManager ("android/telephony/TelephonyManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [TelephonyManager](https://developer.android.com/reference/android/telephony/TelephonyManager.html#TelephonyManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::telephony::TelephonyManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/telephony/TelephonyManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getPhoneCount](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getPhoneCount())
        pub fn getPhoneCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getPhoneCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getPhoneCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createForSubscriptionId](https://developer.android.com/reference/android/telephony/TelephonyManager.html#createForSubscriptionId(int))
        ///
        /// Required features: "android-telephony-TelephonyManager"
        #[cfg(any(feature = "all", all(feature = "android-telephony-TelephonyManager")))]
        pub fn createForSubscriptionId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::TelephonyManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "createForSubscriptionId", .descriptor == "(I)Landroid/telephony/TelephonyManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "createForSubscriptionId\0", "(I)Landroid/telephony/TelephonyManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createForPhoneAccountHandle](https://developer.android.com/reference/android/telephony/TelephonyManager.html#createForPhoneAccountHandle(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle", "android-telephony-TelephonyManager"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle", feature = "android-telephony-TelephonyManager")))]
        pub fn createForPhoneAccountHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::TelephonyManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "createForPhoneAccountHandle", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)Landroid/telephony/TelephonyManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "createForPhoneAccountHandle\0", "(Landroid/telecom/PhoneAccountHandle;)Landroid/telephony/TelephonyManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeviceSoftwareVersion](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDeviceSoftwareVersion())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDeviceSoftwareVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getDeviceSoftwareVersion", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getDeviceSoftwareVersion\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeviceId](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDeviceId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getDeviceId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getDeviceId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getDeviceId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeviceId](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDeviceId(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getDeviceId_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getDeviceId", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getDeviceId\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImei](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getImei())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getImei<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getImei", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getImei\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImei](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getImei(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getImei_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getImei", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getImei\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTypeAllocationCode](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getTypeAllocationCode())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getTypeAllocationCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getTypeAllocationCode", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getTypeAllocationCode\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTypeAllocationCode](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getTypeAllocationCode(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getTypeAllocationCode_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getTypeAllocationCode", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getTypeAllocationCode\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMeid](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getMeid())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMeid<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getMeid", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getMeid\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMeid](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getMeid(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMeid_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getMeid", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getMeid\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getManufacturerCode](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getManufacturerCode())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getManufacturerCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getManufacturerCode", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getManufacturerCode\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getManufacturerCode](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getManufacturerCode(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getManufacturerCode_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getManufacturerCode", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getManufacturerCode\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNai](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNai())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNai<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getNai", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getNai\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCellLocation](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCellLocation())
        ///
        /// Required features: "android-telephony-CellLocation"
        #[cfg(any(feature = "all", all(feature = "android-telephony-CellLocation")))]
        #[deprecated] pub fn getCellLocation<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::CellLocation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getCellLocation", .descriptor == "()Landroid/telephony/CellLocation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getCellLocation\0", "()Landroid/telephony/CellLocation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPhoneType](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getPhoneType())
        pub fn getPhoneType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getPhoneType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getPhoneType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkOperatorName](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperatorName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNetworkOperatorName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getNetworkOperatorName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getNetworkOperatorName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkOperator](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperator())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNetworkOperator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getNetworkOperator", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getNetworkOperator\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkSpecifier](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkSpecifier())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNetworkSpecifier<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getNetworkSpecifier", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getNetworkSpecifier\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCarrierConfig](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCarrierConfig())
        ///
        /// Required features: "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-os-PersistableBundle")))]
        pub fn getCarrierConfig<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PersistableBundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getCarrierConfig", .descriptor == "()Landroid/os/PersistableBundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getCarrierConfig\0", "()Landroid/os/PersistableBundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNetworkRoaming](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isNetworkRoaming())
        pub fn isNetworkRoaming<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isNetworkRoaming", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isNetworkRoaming\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkCountryIso](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkCountryIso())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNetworkCountryIso<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getNetworkCountryIso", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getNetworkCountryIso\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkType](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkType())
        pub fn getNetworkType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getNetworkType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getNetworkType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDataNetworkType](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDataNetworkType())
        pub fn getDataNetworkType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getDataNetworkType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getDataNetworkType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVoiceNetworkType](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVoiceNetworkType())
        pub fn getVoiceNetworkType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getVoiceNetworkType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getVoiceNetworkType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasIccCard](https://developer.android.com/reference/android/telephony/TelephonyManager.html#hasIccCard())
        pub fn hasIccCard<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "hasIccCard", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "hasIccCard\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimState](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimState())
        pub fn getSimState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimState](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimState(int))
        pub fn getSimState_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimState", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimState\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimOperator](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimOperator())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSimOperator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimOperator", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimOperator\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimOperatorName](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimOperatorName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSimOperatorName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimOperatorName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimOperatorName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimCountryIso](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimCountryIso())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSimCountryIso<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimCountryIso", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimCountryIso\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimSerialNumber](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimSerialNumber())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSimSerialNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimSerialNumber", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimSerialNumber\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCardIdForDefaultEuicc](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCardIdForDefaultEuicc())
        pub fn getCardIdForDefaultEuicc<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getCardIdForDefaultEuicc", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getCardIdForDefaultEuicc\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUiccCardsInfo](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getUiccCardsInfo())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getUiccCardsInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getUiccCardsInfo", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getUiccCardsInfo\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubscriberId](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSubscriberId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSubscriberId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSubscriberId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSubscriberId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroupIdLevel1](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getGroupIdLevel1())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getGroupIdLevel1<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getGroupIdLevel1", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getGroupIdLevel1\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLine1Number](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getLine1Number())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLine1Number<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getLine1Number", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getLine1Number\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLine1NumberForDisplay](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setLine1NumberForDisplay(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setLine1NumberForDisplay<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setLine1NumberForDisplay", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setLine1NumberForDisplay\0", "(Ljava/lang/String;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVoiceMailNumber](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVoiceMailNumber())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getVoiceMailNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getVoiceMailNumber", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getVoiceMailNumber\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVoiceMailNumber](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setVoiceMailNumber(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setVoiceMailNumber<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setVoiceMailNumber", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setVoiceMailNumber\0", "(Ljava/lang/String;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVisualVoicemailPackageName](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVisualVoicemailPackageName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getVisualVoicemailPackageName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getVisualVoicemailPackageName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getVisualVoicemailPackageName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVisualVoicemailSmsFilterSettings](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings))
        ///
        /// Required features: "android-telephony-VisualVoicemailSmsFilterSettings"
        #[cfg(any(feature = "all", all(feature = "android-telephony-VisualVoicemailSmsFilterSettings")))]
        pub fn setVisualVoicemailSmsFilterSettings<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::VisualVoicemailSmsFilterSettings>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setVisualVoicemailSmsFilterSettings", .descriptor == "(Landroid/telephony/VisualVoicemailSmsFilterSettings;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setVisualVoicemailSmsFilterSettings\0", "(Landroid/telephony/VisualVoicemailSmsFilterSettings;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendVisualVoicemailSms](https://developer.android.com/reference/android/telephony/TelephonyManager.html#sendVisualVoicemailSms(java.lang.String,%20int,%20java.lang.String,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-String")))]
        pub fn sendVisualVoicemailSms<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "sendVisualVoicemailSms", .descriptor == "(Ljava/lang/String;ILjava/lang/String;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "sendVisualVoicemailSms\0", "(Ljava/lang/String;ILjava/lang/String;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVoiceMailAlphaTag](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVoiceMailAlphaTag())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getVoiceMailAlphaTag<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getVoiceMailAlphaTag", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getVoiceMailAlphaTag\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendDialerSpecialCode](https://developer.android.com/reference/android/telephony/TelephonyManager.html#sendDialerSpecialCode(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn sendDialerSpecialCode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "sendDialerSpecialCode", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "sendDialerSpecialCode\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCallState](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCallState())
        pub fn getCallState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getCallState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getCallState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDataActivity](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDataActivity())
        pub fn getDataActivity<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getDataActivity", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getDataActivity\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDataState](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDataState())
        pub fn getDataState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getDataState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getDataState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [listen](https://developer.android.com/reference/android/telephony/TelephonyManager.html#listen(android.telephony.PhoneStateListener,%20int))
        ///
        /// Required features: "android-telephony-PhoneStateListener"
        #[cfg(any(feature = "all", all(feature = "android-telephony-PhoneStateListener")))]
        pub fn listen<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::PhoneStateListener>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "listen", .descriptor == "(Landroid/telephony/PhoneStateListener;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "listen\0", "(Landroid/telephony/PhoneStateListener;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVoiceCapable](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isVoiceCapable())
        pub fn isVoiceCapable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isVoiceCapable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isVoiceCapable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSmsCapable](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isSmsCapable())
        pub fn isSmsCapable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isSmsCapable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isSmsCapable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllCellInfo](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getAllCellInfo())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getAllCellInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getAllCellInfo", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getAllCellInfo\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestCellInfoUpdate](https://developer.android.com/reference/android/telephony/TelephonyManager.html#requestCellInfoUpdate(java.util.concurrent.Executor,%20android.telephony.TelephonyManager.CellInfoCallback))
        ///
        /// Required features: "android-telephony-TelephonyManager_CellInfoCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-telephony-TelephonyManager_CellInfoCallback", feature = "java-util-concurrent-Executor")))]
        pub fn requestCellInfoUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::TelephonyManager_CellInfoCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "requestCellInfoUpdate", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/telephony/TelephonyManager$CellInfoCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "requestCellInfoUpdate\0", "(Ljava/util/concurrent/Executor;Landroid/telephony/TelephonyManager$CellInfoCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMmsUserAgent](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getMmsUserAgent())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMmsUserAgent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getMmsUserAgent", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getMmsUserAgent\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMmsUAProfUrl](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getMmsUAProfUrl())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMmsUAProfUrl<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getMmsUAProfUrl", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getMmsUAProfUrl\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iccOpenLogicalChannel](https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccOpenLogicalChannel(java.lang.String))
        ///
        /// Required features: "android-telephony-IccOpenLogicalChannelResponse", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-telephony-IccOpenLogicalChannelResponse", feature = "java-lang-String")))]
        #[deprecated] pub fn iccOpenLogicalChannel_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::IccOpenLogicalChannelResponse>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "iccOpenLogicalChannel", .descriptor == "(Ljava/lang/String;)Landroid/telephony/IccOpenLogicalChannelResponse;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "iccOpenLogicalChannel\0", "(Ljava/lang/String;)Landroid/telephony/IccOpenLogicalChannelResponse;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iccOpenLogicalChannel](https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccOpenLogicalChannel(java.lang.String,%20int))
        ///
        /// Required features: "android-telephony-IccOpenLogicalChannelResponse", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-telephony-IccOpenLogicalChannelResponse", feature = "java-lang-String")))]
        pub fn iccOpenLogicalChannel_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::IccOpenLogicalChannelResponse>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "iccOpenLogicalChannel", .descriptor == "(Ljava/lang/String;I)Landroid/telephony/IccOpenLogicalChannelResponse;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "iccOpenLogicalChannel\0", "(Ljava/lang/String;I)Landroid/telephony/IccOpenLogicalChannelResponse;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iccCloseLogicalChannel](https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccCloseLogicalChannel(int))
        pub fn iccCloseLogicalChannel<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "iccCloseLogicalChannel", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "iccCloseLogicalChannel\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iccTransmitApduLogicalChannel](https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccTransmitApduLogicalChannel(int,%20int,%20int,%20int,%20int,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn iccTransmitApduLogicalChannel<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "iccTransmitApduLogicalChannel", .descriptor == "(IIIIIILjava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "iccTransmitApduLogicalChannel\0", "(IIIIIILjava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iccTransmitApduBasicChannel](https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccTransmitApduBasicChannel(int,%20int,%20int,%20int,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn iccTransmitApduBasicChannel<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "iccTransmitApduBasicChannel", .descriptor == "(IIIIILjava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "iccTransmitApduBasicChannel\0", "(IIIIILjava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iccExchangeSimIO](https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccExchangeSimIO(int,%20int,%20int,%20int,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn iccExchangeSimIO<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "iccExchangeSimIO", .descriptor == "(IIIIILjava/lang/String;)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "iccExchangeSimIO\0", "(IIIIILjava/lang/String;)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendEnvelopeWithStatus](https://developer.android.com/reference/android/telephony/TelephonyManager.html#sendEnvelopeWithStatus(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn sendEnvelopeWithStatus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "sendEnvelopeWithStatus", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "sendEnvelopeWithStatus\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIccAuthentication](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getIccAuthentication(int,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getIccAuthentication<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getIccAuthentication", .descriptor == "(IILjava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getIccAuthentication\0", "(IILjava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getForbiddenPlmns](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getForbiddenPlmns())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getForbiddenPlmns<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getForbiddenPlmns", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getForbiddenPlmns\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNetworkSelectionModeAutomatic](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setNetworkSelectionModeAutomatic())
        pub fn setNetworkSelectionModeAutomatic<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setNetworkSelectionModeAutomatic", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setNetworkSelectionModeAutomatic\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestNetworkScan](https://developer.android.com/reference/android/telephony/TelephonyManager.html#requestNetworkScan(android.telephony.NetworkScanRequest,%20java.util.concurrent.Executor,%20android.telephony.TelephonyScanManager.NetworkScanCallback))
        ///
        /// Required features: "android-telephony-NetworkScan", "android-telephony-NetworkScanRequest", "android-telephony-TelephonyScanManager_NetworkScanCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-telephony-NetworkScan", feature = "android-telephony-NetworkScanRequest", feature = "android-telephony-TelephonyScanManager_NetworkScanCallback", feature = "java-util-concurrent-Executor")))]
        pub fn requestNetworkScan<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::NetworkScanRequest>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::TelephonyScanManager_NetworkScanCallback>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::NetworkScan>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "requestNetworkScan", .descriptor == "(Landroid/telephony/NetworkScanRequest;Ljava/util/concurrent/Executor;Landroid/telephony/TelephonyScanManager$NetworkScanCallback;)Landroid/telephony/NetworkScan;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "requestNetworkScan\0", "(Landroid/telephony/NetworkScanRequest;Ljava/util/concurrent/Executor;Landroid/telephony/TelephonyScanManager$NetworkScanCallback;)Landroid/telephony/NetworkScan;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNetworkSelectionModeManual](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setNetworkSelectionModeManual(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setNetworkSelectionModeManual<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setNetworkSelectionModeManual", .descriptor == "(Ljava/lang/String;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setNetworkSelectionModeManual\0", "(Ljava/lang/String;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredNetworkTypeToGlobal](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setPreferredNetworkTypeToGlobal())
        pub fn setPreferredNetworkTypeToGlobal<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setPreferredNetworkTypeToGlobal", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setPreferredNetworkTypeToGlobal\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasCarrierPrivileges](https://developer.android.com/reference/android/telephony/TelephonyManager.html#hasCarrierPrivileges())
        pub fn hasCarrierPrivileges<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "hasCarrierPrivileges", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "hasCarrierPrivileges\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOperatorBrandOverride](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setOperatorBrandOverride(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setOperatorBrandOverride<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setOperatorBrandOverride", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setOperatorBrandOverride\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendUssdRequest](https://developer.android.com/reference/android/telephony/TelephonyManager.html#sendUssdRequest(java.lang.String,%20android.telephony.TelephonyManager.UssdResponseCallback,%20android.os.Handler))
        ///
        /// Required features: "android-os-Handler", "android-telephony-TelephonyManager_UssdResponseCallback", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-telephony-TelephonyManager_UssdResponseCallback", feature = "java-lang-String")))]
        pub fn sendUssdRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::TelephonyManager_UssdResponseCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "sendUssdRequest", .descriptor == "(Ljava/lang/String;Landroid/telephony/TelephonyManager$UssdResponseCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "sendUssdRequest\0", "(Ljava/lang/String;Landroid/telephony/TelephonyManager$UssdResponseCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isConcurrentVoiceAndDataSupported](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isConcurrentVoiceAndDataSupported())
        pub fn isConcurrentVoiceAndDataSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isConcurrentVoiceAndDataSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isConcurrentVoiceAndDataSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataEnabled](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setDataEnabled(boolean))
        pub fn setDataEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setDataEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setDataEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDataEnabled](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isDataEnabled())
        pub fn isDataEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isDataEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isDataEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDataRoamingEnabled](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isDataRoamingEnabled())
        pub fn isDataRoamingEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isDataRoamingEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isDataRoamingEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canChangeDtmfToneLength](https://developer.android.com/reference/android/telephony/TelephonyManager.html#canChangeDtmfToneLength())
        pub fn canChangeDtmfToneLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "canChangeDtmfToneLength", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "canChangeDtmfToneLength\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWorldPhone](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isWorldPhone())
        pub fn isWorldPhone<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isWorldPhone", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isWorldPhone\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTtyModeSupported](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isTtyModeSupported())
        #[deprecated] pub fn isTtyModeSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isTtyModeSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isTtyModeSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRttSupported](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isRttSupported())
        pub fn isRttSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isRttSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isRttSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHearingAidCompatibilitySupported](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isHearingAidCompatibilitySupported())
        pub fn isHearingAidCompatibilitySupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isHearingAidCompatibilitySupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isHearingAidCompatibilitySupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getServiceState](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getServiceState())
        ///
        /// Required features: "android-telephony-ServiceState"
        #[cfg(any(feature = "all", all(feature = "android-telephony-ServiceState")))]
        pub fn getServiceState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::ServiceState>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getServiceState", .descriptor == "()Landroid/telephony/ServiceState;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getServiceState\0", "()Landroid/telephony/ServiceState;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVoicemailRingtoneUri](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-net-Uri", "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-telecom-PhoneAccountHandle")))]
        pub fn getVoicemailRingtoneUri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getVoicemailRingtoneUri", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getVoicemailRingtoneUri\0", "(Landroid/telecom/PhoneAccountHandle;)Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVoicemailRingtoneUri](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,%20android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-telecom-PhoneAccountHandle")))]
        #[deprecated] pub fn setVoicemailRingtoneUri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setVoicemailRingtoneUri", .descriptor == "(Landroid/telecom/PhoneAccountHandle;Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setVoicemailRingtoneUri\0", "(Landroid/telecom/PhoneAccountHandle;Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVoicemailVibrationEnabled](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle")))]
        pub fn isVoicemailVibrationEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isVoicemailVibrationEnabled", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isVoicemailVibrationEnabled\0", "(Landroid/telecom/PhoneAccountHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVoicemailVibrationEnabled](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,%20boolean))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle")))]
        #[deprecated] pub fn setVoicemailVibrationEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setVoicemailVibrationEnabled", .descriptor == "(Landroid/telecom/PhoneAccountHandle;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setVoicemailVibrationEnabled\0", "(Landroid/telecom/PhoneAccountHandle;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimCarrierId](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimCarrierId())
        pub fn getSimCarrierId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimCarrierId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimCarrierId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimCarrierIdName](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimCarrierIdName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getSimCarrierIdName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimCarrierIdName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimCarrierIdName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimSpecificCarrierId](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimSpecificCarrierId())
        pub fn getSimSpecificCarrierId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimSpecificCarrierId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimSpecificCarrierId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimSpecificCarrierIdName](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimSpecificCarrierIdName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getSimSpecificCarrierIdName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSimSpecificCarrierIdName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSimSpecificCarrierIdName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCarrierIdFromSimMccMnc](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCarrierIdFromSimMccMnc())
        pub fn getCarrierIdFromSimMccMnc<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getCarrierIdFromSimMccMnc", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getCarrierIdFromSimMccMnc\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSignalStrength](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSignalStrength())
        ///
        /// Required features: "android-telephony-SignalStrength"
        #[cfg(any(feature = "all", all(feature = "android-telephony-SignalStrength")))]
        pub fn getSignalStrength<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telephony::SignalStrength>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getSignalStrength", .descriptor == "()Landroid/telephony/SignalStrength;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getSignalStrength\0", "()Landroid/telephony/SignalStrength;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEmergencyNumberList](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getEmergencyNumberList())
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn getEmergencyNumberList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getEmergencyNumberList", .descriptor == "()Ljava/util/Map;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getEmergencyNumberList\0", "()Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEmergencyNumberList](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getEmergencyNumberList(int))
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn getEmergencyNumberList_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getEmergencyNumberList", .descriptor == "(I)Ljava/util/Map;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getEmergencyNumberList\0", "(I)Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEmergencyNumber](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isEmergencyNumber(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isEmergencyNumber<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isEmergencyNumber", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isEmergencyNumber\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredOpportunisticDataSubscription](https://developer.android.com/reference/android/telephony/TelephonyManager.html#setPreferredOpportunisticDataSubscription(int,%20boolean,%20java.util.concurrent.Executor,%20java.util.function.Consumer))
        ///
        /// Required features: "java-util-concurrent-Executor", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        pub fn setPreferredOpportunisticDataSubscription<'env>(&'env self, arg0: i32, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "setPreferredOpportunisticDataSubscription", .descriptor == "(IZLjava/util/concurrent/Executor;Ljava/util/function/Consumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "setPreferredOpportunisticDataSubscription\0", "(IZLjava/util/concurrent/Executor;Ljava/util/function/Consumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredOpportunisticDataSubscription](https://developer.android.com/reference/android/telephony/TelephonyManager.html#getPreferredOpportunisticDataSubscription())
        pub fn getPreferredOpportunisticDataSubscription<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "getPreferredOpportunisticDataSubscription", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "getPreferredOpportunisticDataSubscription\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAvailableNetworks](https://developer.android.com/reference/android/telephony/TelephonyManager.html#updateAvailableNetworks(java.util.List,%20java.util.concurrent.Executor,%20java.util.function.Consumer))
        ///
        /// Required features: "java-util-List", "java-util-concurrent-Executor", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-List", feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        pub fn updateAvailableNetworks<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "updateAvailableNetworks", .descriptor == "(Ljava/util/List;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "updateAvailableNetworks\0", "(Ljava/util/List;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMultiSimSupported](https://developer.android.com/reference/android/telephony/TelephonyManager.html#isMultiSimSupported())
        pub fn isMultiSimSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "isMultiSimSupported", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "isMultiSimSupported\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [switchMultiSimConfig](https://developer.android.com/reference/android/telephony/TelephonyManager.html#switchMultiSimConfig(int))
        pub fn switchMultiSimConfig<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "switchMultiSimConfig", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "switchMultiSimConfig\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doesSwitchMultiSimConfigTriggerReboot](https://developer.android.com/reference/android/telephony/TelephonyManager.html#doesSwitchMultiSimConfigTriggerReboot())
        pub fn doesSwitchMultiSimConfigTriggerReboot<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telephony/TelephonyManager", java.flags == PUBLIC, .name == "doesSwitchMultiSimConfigTriggerReboot", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telephony/TelephonyManager\0", "doesSwitchMultiSimConfigTriggerReboot\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_CARRIER_MESSAGING_CLIENT_SERVICE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_CARRIER_MESSAGING_CLIENT_SERVICE)
        pub const ACTION_CARRIER_MESSAGING_CLIENT_SERVICE : &'static str = "android.telephony.action.CARRIER_MESSAGING_CLIENT_SERVICE";

        /// public static final [ACTION_CONFIGURE_VOICEMAIL](https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_CONFIGURE_VOICEMAIL)
        pub const ACTION_CONFIGURE_VOICEMAIL : &'static str = "android.telephony.action.CONFIGURE_VOICEMAIL";

        /// public static final [ACTION_NETWORK_COUNTRY_CHANGED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_NETWORK_COUNTRY_CHANGED)
        pub const ACTION_NETWORK_COUNTRY_CHANGED : &'static str = "android.telephony.action.NETWORK_COUNTRY_CHANGED";

        /// public static final [ACTION_PHONE_STATE_CHANGED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_PHONE_STATE_CHANGED)
        pub const ACTION_PHONE_STATE_CHANGED : &'static str = "android.intent.action.PHONE_STATE";

        /// public static final [ACTION_RESPOND_VIA_MESSAGE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_RESPOND_VIA_MESSAGE)
        pub const ACTION_RESPOND_VIA_MESSAGE : &'static str = "android.intent.action.RESPOND_VIA_MESSAGE";

        /// public static final [ACTION_SECRET_CODE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_SECRET_CODE)
        pub const ACTION_SECRET_CODE : &'static str = "android.telephony.action.SECRET_CODE";

        /// public static final [ACTION_SHOW_VOICEMAIL_NOTIFICATION](https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_SHOW_VOICEMAIL_NOTIFICATION)
        pub const ACTION_SHOW_VOICEMAIL_NOTIFICATION : &'static str = "android.telephony.action.SHOW_VOICEMAIL_NOTIFICATION";

        /// public static final [ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED)
        pub const ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED : &'static str = "android.telephony.action.SUBSCRIPTION_CARRIER_IDENTITY_CHANGED";

        /// public static final [ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED)
        pub const ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED : &'static str = "android.telephony.action.SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED";

        /// public static final [APPTYPE_CSIM](https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_CSIM)
        pub const APPTYPE_CSIM : i32 = 4;

        /// public static final [APPTYPE_ISIM](https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_ISIM)
        pub const APPTYPE_ISIM : i32 = 5;

        /// public static final [APPTYPE_RUIM](https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_RUIM)
        pub const APPTYPE_RUIM : i32 = 3;

        /// public static final [APPTYPE_SIM](https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_SIM)
        pub const APPTYPE_SIM : i32 = 1;

        /// public static final [APPTYPE_USIM](https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_USIM)
        pub const APPTYPE_USIM : i32 = 2;

        /// public static final [AUTHTYPE_EAP_AKA](https://developer.android.com/reference/android/telephony/TelephonyManager.html#AUTHTYPE_EAP_AKA)
        pub const AUTHTYPE_EAP_AKA : i32 = 129;

        /// public static final [AUTHTYPE_EAP_SIM](https://developer.android.com/reference/android/telephony/TelephonyManager.html#AUTHTYPE_EAP_SIM)
        pub const AUTHTYPE_EAP_SIM : i32 = 128;

        /// public static final [CALL_STATE_IDLE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#CALL_STATE_IDLE)
        pub const CALL_STATE_IDLE : i32 = 0;

        /// public static final [CALL_STATE_OFFHOOK](https://developer.android.com/reference/android/telephony/TelephonyManager.html#CALL_STATE_OFFHOOK)
        pub const CALL_STATE_OFFHOOK : i32 = 2;

        /// public static final [CALL_STATE_RINGING](https://developer.android.com/reference/android/telephony/TelephonyManager.html#CALL_STATE_RINGING)
        pub const CALL_STATE_RINGING : i32 = 1;

        /// public static final [CDMA_ROAMING_MODE_AFFILIATED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#CDMA_ROAMING_MODE_AFFILIATED)
        pub const CDMA_ROAMING_MODE_AFFILIATED : i32 = 1;

        /// public static final [CDMA_ROAMING_MODE_ANY](https://developer.android.com/reference/android/telephony/TelephonyManager.html#CDMA_ROAMING_MODE_ANY)
        pub const CDMA_ROAMING_MODE_ANY : i32 = 2;

        /// public static final [CDMA_ROAMING_MODE_HOME](https://developer.android.com/reference/android/telephony/TelephonyManager.html#CDMA_ROAMING_MODE_HOME)
        pub const CDMA_ROAMING_MODE_HOME : i32 = 0;

        /// public static final [CDMA_ROAMING_MODE_RADIO_DEFAULT](https://developer.android.com/reference/android/telephony/TelephonyManager.html#CDMA_ROAMING_MODE_RADIO_DEFAULT)
        pub const CDMA_ROAMING_MODE_RADIO_DEFAULT : i32 = -1;

        /// public static final [DATA_ACTIVITY_DORMANT](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_DORMANT)
        pub const DATA_ACTIVITY_DORMANT : i32 = 4;

        /// public static final [DATA_ACTIVITY_IN](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_IN)
        pub const DATA_ACTIVITY_IN : i32 = 1;

        /// public static final [DATA_ACTIVITY_INOUT](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_INOUT)
        pub const DATA_ACTIVITY_INOUT : i32 = 3;

        /// public static final [DATA_ACTIVITY_NONE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_NONE)
        pub const DATA_ACTIVITY_NONE : i32 = 0;

        /// public static final [DATA_ACTIVITY_OUT](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_OUT)
        pub const DATA_ACTIVITY_OUT : i32 = 2;

        /// public static final [DATA_CONNECTED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_CONNECTED)
        pub const DATA_CONNECTED : i32 = 2;

        /// public static final [DATA_CONNECTING](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_CONNECTING)
        pub const DATA_CONNECTING : i32 = 1;

        /// public static final [DATA_DISCONNECTED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_DISCONNECTED)
        pub const DATA_DISCONNECTED : i32 = 0;

        /// public static final [DATA_SUSPENDED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_SUSPENDED)
        pub const DATA_SUSPENDED : i32 = 3;

        /// public static final [DATA_UNKNOWN](https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_UNKNOWN)
        pub const DATA_UNKNOWN : i32 = -1;

        /// public static final [EXTRA_CALL_VOICEMAIL_INTENT](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_CALL_VOICEMAIL_INTENT)
        pub const EXTRA_CALL_VOICEMAIL_INTENT : &'static str = "android.telephony.extra.CALL_VOICEMAIL_INTENT";

        /// public static final [EXTRA_CARRIER_ID](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_CARRIER_ID)
        pub const EXTRA_CARRIER_ID : &'static str = "android.telephony.extra.CARRIER_ID";

        /// public static final [EXTRA_CARRIER_NAME](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_CARRIER_NAME)
        pub const EXTRA_CARRIER_NAME : &'static str = "android.telephony.extra.CARRIER_NAME";

        /// public static final [EXTRA_HIDE_PUBLIC_SETTINGS](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_HIDE_PUBLIC_SETTINGS)
        pub const EXTRA_HIDE_PUBLIC_SETTINGS : &'static str = "android.telephony.extra.HIDE_PUBLIC_SETTINGS";

        /// public static final [EXTRA_INCOMING_NUMBER](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_INCOMING_NUMBER)
        #[deprecated] pub const EXTRA_INCOMING_NUMBER : &'static str = "incoming_number";

        /// public static final [EXTRA_IS_REFRESH](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_IS_REFRESH)
        pub const EXTRA_IS_REFRESH : &'static str = "android.telephony.extra.IS_REFRESH";

        /// public static final [EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT)
        pub const EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT : &'static str = "android.telephony.extra.LAUNCH_VOICEMAIL_SETTINGS_INTENT";

        /// public static final [EXTRA_NETWORK_COUNTRY](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_NETWORK_COUNTRY)
        pub const EXTRA_NETWORK_COUNTRY : &'static str = "android.telephony.extra.NETWORK_COUNTRY";

        /// public static final [EXTRA_NOTIFICATION_COUNT](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_NOTIFICATION_COUNT)
        pub const EXTRA_NOTIFICATION_COUNT : &'static str = "android.telephony.extra.NOTIFICATION_COUNT";

        /// public static final [EXTRA_PHONE_ACCOUNT_HANDLE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_PHONE_ACCOUNT_HANDLE)
        pub const EXTRA_PHONE_ACCOUNT_HANDLE : &'static str = "android.telephony.extra.PHONE_ACCOUNT_HANDLE";

        /// public static final [EXTRA_SPECIFIC_CARRIER_ID](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_SPECIFIC_CARRIER_ID)
        pub const EXTRA_SPECIFIC_CARRIER_ID : &'static str = "android.telephony.extra.SPECIFIC_CARRIER_ID";

        /// public static final [EXTRA_SPECIFIC_CARRIER_NAME](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_SPECIFIC_CARRIER_NAME)
        pub const EXTRA_SPECIFIC_CARRIER_NAME : &'static str = "android.telephony.extra.SPECIFIC_CARRIER_NAME";

        /// public static final [EXTRA_STATE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_STATE)
        pub const EXTRA_STATE : &'static str = "state";

        /// **get** public static final [EXTRA_STATE_IDLE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_STATE_IDLE)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn EXTRA_STATE_IDLE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/telephony/TelephonyManager\0", "EXTRA_STATE_IDLE\0", "Ljava/lang/String;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [EXTRA_STATE_OFFHOOK](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_STATE_OFFHOOK)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn EXTRA_STATE_OFFHOOK<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/telephony/TelephonyManager\0", "EXTRA_STATE_OFFHOOK\0", "Ljava/lang/String;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [EXTRA_STATE_RINGING](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_STATE_RINGING)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn EXTRA_STATE_RINGING<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/telephony/TelephonyManager\0", "EXTRA_STATE_RINGING\0", "Ljava/lang/String;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [EXTRA_SUBSCRIPTION_ID](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_SUBSCRIPTION_ID)
        pub const EXTRA_SUBSCRIPTION_ID : &'static str = "android.telephony.extra.SUBSCRIPTION_ID";

        /// public static final [EXTRA_VOICEMAIL_NUMBER](https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_VOICEMAIL_NUMBER)
        pub const EXTRA_VOICEMAIL_NUMBER : &'static str = "android.telephony.extra.VOICEMAIL_NUMBER";

        /// public static final [METADATA_HIDE_VOICEMAIL_SETTINGS_MENU](https://developer.android.com/reference/android/telephony/TelephonyManager.html#METADATA_HIDE_VOICEMAIL_SETTINGS_MENU)
        pub const METADATA_HIDE_VOICEMAIL_SETTINGS_MENU : &'static str = "android.telephony.HIDE_VOICEMAIL_SETTINGS_MENU";

        /// public static final [MULTISIM_ALLOWED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#MULTISIM_ALLOWED)
        pub const MULTISIM_ALLOWED : i32 = 0;

        /// public static final [MULTISIM_NOT_SUPPORTED_BY_CARRIER](https://developer.android.com/reference/android/telephony/TelephonyManager.html#MULTISIM_NOT_SUPPORTED_BY_CARRIER)
        pub const MULTISIM_NOT_SUPPORTED_BY_CARRIER : i32 = 2;

        /// public static final [MULTISIM_NOT_SUPPORTED_BY_HARDWARE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#MULTISIM_NOT_SUPPORTED_BY_HARDWARE)
        pub const MULTISIM_NOT_SUPPORTED_BY_HARDWARE : i32 = 1;

        /// public static final [NETWORK_TYPE_1xRTT](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_1xRTT)
        pub const NETWORK_TYPE_1xRTT : i32 = 7;

        /// public static final [NETWORK_TYPE_CDMA](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_CDMA)
        pub const NETWORK_TYPE_CDMA : i32 = 4;

        /// public static final [NETWORK_TYPE_EDGE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EDGE)
        pub const NETWORK_TYPE_EDGE : i32 = 2;

        /// public static final [NETWORK_TYPE_EHRPD](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EHRPD)
        pub const NETWORK_TYPE_EHRPD : i32 = 14;

        /// public static final [NETWORK_TYPE_EVDO_0](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EVDO_0)
        pub const NETWORK_TYPE_EVDO_0 : i32 = 5;

        /// public static final [NETWORK_TYPE_EVDO_A](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EVDO_A)
        pub const NETWORK_TYPE_EVDO_A : i32 = 6;

        /// public static final [NETWORK_TYPE_EVDO_B](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EVDO_B)
        pub const NETWORK_TYPE_EVDO_B : i32 = 12;

        /// public static final [NETWORK_TYPE_GPRS](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_GPRS)
        pub const NETWORK_TYPE_GPRS : i32 = 1;

        /// public static final [NETWORK_TYPE_GSM](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_GSM)
        pub const NETWORK_TYPE_GSM : i32 = 16;

        /// public static final [NETWORK_TYPE_HSDPA](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_HSDPA)
        pub const NETWORK_TYPE_HSDPA : i32 = 8;

        /// public static final [NETWORK_TYPE_HSPA](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_HSPA)
        pub const NETWORK_TYPE_HSPA : i32 = 10;

        /// public static final [NETWORK_TYPE_HSPAP](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_HSPAP)
        pub const NETWORK_TYPE_HSPAP : i32 = 15;

        /// public static final [NETWORK_TYPE_HSUPA](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_HSUPA)
        pub const NETWORK_TYPE_HSUPA : i32 = 9;

        /// public static final [NETWORK_TYPE_IDEN](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_IDEN)
        pub const NETWORK_TYPE_IDEN : i32 = 11;

        /// public static final [NETWORK_TYPE_IWLAN](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_IWLAN)
        pub const NETWORK_TYPE_IWLAN : i32 = 18;

        /// public static final [NETWORK_TYPE_LTE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_LTE)
        pub const NETWORK_TYPE_LTE : i32 = 13;

        /// public static final [NETWORK_TYPE_NR](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_NR)
        pub const NETWORK_TYPE_NR : i32 = 20;

        /// public static final [NETWORK_TYPE_TD_SCDMA](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_TD_SCDMA)
        pub const NETWORK_TYPE_TD_SCDMA : i32 = 17;

        /// public static final [NETWORK_TYPE_UMTS](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_UMTS)
        pub const NETWORK_TYPE_UMTS : i32 = 3;

        /// public static final [NETWORK_TYPE_UNKNOWN](https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_UNKNOWN)
        pub const NETWORK_TYPE_UNKNOWN : i32 = 0;

        /// public static final [PHONE_TYPE_CDMA](https://developer.android.com/reference/android/telephony/TelephonyManager.html#PHONE_TYPE_CDMA)
        pub const PHONE_TYPE_CDMA : i32 = 2;

        /// public static final [PHONE_TYPE_GSM](https://developer.android.com/reference/android/telephony/TelephonyManager.html#PHONE_TYPE_GSM)
        pub const PHONE_TYPE_GSM : i32 = 1;

        /// public static final [PHONE_TYPE_NONE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#PHONE_TYPE_NONE)
        pub const PHONE_TYPE_NONE : i32 = 0;

        /// public static final [PHONE_TYPE_SIP](https://developer.android.com/reference/android/telephony/TelephonyManager.html#PHONE_TYPE_SIP)
        pub const PHONE_TYPE_SIP : i32 = 3;

        /// public static final [SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION)
        pub const SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION : i32 = 2;

        /// public static final [SET_OPPORTUNISTIC_SUB_SUCCESS](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SET_OPPORTUNISTIC_SUB_SUCCESS)
        pub const SET_OPPORTUNISTIC_SUB_SUCCESS : i32 = 0;

        /// public static final [SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED)
        pub const SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED : i32 = 1;

        /// public static final [SIM_STATE_ABSENT](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_ABSENT)
        pub const SIM_STATE_ABSENT : i32 = 1;

        /// public static final [SIM_STATE_CARD_IO_ERROR](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_CARD_IO_ERROR)
        pub const SIM_STATE_CARD_IO_ERROR : i32 = 8;

        /// public static final [SIM_STATE_CARD_RESTRICTED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_CARD_RESTRICTED)
        pub const SIM_STATE_CARD_RESTRICTED : i32 = 9;

        /// public static final [SIM_STATE_NETWORK_LOCKED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_NETWORK_LOCKED)
        pub const SIM_STATE_NETWORK_LOCKED : i32 = 4;

        /// public static final [SIM_STATE_NOT_READY](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_NOT_READY)
        pub const SIM_STATE_NOT_READY : i32 = 6;

        /// public static final [SIM_STATE_PERM_DISABLED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_PERM_DISABLED)
        pub const SIM_STATE_PERM_DISABLED : i32 = 7;

        /// public static final [SIM_STATE_PIN_REQUIRED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_PIN_REQUIRED)
        pub const SIM_STATE_PIN_REQUIRED : i32 = 2;

        /// public static final [SIM_STATE_PUK_REQUIRED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_PUK_REQUIRED)
        pub const SIM_STATE_PUK_REQUIRED : i32 = 3;

        /// public static final [SIM_STATE_READY](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY)
        pub const SIM_STATE_READY : i32 = 5;

        /// public static final [SIM_STATE_UNKNOWN](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_UNKNOWN)
        pub const SIM_STATE_UNKNOWN : i32 = 0;

        /// public static final [UNINITIALIZED_CARD_ID](https://developer.android.com/reference/android/telephony/TelephonyManager.html#UNINITIALIZED_CARD_ID)
        pub const UNINITIALIZED_CARD_ID : i32 = -2;

        /// public static final [UNKNOWN_CARRIER_ID](https://developer.android.com/reference/android/telephony/TelephonyManager.html#UNKNOWN_CARRIER_ID)
        pub const UNKNOWN_CARRIER_ID : i32 = -1;

        /// public static final [UNSUPPORTED_CARD_ID](https://developer.android.com/reference/android/telephony/TelephonyManager.html#UNSUPPORTED_CARD_ID)
        pub const UNSUPPORTED_CARD_ID : i32 = -1;

        /// public static final [UPDATE_AVAILABLE_NETWORKS_ABORTED](https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_ABORTED)
        pub const UPDATE_AVAILABLE_NETWORKS_ABORTED : i32 = 2;

        /// public static final [UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS](https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS)
        pub const UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS : i32 = 3;

        /// public static final [UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE)
        pub const UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE : i32 = 4;

        /// public static final [UPDATE_AVAILABLE_NETWORKS_SUCCESS](https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_SUCCESS)
        pub const UPDATE_AVAILABLE_NETWORKS_SUCCESS : i32 = 0;

        /// public static final [UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE)
        pub const UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE : i32 = 1;

        /// public static final [USSD_ERROR_SERVICE_UNAVAIL](https://developer.android.com/reference/android/telephony/TelephonyManager.html#USSD_ERROR_SERVICE_UNAVAIL)
        pub const USSD_ERROR_SERVICE_UNAVAIL : i32 = -2;

        /// public static final [USSD_RETURN_FAILURE](https://developer.android.com/reference/android/telephony/TelephonyManager.html#USSD_RETURN_FAILURE)
        pub const USSD_RETURN_FAILURE : i32 = -1;

        /// public static final [VVM_TYPE_CVVM](https://developer.android.com/reference/android/telephony/TelephonyManager.html#VVM_TYPE_CVVM)
        pub const VVM_TYPE_CVVM : &'static str = "vvm_type_cvvm";

        /// public static final [VVM_TYPE_OMTP](https://developer.android.com/reference/android/telephony/TelephonyManager.html#VVM_TYPE_OMTP)
        pub const VVM_TYPE_OMTP : &'static str = "vvm_type_omtp";
    }
}
