// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-telecom-Call_Callback"))]
__jni_bindgen! {
    /// public class [Call.Callback](https://developer.android.com/reference/android/telecom/Call.Callback.html)
    ///
    /// Required feature: android-telecom-Call_Callback
    public class Call_Callback ("android/telecom/Call$Callback") extends crate::java::lang::Object {

        /// [Callback](https://developer.android.com/reference/android/telecom/Call.Callback.html#Callback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::telecom::Call_Callback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStateChanged](https://developer.android.com/reference/android/telecom/Call.Callback.html#onStateChanged(android.telecom.Call,%20int))
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn onStateChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onStateChanged", .descriptor == "(Landroid/telecom/Call;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onStateChanged\0", "(Landroid/telecom/Call;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onParentChanged](https://developer.android.com/reference/android/telecom/Call.Callback.html#onParentChanged(android.telecom.Call,%20android.telecom.Call))
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn onParentChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onParentChanged", .descriptor == "(Landroid/telecom/Call;Landroid/telecom/Call;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onParentChanged\0", "(Landroid/telecom/Call;Landroid/telecom/Call;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onChildrenChanged](https://developer.android.com/reference/android/telecom/Call.Callback.html#onChildrenChanged(android.telecom.Call,%20java.util.List))
        ///
        /// Required features: "android-telecom-Call", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call", feature = "java-util-List")))]
        pub fn onChildrenChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onChildrenChanged", .descriptor == "(Landroid/telecom/Call;Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onChildrenChanged\0", "(Landroid/telecom/Call;Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDetailsChanged](https://developer.android.com/reference/android/telecom/Call.Callback.html#onDetailsChanged(android.telecom.Call,%20android.telecom.Call.Details))
        ///
        /// Required features: "android-telecom-Call", "android-telecom-Call_Details"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call", feature = "android-telecom-Call_Details")))]
        pub fn onDetailsChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call_Details>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onDetailsChanged", .descriptor == "(Landroid/telecom/Call;Landroid/telecom/Call$Details;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onDetailsChanged\0", "(Landroid/telecom/Call;Landroid/telecom/Call$Details;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCannedTextResponsesLoaded](https://developer.android.com/reference/android/telecom/Call.Callback.html#onCannedTextResponsesLoaded(android.telecom.Call,%20java.util.List))
        ///
        /// Required features: "android-telecom-Call", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call", feature = "java-util-List")))]
        pub fn onCannedTextResponsesLoaded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onCannedTextResponsesLoaded", .descriptor == "(Landroid/telecom/Call;Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onCannedTextResponsesLoaded\0", "(Landroid/telecom/Call;Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPostDialWait](https://developer.android.com/reference/android/telecom/Call.Callback.html#onPostDialWait(android.telecom.Call,%20java.lang.String))
        ///
        /// Required features: "android-telecom-Call", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call", feature = "java-lang-String")))]
        pub fn onPostDialWait<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onPostDialWait", .descriptor == "(Landroid/telecom/Call;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onPostDialWait\0", "(Landroid/telecom/Call;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onVideoCallChanged](https://developer.android.com/reference/android/telecom/Call.Callback.html#onVideoCallChanged(android.telecom.Call,%20android.telecom.InCallService.VideoCall))
        ///
        /// Required features: "android-telecom-Call", "android-telecom-InCallService_VideoCall"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call", feature = "android-telecom-InCallService_VideoCall")))]
        pub fn onVideoCallChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::InCallService_VideoCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onVideoCallChanged", .descriptor == "(Landroid/telecom/Call;Landroid/telecom/InCallService$VideoCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onVideoCallChanged\0", "(Landroid/telecom/Call;Landroid/telecom/InCallService$VideoCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallDestroyed](https://developer.android.com/reference/android/telecom/Call.Callback.html#onCallDestroyed(android.telecom.Call))
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn onCallDestroyed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onCallDestroyed", .descriptor == "(Landroid/telecom/Call;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onCallDestroyed\0", "(Landroid/telecom/Call;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConferenceableCallsChanged](https://developer.android.com/reference/android/telecom/Call.Callback.html#onConferenceableCallsChanged(android.telecom.Call,%20java.util.List))
        ///
        /// Required features: "android-telecom-Call", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call", feature = "java-util-List")))]
        pub fn onConferenceableCallsChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onConferenceableCallsChanged", .descriptor == "(Landroid/telecom/Call;Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onConferenceableCallsChanged\0", "(Landroid/telecom/Call;Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConnectionEvent](https://developer.android.com/reference/android/telecom/Call.Callback.html#onConnectionEvent(android.telecom.Call,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-telecom-Call", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-telecom-Call", feature = "java-lang-String")))]
        pub fn onConnectionEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onConnectionEvent", .descriptor == "(Landroid/telecom/Call;Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onConnectionEvent\0", "(Landroid/telecom/Call;Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRttModeChanged](https://developer.android.com/reference/android/telecom/Call.Callback.html#onRttModeChanged(android.telecom.Call,%20int))
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn onRttModeChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onRttModeChanged", .descriptor == "(Landroid/telecom/Call;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onRttModeChanged\0", "(Landroid/telecom/Call;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRttStatusChanged](https://developer.android.com/reference/android/telecom/Call.Callback.html#onRttStatusChanged(android.telecom.Call,%20boolean,%20android.telecom.Call.RttCall))
        ///
        /// Required features: "android-telecom-Call", "android-telecom-Call_RttCall"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call", feature = "android-telecom-Call_RttCall")))]
        pub fn onRttStatusChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call_RttCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onRttStatusChanged", .descriptor == "(Landroid/telecom/Call;ZLandroid/telecom/Call$RttCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onRttStatusChanged\0", "(Landroid/telecom/Call;ZLandroid/telecom/Call$RttCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRttRequest](https://developer.android.com/reference/android/telecom/Call.Callback.html#onRttRequest(android.telecom.Call,%20int))
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn onRttRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onRttRequest", .descriptor == "(Landroid/telecom/Call;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onRttRequest\0", "(Landroid/telecom/Call;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRttInitiationFailure](https://developer.android.com/reference/android/telecom/Call.Callback.html#onRttInitiationFailure(android.telecom.Call,%20int))
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn onRttInitiationFailure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onRttInitiationFailure", .descriptor == "(Landroid/telecom/Call;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onRttInitiationFailure\0", "(Landroid/telecom/Call;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHandoverComplete](https://developer.android.com/reference/android/telecom/Call.Callback.html#onHandoverComplete(android.telecom.Call))
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn onHandoverComplete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onHandoverComplete", .descriptor == "(Landroid/telecom/Call;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onHandoverComplete\0", "(Landroid/telecom/Call;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHandoverFailed](https://developer.android.com/reference/android/telecom/Call.Callback.html#onHandoverFailed(android.telecom.Call,%20int))
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn onHandoverFailed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call$Callback", java.flags == PUBLIC, .name == "onHandoverFailed", .descriptor == "(Landroid/telecom/Call;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call$Callback\0", "onHandoverFailed\0", "(Landroid/telecom/Call;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [HANDOVER_FAILURE_DEST_APP_REJECTED](https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_DEST_APP_REJECTED)
        pub const HANDOVER_FAILURE_DEST_APP_REJECTED : i32 = 1;

        /// public static final [HANDOVER_FAILURE_NOT_SUPPORTED](https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_NOT_SUPPORTED)
        pub const HANDOVER_FAILURE_NOT_SUPPORTED : i32 = 2;

        /// public static final [HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL](https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL)
        pub const HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL : i32 = 4;

        /// public static final [HANDOVER_FAILURE_UNKNOWN](https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_UNKNOWN)
        pub const HANDOVER_FAILURE_UNKNOWN : i32 = 5;

        /// public static final [HANDOVER_FAILURE_USER_REJECTED](https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_USER_REJECTED)
        pub const HANDOVER_FAILURE_USER_REJECTED : i32 = 3;
    }
}
