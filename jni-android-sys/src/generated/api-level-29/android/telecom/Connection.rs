// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-telecom-Connection"))]
__jni_bindgen! {
    /// public class [Connection](https://developer.android.com/reference/android/telecom/Connection.html)
    ///
    /// Required feature: android-telecom-Connection
    public class Connection ("android/telecom/Connection") extends crate::android::telecom::Conferenceable {

        /// [Connection](https://developer.android.com/reference/android/telecom/Connection.html#Connection())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::telecom::Connection>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [capabilitiesToString](https://developer.android.com/reference/android/telecom/Connection.html#capabilitiesToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn capabilitiesToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | STATIC, .name == "capabilitiesToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/telecom/Connection\0", "capabilitiesToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [propertiesToString](https://developer.android.com/reference/android/telecom/Connection.html#propertiesToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn propertiesToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | STATIC, .name == "propertiesToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/telecom/Connection\0", "propertiesToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAddress](https://developer.android.com/reference/android/telecom/Connection.html#getAddress())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getAddress", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getAddress\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAddressPresentation](https://developer.android.com/reference/android/telecom/Connection.html#getAddressPresentation())
        pub fn getAddressPresentation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getAddressPresentation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getAddressPresentation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCallerDisplayName](https://developer.android.com/reference/android/telecom/Connection.html#getCallerDisplayName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCallerDisplayName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getCallerDisplayName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getCallerDisplayName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCallerDisplayNamePresentation](https://developer.android.com/reference/android/telecom/Connection.html#getCallerDisplayNamePresentation())
        pub fn getCallerDisplayNamePresentation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getCallerDisplayNamePresentation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getCallerDisplayNamePresentation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getState](https://developer.android.com/reference/android/telecom/Connection.html#getState())
        pub fn getState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCallAudioState](https://developer.android.com/reference/android/telecom/Connection.html#getCallAudioState())
        ///
        /// Required features: "android-telecom-CallAudioState"
        #[cfg(any(feature = "all", all(feature = "android-telecom-CallAudioState")))]
        pub fn getCallAudioState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::CallAudioState>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getCallAudioState", .descriptor == "()Landroid/telecom/CallAudioState;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getCallAudioState\0", "()Landroid/telecom/CallAudioState;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConference](https://developer.android.com/reference/android/telecom/Connection.html#getConference())
        ///
        /// Required features: "android-telecom-Conference"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Conference")))]
        pub fn getConference<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::Conference>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getConference", .descriptor == "()Landroid/telecom/Conference;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getConference\0", "()Landroid/telecom/Conference;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRingbackRequested](https://developer.android.com/reference/android/telecom/Connection.html#isRingbackRequested())
        pub fn isRingbackRequested<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "isRingbackRequested", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "isRingbackRequested\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioModeIsVoip](https://developer.android.com/reference/android/telecom/Connection.html#getAudioModeIsVoip())
        pub fn getAudioModeIsVoip<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getAudioModeIsVoip", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getAudioModeIsVoip\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStatusHints](https://developer.android.com/reference/android/telecom/Connection.html#getStatusHints())
        ///
        /// Required features: "android-telecom-StatusHints"
        #[cfg(any(feature = "all", all(feature = "android-telecom-StatusHints")))]
        pub fn getStatusHints<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::StatusHints>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getStatusHints", .descriptor == "()Landroid/telecom/StatusHints;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getStatusHints\0", "()Landroid/telecom/StatusHints;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExtras](https://developer.android.com/reference/android/telecom/Connection.html#getExtras())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getExtras<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getExtras", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getExtras\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisconnectCause](https://developer.android.com/reference/android/telecom/Connection.html#getDisconnectCause())
        ///
        /// Required features: "android-telecom-DisconnectCause"
        #[cfg(any(feature = "all", all(feature = "android-telecom-DisconnectCause")))]
        pub fn getDisconnectCause<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::DisconnectCause>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getDisconnectCause", .descriptor == "()Landroid/telecom/DisconnectCause;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getDisconnectCause\0", "()Landroid/telecom/DisconnectCause;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stateToString](https://developer.android.com/reference/android/telecom/Connection.html#stateToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn stateToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | STATIC, .name == "stateToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/telecom/Connection\0", "stateToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConnectionCapabilities](https://developer.android.com/reference/android/telecom/Connection.html#getConnectionCapabilities())
        pub fn getConnectionCapabilities<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getConnectionCapabilities", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getConnectionCapabilities\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConnectionProperties](https://developer.android.com/reference/android/telecom/Connection.html#getConnectionProperties())
        pub fn getConnectionProperties<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getConnectionProperties", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getConnectionProperties\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAddress](https://developer.android.com/reference/android/telecom/Connection.html#setAddress(android.net.Uri,%20int))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn setAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setAddress", .descriptor == "(Landroid/net/Uri;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setAddress\0", "(Landroid/net/Uri;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCallerDisplayName](https://developer.android.com/reference/android/telecom/Connection.html#setCallerDisplayName(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setCallerDisplayName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setCallerDisplayName", .descriptor == "(Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setCallerDisplayName\0", "(Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoState](https://developer.android.com/reference/android/telecom/Connection.html#setVideoState(int))
        pub fn setVideoState<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setVideoState", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setVideoState\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setActive](https://developer.android.com/reference/android/telecom/Connection.html#setActive())
        pub fn setActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setActive", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setActive\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRinging](https://developer.android.com/reference/android/telecom/Connection.html#setRinging())
        pub fn setRinging<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setRinging", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setRinging\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInitializing](https://developer.android.com/reference/android/telecom/Connection.html#setInitializing())
        pub fn setInitializing<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setInitializing", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setInitializing\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInitialized](https://developer.android.com/reference/android/telecom/Connection.html#setInitialized())
        pub fn setInitialized<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setInitialized", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setInitialized\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDialing](https://developer.android.com/reference/android/telecom/Connection.html#setDialing())
        pub fn setDialing<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setDialing", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setDialing\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPulling](https://developer.android.com/reference/android/telecom/Connection.html#setPulling())
        pub fn setPulling<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setPulling", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setPulling\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnHold](https://developer.android.com/reference/android/telecom/Connection.html#setOnHold())
        pub fn setOnHold<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setOnHold", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setOnHold\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoProvider](https://developer.android.com/reference/android/telecom/Connection.html#setVideoProvider(android.telecom.Connection.VideoProvider))
        ///
        /// Required features: "android-telecom-Connection_VideoProvider"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Connection_VideoProvider")))]
        pub fn setVideoProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Connection_VideoProvider>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setVideoProvider", .descriptor == "(Landroid/telecom/Connection$VideoProvider;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setVideoProvider\0", "(Landroid/telecom/Connection$VideoProvider;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVideoProvider](https://developer.android.com/reference/android/telecom/Connection.html#getVideoProvider())
        ///
        /// Required features: "android-telecom-Connection_VideoProvider"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Connection_VideoProvider")))]
        pub fn getVideoProvider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::Connection_VideoProvider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getVideoProvider", .descriptor == "()Landroid/telecom/Connection$VideoProvider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getVideoProvider\0", "()Landroid/telecom/Connection$VideoProvider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDisconnected](https://developer.android.com/reference/android/telecom/Connection.html#setDisconnected(android.telecom.DisconnectCause))
        ///
        /// Required features: "android-telecom-DisconnectCause"
        #[cfg(any(feature = "all", all(feature = "android-telecom-DisconnectCause")))]
        pub fn setDisconnected<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::DisconnectCause>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setDisconnected", .descriptor == "(Landroid/telecom/DisconnectCause;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setDisconnected\0", "(Landroid/telecom/DisconnectCause;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostDialWait](https://developer.android.com/reference/android/telecom/Connection.html#setPostDialWait(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setPostDialWait<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setPostDialWait", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setPostDialWait\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextPostDialChar](https://developer.android.com/reference/android/telecom/Connection.html#setNextPostDialChar(char))
        pub fn setNextPostDialChar<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setNextPostDialChar", .descriptor == "(C)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setNextPostDialChar\0", "(C)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRingbackRequested](https://developer.android.com/reference/android/telecom/Connection.html#setRingbackRequested(boolean))
        pub fn setRingbackRequested<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setRingbackRequested", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setRingbackRequested\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setConnectionCapabilities](https://developer.android.com/reference/android/telecom/Connection.html#setConnectionCapabilities(int))
        pub fn setConnectionCapabilities<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setConnectionCapabilities", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setConnectionCapabilities\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setConnectionProperties](https://developer.android.com/reference/android/telecom/Connection.html#setConnectionProperties(int))
        pub fn setConnectionProperties<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setConnectionProperties", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setConnectionProperties\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [destroy](https://developer.android.com/reference/android/telecom/Connection.html#destroy())
        pub fn destroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "destroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "destroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioModeIsVoip](https://developer.android.com/reference/android/telecom/Connection.html#setAudioModeIsVoip(boolean))
        pub fn setAudioModeIsVoip<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setAudioModeIsVoip", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setAudioModeIsVoip\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStatusHints](https://developer.android.com/reference/android/telecom/Connection.html#setStatusHints(android.telecom.StatusHints))
        ///
        /// Required features: "android-telecom-StatusHints"
        #[cfg(any(feature = "all", all(feature = "android-telecom-StatusHints")))]
        pub fn setStatusHints<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::StatusHints>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setStatusHints", .descriptor == "(Landroid/telecom/StatusHints;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setStatusHints\0", "(Landroid/telecom/StatusHints;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setConferenceableConnections](https://developer.android.com/reference/android/telecom/Connection.html#setConferenceableConnections(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn setConferenceableConnections<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setConferenceableConnections", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setConferenceableConnections\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setConferenceables](https://developer.android.com/reference/android/telecom/Connection.html#setConferenceables(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn setConferenceables<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setConferenceables", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setConferenceables\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConferenceables](https://developer.android.com/reference/android/telecom/Connection.html#getConferenceables())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getConferenceables<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "getConferenceables", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "getConferenceables\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setExtras](https://developer.android.com/reference/android/telecom/Connection.html#setExtras(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn setExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setExtras", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setExtras\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putExtras](https://developer.android.com/reference/android/telecom/Connection.html#putExtras(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn putExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "putExtras", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "putExtras\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeExtras](https://developer.android.com/reference/android/telecom/Connection.html#removeExtras(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn removeExtras_List<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "removeExtras", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "removeExtras\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeExtras](https://developer.android.com/reference/android/telecom/Connection.html#removeExtras(java.lang.String...))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn removeExtras_String_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL | VARARGS, .name == "removeExtras", .descriptor == "([Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "removeExtras\0", "([Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioRoute](https://developer.android.com/reference/android/telecom/Connection.html#setAudioRoute(int))
        pub fn setAudioRoute<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "setAudioRoute", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "setAudioRoute\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestBluetoothAudio](https://developer.android.com/reference/android/telecom/Connection.html#requestBluetoothAudio(android.bluetooth.BluetoothDevice))
        ///
        /// Required features: "android-bluetooth-BluetoothDevice"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothDevice")))]
        pub fn requestBluetoothAudio<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothDevice>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "requestBluetoothAudio", .descriptor == "(Landroid/bluetooth/BluetoothDevice;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "requestBluetoothAudio\0", "(Landroid/bluetooth/BluetoothDevice;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendRttInitiationSuccess](https://developer.android.com/reference/android/telecom/Connection.html#sendRttInitiationSuccess())
        pub fn sendRttInitiationSuccess<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "sendRttInitiationSuccess", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "sendRttInitiationSuccess\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendRttInitiationFailure](https://developer.android.com/reference/android/telecom/Connection.html#sendRttInitiationFailure(int))
        pub fn sendRttInitiationFailure<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "sendRttInitiationFailure", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "sendRttInitiationFailure\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendRttSessionRemotelyTerminated](https://developer.android.com/reference/android/telecom/Connection.html#sendRttSessionRemotelyTerminated())
        pub fn sendRttSessionRemotelyTerminated<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "sendRttSessionRemotelyTerminated", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "sendRttSessionRemotelyTerminated\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendRemoteRttRequest](https://developer.android.com/reference/android/telecom/Connection.html#sendRemoteRttRequest())
        pub fn sendRemoteRttRequest<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | FINAL, .name == "sendRemoteRttRequest", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "sendRemoteRttRequest\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallAudioStateChanged](https://developer.android.com/reference/android/telecom/Connection.html#onCallAudioStateChanged(android.telecom.CallAudioState))
        ///
        /// Required features: "android-telecom-CallAudioState"
        #[cfg(any(feature = "all", all(feature = "android-telecom-CallAudioState")))]
        pub fn onCallAudioStateChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::CallAudioState>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onCallAudioStateChanged", .descriptor == "(Landroid/telecom/CallAudioState;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onCallAudioStateChanged\0", "(Landroid/telecom/CallAudioState;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStateChanged](https://developer.android.com/reference/android/telecom/Connection.html#onStateChanged(int))
        pub fn onStateChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onStateChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onStateChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPlayDtmfTone](https://developer.android.com/reference/android/telecom/Connection.html#onPlayDtmfTone(char))
        pub fn onPlayDtmfTone<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onPlayDtmfTone", .descriptor == "(C)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onPlayDtmfTone\0", "(C)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStopDtmfTone](https://developer.android.com/reference/android/telecom/Connection.html#onStopDtmfTone())
        pub fn onStopDtmfTone<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onStopDtmfTone", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onStopDtmfTone\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDisconnect](https://developer.android.com/reference/android/telecom/Connection.html#onDisconnect())
        pub fn onDisconnect<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onDisconnect", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onDisconnect\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSeparate](https://developer.android.com/reference/android/telecom/Connection.html#onSeparate())
        pub fn onSeparate<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onSeparate", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onSeparate\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAbort](https://developer.android.com/reference/android/telecom/Connection.html#onAbort())
        pub fn onAbort<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onAbort", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onAbort\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHold](https://developer.android.com/reference/android/telecom/Connection.html#onHold())
        pub fn onHold<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onHold", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onHold\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUnhold](https://developer.android.com/reference/android/telecom/Connection.html#onUnhold())
        pub fn onUnhold<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onUnhold", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onUnhold\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnswer](https://developer.android.com/reference/android/telecom/Connection.html#onAnswer(int))
        pub fn onAnswer_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onAnswer", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onAnswer\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnswer](https://developer.android.com/reference/android/telecom/Connection.html#onAnswer())
        pub fn onAnswer<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onAnswer", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onAnswer\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDeflect](https://developer.android.com/reference/android/telecom/Connection.html#onDeflect(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn onDeflect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onDeflect", .descriptor == "(Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onDeflect\0", "(Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReject](https://developer.android.com/reference/android/telecom/Connection.html#onReject())
        pub fn onReject<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onReject", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onReject\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReject](https://developer.android.com/reference/android/telecom/Connection.html#onReject(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn onReject_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onReject", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onReject\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSilence](https://developer.android.com/reference/android/telecom/Connection.html#onSilence())
        pub fn onSilence<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onSilence", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onSilence\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPostDialContinue](https://developer.android.com/reference/android/telecom/Connection.html#onPostDialContinue(boolean))
        pub fn onPostDialContinue<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onPostDialContinue", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onPostDialContinue\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPullExternalCall](https://developer.android.com/reference/android/telecom/Connection.html#onPullExternalCall())
        pub fn onPullExternalCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onPullExternalCall", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onPullExternalCall\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallEvent](https://developer.android.com/reference/android/telecom/Connection.html#onCallEvent(java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn onCallEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onCallEvent", .descriptor == "(Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onCallEvent\0", "(Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHandoverComplete](https://developer.android.com/reference/android/telecom/Connection.html#onHandoverComplete())
        pub fn onHandoverComplete<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onHandoverComplete", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onHandoverComplete\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onExtrasChanged](https://developer.android.com/reference/android/telecom/Connection.html#onExtrasChanged(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn onExtrasChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onExtrasChanged", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onExtrasChanged\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onShowIncomingCallUi](https://developer.android.com/reference/android/telecom/Connection.html#onShowIncomingCallUi())
        pub fn onShowIncomingCallUi<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onShowIncomingCallUi", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onShowIncomingCallUi\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStartRtt](https://developer.android.com/reference/android/telecom/Connection.html#onStartRtt(android.telecom.Connection.RttTextStream))
        ///
        /// Required features: "android-telecom-Connection_RttTextStream"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Connection_RttTextStream")))]
        pub fn onStartRtt<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Connection_RttTextStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onStartRtt", .descriptor == "(Landroid/telecom/Connection$RttTextStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onStartRtt\0", "(Landroid/telecom/Connection$RttTextStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStopRtt](https://developer.android.com/reference/android/telecom/Connection.html#onStopRtt())
        pub fn onStopRtt<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "onStopRtt", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "onStopRtt\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handleRttUpgradeResponse](https://developer.android.com/reference/android/telecom/Connection.html#handleRttUpgradeResponse(android.telecom.Connection.RttTextStream))
        ///
        /// Required features: "android-telecom-Connection_RttTextStream"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Connection_RttTextStream")))]
        pub fn handleRttUpgradeResponse<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Connection_RttTextStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "handleRttUpgradeResponse", .descriptor == "(Landroid/telecom/Connection$RttTextStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "handleRttUpgradeResponse\0", "(Landroid/telecom/Connection$RttTextStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createFailedConnection](https://developer.android.com/reference/android/telecom/Connection.html#createFailedConnection(android.telecom.DisconnectCause))
        ///
        /// Required features: "android-telecom-Connection", "android-telecom-DisconnectCause"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Connection", feature = "android-telecom-DisconnectCause")))]
        pub fn createFailedConnection<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::DisconnectCause>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::Connection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | STATIC, .name == "createFailedConnection", .descriptor == "(Landroid/telecom/DisconnectCause;)Landroid/telecom/Connection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/telecom/Connection\0", "createFailedConnection\0", "(Landroid/telecom/DisconnectCause;)Landroid/telecom/Connection;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createCanceledConnection](https://developer.android.com/reference/android/telecom/Connection.html#createCanceledConnection())
        ///
        /// Required features: "android-telecom-Connection"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Connection")))]
        pub fn createCanceledConnection<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::Connection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC | STATIC, .name == "createCanceledConnection", .descriptor == "()Landroid/telecom/Connection;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/telecom/Connection\0", "createCanceledConnection\0", "()Landroid/telecom/Connection;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendConnectionEvent](https://developer.android.com/reference/android/telecom/Connection.html#sendConnectionEvent(java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn sendConnectionEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Connection", java.flags == PUBLIC, .name == "sendConnectionEvent", .descriptor == "(Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Connection\0", "sendConnectionEvent\0", "(Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO)
        pub const CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO : i32 = 8388608;

        /// public static final [CAPABILITY_CAN_PAUSE_VIDEO](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CAN_PAUSE_VIDEO)
        pub const CAPABILITY_CAN_PAUSE_VIDEO : i32 = 1048576;

        /// public static final [CAPABILITY_CAN_PULL_CALL](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CAN_PULL_CALL)
        pub const CAPABILITY_CAN_PULL_CALL : i32 = 16777216;

        /// public static final [CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION)
        pub const CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION : i32 = 4194304;

        /// public static final [CAPABILITY_CAN_UPGRADE_TO_VIDEO](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CAN_UPGRADE_TO_VIDEO)
        #[deprecated] pub const CAPABILITY_CAN_UPGRADE_TO_VIDEO : i32 = 524288;

        /// public static final [CAPABILITY_DISCONNECT_FROM_CONFERENCE](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_DISCONNECT_FROM_CONFERENCE)
        pub const CAPABILITY_DISCONNECT_FROM_CONFERENCE : i32 = 8192;

        /// public static final [CAPABILITY_HOLD](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_HOLD)
        pub const CAPABILITY_HOLD : i32 = 1;

        /// public static final [CAPABILITY_MANAGE_CONFERENCE](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_MANAGE_CONFERENCE)
        pub const CAPABILITY_MANAGE_CONFERENCE : i32 = 128;

        /// public static final [CAPABILITY_MERGE_CONFERENCE](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_MERGE_CONFERENCE)
        pub const CAPABILITY_MERGE_CONFERENCE : i32 = 4;

        /// public static final [CAPABILITY_MUTE](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_MUTE)
        pub const CAPABILITY_MUTE : i32 = 64;

        /// public static final [CAPABILITY_RESPOND_VIA_TEXT](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_RESPOND_VIA_TEXT)
        pub const CAPABILITY_RESPOND_VIA_TEXT : i32 = 32;

        /// public static final [CAPABILITY_SEPARATE_FROM_CONFERENCE](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SEPARATE_FROM_CONFERENCE)
        pub const CAPABILITY_SEPARATE_FROM_CONFERENCE : i32 = 4096;

        /// public static final [CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL)
        pub const CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL : i32 = 768;

        /// public static final [CAPABILITY_SUPPORTS_VT_LOCAL_RX](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_LOCAL_RX)
        pub const CAPABILITY_SUPPORTS_VT_LOCAL_RX : i32 = 256;

        /// public static final [CAPABILITY_SUPPORTS_VT_LOCAL_TX](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_LOCAL_TX)
        pub const CAPABILITY_SUPPORTS_VT_LOCAL_TX : i32 = 512;

        /// public static final [CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL)
        pub const CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL : i32 = 3072;

        /// public static final [CAPABILITY_SUPPORTS_VT_REMOTE_RX](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_REMOTE_RX)
        pub const CAPABILITY_SUPPORTS_VT_REMOTE_RX : i32 = 1024;

        /// public static final [CAPABILITY_SUPPORTS_VT_REMOTE_TX](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_REMOTE_TX)
        pub const CAPABILITY_SUPPORTS_VT_REMOTE_TX : i32 = 2048;

        /// public static final [CAPABILITY_SUPPORT_DEFLECT](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORT_DEFLECT)
        pub const CAPABILITY_SUPPORT_DEFLECT : i32 = 33554432;

        /// public static final [CAPABILITY_SUPPORT_HOLD](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORT_HOLD)
        pub const CAPABILITY_SUPPORT_HOLD : i32 = 2;

        /// public static final [CAPABILITY_SWAP_CONFERENCE](https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SWAP_CONFERENCE)
        pub const CAPABILITY_SWAP_CONFERENCE : i32 = 8;

        /// public static final [EVENT_CALL_MERGE_FAILED](https://developer.android.com/reference/android/telecom/Connection.html#EVENT_CALL_MERGE_FAILED)
        pub const EVENT_CALL_MERGE_FAILED : &'static str = "android.telecom.event.CALL_MERGE_FAILED";

        /// public static final [EVENT_CALL_PULL_FAILED](https://developer.android.com/reference/android/telecom/Connection.html#EVENT_CALL_PULL_FAILED)
        pub const EVENT_CALL_PULL_FAILED : &'static str = "android.telecom.event.CALL_PULL_FAILED";

        /// public static final [EVENT_RTT_AUDIO_INDICATION_CHANGED](https://developer.android.com/reference/android/telecom/Connection.html#EVENT_RTT_AUDIO_INDICATION_CHANGED)
        pub const EVENT_RTT_AUDIO_INDICATION_CHANGED : &'static str = "android.telecom.event.RTT_AUDIO_INDICATION_CHANGED";

        /// public static final [EXTRA_ANSWERING_DROPS_FG_CALL](https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_ANSWERING_DROPS_FG_CALL)
        pub const EXTRA_ANSWERING_DROPS_FG_CALL : &'static str = "android.telecom.extra.ANSWERING_DROPS_FG_CALL";

        /// public static final [EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAME](https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAME)
        pub const EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAME : &'static str = "android.telecom.extra.ANSWERING_DROPS_FG_CALL_APP_NAME";

        /// public static final [EXTRA_CALL_SUBJECT](https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_CALL_SUBJECT)
        pub const EXTRA_CALL_SUBJECT : &'static str = "android.telecom.extra.CALL_SUBJECT";

        /// public static final [EXTRA_CHILD_ADDRESS](https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_CHILD_ADDRESS)
        pub const EXTRA_CHILD_ADDRESS : &'static str = "android.telecom.extra.CHILD_ADDRESS";

        /// public static final [EXTRA_IS_RTT_AUDIO_PRESENT](https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_IS_RTT_AUDIO_PRESENT)
        pub const EXTRA_IS_RTT_AUDIO_PRESENT : &'static str = "android.telecom.extra.IS_RTT_AUDIO_PRESENT";

        /// public static final [EXTRA_LAST_FORWARDED_NUMBER](https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_LAST_FORWARDED_NUMBER)
        pub const EXTRA_LAST_FORWARDED_NUMBER : &'static str = "android.telecom.extra.LAST_FORWARDED_NUMBER";

        /// public static final [EXTRA_SIP_INVITE](https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_SIP_INVITE)
        pub const EXTRA_SIP_INVITE : &'static str = "android.telecom.extra.SIP_INVITE";

        /// public static final [PROPERTY_HAS_CDMA_VOICE_PRIVACY](https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_HAS_CDMA_VOICE_PRIVACY)
        pub const PROPERTY_HAS_CDMA_VOICE_PRIVACY : i32 = 32;

        /// public static final [PROPERTY_IS_EXTERNAL_CALL](https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_IS_EXTERNAL_CALL)
        pub const PROPERTY_IS_EXTERNAL_CALL : i32 = 16;

        /// public static final [PROPERTY_IS_RTT](https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_IS_RTT)
        pub const PROPERTY_IS_RTT : i32 = 256;

        /// public static final [PROPERTY_SELF_MANAGED](https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_SELF_MANAGED)
        pub const PROPERTY_SELF_MANAGED : i32 = 128;

        /// public static final [STATE_ACTIVE](https://developer.android.com/reference/android/telecom/Connection.html#STATE_ACTIVE)
        pub const STATE_ACTIVE : i32 = 4;

        /// public static final [STATE_DIALING](https://developer.android.com/reference/android/telecom/Connection.html#STATE_DIALING)
        pub const STATE_DIALING : i32 = 3;

        /// public static final [STATE_DISCONNECTED](https://developer.android.com/reference/android/telecom/Connection.html#STATE_DISCONNECTED)
        pub const STATE_DISCONNECTED : i32 = 6;

        /// public static final [STATE_HOLDING](https://developer.android.com/reference/android/telecom/Connection.html#STATE_HOLDING)
        pub const STATE_HOLDING : i32 = 5;

        /// public static final [STATE_INITIALIZING](https://developer.android.com/reference/android/telecom/Connection.html#STATE_INITIALIZING)
        pub const STATE_INITIALIZING : i32 = 0;

        /// public static final [STATE_NEW](https://developer.android.com/reference/android/telecom/Connection.html#STATE_NEW)
        pub const STATE_NEW : i32 = 1;

        /// public static final [STATE_PULLING_CALL](https://developer.android.com/reference/android/telecom/Connection.html#STATE_PULLING_CALL)
        pub const STATE_PULLING_CALL : i32 = 7;

        /// public static final [STATE_RINGING](https://developer.android.com/reference/android/telecom/Connection.html#STATE_RINGING)
        pub const STATE_RINGING : i32 = 2;
    }
}
