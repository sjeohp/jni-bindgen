// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-telecom-Call"))]
__jni_bindgen! {
    /// public final class [Call](https://developer.android.com/reference/android/telecom/Call.html)
    ///
    /// Required feature: android-telecom-Call
    public final class Call ("android/telecom/Call") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Call](https://developer.android.com/reference/android/telecom/Call.html#Call())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::telecom::Call>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/telecom/Call", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getRemainingPostDialSequence](https://developer.android.com/reference/android/telecom/Call.html#getRemainingPostDialSequence())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getRemainingPostDialSequence<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "getRemainingPostDialSequence", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "getRemainingPostDialSequence\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [answer](https://developer.android.com/reference/android/telecom/Call.html#answer(int))
        pub fn answer<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "answer", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "answer\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deflect](https://developer.android.com/reference/android/telecom/Call.html#deflect(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn deflect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "deflect", .descriptor == "(Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "deflect\0", "(Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reject](https://developer.android.com/reference/android/telecom/Call.html#reject(boolean,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn reject<'env>(&'env self, arg0: bool, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "reject", .descriptor == "(ZLjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "reject\0", "(ZLjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [disconnect](https://developer.android.com/reference/android/telecom/Call.html#disconnect())
        pub fn disconnect<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "disconnect", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "disconnect\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hold](https://developer.android.com/reference/android/telecom/Call.html#hold())
        pub fn hold<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "hold", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "hold\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unhold](https://developer.android.com/reference/android/telecom/Call.html#unhold())
        pub fn unhold<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "unhold", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "unhold\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [playDtmfTone](https://developer.android.com/reference/android/telecom/Call.html#playDtmfTone(char))
        pub fn playDtmfTone<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "playDtmfTone", .descriptor == "(C)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "playDtmfTone\0", "(C)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopDtmfTone](https://developer.android.com/reference/android/telecom/Call.html#stopDtmfTone())
        pub fn stopDtmfTone<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "stopDtmfTone", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "stopDtmfTone\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postDialContinue](https://developer.android.com/reference/android/telecom/Call.html#postDialContinue(boolean))
        pub fn postDialContinue<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "postDialContinue", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "postDialContinue\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [phoneAccountSelected](https://developer.android.com/reference/android/telecom/Call.html#phoneAccountSelected(android.telecom.PhoneAccountHandle,%20boolean))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle")))]
        pub fn phoneAccountSelected<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "phoneAccountSelected", .descriptor == "(Landroid/telecom/PhoneAccountHandle;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "phoneAccountSelected\0", "(Landroid/telecom/PhoneAccountHandle;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [conference](https://developer.android.com/reference/android/telecom/Call.html#conference(android.telecom.Call))
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn conference<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "conference", .descriptor == "(Landroid/telecom/Call;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "conference\0", "(Landroid/telecom/Call;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [splitFromConference](https://developer.android.com/reference/android/telecom/Call.html#splitFromConference())
        pub fn splitFromConference<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "splitFromConference", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "splitFromConference\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mergeConference](https://developer.android.com/reference/android/telecom/Call.html#mergeConference())
        pub fn mergeConference<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "mergeConference", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "mergeConference\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [swapConference](https://developer.android.com/reference/android/telecom/Call.html#swapConference())
        pub fn swapConference<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "swapConference", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "swapConference\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pullExternalCall](https://developer.android.com/reference/android/telecom/Call.html#pullExternalCall())
        pub fn pullExternalCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "pullExternalCall", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "pullExternalCall\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendCallEvent](https://developer.android.com/reference/android/telecom/Call.html#sendCallEvent(java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn sendCallEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "sendCallEvent", .descriptor == "(Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "sendCallEvent\0", "(Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendRttRequest](https://developer.android.com/reference/android/telecom/Call.html#sendRttRequest())
        pub fn sendRttRequest<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "sendRttRequest", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "sendRttRequest\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [respondToRttRequest](https://developer.android.com/reference/android/telecom/Call.html#respondToRttRequest(int,%20boolean))
        pub fn respondToRttRequest<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "respondToRttRequest", .descriptor == "(IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "respondToRttRequest\0", "(IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handoverTo](https://developer.android.com/reference/android/telecom/Call.html#handoverTo(android.telecom.PhoneAccountHandle,%20int,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-telecom-PhoneAccountHandle")))]
        pub fn handoverTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "handoverTo", .descriptor == "(Landroid/telecom/PhoneAccountHandle;ILandroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "handoverTo\0", "(Landroid/telecom/PhoneAccountHandle;ILandroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopRtt](https://developer.android.com/reference/android/telecom/Call.html#stopRtt())
        pub fn stopRtt<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "stopRtt", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "stopRtt\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putExtras](https://developer.android.com/reference/android/telecom/Call.html#putExtras(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn putExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "putExtras", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "putExtras\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeExtras](https://developer.android.com/reference/android/telecom/Call.html#removeExtras(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn removeExtras_List<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "removeExtras", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "removeExtras\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeExtras](https://developer.android.com/reference/android/telecom/Call.html#removeExtras(java.lang.String...))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn removeExtras_String_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC | VARARGS, .name == "removeExtras", .descriptor == "([Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "removeExtras\0", "([Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParent](https://developer.android.com/reference/android/telecom/Call.html#getParent())
        ///
        /// Required features: "android-telecom-Call"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call")))]
        pub fn getParent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::Call>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "getParent", .descriptor == "()Landroid/telecom/Call;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "getParent\0", "()Landroid/telecom/Call;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChildren](https://developer.android.com/reference/android/telecom/Call.html#getChildren())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getChildren<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "getChildren", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "getChildren\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConferenceableCalls](https://developer.android.com/reference/android/telecom/Call.html#getConferenceableCalls())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getConferenceableCalls<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "getConferenceableCalls", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "getConferenceableCalls\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getState](https://developer.android.com/reference/android/telecom/Call.html#getState())
        pub fn getState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "getState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "getState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCannedTextResponses](https://developer.android.com/reference/android/telecom/Call.html#getCannedTextResponses())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getCannedTextResponses<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "getCannedTextResponses", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "getCannedTextResponses\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVideoCall](https://developer.android.com/reference/android/telecom/Call.html#getVideoCall())
        ///
        /// Required features: "android-telecom-InCallService_VideoCall"
        #[cfg(any(feature = "all", all(feature = "android-telecom-InCallService_VideoCall")))]
        pub fn getVideoCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::InCallService_VideoCall>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "getVideoCall", .descriptor == "()Landroid/telecom/InCallService$VideoCall;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "getVideoCall\0", "()Landroid/telecom/InCallService$VideoCall;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDetails](https://developer.android.com/reference/android/telecom/Call.html#getDetails())
        ///
        /// Required features: "android-telecom-Call_Details"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call_Details")))]
        pub fn getDetails<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::Call_Details>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "getDetails", .descriptor == "()Landroid/telecom/Call$Details;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "getDetails\0", "()Landroid/telecom/Call$Details;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRttCall](https://developer.android.com/reference/android/telecom/Call.html#getRttCall())
        ///
        /// Required features: "android-telecom-Call_RttCall"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call_RttCall")))]
        pub fn getRttCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::Call_RttCall>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "getRttCall", .descriptor == "()Landroid/telecom/Call$RttCall;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "getRttCall\0", "()Landroid/telecom/Call$RttCall;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRttActive](https://developer.android.com/reference/android/telecom/Call.html#isRttActive())
        pub fn isRttActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "isRttActive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "isRttActive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerCallback](https://developer.android.com/reference/android/telecom/Call.html#registerCallback(android.telecom.Call.Callback))
        ///
        /// Required features: "android-telecom-Call_Callback"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call_Callback")))]
        pub fn registerCallback_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "registerCallback", .descriptor == "(Landroid/telecom/Call$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "registerCallback\0", "(Landroid/telecom/Call$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerCallback](https://developer.android.com/reference/android/telecom/Call.html#registerCallback(android.telecom.Call.Callback,%20android.os.Handler))
        ///
        /// Required features: "android-os-Handler", "android-telecom-Call_Callback"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-telecom-Call_Callback")))]
        pub fn registerCallback_Callback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call_Callback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "registerCallback", .descriptor == "(Landroid/telecom/Call$Callback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "registerCallback\0", "(Landroid/telecom/Call$Callback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterCallback](https://developer.android.com/reference/android/telecom/Call.html#unregisterCallback(android.telecom.Call.Callback))
        ///
        /// Required features: "android-telecom-Call_Callback"
        #[cfg(any(feature = "all", all(feature = "android-telecom-Call_Callback")))]
        pub fn unregisterCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::Call_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "unregisterCallback", .descriptor == "(Landroid/telecom/Call$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "unregisterCallback\0", "(Landroid/telecom/Call$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/telecom/Call.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/Call", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/Call\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [AVAILABLE_PHONE_ACCOUNTS](https://developer.android.com/reference/android/telecom/Call.html#AVAILABLE_PHONE_ACCOUNTS)
        #[deprecated] pub const AVAILABLE_PHONE_ACCOUNTS : &'static str = "selectPhoneAccountAccounts";

        /// public static final [EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS](https://developer.android.com/reference/android/telecom/Call.html#EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS)
        pub const EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS : &'static str = "android.telecom.extra.LAST_EMERGENCY_CALLBACK_TIME_MILLIS";

        /// public static final [EXTRA_SILENT_RINGING_REQUESTED](https://developer.android.com/reference/android/telecom/Call.html#EXTRA_SILENT_RINGING_REQUESTED)
        pub const EXTRA_SILENT_RINGING_REQUESTED : &'static str = "android.telecom.extra.SILENT_RINGING_REQUESTED";

        /// public static final [EXTRA_SUGGESTED_PHONE_ACCOUNTS](https://developer.android.com/reference/android/telecom/Call.html#EXTRA_SUGGESTED_PHONE_ACCOUNTS)
        pub const EXTRA_SUGGESTED_PHONE_ACCOUNTS : &'static str = "android.telecom.extra.SUGGESTED_PHONE_ACCOUNTS";

        /// public static final [STATE_ACTIVE](https://developer.android.com/reference/android/telecom/Call.html#STATE_ACTIVE)
        pub const STATE_ACTIVE : i32 = 4;

        /// public static final [STATE_CONNECTING](https://developer.android.com/reference/android/telecom/Call.html#STATE_CONNECTING)
        pub const STATE_CONNECTING : i32 = 9;

        /// public static final [STATE_DIALING](https://developer.android.com/reference/android/telecom/Call.html#STATE_DIALING)
        pub const STATE_DIALING : i32 = 1;

        /// public static final [STATE_DISCONNECTED](https://developer.android.com/reference/android/telecom/Call.html#STATE_DISCONNECTED)
        pub const STATE_DISCONNECTED : i32 = 7;

        /// public static final [STATE_DISCONNECTING](https://developer.android.com/reference/android/telecom/Call.html#STATE_DISCONNECTING)
        pub const STATE_DISCONNECTING : i32 = 10;

        /// public static final [STATE_HOLDING](https://developer.android.com/reference/android/telecom/Call.html#STATE_HOLDING)
        pub const STATE_HOLDING : i32 = 3;

        /// public static final [STATE_NEW](https://developer.android.com/reference/android/telecom/Call.html#STATE_NEW)
        pub const STATE_NEW : i32 = 0;

        /// public static final [STATE_PULLING_CALL](https://developer.android.com/reference/android/telecom/Call.html#STATE_PULLING_CALL)
        pub const STATE_PULLING_CALL : i32 = 11;

        /// public static final [STATE_RINGING](https://developer.android.com/reference/android/telecom/Call.html#STATE_RINGING)
        pub const STATE_RINGING : i32 = 2;

        /// public static final [STATE_SELECT_PHONE_ACCOUNT](https://developer.android.com/reference/android/telecom/Call.html#STATE_SELECT_PHONE_ACCOUNT)
        pub const STATE_SELECT_PHONE_ACCOUNT : i32 = 8;
    }
}
