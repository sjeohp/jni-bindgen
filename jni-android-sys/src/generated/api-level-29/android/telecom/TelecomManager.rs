// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-telecom-TelecomManager"))]
__jni_bindgen! {
    /// public class [TelecomManager](https://developer.android.com/reference/android/telecom/TelecomManager.html)
    ///
    /// Required feature: android-telecom-TelecomManager
    public class TelecomManager ("android/telecom/TelecomManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [TelecomManager](https://developer.android.com/reference/android/telecom/TelecomManager.html#TelecomManager(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::telecom::TelecomManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/telecom/TelecomManager", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDefaultOutgoingPhoneAccount](https://developer.android.com/reference/android/telecom/TelecomManager.html#getDefaultOutgoingPhoneAccount(java.lang.String))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle", feature = "java-lang-String")))]
        pub fn getDefaultOutgoingPhoneAccount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::PhoneAccountHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getDefaultOutgoingPhoneAccount", .descriptor == "(Ljava/lang/String;)Landroid/telecom/PhoneAccountHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getDefaultOutgoingPhoneAccount\0", "(Ljava/lang/String;)Landroid/telecom/PhoneAccountHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserSelectedOutgoingPhoneAccount](https://developer.android.com/reference/android/telecom/TelecomManager.html#getUserSelectedOutgoingPhoneAccount())
        ///
        /// Required features: "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle")))]
        pub fn getUserSelectedOutgoingPhoneAccount<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::PhoneAccountHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getUserSelectedOutgoingPhoneAccount", .descriptor == "()Landroid/telecom/PhoneAccountHandle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getUserSelectedOutgoingPhoneAccount\0", "()Landroid/telecom/PhoneAccountHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimCallManager](https://developer.android.com/reference/android/telecom/TelecomManager.html#getSimCallManager())
        ///
        /// Required features: "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle")))]
        pub fn getSimCallManager<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::PhoneAccountHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getSimCallManager", .descriptor == "()Landroid/telecom/PhoneAccountHandle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getSimCallManager\0", "()Landroid/telecom/PhoneAccountHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCallCapablePhoneAccounts](https://developer.android.com/reference/android/telecom/TelecomManager.html#getCallCapablePhoneAccounts())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getCallCapablePhoneAccounts<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getCallCapablePhoneAccounts", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getCallCapablePhoneAccounts\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSelfManagedPhoneAccounts](https://developer.android.com/reference/android/telecom/TelecomManager.html#getSelfManagedPhoneAccounts())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getSelfManagedPhoneAccounts<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getSelfManagedPhoneAccounts", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getSelfManagedPhoneAccounts\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPhoneAccount](https://developer.android.com/reference/android/telecom/TelecomManager.html#getPhoneAccount(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-telecom-PhoneAccount", "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccount", feature = "android-telecom-PhoneAccountHandle")))]
        pub fn getPhoneAccount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::telecom::PhoneAccount>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getPhoneAccount", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)Landroid/telecom/PhoneAccount;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getPhoneAccount\0", "(Landroid/telecom/PhoneAccountHandle;)Landroid/telecom/PhoneAccount;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerPhoneAccount](https://developer.android.com/reference/android/telecom/TelecomManager.html#registerPhoneAccount(android.telecom.PhoneAccount))
        ///
        /// Required features: "android-telecom-PhoneAccount"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccount")))]
        pub fn registerPhoneAccount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccount>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "registerPhoneAccount", .descriptor == "(Landroid/telecom/PhoneAccount;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "registerPhoneAccount\0", "(Landroid/telecom/PhoneAccount;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterPhoneAccount](https://developer.android.com/reference/android/telecom/TelecomManager.html#unregisterPhoneAccount(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle")))]
        pub fn unregisterPhoneAccount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "unregisterPhoneAccount", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "unregisterPhoneAccount\0", "(Landroid/telecom/PhoneAccountHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultDialerPackage](https://developer.android.com/reference/android/telecom/TelecomManager.html#getDefaultDialerPackage())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDefaultDialerPackage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getDefaultDialerPackage", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getDefaultDialerPackage\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemDialerPackage](https://developer.android.com/reference/android/telecom/TelecomManager.html#getSystemDialerPackage())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSystemDialerPackage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getSystemDialerPackage", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getSystemDialerPackage\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVoiceMailNumber](https://developer.android.com/reference/android/telecom/TelecomManager.html#isVoiceMailNumber(android.telecom.PhoneAccountHandle,%20java.lang.String))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle", feature = "java-lang-String")))]
        pub fn isVoiceMailNumber<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "isVoiceMailNumber", .descriptor == "(Landroid/telecom/PhoneAccountHandle;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "isVoiceMailNumber\0", "(Landroid/telecom/PhoneAccountHandle;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVoiceMailNumber](https://developer.android.com/reference/android/telecom/TelecomManager.html#getVoiceMailNumber(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle", feature = "java-lang-String")))]
        pub fn getVoiceMailNumber<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getVoiceMailNumber", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getVoiceMailNumber\0", "(Landroid/telecom/PhoneAccountHandle;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLine1Number](https://developer.android.com/reference/android/telecom/TelecomManager.html#getLine1Number(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle", feature = "java-lang-String")))]
        pub fn getLine1Number<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getLine1Number", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getLine1Number\0", "(Landroid/telecom/PhoneAccountHandle;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInCall](https://developer.android.com/reference/android/telecom/TelecomManager.html#isInCall())
        pub fn isInCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "isInCall", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "isInCall\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInManagedCall](https://developer.android.com/reference/android/telecom/TelecomManager.html#isInManagedCall())
        pub fn isInManagedCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "isInManagedCall", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "isInManagedCall\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [endCall](https://developer.android.com/reference/android/telecom/TelecomManager.html#endCall())
        #[deprecated] pub fn endCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "endCall", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "endCall\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acceptRingingCall](https://developer.android.com/reference/android/telecom/TelecomManager.html#acceptRingingCall())
        #[deprecated] pub fn acceptRingingCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "acceptRingingCall", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "acceptRingingCall\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acceptRingingCall](https://developer.android.com/reference/android/telecom/TelecomManager.html#acceptRingingCall(int))
        #[deprecated] pub fn acceptRingingCall_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "acceptRingingCall", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "acceptRingingCall\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [silenceRinger](https://developer.android.com/reference/android/telecom/TelecomManager.html#silenceRinger())
        pub fn silenceRinger<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "silenceRinger", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "silenceRinger\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTtySupported](https://developer.android.com/reference/android/telecom/TelecomManager.html#isTtySupported())
        pub fn isTtySupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "isTtySupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "isTtySupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addNewIncomingCall](https://developer.android.com/reference/android/telecom/TelecomManager.html#addNewIncomingCall(android.telecom.PhoneAccountHandle,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-telecom-PhoneAccountHandle")))]
        pub fn addNewIncomingCall<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "addNewIncomingCall", .descriptor == "(Landroid/telecom/PhoneAccountHandle;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "addNewIncomingCall\0", "(Landroid/telecom/PhoneAccountHandle;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handleMmi](https://developer.android.com/reference/android/telecom/TelecomManager.html#handleMmi(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn handleMmi_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "handleMmi", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "handleMmi\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handleMmi](https://developer.android.com/reference/android/telecom/TelecomManager.html#handleMmi(java.lang.String,%20android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle", feature = "java-lang-String")))]
        pub fn handleMmi_String_PhoneAccountHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "handleMmi", .descriptor == "(Ljava/lang/String;Landroid/telecom/PhoneAccountHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "handleMmi\0", "(Ljava/lang/String;Landroid/telecom/PhoneAccountHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAdnUriForPhoneAccount](https://developer.android.com/reference/android/telecom/TelecomManager.html#getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-net-Uri", "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-telecom-PhoneAccountHandle")))]
        pub fn getAdnUriForPhoneAccount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "getAdnUriForPhoneAccount", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "getAdnUriForPhoneAccount\0", "(Landroid/telecom/PhoneAccountHandle;)Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelMissedCallsNotification](https://developer.android.com/reference/android/telecom/TelecomManager.html#cancelMissedCallsNotification())
        pub fn cancelMissedCallsNotification<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "cancelMissedCallsNotification", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "cancelMissedCallsNotification\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showInCallScreen](https://developer.android.com/reference/android/telecom/TelecomManager.html#showInCallScreen(boolean))
        pub fn showInCallScreen<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "showInCallScreen", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "showInCallScreen\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [placeCall](https://developer.android.com/reference/android/telecom/TelecomManager.html#placeCall(android.net.Uri,%20android.os.Bundle))
        ///
        /// Required features: "android-net-Uri", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-os-Bundle")))]
        pub fn placeCall<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "placeCall", .descriptor == "(Landroid/net/Uri;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "placeCall\0", "(Landroid/net/Uri;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createManageBlockedNumbersIntent](https://developer.android.com/reference/android/telecom/TelecomManager.html#createManageBlockedNumbersIntent())
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn createManageBlockedNumbersIntent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "createManageBlockedNumbersIntent", .descriptor == "()Landroid/content/Intent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "createManageBlockedNumbersIntent\0", "()Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isIncomingCallPermitted](https://developer.android.com/reference/android/telecom/TelecomManager.html#isIncomingCallPermitted(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle")))]
        pub fn isIncomingCallPermitted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "isIncomingCallPermitted", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "isIncomingCallPermitted\0", "(Landroid/telecom/PhoneAccountHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOutgoingCallPermitted](https://developer.android.com/reference/android/telecom/TelecomManager.html#isOutgoingCallPermitted(android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-telecom-PhoneAccountHandle")))]
        pub fn isOutgoingCallPermitted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "isOutgoingCallPermitted", .descriptor == "(Landroid/telecom/PhoneAccountHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "isOutgoingCallPermitted\0", "(Landroid/telecom/PhoneAccountHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acceptHandover](https://developer.android.com/reference/android/telecom/TelecomManager.html#acceptHandover(android.net.Uri,%20int,%20android.telecom.PhoneAccountHandle))
        ///
        /// Required features: "android-net-Uri", "android-telecom-PhoneAccountHandle"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-telecom-PhoneAccountHandle")))]
        pub fn acceptHandover<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::PhoneAccountHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/TelecomManager", java.flags == PUBLIC, .name == "acceptHandover", .descriptor == "(Landroid/net/Uri;ILandroid/telecom/PhoneAccountHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/TelecomManager\0", "acceptHandover\0", "(Landroid/net/Uri;ILandroid/telecom/PhoneAccountHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_CHANGE_DEFAULT_DIALER](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_CHANGE_DEFAULT_DIALER)
        pub const ACTION_CHANGE_DEFAULT_DIALER : &'static str = "android.telecom.action.CHANGE_DEFAULT_DIALER";

        /// public static final [ACTION_CHANGE_PHONE_ACCOUNTS](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_CHANGE_PHONE_ACCOUNTS)
        pub const ACTION_CHANGE_PHONE_ACCOUNTS : &'static str = "android.telecom.action.CHANGE_PHONE_ACCOUNTS";

        /// public static final [ACTION_CONFIGURE_PHONE_ACCOUNT](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_CONFIGURE_PHONE_ACCOUNT)
        pub const ACTION_CONFIGURE_PHONE_ACCOUNT : &'static str = "android.telecom.action.CONFIGURE_PHONE_ACCOUNT";

        /// public static final [ACTION_DEFAULT_CALL_SCREENING_APP_CHANGED](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_DEFAULT_CALL_SCREENING_APP_CHANGED)
        pub const ACTION_DEFAULT_CALL_SCREENING_APP_CHANGED : &'static str = "android.telecom.action.DEFAULT_CALL_SCREENING_APP_CHANGED";

        /// public static final [ACTION_DEFAULT_DIALER_CHANGED](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_DEFAULT_DIALER_CHANGED)
        pub const ACTION_DEFAULT_DIALER_CHANGED : &'static str = "android.telecom.action.DEFAULT_DIALER_CHANGED";

        /// public static final [ACTION_INCOMING_CALL](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_INCOMING_CALL)
        #[deprecated] pub const ACTION_INCOMING_CALL : &'static str = "android.telecom.action.INCOMING_CALL";

        /// public static final [ACTION_PHONE_ACCOUNT_REGISTERED](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_PHONE_ACCOUNT_REGISTERED)
        pub const ACTION_PHONE_ACCOUNT_REGISTERED : &'static str = "android.telecom.action.PHONE_ACCOUNT_REGISTERED";

        /// public static final [ACTION_PHONE_ACCOUNT_UNREGISTERED](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_PHONE_ACCOUNT_UNREGISTERED)
        pub const ACTION_PHONE_ACCOUNT_UNREGISTERED : &'static str = "android.telecom.action.PHONE_ACCOUNT_UNREGISTERED";

        /// public static final [ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGS](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGS)
        pub const ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGS : &'static str = "android.telecom.action.SHOW_CALL_ACCESSIBILITY_SETTINGS";

        /// public static final [ACTION_SHOW_CALL_SETTINGS](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_SHOW_CALL_SETTINGS)
        pub const ACTION_SHOW_CALL_SETTINGS : &'static str = "android.telecom.action.SHOW_CALL_SETTINGS";

        /// public static final [ACTION_SHOW_MISSED_CALLS_NOTIFICATION](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_SHOW_MISSED_CALLS_NOTIFICATION)
        pub const ACTION_SHOW_MISSED_CALLS_NOTIFICATION : &'static str = "android.telecom.action.SHOW_MISSED_CALLS_NOTIFICATION";

        /// public static final [ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS](https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS)
        pub const ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS : &'static str = "android.telecom.action.SHOW_RESPOND_VIA_SMS_SETTINGS";

        /// public static final [DTMF_CHARACTER_PAUSE](https://developer.android.com/reference/android/telecom/TelecomManager.html#DTMF_CHARACTER_PAUSE)
        pub const DTMF_CHARACTER_PAUSE : __jni_bindgen::jchar = __jni_bindgen::jchar(44);

        /// public static final [DTMF_CHARACTER_WAIT](https://developer.android.com/reference/android/telecom/TelecomManager.html#DTMF_CHARACTER_WAIT)
        pub const DTMF_CHARACTER_WAIT : __jni_bindgen::jchar = __jni_bindgen::jchar(59);

        /// public static final [EXTRA_CALL_BACK_NUMBER](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_BACK_NUMBER)
        pub const EXTRA_CALL_BACK_NUMBER : &'static str = "android.telecom.extra.CALL_BACK_NUMBER";

        /// public static final [EXTRA_CALL_DISCONNECT_CAUSE](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_DISCONNECT_CAUSE)
        pub const EXTRA_CALL_DISCONNECT_CAUSE : &'static str = "android.telecom.extra.CALL_DISCONNECT_CAUSE";

        /// public static final [EXTRA_CALL_DISCONNECT_MESSAGE](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_DISCONNECT_MESSAGE)
        pub const EXTRA_CALL_DISCONNECT_MESSAGE : &'static str = "android.telecom.extra.CALL_DISCONNECT_MESSAGE";

        /// public static final [EXTRA_CALL_NETWORK_TYPE](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_NETWORK_TYPE)
        pub const EXTRA_CALL_NETWORK_TYPE : &'static str = "android.telecom.extra.CALL_NETWORK_TYPE";

        /// public static final [EXTRA_CALL_SUBJECT](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_SUBJECT)
        pub const EXTRA_CALL_SUBJECT : &'static str = "android.telecom.extra.CALL_SUBJECT";

        /// public static final [EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAME](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAME)
        pub const EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAME : &'static str = "android.telecom.extra.CHANGE_DEFAULT_DIALER_PACKAGE_NAME";

        /// public static final [EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAME](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAME)
        pub const EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAME : &'static str = "android.telecom.extra.DEFAULT_CALL_SCREENING_APP_COMPONENT_NAME";

        /// public static final [EXTRA_INCOMING_CALL_ADDRESS](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_INCOMING_CALL_ADDRESS)
        pub const EXTRA_INCOMING_CALL_ADDRESS : &'static str = "android.telecom.extra.INCOMING_CALL_ADDRESS";

        /// public static final [EXTRA_INCOMING_CALL_EXTRAS](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_INCOMING_CALL_EXTRAS)
        pub const EXTRA_INCOMING_CALL_EXTRAS : &'static str = "android.telecom.extra.INCOMING_CALL_EXTRAS";

        /// public static final [EXTRA_INCOMING_VIDEO_STATE](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_INCOMING_VIDEO_STATE)
        pub const EXTRA_INCOMING_VIDEO_STATE : &'static str = "android.telecom.extra.INCOMING_VIDEO_STATE";

        /// public static final [EXTRA_IS_DEFAULT_CALL_SCREENING_APP](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_IS_DEFAULT_CALL_SCREENING_APP)
        pub const EXTRA_IS_DEFAULT_CALL_SCREENING_APP : &'static str = "android.telecom.extra.IS_DEFAULT_CALL_SCREENING_APP";

        /// public static final [EXTRA_NOTIFICATION_COUNT](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_NOTIFICATION_COUNT)
        pub const EXTRA_NOTIFICATION_COUNT : &'static str = "android.telecom.extra.NOTIFICATION_COUNT";

        /// public static final [EXTRA_NOTIFICATION_PHONE_NUMBER](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_NOTIFICATION_PHONE_NUMBER)
        pub const EXTRA_NOTIFICATION_PHONE_NUMBER : &'static str = "android.telecom.extra.NOTIFICATION_PHONE_NUMBER";

        /// public static final [EXTRA_OUTGOING_CALL_EXTRAS](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_OUTGOING_CALL_EXTRAS)
        pub const EXTRA_OUTGOING_CALL_EXTRAS : &'static str = "android.telecom.extra.OUTGOING_CALL_EXTRAS";

        /// public static final [EXTRA_PHONE_ACCOUNT_HANDLE](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_PHONE_ACCOUNT_HANDLE)
        pub const EXTRA_PHONE_ACCOUNT_HANDLE : &'static str = "android.telecom.extra.PHONE_ACCOUNT_HANDLE";

        /// public static final [EXTRA_START_CALL_WITH_RTT](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_START_CALL_WITH_RTT)
        pub const EXTRA_START_CALL_WITH_RTT : &'static str = "android.telecom.extra.START_CALL_WITH_RTT";

        /// public static final [EXTRA_START_CALL_WITH_SPEAKERPHONE](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_START_CALL_WITH_SPEAKERPHONE)
        pub const EXTRA_START_CALL_WITH_SPEAKERPHONE : &'static str = "android.telecom.extra.START_CALL_WITH_SPEAKERPHONE";

        /// public static final [EXTRA_START_CALL_WITH_VIDEO_STATE](https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_START_CALL_WITH_VIDEO_STATE)
        pub const EXTRA_START_CALL_WITH_VIDEO_STATE : &'static str = "android.telecom.extra.START_CALL_WITH_VIDEO_STATE";

        /// public static final [GATEWAY_ORIGINAL_ADDRESS](https://developer.android.com/reference/android/telecom/TelecomManager.html#GATEWAY_ORIGINAL_ADDRESS)
        pub const GATEWAY_ORIGINAL_ADDRESS : &'static str = "android.telecom.extra.GATEWAY_ORIGINAL_ADDRESS";

        /// public static final [GATEWAY_PROVIDER_PACKAGE](https://developer.android.com/reference/android/telecom/TelecomManager.html#GATEWAY_PROVIDER_PACKAGE)
        pub const GATEWAY_PROVIDER_PACKAGE : &'static str = "android.telecom.extra.GATEWAY_PROVIDER_PACKAGE";

        /// public static final [METADATA_INCLUDE_EXTERNAL_CALLS](https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_INCLUDE_EXTERNAL_CALLS)
        pub const METADATA_INCLUDE_EXTERNAL_CALLS : &'static str = "android.telecom.INCLUDE_EXTERNAL_CALLS";

        /// public static final [METADATA_INCLUDE_SELF_MANAGED_CALLS](https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_INCLUDE_SELF_MANAGED_CALLS)
        pub const METADATA_INCLUDE_SELF_MANAGED_CALLS : &'static str = "android.telecom.INCLUDE_SELF_MANAGED_CALLS";

        /// public static final [METADATA_IN_CALL_SERVICE_CAR_MODE_UI](https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_IN_CALL_SERVICE_CAR_MODE_UI)
        pub const METADATA_IN_CALL_SERVICE_CAR_MODE_UI : &'static str = "android.telecom.IN_CALL_SERVICE_CAR_MODE_UI";

        /// public static final [METADATA_IN_CALL_SERVICE_RINGING](https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_IN_CALL_SERVICE_RINGING)
        pub const METADATA_IN_CALL_SERVICE_RINGING : &'static str = "android.telecom.IN_CALL_SERVICE_RINGING";

        /// public static final [METADATA_IN_CALL_SERVICE_UI](https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_IN_CALL_SERVICE_UI)
        pub const METADATA_IN_CALL_SERVICE_UI : &'static str = "android.telecom.IN_CALL_SERVICE_UI";

        /// public static final [PRESENTATION_ALLOWED](https://developer.android.com/reference/android/telecom/TelecomManager.html#PRESENTATION_ALLOWED)
        pub const PRESENTATION_ALLOWED : i32 = 1;

        /// public static final [PRESENTATION_PAYPHONE](https://developer.android.com/reference/android/telecom/TelecomManager.html#PRESENTATION_PAYPHONE)
        pub const PRESENTATION_PAYPHONE : i32 = 4;

        /// public static final [PRESENTATION_RESTRICTED](https://developer.android.com/reference/android/telecom/TelecomManager.html#PRESENTATION_RESTRICTED)
        pub const PRESENTATION_RESTRICTED : i32 = 2;

        /// public static final [PRESENTATION_UNKNOWN](https://developer.android.com/reference/android/telecom/TelecomManager.html#PRESENTATION_UNKNOWN)
        pub const PRESENTATION_UNKNOWN : i32 = 3;
    }
}
