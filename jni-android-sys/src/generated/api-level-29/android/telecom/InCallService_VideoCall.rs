// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-telecom-InCallService_VideoCall"))]
__jni_bindgen! {
    /// public class [InCallService.VideoCall](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html)
    ///
    /// Required feature: android-telecom-InCallService_VideoCall
    public class InCallService_VideoCall ("android/telecom/InCallService$VideoCall") extends crate::java::lang::Object {

        /// [VideoCall](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#VideoCall())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::telecom::InCallService_VideoCall>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerCallback](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#registerCallback(android.telecom.InCallService.VideoCall.Callback))
        ///
        /// Required features: "android-telecom-InCallService_VideoCall_Callback"
        #[cfg(any(feature = "all", all(feature = "android-telecom-InCallService_VideoCall_Callback")))]
        pub fn registerCallback_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::InCallService_VideoCall_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "registerCallback", .descriptor == "(Landroid/telecom/InCallService$VideoCall$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "registerCallback\0", "(Landroid/telecom/InCallService$VideoCall$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerCallback](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#registerCallback(android.telecom.InCallService.VideoCall.Callback,%20android.os.Handler))
        ///
        /// Required features: "android-os-Handler", "android-telecom-InCallService_VideoCall_Callback"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-telecom-InCallService_VideoCall_Callback")))]
        pub fn registerCallback_Callback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::InCallService_VideoCall_Callback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "registerCallback", .descriptor == "(Landroid/telecom/InCallService$VideoCall$Callback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "registerCallback\0", "(Landroid/telecom/InCallService$VideoCall$Callback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterCallback](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#unregisterCallback(android.telecom.InCallService.VideoCall.Callback))
        ///
        /// Required features: "android-telecom-InCallService_VideoCall_Callback"
        #[cfg(any(feature = "all", all(feature = "android-telecom-InCallService_VideoCall_Callback")))]
        pub fn unregisterCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::InCallService_VideoCall_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "unregisterCallback", .descriptor == "(Landroid/telecom/InCallService$VideoCall$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "unregisterCallback\0", "(Landroid/telecom/InCallService$VideoCall$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCamera](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#setCamera(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setCamera<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "setCamera", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "setCamera\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewSurface](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#setPreviewSurface(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn setPreviewSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "setPreviewSurface", .descriptor == "(Landroid/view/Surface;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "setPreviewSurface\0", "(Landroid/view/Surface;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDisplaySurface](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#setDisplaySurface(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn setDisplaySurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "setDisplaySurface", .descriptor == "(Landroid/view/Surface;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "setDisplaySurface\0", "(Landroid/view/Surface;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDeviceOrientation](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#setDeviceOrientation(int))
        pub fn setDeviceOrientation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "setDeviceOrientation", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "setDeviceOrientation\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setZoom](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#setZoom(float))
        pub fn setZoom<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "setZoom", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "setZoom\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendSessionModifyRequest](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#sendSessionModifyRequest(android.telecom.VideoProfile))
        ///
        /// Required features: "android-telecom-VideoProfile"
        #[cfg(any(feature = "all", all(feature = "android-telecom-VideoProfile")))]
        pub fn sendSessionModifyRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::VideoProfile>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "sendSessionModifyRequest", .descriptor == "(Landroid/telecom/VideoProfile;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "sendSessionModifyRequest\0", "(Landroid/telecom/VideoProfile;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendSessionModifyResponse](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#sendSessionModifyResponse(android.telecom.VideoProfile))
        ///
        /// Required features: "android-telecom-VideoProfile"
        #[cfg(any(feature = "all", all(feature = "android-telecom-VideoProfile")))]
        pub fn sendSessionModifyResponse<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::VideoProfile>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "sendSessionModifyResponse", .descriptor == "(Landroid/telecom/VideoProfile;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "sendSessionModifyResponse\0", "(Landroid/telecom/VideoProfile;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestCameraCapabilities](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#requestCameraCapabilities())
        pub fn requestCameraCapabilities<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "requestCameraCapabilities", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "requestCameraCapabilities\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestCallDataUsage](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#requestCallDataUsage())
        pub fn requestCallDataUsage<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "requestCallDataUsage", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "requestCallDataUsage\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPauseImage](https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#setPauseImage(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn setPauseImage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/InCallService$VideoCall", java.flags == PUBLIC | ABSTRACT, .name == "setPauseImage", .descriptor == "(Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/InCallService$VideoCall\0", "setPauseImage\0", "(Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
