// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-telecom-RemoteConference_Callback"))]
__jni_bindgen! {
    /// public class [RemoteConference.Callback](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html)
    ///
    /// Required feature: android-telecom-RemoteConference_Callback
    public class RemoteConference_Callback ("android/telecom/RemoteConference$Callback") extends crate::java::lang::Object {

        /// [Callback](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#Callback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::telecom::RemoteConference_Callback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStateChanged](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#onStateChanged(android.telecom.RemoteConference,%20int,%20int))
        ///
        /// Required features: "android-telecom-RemoteConference"
        #[cfg(any(feature = "all", all(feature = "android-telecom-RemoteConference")))]
        pub fn onStateChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConference>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "onStateChanged", .descriptor == "(Landroid/telecom/RemoteConference;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "onStateChanged\0", "(Landroid/telecom/RemoteConference;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDisconnected](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#onDisconnected(android.telecom.RemoteConference,%20android.telecom.DisconnectCause))
        ///
        /// Required features: "android-telecom-DisconnectCause", "android-telecom-RemoteConference"
        #[cfg(any(feature = "all", all(feature = "android-telecom-DisconnectCause", feature = "android-telecom-RemoteConference")))]
        pub fn onDisconnected<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConference>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::DisconnectCause>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "onDisconnected", .descriptor == "(Landroid/telecom/RemoteConference;Landroid/telecom/DisconnectCause;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "onDisconnected\0", "(Landroid/telecom/RemoteConference;Landroid/telecom/DisconnectCause;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConnectionAdded](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#onConnectionAdded(android.telecom.RemoteConference,%20android.telecom.RemoteConnection))
        ///
        /// Required features: "android-telecom-RemoteConference", "android-telecom-RemoteConnection"
        #[cfg(any(feature = "all", all(feature = "android-telecom-RemoteConference", feature = "android-telecom-RemoteConnection")))]
        pub fn onConnectionAdded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConference>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConnection>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "onConnectionAdded", .descriptor == "(Landroid/telecom/RemoteConference;Landroid/telecom/RemoteConnection;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "onConnectionAdded\0", "(Landroid/telecom/RemoteConference;Landroid/telecom/RemoteConnection;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConnectionRemoved](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#onConnectionRemoved(android.telecom.RemoteConference,%20android.telecom.RemoteConnection))
        ///
        /// Required features: "android-telecom-RemoteConference", "android-telecom-RemoteConnection"
        #[cfg(any(feature = "all", all(feature = "android-telecom-RemoteConference", feature = "android-telecom-RemoteConnection")))]
        pub fn onConnectionRemoved<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConference>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConnection>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "onConnectionRemoved", .descriptor == "(Landroid/telecom/RemoteConference;Landroid/telecom/RemoteConnection;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "onConnectionRemoved\0", "(Landroid/telecom/RemoteConference;Landroid/telecom/RemoteConnection;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConnectionCapabilitiesChanged](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#onConnectionCapabilitiesChanged(android.telecom.RemoteConference,%20int))
        ///
        /// Required features: "android-telecom-RemoteConference"
        #[cfg(any(feature = "all", all(feature = "android-telecom-RemoteConference")))]
        pub fn onConnectionCapabilitiesChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConference>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "onConnectionCapabilitiesChanged", .descriptor == "(Landroid/telecom/RemoteConference;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "onConnectionCapabilitiesChanged\0", "(Landroid/telecom/RemoteConference;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConnectionPropertiesChanged](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#onConnectionPropertiesChanged(android.telecom.RemoteConference,%20int))
        ///
        /// Required features: "android-telecom-RemoteConference"
        #[cfg(any(feature = "all", all(feature = "android-telecom-RemoteConference")))]
        pub fn onConnectionPropertiesChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConference>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "onConnectionPropertiesChanged", .descriptor == "(Landroid/telecom/RemoteConference;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "onConnectionPropertiesChanged\0", "(Landroid/telecom/RemoteConference;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConferenceableConnectionsChanged](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#onConferenceableConnectionsChanged(android.telecom.RemoteConference,%20java.util.List))
        ///
        /// Required features: "android-telecom-RemoteConference", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-telecom-RemoteConference", feature = "java-util-List")))]
        pub fn onConferenceableConnectionsChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConference>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "onConferenceableConnectionsChanged", .descriptor == "(Landroid/telecom/RemoteConference;Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "onConferenceableConnectionsChanged\0", "(Landroid/telecom/RemoteConference;Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDestroyed](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#onDestroyed(android.telecom.RemoteConference))
        ///
        /// Required features: "android-telecom-RemoteConference"
        #[cfg(any(feature = "all", all(feature = "android-telecom-RemoteConference")))]
        pub fn onDestroyed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConference>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "onDestroyed", .descriptor == "(Landroid/telecom/RemoteConference;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "onDestroyed\0", "(Landroid/telecom/RemoteConference;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onExtrasChanged](https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html#onExtrasChanged(android.telecom.RemoteConference,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-telecom-RemoteConference"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-telecom-RemoteConference")))]
        pub fn onExtrasChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telecom::RemoteConference>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/telecom/RemoteConference$Callback", java.flags == PUBLIC, .name == "onExtrasChanged", .descriptor == "(Landroid/telecom/RemoteConference;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/telecom/RemoteConference$Callback\0", "onExtrasChanged\0", "(Landroid/telecom/RemoteConference;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
