// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-NinePatch"))]
__jni_bindgen! {
    /// public class [NinePatch](https://developer.android.com/reference/android/graphics/NinePatch.html)
    ///
    /// Required feature: android-graphics-NinePatch
    public class NinePatch ("android/graphics/NinePatch") extends crate::java::lang::Object {

        /// [NinePatch](https://developer.android.com/reference/android/graphics/NinePatch.html#NinePatch(android.graphics.Bitmap,%20byte%5B%5D))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn new_Bitmap_byte_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::NinePatch>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Bitmap;[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "<init>\0", "(Landroid/graphics/Bitmap;[B)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [NinePatch](https://developer.android.com/reference/android/graphics/NinePatch.html#NinePatch(android.graphics.Bitmap,%20byte%5B%5D,%20java.lang.String))
        ///
        /// Required features: "android-graphics-Bitmap", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "java-lang-String")))]
        pub fn new_Bitmap_byte_array_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::NinePatch>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Bitmap;[BLjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "<init>\0", "(Landroid/graphics/Bitmap;[BLjava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/graphics/NinePatch.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/NinePatch", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getName](https://developer.android.com/reference/android/graphics/NinePatch.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPaint](https://developer.android.com/reference/android/graphics/NinePatch.html#getPaint())
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn getPaint<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Paint>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "getPaint", .descriptor == "()Landroid/graphics/Paint;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "getPaint\0", "()Landroid/graphics/Paint;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPaint](https://developer.android.com/reference/android/graphics/NinePatch.html#setPaint(android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn setPaint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "setPaint", .descriptor == "(Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "setPaint\0", "(Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBitmap](https://developer.android.com/reference/android/graphics/NinePatch.html#getBitmap())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getBitmap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "getBitmap", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "getBitmap\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [draw](https://developer.android.com/reference/android/graphics/NinePatch.html#draw(android.graphics.Canvas,%20android.graphics.RectF))
        ///
        /// Required features: "android-graphics-Canvas", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas", feature = "android-graphics-RectF")))]
        pub fn draw_Canvas_RectF<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "draw", .descriptor == "(Landroid/graphics/Canvas;Landroid/graphics/RectF;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "draw\0", "(Landroid/graphics/Canvas;Landroid/graphics/RectF;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [draw](https://developer.android.com/reference/android/graphics/NinePatch.html#draw(android.graphics.Canvas,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Canvas", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas", feature = "android-graphics-Rect")))]
        pub fn draw_Canvas_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "draw", .descriptor == "(Landroid/graphics/Canvas;Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "draw\0", "(Landroid/graphics/Canvas;Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [draw](https://developer.android.com/reference/android/graphics/NinePatch.html#draw(android.graphics.Canvas,%20android.graphics.Rect,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Canvas", "android-graphics-Paint", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas", feature = "android-graphics-Paint", feature = "android-graphics-Rect")))]
        pub fn draw_Canvas_Rect_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "draw", .descriptor == "(Landroid/graphics/Canvas;Landroid/graphics/Rect;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "draw\0", "(Landroid/graphics/Canvas;Landroid/graphics/Rect;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDensity](https://developer.android.com/reference/android/graphics/NinePatch.html#getDensity())
        pub fn getDensity<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "getDensity", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "getDensity\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWidth](https://developer.android.com/reference/android/graphics/NinePatch.html#getWidth())
        pub fn getWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "getWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "getWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeight](https://developer.android.com/reference/android/graphics/NinePatch.html#getHeight())
        pub fn getHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC, .name == "getHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "getHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasAlpha](https://developer.android.com/reference/android/graphics/NinePatch.html#hasAlpha())
        pub fn hasAlpha<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC | FINAL, .name == "hasAlpha", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "hasAlpha\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransparentRegion](https://developer.android.com/reference/android/graphics/NinePatch.html#getTransparentRegion(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect", "android-graphics-Region"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "android-graphics-Region")))]
        pub fn getTransparentRegion<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Region>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC | FINAL, .name == "getTransparentRegion", .descriptor == "(Landroid/graphics/Rect;)Landroid/graphics/Region;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/NinePatch\0", "getTransparentRegion\0", "(Landroid/graphics/Rect;)Landroid/graphics/Region;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNinePatchChunk](https://developer.android.com/reference/android/graphics/NinePatch.html#isNinePatchChunk(byte%5B%5D))
        pub fn isNinePatchChunk<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/NinePatch", java.flags == PUBLIC | STATIC | NATIVE, .name == "isNinePatchChunk", .descriptor == "([B)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/NinePatch\0", "isNinePatchChunk\0", "([B)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
