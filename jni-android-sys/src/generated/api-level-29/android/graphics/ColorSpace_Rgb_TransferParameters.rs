// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-ColorSpace_Rgb_TransferParameters"))]
__jni_bindgen! {
    /// public class [ColorSpace.Rgb.TransferParameters](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html)
    ///
    /// Required feature: android-graphics-ColorSpace_Rgb_TransferParameters
    public class ColorSpace_Rgb_TransferParameters ("android/graphics/ColorSpace$Rgb$TransferParameters") extends crate::java::lang::Object {

        /// [TransferParameters](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#TransferParameters(double,%20double,%20double,%20double,%20double))
        pub fn new_double_double_double_double_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64, arg2: f64, arg3: f64, arg4: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Rgb_TransferParameters>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb$TransferParameters", java.flags == PUBLIC, .name == "<init>", .descriptor == "(DDDDD)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb$TransferParameters\0", "<init>\0", "(DDDDD)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [TransferParameters](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#TransferParameters(double,%20double,%20double,%20double,%20double,%20double,%20double))
        pub fn new_double_double_double_double_double_double_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64, arg2: f64, arg3: f64, arg4: f64, arg5: f64, arg6: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Rgb_TransferParameters>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb$TransferParameters", java.flags == PUBLIC, .name == "<init>", .descriptor == "(DDDDDDD)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb$TransferParameters\0", "<init>\0", "(DDDDDDD)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb$TransferParameters", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb$TransferParameters\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb$TransferParameters", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb$TransferParameters\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public final [a](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#a)
        pub fn a<'env>(&'env self) -> f64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/ColorSpace$Rgb$TransferParameters\0", "a\0", "D\0");
                env.get_double_field(class, field)
            }
        }

        /// **get** public final [b](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#b)
        pub fn b<'env>(&'env self) -> f64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/ColorSpace$Rgb$TransferParameters\0", "b\0", "D\0");
                env.get_double_field(class, field)
            }
        }

        /// **get** public final [c](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#c)
        pub fn c<'env>(&'env self) -> f64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/ColorSpace$Rgb$TransferParameters\0", "c\0", "D\0");
                env.get_double_field(class, field)
            }
        }

        /// **get** public final [d](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#d)
        pub fn d<'env>(&'env self) -> f64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/ColorSpace$Rgb$TransferParameters\0", "d\0", "D\0");
                env.get_double_field(class, field)
            }
        }

        /// **get** public final [e](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#e)
        pub fn e<'env>(&'env self) -> f64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/ColorSpace$Rgb$TransferParameters\0", "e\0", "D\0");
                env.get_double_field(class, field)
            }
        }

        /// **get** public final [f](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#f)
        pub fn f<'env>(&'env self) -> f64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/ColorSpace$Rgb$TransferParameters\0", "f\0", "D\0");
                env.get_double_field(class, field)
            }
        }

        /// **get** public final [g](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#g)
        pub fn g<'env>(&'env self) -> f64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/ColorSpace$Rgb$TransferParameters\0", "g\0", "D\0");
                env.get_double_field(class, field)
            }
        }
    }
}
