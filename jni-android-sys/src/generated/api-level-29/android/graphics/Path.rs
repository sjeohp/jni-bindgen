// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-Path"))]
__jni_bindgen! {
    /// public class [Path](https://developer.android.com/reference/android/graphics/Path.html)
    ///
    /// Required feature: android-graphics-Path
    public class Path ("android/graphics/Path") extends crate::java::lang::Object {

        /// [Path](https://developer.android.com/reference/android/graphics/Path.html#Path())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::Path>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Path](https://developer.android.com/reference/android/graphics/Path.html#Path(android.graphics.Path))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn new_Path<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::Path>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "<init>\0", "(Landroid/graphics/Path;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reset](https://developer.android.com/reference/android/graphics/Path.html#reset())
        pub fn reset<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "reset", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "reset\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rewind](https://developer.android.com/reference/android/graphics/Path.html#rewind())
        pub fn rewind<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "rewind", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "rewind\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/graphics/Path.html#set(android.graphics.Path))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "set", .descriptor == "(Landroid/graphics/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "set\0", "(Landroid/graphics/Path;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [op](https://developer.android.com/reference/android/graphics/Path.html#op(android.graphics.Path,%20android.graphics.Path.Op))
        ///
        /// Required features: "android-graphics-Path", "android-graphics-Path_Op"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path", feature = "android-graphics-Path_Op")))]
        pub fn op_Path_Op<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Op>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "op", .descriptor == "(Landroid/graphics/Path;Landroid/graphics/Path$Op;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "op\0", "(Landroid/graphics/Path;Landroid/graphics/Path$Op;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [op](https://developer.android.com/reference/android/graphics/Path.html#op(android.graphics.Path,%20android.graphics.Path,%20android.graphics.Path.Op))
        ///
        /// Required features: "android-graphics-Path", "android-graphics-Path_Op"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path", feature = "android-graphics-Path_Op")))]
        pub fn op_Path_Path_Op<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Op>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "op", .descriptor == "(Landroid/graphics/Path;Landroid/graphics/Path;Landroid/graphics/Path$Op;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "op\0", "(Landroid/graphics/Path;Landroid/graphics/Path;Landroid/graphics/Path$Op;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isConvex](https://developer.android.com/reference/android/graphics/Path.html#isConvex())
        pub fn isConvex<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "isConvex", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "isConvex\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFillType](https://developer.android.com/reference/android/graphics/Path.html#getFillType())
        ///
        /// Required features: "android-graphics-Path_FillType"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_FillType")))]
        pub fn getFillType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Path_FillType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "getFillType", .descriptor == "()Landroid/graphics/Path$FillType;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "getFillType\0", "()Landroid/graphics/Path$FillType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFillType](https://developer.android.com/reference/android/graphics/Path.html#setFillType(android.graphics.Path.FillType))
        ///
        /// Required features: "android-graphics-Path_FillType"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_FillType")))]
        pub fn setFillType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_FillType>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "setFillType", .descriptor == "(Landroid/graphics/Path$FillType;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "setFillType\0", "(Landroid/graphics/Path$FillType;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInverseFillType](https://developer.android.com/reference/android/graphics/Path.html#isInverseFillType())
        pub fn isInverseFillType<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "isInverseFillType", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "isInverseFillType\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toggleInverseFillType](https://developer.android.com/reference/android/graphics/Path.html#toggleInverseFillType())
        pub fn toggleInverseFillType<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "toggleInverseFillType", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "toggleInverseFillType\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEmpty](https://developer.android.com/reference/android/graphics/Path.html#isEmpty())
        pub fn isEmpty<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "isEmpty", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "isEmpty\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRect](https://developer.android.com/reference/android/graphics/Path.html#isRect(android.graphics.RectF))
        ///
        /// Required features: "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-RectF")))]
        pub fn isRect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "isRect", .descriptor == "(Landroid/graphics/RectF;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "isRect\0", "(Landroid/graphics/RectF;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [computeBounds](https://developer.android.com/reference/android/graphics/Path.html#computeBounds(android.graphics.RectF,%20boolean))
        ///
        /// Required features: "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-RectF")))]
        pub fn computeBounds<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "computeBounds", .descriptor == "(Landroid/graphics/RectF;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "computeBounds\0", "(Landroid/graphics/RectF;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [incReserve](https://developer.android.com/reference/android/graphics/Path.html#incReserve(int))
        pub fn incReserve<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "incReserve", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "incReserve\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveTo](https://developer.android.com/reference/android/graphics/Path.html#moveTo(float,%20float))
        pub fn moveTo<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "moveTo", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "moveTo\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rMoveTo](https://developer.android.com/reference/android/graphics/Path.html#rMoveTo(float,%20float))
        pub fn rMoveTo<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "rMoveTo", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "rMoveTo\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lineTo](https://developer.android.com/reference/android/graphics/Path.html#lineTo(float,%20float))
        pub fn lineTo<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "lineTo", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "lineTo\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rLineTo](https://developer.android.com/reference/android/graphics/Path.html#rLineTo(float,%20float))
        pub fn rLineTo<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "rLineTo", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "rLineTo\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [quadTo](https://developer.android.com/reference/android/graphics/Path.html#quadTo(float,%20float,%20float,%20float))
        pub fn quadTo<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "quadTo", .descriptor == "(FFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "quadTo\0", "(FFFF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rQuadTo](https://developer.android.com/reference/android/graphics/Path.html#rQuadTo(float,%20float,%20float,%20float))
        pub fn rQuadTo<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "rQuadTo", .descriptor == "(FFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "rQuadTo\0", "(FFFF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cubicTo](https://developer.android.com/reference/android/graphics/Path.html#cubicTo(float,%20float,%20float,%20float,%20float,%20float))
        pub fn cubicTo<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "cubicTo", .descriptor == "(FFFFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "cubicTo\0", "(FFFFFF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rCubicTo](https://developer.android.com/reference/android/graphics/Path.html#rCubicTo(float,%20float,%20float,%20float,%20float,%20float))
        pub fn rCubicTo<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "rCubicTo", .descriptor == "(FFFFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "rCubicTo\0", "(FFFFFF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [arcTo](https://developer.android.com/reference/android/graphics/Path.html#arcTo(android.graphics.RectF,%20float,%20float,%20boolean))
        ///
        /// Required features: "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-RectF")))]
        pub fn arcTo_RectF_float_float_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: f32, arg2: f32, arg3: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "arcTo", .descriptor == "(Landroid/graphics/RectF;FFZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "arcTo\0", "(Landroid/graphics/RectF;FFZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [arcTo](https://developer.android.com/reference/android/graphics/Path.html#arcTo(android.graphics.RectF,%20float,%20float))
        ///
        /// Required features: "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-RectF")))]
        pub fn arcTo_RectF_float_float<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "arcTo", .descriptor == "(Landroid/graphics/RectF;FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "arcTo\0", "(Landroid/graphics/RectF;FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [arcTo](https://developer.android.com/reference/android/graphics/Path.html#arcTo(float,%20float,%20float,%20float,%20float,%20float,%20boolean))
        pub fn arcTo_float_float_float_float_float_float_boolean<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32, arg6: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "arcTo", .descriptor == "(FFFFFFZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "arcTo\0", "(FFFFFFZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/graphics/Path.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addRect](https://developer.android.com/reference/android/graphics/Path.html#addRect(android.graphics.RectF,%20android.graphics.Path.Direction))
        ///
        /// Required features: "android-graphics-Path_Direction", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_Direction", feature = "android-graphics-RectF")))]
        pub fn addRect_RectF_Direction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Direction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addRect", .descriptor == "(Landroid/graphics/RectF;Landroid/graphics/Path$Direction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addRect\0", "(Landroid/graphics/RectF;Landroid/graphics/Path$Direction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addRect](https://developer.android.com/reference/android/graphics/Path.html#addRect(float,%20float,%20float,%20float,%20android.graphics.Path.Direction))
        ///
        /// Required features: "android-graphics-Path_Direction"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_Direction")))]
        pub fn addRect_float_float_float_float_Direction<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Direction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addRect", .descriptor == "(FFFFLandroid/graphics/Path$Direction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addRect\0", "(FFFFLandroid/graphics/Path$Direction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOval](https://developer.android.com/reference/android/graphics/Path.html#addOval(android.graphics.RectF,%20android.graphics.Path.Direction))
        ///
        /// Required features: "android-graphics-Path_Direction", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_Direction", feature = "android-graphics-RectF")))]
        pub fn addOval_RectF_Direction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Direction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addOval", .descriptor == "(Landroid/graphics/RectF;Landroid/graphics/Path$Direction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addOval\0", "(Landroid/graphics/RectF;Landroid/graphics/Path$Direction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOval](https://developer.android.com/reference/android/graphics/Path.html#addOval(float,%20float,%20float,%20float,%20android.graphics.Path.Direction))
        ///
        /// Required features: "android-graphics-Path_Direction"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_Direction")))]
        pub fn addOval_float_float_float_float_Direction<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Direction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addOval", .descriptor == "(FFFFLandroid/graphics/Path$Direction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addOval\0", "(FFFFLandroid/graphics/Path$Direction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addCircle](https://developer.android.com/reference/android/graphics/Path.html#addCircle(float,%20float,%20float,%20android.graphics.Path.Direction))
        ///
        /// Required features: "android-graphics-Path_Direction"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_Direction")))]
        pub fn addCircle<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Direction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addCircle", .descriptor == "(FFFLandroid/graphics/Path$Direction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addCircle\0", "(FFFLandroid/graphics/Path$Direction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addArc](https://developer.android.com/reference/android/graphics/Path.html#addArc(android.graphics.RectF,%20float,%20float))
        ///
        /// Required features: "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-RectF")))]
        pub fn addArc_RectF_float_float<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addArc", .descriptor == "(Landroid/graphics/RectF;FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addArc\0", "(Landroid/graphics/RectF;FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addArc](https://developer.android.com/reference/android/graphics/Path.html#addArc(float,%20float,%20float,%20float,%20float,%20float))
        pub fn addArc_float_float_float_float_float_float<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addArc", .descriptor == "(FFFFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addArc\0", "(FFFFFF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addRoundRect](https://developer.android.com/reference/android/graphics/Path.html#addRoundRect(android.graphics.RectF,%20float,%20float,%20android.graphics.Path.Direction))
        ///
        /// Required features: "android-graphics-Path_Direction", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_Direction", feature = "android-graphics-RectF")))]
        pub fn addRoundRect_RectF_float_float_Direction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: f32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Direction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addRoundRect", .descriptor == "(Landroid/graphics/RectF;FFLandroid/graphics/Path$Direction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addRoundRect\0", "(Landroid/graphics/RectF;FFLandroid/graphics/Path$Direction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addRoundRect](https://developer.android.com/reference/android/graphics/Path.html#addRoundRect(float,%20float,%20float,%20float,%20float,%20float,%20android.graphics.Path.Direction))
        ///
        /// Required features: "android-graphics-Path_Direction"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_Direction")))]
        pub fn addRoundRect_float_float_float_float_float_float_Direction<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Direction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addRoundRect", .descriptor == "(FFFFFFLandroid/graphics/Path$Direction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addRoundRect\0", "(FFFFFFLandroid/graphics/Path$Direction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addRoundRect](https://developer.android.com/reference/android/graphics/Path.html#addRoundRect(android.graphics.RectF,%20float%5B%5D,%20android.graphics.Path.Direction))
        ///
        /// Required features: "android-graphics-Path_Direction", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_Direction", feature = "android-graphics-RectF")))]
        pub fn addRoundRect_RectF_float_array_Direction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Direction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addRoundRect", .descriptor == "(Landroid/graphics/RectF;[FLandroid/graphics/Path$Direction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addRoundRect\0", "(Landroid/graphics/RectF;[FLandroid/graphics/Path$Direction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addRoundRect](https://developer.android.com/reference/android/graphics/Path.html#addRoundRect(float,%20float,%20float,%20float,%20float%5B%5D,%20android.graphics.Path.Direction))
        ///
        /// Required features: "android-graphics-Path_Direction"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path_Direction")))]
        pub fn addRoundRect_float_float_float_float_float_array_Direction<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path_Direction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addRoundRect", .descriptor == "(FFFF[FLandroid/graphics/Path$Direction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addRoundRect\0", "(FFFF[FLandroid/graphics/Path$Direction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPath](https://developer.android.com/reference/android/graphics/Path.html#addPath(android.graphics.Path,%20float,%20float))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn addPath_Path_float_float<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addPath", .descriptor == "(Landroid/graphics/Path;FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addPath\0", "(Landroid/graphics/Path;FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPath](https://developer.android.com/reference/android/graphics/Path.html#addPath(android.graphics.Path))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn addPath_Path<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addPath", .descriptor == "(Landroid/graphics/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addPath\0", "(Landroid/graphics/Path;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPath](https://developer.android.com/reference/android/graphics/Path.html#addPath(android.graphics.Path,%20android.graphics.Matrix))
        ///
        /// Required features: "android-graphics-Matrix", "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix", feature = "android-graphics-Path")))]
        pub fn addPath_Path_Matrix<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Matrix>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "addPath", .descriptor == "(Landroid/graphics/Path;Landroid/graphics/Matrix;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "addPath\0", "(Landroid/graphics/Path;Landroid/graphics/Matrix;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [offset](https://developer.android.com/reference/android/graphics/Path.html#offset(float,%20float,%20android.graphics.Path))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn offset_float_float_Path<'env>(&'env self, arg0: f32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "offset", .descriptor == "(FFLandroid/graphics/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "offset\0", "(FFLandroid/graphics/Path;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [offset](https://developer.android.com/reference/android/graphics/Path.html#offset(float,%20float))
        pub fn offset_float_float<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "offset", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "offset\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLastPoint](https://developer.android.com/reference/android/graphics/Path.html#setLastPoint(float,%20float))
        pub fn setLastPoint<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "setLastPoint", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "setLastPoint\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transform](https://developer.android.com/reference/android/graphics/Path.html#transform(android.graphics.Matrix,%20android.graphics.Path))
        ///
        /// Required features: "android-graphics-Matrix", "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix", feature = "android-graphics-Path")))]
        pub fn transform_Matrix_Path<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Matrix>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "transform", .descriptor == "(Landroid/graphics/Matrix;Landroid/graphics/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "transform\0", "(Landroid/graphics/Matrix;Landroid/graphics/Path;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transform](https://developer.android.com/reference/android/graphics/Path.html#transform(android.graphics.Matrix))
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn transform_Matrix<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Matrix>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "transform", .descriptor == "(Landroid/graphics/Matrix;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "transform\0", "(Landroid/graphics/Matrix;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [approximate](https://developer.android.com/reference/android/graphics/Path.html#approximate(float))
        pub fn approximate<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Path", java.flags == PUBLIC, .name == "approximate", .descriptor == "(F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Path\0", "approximate\0", "(F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
