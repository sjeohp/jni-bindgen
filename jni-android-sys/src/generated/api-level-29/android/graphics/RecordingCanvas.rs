// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-RecordingCanvas"))]
__jni_bindgen! {
    /// public final class [RecordingCanvas](https://developer.android.com/reference/android/graphics/RecordingCanvas.html)
    ///
    /// Required feature: android-graphics-RecordingCanvas
    public final class RecordingCanvas ("android/graphics/RecordingCanvas") extends crate::android::graphics::Canvas {

        // // Not emitting: Non-public method
        // /// [RecordingCanvas](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#RecordingCanvas(android.graphics.RenderNode,%20int,%20int))
        // ///
        // /// Required features: "android-graphics-RenderNode"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-RenderNode")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RenderNode>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::RecordingCanvas>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/RecordingCanvas", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/graphics/RenderNode;II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "<init>\0", "(Landroid/graphics/RenderNode;II)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setDensity](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#setDensity(int))
        pub fn setDensity<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "setDensity", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "setDensity\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHardwareAccelerated](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#isHardwareAccelerated())
        pub fn isHardwareAccelerated<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "isHardwareAccelerated", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "isHardwareAccelerated\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBitmap](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#setBitmap(android.graphics.Bitmap))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn setBitmap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "setBitmap", .descriptor == "(Landroid/graphics/Bitmap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "setBitmap\0", "(Landroid/graphics/Bitmap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOpaque](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#isOpaque())
        pub fn isOpaque<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "isOpaque", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "isOpaque\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWidth](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#getWidth())
        pub fn getWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "getWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "getWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeight](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#getHeight())
        pub fn getHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "getHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "getHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaximumBitmapWidth](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#getMaximumBitmapWidth())
        pub fn getMaximumBitmapWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "getMaximumBitmapWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "getMaximumBitmapWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaximumBitmapHeight](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#getMaximumBitmapHeight())
        pub fn getMaximumBitmapHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "getMaximumBitmapHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "getMaximumBitmapHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enableZ](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#enableZ())
        pub fn enableZ<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "enableZ", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "enableZ\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [disableZ](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#disableZ())
        pub fn disableZ<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "disableZ", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "disableZ\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawRenderNode](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawRenderNode(android.graphics.RenderNode))
        ///
        /// Required features: "android-graphics-RenderNode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-RenderNode")))]
        pub fn drawRenderNode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RenderNode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "drawRenderNode", .descriptor == "(Landroid/graphics/RenderNode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawRenderNode\0", "(Landroid/graphics/RenderNode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawTextOnPath](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawTextOnPath(char%5B%5D,%20int,%20int,%20android.graphics.Path,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-Path")))]
        pub fn drawTextOnPath_char_array_int_int_Path_float_float_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg4: f32, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawTextOnPath", .descriptor == "([CIILandroid/graphics/Path;FFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawTextOnPath\0", "([CIILandroid/graphics/Path;FFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawTextOnPath](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawTextOnPath(java.lang.String,%20android.graphics.Path,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-Path", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-Path", feature = "java-lang-String")))]
        pub fn drawTextOnPath_String_Path_float_float_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawTextOnPath", .descriptor == "(Ljava/lang/String;Landroid/graphics/Path;FFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawTextOnPath\0", "(Ljava/lang/String;Landroid/graphics/Path;FFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPosText](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPosText(char%5B%5D,%20int,%20int,%20float%5B%5D,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        #[deprecated] pub fn drawPosText_char_array_int_int_float_array_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPosText", .descriptor == "([CII[FLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPosText\0", "([CII[FLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPosText](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPosText(java.lang.String,%20float%5B%5D,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "java-lang-String")))]
        #[deprecated] pub fn drawPosText_String_float_array_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPosText", .descriptor == "(Ljava/lang/String;[FLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPosText\0", "(Ljava/lang/String;[FLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawOval](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawOval(float,%20float,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawOval_float_float_float_float_Paint<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawOval", .descriptor == "(FFFFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawOval\0", "(FFFFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawOval](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawOval(android.graphics.RectF,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-RectF")))]
        pub fn drawOval_RectF_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawOval", .descriptor == "(Landroid/graphics/RectF;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawOval\0", "(Landroid/graphics/RectF;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawDoubleRoundRect](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawDoubleRoundRect(android.graphics.RectF,%20float,%20float,%20android.graphics.RectF,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-RectF")))]
        pub fn drawDoubleRoundRect_RectF_float_float_RectF_float_float_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: f32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg4: f32, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawDoubleRoundRect", .descriptor == "(Landroid/graphics/RectF;FFLandroid/graphics/RectF;FFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawDoubleRoundRect\0", "(Landroid/graphics/RectF;FFLandroid/graphics/RectF;FFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawDoubleRoundRect](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawDoubleRoundRect(android.graphics.RectF,%20float%5B%5D,%20android.graphics.RectF,%20float%5B%5D,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-RectF")))]
        pub fn drawDoubleRoundRect_RectF_float_array_RectF_float_array_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawDoubleRoundRect", .descriptor == "(Landroid/graphics/RectF;[FLandroid/graphics/RectF;[FLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawDoubleRoundRect\0", "(Landroid/graphics/RectF;[FLandroid/graphics/RectF;[FLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPoint](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPoint(float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawPoint<'env>(&'env self, arg0: f32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPoint", .descriptor == "(FFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPoint\0", "(FFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPatch](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPatch(android.graphics.NinePatch,%20android.graphics.Rect,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-NinePatch", "android-graphics-Paint", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-NinePatch", feature = "android-graphics-Paint", feature = "android-graphics-Rect")))]
        pub fn drawPatch_NinePatch_Rect_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::NinePatch>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPatch", .descriptor == "(Landroid/graphics/NinePatch;Landroid/graphics/Rect;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPatch\0", "(Landroid/graphics/NinePatch;Landroid/graphics/Rect;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPatch](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPatch(android.graphics.NinePatch,%20android.graphics.RectF,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-NinePatch", "android-graphics-Paint", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-NinePatch", feature = "android-graphics-Paint", feature = "android-graphics-RectF")))]
        pub fn drawPatch_NinePatch_RectF_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::NinePatch>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPatch", .descriptor == "(Landroid/graphics/NinePatch;Landroid/graphics/RectF;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPatch\0", "(Landroid/graphics/NinePatch;Landroid/graphics/RectF;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawBitmap](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawBitmap(android.graphics.Bitmap,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-Paint")))]
        pub fn drawBitmap_Bitmap_float_float_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: f32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawBitmap", .descriptor == "(Landroid/graphics/Bitmap;FFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawBitmap\0", "(Landroid/graphics/Bitmap;FFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawBitmap](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawBitmap(android.graphics.Bitmap,%20android.graphics.Matrix,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-Matrix", "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-Matrix", feature = "android-graphics-Paint")))]
        pub fn drawBitmap_Bitmap_Matrix_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Matrix>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawBitmap", .descriptor == "(Landroid/graphics/Bitmap;Landroid/graphics/Matrix;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawBitmap\0", "(Landroid/graphics/Bitmap;Landroid/graphics/Matrix;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawBitmap](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawBitmap(android.graphics.Bitmap,%20android.graphics.Rect,%20android.graphics.Rect,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-Paint", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-Paint", feature = "android-graphics-Rect")))]
        pub fn drawBitmap_Bitmap_Rect_Rect_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawBitmap", .descriptor == "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawBitmap\0", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawBitmap](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawBitmap(android.graphics.Bitmap,%20android.graphics.Rect,%20android.graphics.RectF,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-Paint", "android-graphics-Rect", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-Paint", feature = "android-graphics-Rect", feature = "android-graphics-RectF")))]
        pub fn drawBitmap_Bitmap_Rect_RectF_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawBitmap", .descriptor == "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/RectF;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawBitmap\0", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/RectF;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawBitmap](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawBitmap(int%5B%5D,%20int,%20int,%20float,%20float,%20int,%20int,%20boolean,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        #[deprecated] pub fn drawBitmap_int_array_int_int_float_float_int_int_boolean_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg1: i32, arg2: i32, arg3: f32, arg4: f32, arg5: i32, arg6: i32, arg7: bool, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawBitmap", .descriptor == "([IIIFFIIZLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawBitmap\0", "([IIIFFIIZLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawBitmap](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawBitmap(int%5B%5D,%20int,%20int,%20int,%20int,%20int,%20int,%20boolean,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        #[deprecated] pub fn drawBitmap_int_array_int_int_int_int_int_int_boolean_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: bool, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawBitmap", .descriptor == "([IIIIIIIZLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawBitmap\0", "([IIIIIIIZLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawColor](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawColor(int))
        pub fn drawColor_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawColor](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawColor(int,%20android.graphics.PorterDuff.Mode))
        ///
        /// Required features: "android-graphics-PorterDuff_Mode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PorterDuff_Mode")))]
        pub fn drawColor_int_Mode<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::PorterDuff_Mode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawColor", .descriptor == "(ILandroid/graphics/PorterDuff$Mode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawColor\0", "(ILandroid/graphics/PorterDuff$Mode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawColor](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawColor(int,%20android.graphics.BlendMode))
        ///
        /// Required features: "android-graphics-BlendMode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode")))]
        pub fn drawColor_int_BlendMode<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::BlendMode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawColor", .descriptor == "(ILandroid/graphics/BlendMode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawColor\0", "(ILandroid/graphics/BlendMode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawColor](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawColor(long,%20android.graphics.BlendMode))
        ///
        /// Required features: "android-graphics-BlendMode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode")))]
        pub fn drawColor_long_BlendMode<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::BlendMode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawColor", .descriptor == "(JLandroid/graphics/BlendMode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawColor\0", "(JLandroid/graphics/BlendMode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPoints](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPoints(float%5B%5D,%20int,%20int,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawPoints_float_array_int_int_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPoints", .descriptor == "([FIILandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPoints\0", "([FIILandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPoints](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPoints(float%5B%5D,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawPoints_float_array_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPoints", .descriptor == "([FLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPoints\0", "([FLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawRoundRect](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawRoundRect(float,%20float,%20float,%20float,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawRoundRect_float_float_float_float_float_float_Paint<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawRoundRect", .descriptor == "(FFFFFFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawRoundRect\0", "(FFFFFFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawRoundRect](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawRoundRect(android.graphics.RectF,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-RectF")))]
        pub fn drawRoundRect_RectF_float_float_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: f32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawRoundRect", .descriptor == "(Landroid/graphics/RectF;FFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawRoundRect\0", "(Landroid/graphics/RectF;FFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPaint](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPaint(android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawPaint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPaint", .descriptor == "(Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPaint\0", "(Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawBitmapMesh](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawBitmapMesh(android.graphics.Bitmap,%20int,%20int,%20float%5B%5D,%20int,%20int%5B%5D,%20int,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-Paint")))]
        pub fn drawBitmapMesh<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawBitmapMesh", .descriptor == "(Landroid/graphics/Bitmap;II[FI[IILandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawBitmapMesh\0", "(Landroid/graphics/Bitmap;II[FI[IILandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawTextRun](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawTextRun(char%5B%5D,%20int,%20int,%20int,%20int,%20float,%20float,%20boolean,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawTextRun_char_array_int_int_int_int_float_float_boolean_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: f32, arg6: f32, arg7: bool, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawTextRun", .descriptor == "([CIIIIFFZLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawTextRun\0", "([CIIIIFFZLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawTextRun](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawTextRun(java.lang.CharSequence,%20int,%20int,%20int,%20int,%20float,%20float,%20boolean,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "java-lang-CharSequence")))]
        pub fn drawTextRun_CharSequence_int_int_int_int_float_float_boolean_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: f32, arg6: f32, arg7: bool, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawTextRun", .descriptor == "(Ljava/lang/CharSequence;IIIIFFZLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawTextRun\0", "(Ljava/lang/CharSequence;IIIIFFZLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawTextRun](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawTextRun(android.graphics.text.MeasuredText,%20int,%20int,%20int,%20int,%20float,%20float,%20boolean,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-text-MeasuredText"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-text-MeasuredText")))]
        pub fn drawTextRun_MeasuredText_int_int_int_int_float_float_boolean_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::text::MeasuredText>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: f32, arg6: f32, arg7: bool, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC, .name == "drawTextRun", .descriptor == "(Landroid/graphics/text/MeasuredText;IIIIFFZLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawTextRun\0", "(Landroid/graphics/text/MeasuredText;IIIIFFZLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawCircle](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawCircle(float,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawCircle<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawCircle", .descriptor == "(FFFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawCircle\0", "(FFFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawText](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawText(char%5B%5D,%20int,%20int,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawText_char_array_int_int_float_float_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: f32, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawText", .descriptor == "([CIIFFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawText\0", "([CIIFFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawText](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawText(java.lang.CharSequence,%20int,%20int,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "java-lang-CharSequence")))]
        pub fn drawText_CharSequence_int_int_float_float_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: f32, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawText", .descriptor == "(Ljava/lang/CharSequence;IIFFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawText\0", "(Ljava/lang/CharSequence;IIFFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawText](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawText(java.lang.String,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "java-lang-String")))]
        pub fn drawText_String_float_float_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: f32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawText", .descriptor == "(Ljava/lang/String;FFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawText\0", "(Ljava/lang/String;FFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawText](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawText(java.lang.String,%20int,%20int,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "java-lang-String")))]
        pub fn drawText_String_int_int_float_float_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32, arg3: f32, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawText", .descriptor == "(Ljava/lang/String;IIFFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawText\0", "(Ljava/lang/String;IIFFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawArc](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawArc(float,%20float,%20float,%20float,%20float,%20float,%20boolean,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawArc_float_float_float_float_float_float_boolean_Paint<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32, arg6: bool, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawArc", .descriptor == "(FFFFFFZLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawArc\0", "(FFFFFFZLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawArc](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawArc(android.graphics.RectF,%20float,%20float,%20boolean,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-RectF")))]
        pub fn drawArc_RectF_float_float_boolean_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: f32, arg2: f32, arg3: bool, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawArc", .descriptor == "(Landroid/graphics/RectF;FFZLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawArc\0", "(Landroid/graphics/RectF;FFZLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawLine](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawLine(float,%20float,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawLine<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawLine", .descriptor == "(FFFFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawLine\0", "(FFFFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawVertices](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawVertices(android.graphics.Canvas.VertexMode,%20int,%20float%5B%5D,%20int,%20float%5B%5D,%20int,%20int%5B%5D,%20int,%20short%5B%5D,%20int,%20int,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Canvas_VertexMode", "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas_VertexMode", feature = "android-graphics-Paint")))]
        pub fn drawVertices<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas_VertexMode>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg7: i32, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ShortArray>>, arg9: i32, arg10: i32, arg11: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawVertices", .descriptor == "(Landroid/graphics/Canvas$VertexMode;I[FI[FI[II[SIILandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into()), __jni_bindgen::AsJValue::as_jvalue(&arg9), __jni_bindgen::AsJValue::as_jvalue(&arg10), __jni_bindgen::AsJValue::as_jvalue(&arg11.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawVertices\0", "(Landroid/graphics/Canvas$VertexMode;I[FI[FI[II[SIILandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawRGB](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawRGB(int,%20int,%20int))
        pub fn drawRGB<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawRGB", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawRGB\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawLines](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawLines(float%5B%5D,%20int,%20int,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawLines_float_array_int_int_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawLines", .descriptor == "([FIILandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawLines\0", "([FIILandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawLines](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawLines(float%5B%5D,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawLines_float_array_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawLines", .descriptor == "([FLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawLines\0", "([FLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPicture](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPicture(android.graphics.Picture))
        ///
        /// Required features: "android-graphics-Picture"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Picture")))]
        pub fn drawPicture_Picture<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Picture>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPicture", .descriptor == "(Landroid/graphics/Picture;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPicture\0", "(Landroid/graphics/Picture;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPicture](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPicture(android.graphics.Picture,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Picture", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Picture", feature = "android-graphics-Rect")))]
        pub fn drawPicture_Picture_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Picture>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPicture", .descriptor == "(Landroid/graphics/Picture;Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPicture\0", "(Landroid/graphics/Picture;Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPicture](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPicture(android.graphics.Picture,%20android.graphics.RectF))
        ///
        /// Required features: "android-graphics-Picture", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Picture", feature = "android-graphics-RectF")))]
        pub fn drawPicture_Picture_RectF<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Picture>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPicture", .descriptor == "(Landroid/graphics/Picture;Landroid/graphics/RectF;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPicture\0", "(Landroid/graphics/Picture;Landroid/graphics/RectF;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawARGB](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawARGB(int,%20int,%20int,%20int))
        pub fn drawARGB<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawARGB", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawARGB\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawPath](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawPath(android.graphics.Path,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-Path")))]
        pub fn drawPath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawPath", .descriptor == "(Landroid/graphics/Path;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawPath\0", "(Landroid/graphics/Path;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawRect](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawRect(float,%20float,%20float,%20float,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn drawRect_float_float_float_float_Paint<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawRect", .descriptor == "(FFFFLandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawRect\0", "(FFFFLandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawRect](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawRect(android.graphics.Rect,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-Rect")))]
        pub fn drawRect_Rect_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawRect", .descriptor == "(Landroid/graphics/Rect;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawRect\0", "(Landroid/graphics/Rect;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [drawRect](https://developer.android.com/reference/android/graphics/RecordingCanvas.html#drawRect(android.graphics.RectF,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-RectF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-RectF")))]
        pub fn drawRect_RectF_Paint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RectF>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/RecordingCanvas", java.flags == PUBLIC | FINAL, .name == "drawRect", .descriptor == "(Landroid/graphics/RectF;Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/RecordingCanvas\0", "drawRect\0", "(Landroid/graphics/RectF;Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
