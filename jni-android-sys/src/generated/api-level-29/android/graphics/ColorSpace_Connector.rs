// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-ColorSpace_Connector"))]
__jni_bindgen! {
    /// public class [ColorSpace.Connector](https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html)
    ///
    /// Required feature: android-graphics-ColorSpace_Connector
    public class ColorSpace_Connector ("android/graphics/ColorSpace$Connector") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Connector](https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#Connector(android.graphics.ColorSpace,%20android.graphics.ColorSpace,%20android.graphics.ColorSpace.RenderIntent))
        // ///
        // /// Required features: "android-graphics-ColorSpace", "android-graphics-ColorSpace_RenderIntent"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace", feature = "android-graphics-ColorSpace_RenderIntent")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_RenderIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Connector>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/ColorSpace$Connector", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace$RenderIntent;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Connector\0", "<init>\0", "(Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace$RenderIntent;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getSource](https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#getSource())
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn getSource<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Connector", java.flags == PUBLIC, .name == "getSource", .descriptor == "()Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Connector\0", "getSource\0", "()Landroid/graphics/ColorSpace;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDestination](https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#getDestination())
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn getDestination<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Connector", java.flags == PUBLIC, .name == "getDestination", .descriptor == "()Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Connector\0", "getDestination\0", "()Landroid/graphics/ColorSpace;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRenderIntent](https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#getRenderIntent())
        ///
        /// Required features: "android-graphics-ColorSpace_RenderIntent"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace_RenderIntent")))]
        pub fn getRenderIntent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_RenderIntent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Connector", java.flags == PUBLIC, .name == "getRenderIntent", .descriptor == "()Landroid/graphics/ColorSpace$RenderIntent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Connector\0", "getRenderIntent\0", "()Landroid/graphics/ColorSpace$RenderIntent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transform](https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#transform(float,%20float,%20float))
        pub fn transform_float_float_float<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Connector", java.flags == PUBLIC, .name == "transform", .descriptor == "(FFF)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Connector\0", "transform\0", "(FFF)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transform](https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#transform(float%5B%5D))
        pub fn transform_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Connector", java.flags == PUBLIC, .name == "transform", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Connector\0", "transform\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
