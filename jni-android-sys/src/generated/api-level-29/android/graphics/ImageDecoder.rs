// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-ImageDecoder"))]
__jni_bindgen! {
    /// public final class [ImageDecoder](https://developer.android.com/reference/android/graphics/ImageDecoder.html)
    ///
    /// Required feature: android-graphics-ImageDecoder
    public final class ImageDecoder ("android/graphics/ImageDecoder") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        // // Not emitting: Non-public method
        // /// [ImageDecoder](https://developer.android.com/reference/android/graphics/ImageDecoder.html#ImageDecoder(long,%20int,%20int,%20boolean,%20boolean))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i32, arg2: i32, arg3: bool, arg4: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ImageDecoder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/ImageDecoder", java.flags == (empty), .name == "<init>", .descriptor == "(JIIZZ)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "<init>\0", "(JIIZZ)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/graphics/ImageDecoder.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/ImageDecoder", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isMimeTypeSupported](https://developer.android.com/reference/android/graphics/ImageDecoder.html#isMimeTypeSupported(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isMimeTypeSupported<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "isMimeTypeSupported", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "isMimeTypeSupported\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSource](https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(android.content.res.Resources,%20int))
        ///
        /// Required features: "android-content-res-Resources", "android-graphics-ImageDecoder_Source"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources", feature = "android-graphics-ImageDecoder_Source")))]
        pub fn createSource_Resources_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ImageDecoder_Source>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "createSource", .descriptor == "(Landroid/content/res/Resources;I)Landroid/graphics/ImageDecoder$Source;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "createSource\0", "(Landroid/content/res/Resources;I)Landroid/graphics/ImageDecoder$Source;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSource](https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(android.content.ContentResolver,%20android.net.Uri))
        ///
        /// Required features: "android-content-ContentResolver", "android-graphics-ImageDecoder_Source", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-graphics-ImageDecoder_Source", feature = "android-net-Uri")))]
        pub fn createSource_ContentResolver_Uri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ImageDecoder_Source>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "createSource", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/graphics/ImageDecoder$Source;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "createSource\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/graphics/ImageDecoder$Source;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSource](https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(android.content.res.AssetManager,%20java.lang.String))
        ///
        /// Required features: "android-content-res-AssetManager", "android-graphics-ImageDecoder_Source", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetManager", feature = "android-graphics-ImageDecoder_Source", feature = "java-lang-String")))]
        pub fn createSource_AssetManager_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::AssetManager>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ImageDecoder_Source>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "createSource", .descriptor == "(Landroid/content/res/AssetManager;Ljava/lang/String;)Landroid/graphics/ImageDecoder$Source;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "createSource\0", "(Landroid/content/res/AssetManager;Ljava/lang/String;)Landroid/graphics/ImageDecoder$Source;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSource](https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(java.nio.ByteBuffer))
        ///
        /// Required features: "android-graphics-ImageDecoder_Source", "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ImageDecoder_Source", feature = "java-nio-ByteBuffer")))]
        pub fn createSource_ByteBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ImageDecoder_Source>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "createSource", .descriptor == "(Ljava/nio/ByteBuffer;)Landroid/graphics/ImageDecoder$Source;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "createSource\0", "(Ljava/nio/ByteBuffer;)Landroid/graphics/ImageDecoder$Source;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSource](https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(java.io.File))
        ///
        /// Required features: "android-graphics-ImageDecoder_Source", "java-io-File"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ImageDecoder_Source", feature = "java-io-File")))]
        pub fn createSource_File<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ImageDecoder_Source>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "createSource", .descriptor == "(Ljava/io/File;)Landroid/graphics/ImageDecoder$Source;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "createSource\0", "(Ljava/io/File;)Landroid/graphics/ImageDecoder$Source;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSource](https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(java.util.concurrent.Callable))
        ///
        /// Required features: "android-graphics-ImageDecoder_Source", "java-util-concurrent-Callable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ImageDecoder_Source", feature = "java-util-concurrent-Callable")))]
        pub fn createSource_Callable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ImageDecoder_Source>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "createSource", .descriptor == "(Ljava/util/concurrent/Callable;)Landroid/graphics/ImageDecoder$Source;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "createSource\0", "(Ljava/util/concurrent/Callable;)Landroid/graphics/ImageDecoder$Source;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTargetSize](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setTargetSize(int,%20int))
        pub fn setTargetSize<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setTargetSize", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setTargetSize\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTargetSampleSize](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setTargetSampleSize(int))
        pub fn setTargetSampleSize<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setTargetSampleSize", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setTargetSampleSize\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllocator](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setAllocator(int))
        pub fn setAllocator<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setAllocator", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setAllocator\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllocator](https://developer.android.com/reference/android/graphics/ImageDecoder.html#getAllocator())
        pub fn getAllocator<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "getAllocator", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "getAllocator\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUnpremultipliedRequired](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setUnpremultipliedRequired(boolean))
        pub fn setUnpremultipliedRequired<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setUnpremultipliedRequired", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setUnpremultipliedRequired\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUnpremultipliedRequired](https://developer.android.com/reference/android/graphics/ImageDecoder.html#isUnpremultipliedRequired())
        pub fn isUnpremultipliedRequired<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "isUnpremultipliedRequired", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "isUnpremultipliedRequired\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostProcessor](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setPostProcessor(android.graphics.PostProcessor))
        ///
        /// Required features: "android-graphics-PostProcessor"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PostProcessor")))]
        pub fn setPostProcessor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::PostProcessor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setPostProcessor", .descriptor == "(Landroid/graphics/PostProcessor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setPostProcessor\0", "(Landroid/graphics/PostProcessor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPostProcessor](https://developer.android.com/reference/android/graphics/ImageDecoder.html#getPostProcessor())
        ///
        /// Required features: "android-graphics-PostProcessor"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PostProcessor")))]
        pub fn getPostProcessor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::PostProcessor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "getPostProcessor", .descriptor == "()Landroid/graphics/PostProcessor;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "getPostProcessor\0", "()Landroid/graphics/PostProcessor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnPartialImageListener](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setOnPartialImageListener(android.graphics.ImageDecoder.OnPartialImageListener))
        ///
        /// Required features: "android-graphics-ImageDecoder_OnPartialImageListener"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ImageDecoder_OnPartialImageListener")))]
        pub fn setOnPartialImageListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ImageDecoder_OnPartialImageListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setOnPartialImageListener", .descriptor == "(Landroid/graphics/ImageDecoder$OnPartialImageListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setOnPartialImageListener\0", "(Landroid/graphics/ImageDecoder$OnPartialImageListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOnPartialImageListener](https://developer.android.com/reference/android/graphics/ImageDecoder.html#getOnPartialImageListener())
        ///
        /// Required features: "android-graphics-ImageDecoder_OnPartialImageListener"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ImageDecoder_OnPartialImageListener")))]
        pub fn getOnPartialImageListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ImageDecoder_OnPartialImageListener>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "getOnPartialImageListener", .descriptor == "()Landroid/graphics/ImageDecoder$OnPartialImageListener;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "getOnPartialImageListener\0", "()Landroid/graphics/ImageDecoder$OnPartialImageListener;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCrop](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setCrop(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn setCrop<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setCrop", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setCrop\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCrop](https://developer.android.com/reference/android/graphics/ImageDecoder.html#getCrop())
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getCrop<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Rect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "getCrop", .descriptor == "()Landroid/graphics/Rect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "getCrop\0", "()Landroid/graphics/Rect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMutableRequired](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setMutableRequired(boolean))
        pub fn setMutableRequired<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setMutableRequired", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setMutableRequired\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMutableRequired](https://developer.android.com/reference/android/graphics/ImageDecoder.html#isMutableRequired())
        pub fn isMutableRequired<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "isMutableRequired", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "isMutableRequired\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMemorySizePolicy](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setMemorySizePolicy(int))
        pub fn setMemorySizePolicy<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setMemorySizePolicy", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setMemorySizePolicy\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMemorySizePolicy](https://developer.android.com/reference/android/graphics/ImageDecoder.html#getMemorySizePolicy())
        pub fn getMemorySizePolicy<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "getMemorySizePolicy", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "getMemorySizePolicy\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDecodeAsAlphaMaskEnabled](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setDecodeAsAlphaMaskEnabled(boolean))
        pub fn setDecodeAsAlphaMaskEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setDecodeAsAlphaMaskEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setDecodeAsAlphaMaskEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDecodeAsAlphaMaskEnabled](https://developer.android.com/reference/android/graphics/ImageDecoder.html#isDecodeAsAlphaMaskEnabled())
        pub fn isDecodeAsAlphaMaskEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "isDecodeAsAlphaMaskEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "isDecodeAsAlphaMaskEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTargetColorSpace](https://developer.android.com/reference/android/graphics/ImageDecoder.html#setTargetColorSpace(android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn setTargetColorSpace<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "setTargetColorSpace", .descriptor == "(Landroid/graphics/ColorSpace;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "setTargetColorSpace\0", "(Landroid/graphics/ColorSpace;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/graphics/ImageDecoder.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [decodeDrawable](https://developer.android.com/reference/android/graphics/ImageDecoder.html#decodeDrawable(android.graphics.ImageDecoder.Source,%20android.graphics.ImageDecoder.OnHeaderDecodedListener))
        ///
        /// Required features: "android-graphics-ImageDecoder_OnHeaderDecodedListener", "android-graphics-ImageDecoder_Source", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ImageDecoder_OnHeaderDecodedListener", feature = "android-graphics-ImageDecoder_Source", feature = "android-graphics-drawable-Drawable")))]
        pub fn decodeDrawable_Source_OnHeaderDecodedListener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ImageDecoder_Source>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ImageDecoder_OnHeaderDecodedListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "decodeDrawable", .descriptor == "(Landroid/graphics/ImageDecoder$Source;Landroid/graphics/ImageDecoder$OnHeaderDecodedListener;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "decodeDrawable\0", "(Landroid/graphics/ImageDecoder$Source;Landroid/graphics/ImageDecoder$OnHeaderDecodedListener;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [decodeDrawable](https://developer.android.com/reference/android/graphics/ImageDecoder.html#decodeDrawable(android.graphics.ImageDecoder.Source))
        ///
        /// Required features: "android-graphics-ImageDecoder_Source", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ImageDecoder_Source", feature = "android-graphics-drawable-Drawable")))]
        pub fn decodeDrawable_Source<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ImageDecoder_Source>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "decodeDrawable", .descriptor == "(Landroid/graphics/ImageDecoder$Source;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "decodeDrawable\0", "(Landroid/graphics/ImageDecoder$Source;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [decodeBitmap](https://developer.android.com/reference/android/graphics/ImageDecoder.html#decodeBitmap(android.graphics.ImageDecoder.Source,%20android.graphics.ImageDecoder.OnHeaderDecodedListener))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-ImageDecoder_OnHeaderDecodedListener", "android-graphics-ImageDecoder_Source"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-ImageDecoder_OnHeaderDecodedListener", feature = "android-graphics-ImageDecoder_Source")))]
        pub fn decodeBitmap_Source_OnHeaderDecodedListener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ImageDecoder_Source>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ImageDecoder_OnHeaderDecodedListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "decodeBitmap", .descriptor == "(Landroid/graphics/ImageDecoder$Source;Landroid/graphics/ImageDecoder$OnHeaderDecodedListener;)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "decodeBitmap\0", "(Landroid/graphics/ImageDecoder$Source;Landroid/graphics/ImageDecoder$OnHeaderDecodedListener;)Landroid/graphics/Bitmap;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [decodeBitmap](https://developer.android.com/reference/android/graphics/ImageDecoder.html#decodeBitmap(android.graphics.ImageDecoder.Source))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-ImageDecoder_Source"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-ImageDecoder_Source")))]
        pub fn decodeBitmap_Source<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ImageDecoder_Source>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder", java.flags == PUBLIC | STATIC, .name == "decodeBitmap", .descriptor == "(Landroid/graphics/ImageDecoder$Source;)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ImageDecoder\0", "decodeBitmap\0", "(Landroid/graphics/ImageDecoder$Source;)Landroid/graphics/Bitmap;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ALLOCATOR_DEFAULT](https://developer.android.com/reference/android/graphics/ImageDecoder.html#ALLOCATOR_DEFAULT)
        pub const ALLOCATOR_DEFAULT : i32 = 0;

        /// public static final [ALLOCATOR_HARDWARE](https://developer.android.com/reference/android/graphics/ImageDecoder.html#ALLOCATOR_HARDWARE)
        pub const ALLOCATOR_HARDWARE : i32 = 3;

        /// public static final [ALLOCATOR_SHARED_MEMORY](https://developer.android.com/reference/android/graphics/ImageDecoder.html#ALLOCATOR_SHARED_MEMORY)
        pub const ALLOCATOR_SHARED_MEMORY : i32 = 2;

        /// public static final [ALLOCATOR_SOFTWARE](https://developer.android.com/reference/android/graphics/ImageDecoder.html#ALLOCATOR_SOFTWARE)
        pub const ALLOCATOR_SOFTWARE : i32 = 1;

        /// public static final [MEMORY_POLICY_DEFAULT](https://developer.android.com/reference/android/graphics/ImageDecoder.html#MEMORY_POLICY_DEFAULT)
        pub const MEMORY_POLICY_DEFAULT : i32 = 1;

        /// public static final [MEMORY_POLICY_LOW_RAM](https://developer.android.com/reference/android/graphics/ImageDecoder.html#MEMORY_POLICY_LOW_RAM)
        pub const MEMORY_POLICY_LOW_RAM : i32 = 0;
    }
}
