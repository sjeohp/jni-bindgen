// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-fonts-Font_Builder"))]
__jni_bindgen! {
    /// public final class [Font.Builder](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html)
    ///
    /// Required feature: android-graphics-fonts-Font_Builder
    public final class Font_Builder ("android/graphics/fonts/Font$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#Builder(java.nio.ByteBuffer))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn new_ByteBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/nio/ByteBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "<init>\0", "(Ljava/nio/ByteBuffer;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#Builder(java.io.File))
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn new_File<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/File;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "<init>\0", "(Ljava/io/File;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#Builder(android.os.ParcelFileDescriptor))
        ///
        /// Required features: "android-os-ParcelFileDescriptor"
        #[cfg(any(feature = "all", all(feature = "android-os-ParcelFileDescriptor")))]
        pub fn new_ParcelFileDescriptor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelFileDescriptor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/os/ParcelFileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "<init>\0", "(Landroid/os/ParcelFileDescriptor;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#Builder(android.os.ParcelFileDescriptor,%20long,%20long))
        ///
        /// Required features: "android-os-ParcelFileDescriptor"
        #[cfg(any(feature = "all", all(feature = "android-os-ParcelFileDescriptor")))]
        pub fn new_ParcelFileDescriptor_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelFileDescriptor>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/os/ParcelFileDescriptor;JJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "<init>\0", "(Landroid/os/ParcelFileDescriptor;JJ)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#Builder(android.content.res.AssetManager,%20java.lang.String))
        ///
        /// Required features: "android-content-res-AssetManager", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetManager", feature = "java-lang-String")))]
        pub fn new_AssetManager_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::AssetManager>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/res/AssetManager;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "<init>\0", "(Landroid/content/res/AssetManager;Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#Builder(android.content.res.Resources,%20int))
        ///
        /// Required features: "android-content-res-Resources"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources")))]
        pub fn new_Resources_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/res/Resources;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "<init>\0", "(Landroid/content/res/Resources;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWeight](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#setWeight(int))
        ///
        /// Required features: "android-graphics-fonts-Font_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-fonts-Font_Builder")))]
        pub fn setWeight<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "setWeight", .descriptor == "(I)Landroid/graphics/fonts/Font$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "setWeight\0", "(I)Landroid/graphics/fonts/Font$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSlant](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#setSlant(int))
        ///
        /// Required features: "android-graphics-fonts-Font_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-fonts-Font_Builder")))]
        pub fn setSlant<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "setSlant", .descriptor == "(I)Landroid/graphics/fonts/Font$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "setSlant\0", "(I)Landroid/graphics/fonts/Font$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTtcIndex](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#setTtcIndex(int))
        ///
        /// Required features: "android-graphics-fonts-Font_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-fonts-Font_Builder")))]
        pub fn setTtcIndex<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "setTtcIndex", .descriptor == "(I)Landroid/graphics/fonts/Font$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "setTtcIndex\0", "(I)Landroid/graphics/fonts/Font$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFontVariationSettings](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#setFontVariationSettings(java.lang.String))
        ///
        /// Required features: "android-graphics-fonts-Font_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-fonts-Font_Builder", feature = "java-lang-String")))]
        pub fn setFontVariationSettings_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "setFontVariationSettings", .descriptor == "(Ljava/lang/String;)Landroid/graphics/fonts/Font$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "setFontVariationSettings\0", "(Ljava/lang/String;)Landroid/graphics/fonts/Font$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFontVariationSettings](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#setFontVariationSettings(android.graphics.fonts.FontVariationAxis%5B%5D))
        ///
        /// Required features: "android-graphics-fonts-FontVariationAxis", "android-graphics-fonts-Font_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-fonts-FontVariationAxis", feature = "android-graphics-fonts-Font_Builder")))]
        pub fn setFontVariationSettings_FontVariationAxis_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::graphics::fonts::FontVariationAxis, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "setFontVariationSettings", .descriptor == "([Landroid/graphics/fonts/FontVariationAxis;)Landroid/graphics/fonts/Font$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "setFontVariationSettings\0", "([Landroid/graphics/fonts/FontVariationAxis;)Landroid/graphics/fonts/Font$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/graphics/fonts/Font.Builder.html#build())
        ///
        /// Required features: "android-graphics-fonts-Font"
        #[cfg(any(feature = "all", all(feature = "android-graphics-fonts-Font")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::fonts::Font>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/Font$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/graphics/fonts/Font;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/Font$Builder\0", "build\0", "()Landroid/graphics/fonts/Font;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
