// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-fonts-FontStyle"))]
__jni_bindgen! {
    /// public final class [FontStyle](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html)
    ///
    /// Required feature: android-graphics-fonts-FontStyle
    public final class FontStyle ("android/graphics/fonts/FontStyle") extends crate::java::lang::Object {

        /// [FontStyle](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FontStyle())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::fonts::FontStyle>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/FontStyle", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/FontStyle\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [FontStyle](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FontStyle(int,%20int))
        pub fn new_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::fonts::FontStyle>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/FontStyle", java.flags == PUBLIC, .name == "<init>", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/FontStyle\0", "<init>\0", "(II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWeight](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#getWeight())
        pub fn getWeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/FontStyle", java.flags == PUBLIC, .name == "getWeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/FontStyle\0", "getWeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSlant](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#getSlant())
        pub fn getSlant<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/FontStyle", java.flags == PUBLIC, .name == "getSlant", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/FontStyle\0", "getSlant\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/FontStyle", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/FontStyle\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/FontStyle", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/FontStyle\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/fonts/FontStyle", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/fonts/FontStyle\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [FONT_SLANT_ITALIC](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_SLANT_ITALIC)
        pub const FONT_SLANT_ITALIC : i32 = 1;

        /// public static final [FONT_SLANT_UPRIGHT](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_SLANT_UPRIGHT)
        pub const FONT_SLANT_UPRIGHT : i32 = 0;

        /// public static final [FONT_WEIGHT_BLACK](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_BLACK)
        pub const FONT_WEIGHT_BLACK : i32 = 900;

        /// public static final [FONT_WEIGHT_BOLD](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_BOLD)
        pub const FONT_WEIGHT_BOLD : i32 = 700;

        /// public static final [FONT_WEIGHT_EXTRA_BOLD](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_EXTRA_BOLD)
        pub const FONT_WEIGHT_EXTRA_BOLD : i32 = 800;

        /// public static final [FONT_WEIGHT_EXTRA_LIGHT](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_EXTRA_LIGHT)
        pub const FONT_WEIGHT_EXTRA_LIGHT : i32 = 200;

        /// public static final [FONT_WEIGHT_LIGHT](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_LIGHT)
        pub const FONT_WEIGHT_LIGHT : i32 = 300;

        /// public static final [FONT_WEIGHT_MAX](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_MAX)
        pub const FONT_WEIGHT_MAX : i32 = 1000;

        /// public static final [FONT_WEIGHT_MEDIUM](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_MEDIUM)
        pub const FONT_WEIGHT_MEDIUM : i32 = 500;

        /// public static final [FONT_WEIGHT_MIN](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_MIN)
        pub const FONT_WEIGHT_MIN : i32 = 1;

        /// public static final [FONT_WEIGHT_NORMAL](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_NORMAL)
        pub const FONT_WEIGHT_NORMAL : i32 = 400;

        /// public static final [FONT_WEIGHT_SEMI_BOLD](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_SEMI_BOLD)
        pub const FONT_WEIGHT_SEMI_BOLD : i32 = 600;

        /// public static final [FONT_WEIGHT_THIN](https://developer.android.com/reference/android/graphics/fonts/FontStyle.html#FONT_WEIGHT_THIN)
        pub const FONT_WEIGHT_THIN : i32 = 100;
    }
}
