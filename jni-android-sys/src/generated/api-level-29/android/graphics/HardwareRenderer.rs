// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-HardwareRenderer"))]
__jni_bindgen! {
    /// public class [HardwareRenderer](https://developer.android.com/reference/android/graphics/HardwareRenderer.html)
    ///
    /// Required feature: android-graphics-HardwareRenderer
    public class HardwareRenderer ("android/graphics/HardwareRenderer") extends crate::java::lang::Object {

        /// [HardwareRenderer](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#HardwareRenderer())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::HardwareRenderer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [destroy](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#destroy())
        pub fn destroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "destroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "destroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setName](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setName(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "setName", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "setName\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLightSourceGeometry](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setLightSourceGeometry(float,%20float,%20float,%20float))
        pub fn setLightSourceGeometry<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "setLightSourceGeometry", .descriptor == "(FFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "setLightSourceGeometry\0", "(FFFF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLightSourceAlpha](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setLightSourceAlpha(float,%20float))
        pub fn setLightSourceAlpha<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "setLightSourceAlpha", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "setLightSourceAlpha\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentRoot](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setContentRoot(android.graphics.RenderNode))
        ///
        /// Required features: "android-graphics-RenderNode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-RenderNode")))]
        pub fn setContentRoot<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::RenderNode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "setContentRoot", .descriptor == "(Landroid/graphics/RenderNode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "setContentRoot\0", "(Landroid/graphics/RenderNode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSurface](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setSurface(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn setSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "setSurface", .descriptor == "(Landroid/view/Surface;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "setSurface\0", "(Landroid/view/Surface;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createRenderRequest](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#createRenderRequest())
        ///
        /// Required features: "android-graphics-HardwareRenderer_FrameRenderRequest"
        #[cfg(any(feature = "all", all(feature = "android-graphics-HardwareRenderer_FrameRenderRequest")))]
        pub fn createRenderRequest<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::HardwareRenderer_FrameRenderRequest>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "createRenderRequest", .descriptor == "()Landroid/graphics/HardwareRenderer$FrameRenderRequest;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "createRenderRequest\0", "()Landroid/graphics/HardwareRenderer$FrameRenderRequest;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stop](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#stop())
        pub fn stop<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "stop", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "stop\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#start())
        pub fn start<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "start", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "start\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearContent](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#clearContent())
        pub fn clearContent<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "clearContent", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "clearContent\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyFramePending](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#notifyFramePending())
        pub fn notifyFramePending<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "notifyFramePending", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "notifyFramePending\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOpaque](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setOpaque(boolean))
        pub fn setOpaque<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "setOpaque", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "setOpaque\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOpaque](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#isOpaque())
        pub fn isOpaque<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/HardwareRenderer", java.flags == PUBLIC, .name == "isOpaque", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/HardwareRenderer\0", "isOpaque\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SYNC_CONTEXT_IS_STOPPED](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_CONTEXT_IS_STOPPED)
        pub const SYNC_CONTEXT_IS_STOPPED : i32 = 4;

        /// public static final [SYNC_FRAME_DROPPED](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_FRAME_DROPPED)
        pub const SYNC_FRAME_DROPPED : i32 = 8;

        /// public static final [SYNC_LOST_SURFACE_REWARD_IF_FOUND](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_LOST_SURFACE_REWARD_IF_FOUND)
        pub const SYNC_LOST_SURFACE_REWARD_IF_FOUND : i32 = 2;

        /// public static final [SYNC_OK](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_OK)
        pub const SYNC_OK : i32 = 0;

        /// public static final [SYNC_REDRAW_REQUESTED](https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_REDRAW_REQUESTED)
        pub const SYNC_REDRAW_REQUESTED : i32 = 1;
    }
}
