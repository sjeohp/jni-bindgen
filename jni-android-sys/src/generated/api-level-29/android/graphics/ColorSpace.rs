// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-ColorSpace"))]
__jni_bindgen! {
    /// public class [ColorSpace](https://developer.android.com/reference/android/graphics/ColorSpace.html)
    ///
    /// Required feature: android-graphics-ColorSpace
    public class ColorSpace ("android/graphics/ColorSpace") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ColorSpace](https://developer.android.com/reference/android/graphics/ColorSpace.html#ColorSpace(java.lang.String,%20android.graphics.ColorSpace.Model,%20int))
        // ///
        // /// Required features: "android-graphics-ColorSpace_Model", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace_Model", feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_Model>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/ColorSpace", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/String;Landroid/graphics/ColorSpace$Model;I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "<init>\0", "(Ljava/lang/String;Landroid/graphics/ColorSpace$Model;I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getName](https://developer.android.com/reference/android/graphics/ColorSpace.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getId](https://developer.android.com/reference/android/graphics/ColorSpace.html#getId())
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "getId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "getId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getModel](https://developer.android.com/reference/android/graphics/ColorSpace.html#getModel())
        ///
        /// Required features: "android-graphics-ColorSpace_Model"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace_Model")))]
        pub fn getModel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Model>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "getModel", .descriptor == "()Landroid/graphics/ColorSpace$Model;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "getModel\0", "()Landroid/graphics/ColorSpace$Model;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComponentCount](https://developer.android.com/reference/android/graphics/ColorSpace.html#getComponentCount())
        pub fn getComponentCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "getComponentCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "getComponentCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWideGamut](https://developer.android.com/reference/android/graphics/ColorSpace.html#isWideGamut())
        pub fn isWideGamut<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | ABSTRACT, .name == "isWideGamut", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "isWideGamut\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSrgb](https://developer.android.com/reference/android/graphics/ColorSpace.html#isSrgb())
        pub fn isSrgb<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "isSrgb", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "isSrgb\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinValue](https://developer.android.com/reference/android/graphics/ColorSpace.html#getMinValue(int))
        pub fn getMinValue<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | ABSTRACT, .name == "getMinValue", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "getMinValue\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxValue](https://developer.android.com/reference/android/graphics/ColorSpace.html#getMaxValue(int))
        pub fn getMaxValue<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | ABSTRACT, .name == "getMaxValue", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "getMaxValue\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toXyz](https://developer.android.com/reference/android/graphics/ColorSpace.html#toXyz(float,%20float,%20float))
        pub fn toXyz_float_float_float<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "toXyz", .descriptor == "(FFF)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "toXyz\0", "(FFF)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toXyz](https://developer.android.com/reference/android/graphics/ColorSpace.html#toXyz(float%5B%5D))
        pub fn toXyz_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | ABSTRACT, .name == "toXyz", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "toXyz\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromXyz](https://developer.android.com/reference/android/graphics/ColorSpace.html#fromXyz(float,%20float,%20float))
        pub fn fromXyz_float_float_float<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "fromXyz", .descriptor == "(FFF)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "fromXyz\0", "(FFF)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromXyz](https://developer.android.com/reference/android/graphics/ColorSpace.html#fromXyz(float%5B%5D))
        pub fn fromXyz_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | ABSTRACT, .name == "fromXyz", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "fromXyz\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/graphics/ColorSpace.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/graphics/ColorSpace.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/graphics/ColorSpace.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connect](https://developer.android.com/reference/android/graphics/ColorSpace.html#connect(android.graphics.ColorSpace,%20android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-ColorSpace", "android-graphics-ColorSpace_Connector"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace", feature = "android-graphics-ColorSpace_Connector")))]
        pub fn connect_ColorSpace_ColorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Connector>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | STATIC, .name == "connect", .descriptor == "(Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace;)Landroid/graphics/ColorSpace$Connector;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ColorSpace\0", "connect\0", "(Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace;)Landroid/graphics/ColorSpace$Connector;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connect](https://developer.android.com/reference/android/graphics/ColorSpace.html#connect(android.graphics.ColorSpace,%20android.graphics.ColorSpace,%20android.graphics.ColorSpace.RenderIntent))
        ///
        /// Required features: "android-graphics-ColorSpace", "android-graphics-ColorSpace_Connector", "android-graphics-ColorSpace_RenderIntent"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace", feature = "android-graphics-ColorSpace_Connector", feature = "android-graphics-ColorSpace_RenderIntent")))]
        pub fn connect_ColorSpace_ColorSpace_RenderIntent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_RenderIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Connector>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | STATIC, .name == "connect", .descriptor == "(Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace$RenderIntent;)Landroid/graphics/ColorSpace$Connector;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ColorSpace\0", "connect\0", "(Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace$RenderIntent;)Landroid/graphics/ColorSpace$Connector;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connect](https://developer.android.com/reference/android/graphics/ColorSpace.html#connect(android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-ColorSpace", "android-graphics-ColorSpace_Connector"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace", feature = "android-graphics-ColorSpace_Connector")))]
        pub fn connect_ColorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Connector>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | STATIC, .name == "connect", .descriptor == "(Landroid/graphics/ColorSpace;)Landroid/graphics/ColorSpace$Connector;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ColorSpace\0", "connect\0", "(Landroid/graphics/ColorSpace;)Landroid/graphics/ColorSpace$Connector;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connect](https://developer.android.com/reference/android/graphics/ColorSpace.html#connect(android.graphics.ColorSpace,%20android.graphics.ColorSpace.RenderIntent))
        ///
        /// Required features: "android-graphics-ColorSpace", "android-graphics-ColorSpace_Connector", "android-graphics-ColorSpace_RenderIntent"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace", feature = "android-graphics-ColorSpace_Connector", feature = "android-graphics-ColorSpace_RenderIntent")))]
        pub fn connect_ColorSpace_RenderIntent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_RenderIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Connector>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | STATIC, .name == "connect", .descriptor == "(Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace$RenderIntent;)Landroid/graphics/ColorSpace$Connector;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ColorSpace\0", "connect\0", "(Landroid/graphics/ColorSpace;Landroid/graphics/ColorSpace$RenderIntent;)Landroid/graphics/ColorSpace$Connector;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adapt](https://developer.android.com/reference/android/graphics/ColorSpace.html#adapt(android.graphics.ColorSpace,%20float%5B%5D))
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn adapt_ColorSpace_float_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | STATIC, .name == "adapt", .descriptor == "(Landroid/graphics/ColorSpace;[F)Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ColorSpace\0", "adapt\0", "(Landroid/graphics/ColorSpace;[F)Landroid/graphics/ColorSpace;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adapt](https://developer.android.com/reference/android/graphics/ColorSpace.html#adapt(android.graphics.ColorSpace,%20float%5B%5D,%20android.graphics.ColorSpace.Adaptation))
        ///
        /// Required features: "android-graphics-ColorSpace", "android-graphics-ColorSpace_Adaptation"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace", feature = "android-graphics-ColorSpace_Adaptation")))]
        pub fn adapt_ColorSpace_float_array_Adaptation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_Adaptation>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | STATIC, .name == "adapt", .descriptor == "(Landroid/graphics/ColorSpace;[FLandroid/graphics/ColorSpace$Adaptation;)Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ColorSpace\0", "adapt\0", "(Landroid/graphics/ColorSpace;[FLandroid/graphics/ColorSpace$Adaptation;)Landroid/graphics/ColorSpace;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/android/graphics/ColorSpace.html#get(android.graphics.ColorSpace.Named))
        ///
        /// Required features: "android-graphics-ColorSpace", "android-graphics-ColorSpace_Named"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace", feature = "android-graphics-ColorSpace_Named")))]
        pub fn get<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_Named>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | STATIC, .name == "get", .descriptor == "(Landroid/graphics/ColorSpace$Named;)Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ColorSpace\0", "get\0", "(Landroid/graphics/ColorSpace$Named;)Landroid/graphics/ColorSpace;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [match](https://developer.android.com/reference/android/graphics/ColorSpace.html#match(float%5B%5D,%20android.graphics.ColorSpace.Rgb.TransferParameters))
        ///
        /// Required features: "android-graphics-ColorSpace", "android-graphics-ColorSpace_Rgb_TransferParameters"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace", feature = "android-graphics-ColorSpace_Rgb_TransferParameters")))]
        pub fn r#match<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_Rgb_TransferParameters>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace", java.flags == PUBLIC | STATIC, .name == "match", .descriptor == "([FLandroid/graphics/ColorSpace$Rgb$TransferParameters;)Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/ColorSpace\0", "match\0", "([FLandroid/graphics/ColorSpace$Rgb$TransferParameters;)Landroid/graphics/ColorSpace;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [ILLUMINANT_A](https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_A)
        pub fn ILLUMINANT_A<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/ColorSpace\0", "ILLUMINANT_A\0", "[F\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ILLUMINANT_B](https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_B)
        pub fn ILLUMINANT_B<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/ColorSpace\0", "ILLUMINANT_B\0", "[F\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ILLUMINANT_C](https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_C)
        pub fn ILLUMINANT_C<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/ColorSpace\0", "ILLUMINANT_C\0", "[F\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ILLUMINANT_D50](https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D50)
        pub fn ILLUMINANT_D50<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/ColorSpace\0", "ILLUMINANT_D50\0", "[F\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ILLUMINANT_D55](https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D55)
        pub fn ILLUMINANT_D55<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/ColorSpace\0", "ILLUMINANT_D55\0", "[F\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ILLUMINANT_D60](https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D60)
        pub fn ILLUMINANT_D60<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/ColorSpace\0", "ILLUMINANT_D60\0", "[F\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ILLUMINANT_D65](https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D65)
        pub fn ILLUMINANT_D65<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/ColorSpace\0", "ILLUMINANT_D65\0", "[F\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ILLUMINANT_D75](https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D75)
        pub fn ILLUMINANT_D75<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/ColorSpace\0", "ILLUMINANT_D75\0", "[F\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ILLUMINANT_E](https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_E)
        pub fn ILLUMINANT_E<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/ColorSpace\0", "ILLUMINANT_E\0", "[F\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [MAX_ID](https://developer.android.com/reference/android/graphics/ColorSpace.html#MAX_ID)
        pub const MAX_ID : i32 = 63;

        /// public static final [MIN_ID](https://developer.android.com/reference/android/graphics/ColorSpace.html#MIN_ID)
        pub const MIN_ID : i32 = -1;
    }
}
