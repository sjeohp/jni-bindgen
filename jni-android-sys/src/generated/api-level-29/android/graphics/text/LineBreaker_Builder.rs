// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-text-LineBreaker_Builder"))]
__jni_bindgen! {
    /// public final class [LineBreaker.Builder](https://developer.android.com/reference/android/graphics/text/LineBreaker.Builder.html)
    ///
    /// Required feature: android-graphics-text-LineBreaker_Builder
    public final class LineBreaker_Builder ("android/graphics/text/LineBreaker$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/graphics/text/LineBreaker.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::text::LineBreaker_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/LineBreaker$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/LineBreaker$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBreakStrategy](https://developer.android.com/reference/android/graphics/text/LineBreaker.Builder.html#setBreakStrategy(int))
        ///
        /// Required features: "android-graphics-text-LineBreaker_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-LineBreaker_Builder")))]
        pub fn setBreakStrategy<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::LineBreaker_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/LineBreaker$Builder", java.flags == PUBLIC, .name == "setBreakStrategy", .descriptor == "(I)Landroid/graphics/text/LineBreaker$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/LineBreaker$Builder\0", "setBreakStrategy\0", "(I)Landroid/graphics/text/LineBreaker$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHyphenationFrequency](https://developer.android.com/reference/android/graphics/text/LineBreaker.Builder.html#setHyphenationFrequency(int))
        ///
        /// Required features: "android-graphics-text-LineBreaker_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-LineBreaker_Builder")))]
        pub fn setHyphenationFrequency<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::LineBreaker_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/LineBreaker$Builder", java.flags == PUBLIC, .name == "setHyphenationFrequency", .descriptor == "(I)Landroid/graphics/text/LineBreaker$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/LineBreaker$Builder\0", "setHyphenationFrequency\0", "(I)Landroid/graphics/text/LineBreaker$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setJustificationMode](https://developer.android.com/reference/android/graphics/text/LineBreaker.Builder.html#setJustificationMode(int))
        ///
        /// Required features: "android-graphics-text-LineBreaker_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-LineBreaker_Builder")))]
        pub fn setJustificationMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::LineBreaker_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/LineBreaker$Builder", java.flags == PUBLIC, .name == "setJustificationMode", .descriptor == "(I)Landroid/graphics/text/LineBreaker$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/LineBreaker$Builder\0", "setJustificationMode\0", "(I)Landroid/graphics/text/LineBreaker$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIndents](https://developer.android.com/reference/android/graphics/text/LineBreaker.Builder.html#setIndents(int%5B%5D))
        ///
        /// Required features: "android-graphics-text-LineBreaker_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-LineBreaker_Builder")))]
        pub fn setIndents<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::LineBreaker_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/LineBreaker$Builder", java.flags == PUBLIC, .name == "setIndents", .descriptor == "([I)Landroid/graphics/text/LineBreaker$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/LineBreaker$Builder\0", "setIndents\0", "([I)Landroid/graphics/text/LineBreaker$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/graphics/text/LineBreaker.Builder.html#build())
        ///
        /// Required features: "android-graphics-text-LineBreaker"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-LineBreaker")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::LineBreaker>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/LineBreaker$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/graphics/text/LineBreaker;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/LineBreaker$Builder\0", "build\0", "()Landroid/graphics/text/LineBreaker;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
