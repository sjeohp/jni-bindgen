// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-text-LineBreaker"))]
__jni_bindgen! {
    /// public class [LineBreaker](https://developer.android.com/reference/android/graphics/text/LineBreaker.html)
    ///
    /// Required feature: android-graphics-text-LineBreaker
    public class LineBreaker ("android/graphics/text/LineBreaker") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [LineBreaker](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#LineBreaker(int,%20int,%20int,%20int%5B%5D))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::text::LineBreaker>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/text/LineBreaker", java.flags == (empty), .name == "<init>", .descriptor == "(III[I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/LineBreaker\0", "<init>\0", "(III[I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [computeLineBreaks](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#computeLineBreaks(android.graphics.text.MeasuredText,%20android.graphics.text.LineBreaker.ParagraphConstraints,%20int))
        ///
        /// Required features: "android-graphics-text-LineBreaker_ParagraphConstraints", "android-graphics-text-LineBreaker_Result", "android-graphics-text-MeasuredText"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-LineBreaker_ParagraphConstraints", feature = "android-graphics-text-LineBreaker_Result", feature = "android-graphics-text-MeasuredText")))]
        pub fn computeLineBreaks<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::text::MeasuredText>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::text::LineBreaker_ParagraphConstraints>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::LineBreaker_Result>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/LineBreaker", java.flags == PUBLIC, .name == "computeLineBreaks", .descriptor == "(Landroid/graphics/text/MeasuredText;Landroid/graphics/text/LineBreaker$ParagraphConstraints;I)Landroid/graphics/text/LineBreaker$Result;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/LineBreaker\0", "computeLineBreaks\0", "(Landroid/graphics/text/MeasuredText;Landroid/graphics/text/LineBreaker$ParagraphConstraints;I)Landroid/graphics/text/LineBreaker$Result;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [BREAK_STRATEGY_BALANCED](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#BREAK_STRATEGY_BALANCED)
        pub const BREAK_STRATEGY_BALANCED : i32 = 2;

        /// public static final [BREAK_STRATEGY_HIGH_QUALITY](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#BREAK_STRATEGY_HIGH_QUALITY)
        pub const BREAK_STRATEGY_HIGH_QUALITY : i32 = 1;

        /// public static final [BREAK_STRATEGY_SIMPLE](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#BREAK_STRATEGY_SIMPLE)
        pub const BREAK_STRATEGY_SIMPLE : i32 = 0;

        /// public static final [HYPHENATION_FREQUENCY_FULL](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#HYPHENATION_FREQUENCY_FULL)
        pub const HYPHENATION_FREQUENCY_FULL : i32 = 2;

        /// public static final [HYPHENATION_FREQUENCY_NONE](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#HYPHENATION_FREQUENCY_NONE)
        pub const HYPHENATION_FREQUENCY_NONE : i32 = 0;

        /// public static final [HYPHENATION_FREQUENCY_NORMAL](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#HYPHENATION_FREQUENCY_NORMAL)
        pub const HYPHENATION_FREQUENCY_NORMAL : i32 = 1;

        /// public static final [JUSTIFICATION_MODE_INTER_WORD](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#JUSTIFICATION_MODE_INTER_WORD)
        pub const JUSTIFICATION_MODE_INTER_WORD : i32 = 1;

        /// public static final [JUSTIFICATION_MODE_NONE](https://developer.android.com/reference/android/graphics/text/LineBreaker.html#JUSTIFICATION_MODE_NONE)
        pub const JUSTIFICATION_MODE_NONE : i32 = 0;
    }
}
