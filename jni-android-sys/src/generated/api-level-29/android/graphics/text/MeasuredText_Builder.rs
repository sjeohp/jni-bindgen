// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-text-MeasuredText_Builder"))]
__jni_bindgen! {
    /// public final class [MeasuredText.Builder](https://developer.android.com/reference/android/graphics/text/MeasuredText.Builder.html)
    ///
    /// Required feature: android-graphics-text-MeasuredText_Builder
    public final class MeasuredText_Builder ("android/graphics/text/MeasuredText$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/graphics/text/MeasuredText.Builder.html#Builder(char%5B%5D))
        pub fn new_char_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::text::MeasuredText_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/MeasuredText$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "([C)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/MeasuredText$Builder\0", "<init>\0", "([C)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/graphics/text/MeasuredText.Builder.html#Builder(android.graphics.text.MeasuredText))
        ///
        /// Required features: "android-graphics-text-MeasuredText"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-MeasuredText")))]
        pub fn new_MeasuredText<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::text::MeasuredText>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::text::MeasuredText_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/MeasuredText$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/text/MeasuredText;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/MeasuredText$Builder\0", "<init>\0", "(Landroid/graphics/text/MeasuredText;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendStyleRun](https://developer.android.com/reference/android/graphics/text/MeasuredText.Builder.html#appendStyleRun(android.graphics.Paint,%20int,%20boolean))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-text-MeasuredText_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-text-MeasuredText_Builder")))]
        pub fn appendStyleRun<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>, arg1: i32, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::MeasuredText_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/MeasuredText$Builder", java.flags == PUBLIC, .name == "appendStyleRun", .descriptor == "(Landroid/graphics/Paint;IZ)Landroid/graphics/text/MeasuredText$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/MeasuredText$Builder\0", "appendStyleRun\0", "(Landroid/graphics/Paint;IZ)Landroid/graphics/text/MeasuredText$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendReplacementRun](https://developer.android.com/reference/android/graphics/text/MeasuredText.Builder.html#appendReplacementRun(android.graphics.Paint,%20int,%20float))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-text-MeasuredText_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-text-MeasuredText_Builder")))]
        pub fn appendReplacementRun<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>, arg1: i32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::MeasuredText_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/MeasuredText$Builder", java.flags == PUBLIC, .name == "appendReplacementRun", .descriptor == "(Landroid/graphics/Paint;IF)Landroid/graphics/text/MeasuredText$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/MeasuredText$Builder\0", "appendReplacementRun\0", "(Landroid/graphics/Paint;IF)Landroid/graphics/text/MeasuredText$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setComputeHyphenation](https://developer.android.com/reference/android/graphics/text/MeasuredText.Builder.html#setComputeHyphenation(boolean))
        ///
        /// Required features: "android-graphics-text-MeasuredText_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-MeasuredText_Builder")))]
        pub fn setComputeHyphenation<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::MeasuredText_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/MeasuredText$Builder", java.flags == PUBLIC, .name == "setComputeHyphenation", .descriptor == "(Z)Landroid/graphics/text/MeasuredText$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/MeasuredText$Builder\0", "setComputeHyphenation\0", "(Z)Landroid/graphics/text/MeasuredText$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setComputeLayout](https://developer.android.com/reference/android/graphics/text/MeasuredText.Builder.html#setComputeLayout(boolean))
        ///
        /// Required features: "android-graphics-text-MeasuredText_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-MeasuredText_Builder")))]
        pub fn setComputeLayout<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::MeasuredText_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/MeasuredText$Builder", java.flags == PUBLIC, .name == "setComputeLayout", .descriptor == "(Z)Landroid/graphics/text/MeasuredText$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/MeasuredText$Builder\0", "setComputeLayout\0", "(Z)Landroid/graphics/text/MeasuredText$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/graphics/text/MeasuredText.Builder.html#build())
        ///
        /// Required features: "android-graphics-text-MeasuredText"
        #[cfg(any(feature = "all", all(feature = "android-graphics-text-MeasuredText")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::text::MeasuredText>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/text/MeasuredText$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/graphics/text/MeasuredText;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/text/MeasuredText$Builder\0", "build\0", "()Landroid/graphics/text/MeasuredText;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
