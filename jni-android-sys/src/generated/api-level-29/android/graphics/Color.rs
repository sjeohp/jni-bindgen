// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-Color"))]
__jni_bindgen! {
    /// public class [Color](https://developer.android.com/reference/android/graphics/Color.html)
    ///
    /// Required feature: android-graphics-Color
    public class Color ("android/graphics/Color") extends crate::java::lang::Object {

        /// [Color](https://developer.android.com/reference/android/graphics/Color.html#Color())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::Color>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorSpace](https://developer.android.com/reference/android/graphics/Color.html#getColorSpace())
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn getColorSpace<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "getColorSpace", .descriptor == "()Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "getColorSpace\0", "()Landroid/graphics/ColorSpace;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getModel](https://developer.android.com/reference/android/graphics/Color.html#getModel())
        ///
        /// Required features: "android-graphics-ColorSpace_Model"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace_Model")))]
        pub fn getModel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Model>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "getModel", .descriptor == "()Landroid/graphics/ColorSpace$Model;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "getModel\0", "()Landroid/graphics/ColorSpace$Model;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWideGamut](https://developer.android.com/reference/android/graphics/Color.html#isWideGamut())
        pub fn isWideGamut<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "isWideGamut", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "isWideGamut\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSrgb](https://developer.android.com/reference/android/graphics/Color.html#isSrgb())
        pub fn isSrgb<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "isSrgb", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "isSrgb\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComponentCount](https://developer.android.com/reference/android/graphics/Color.html#getComponentCount())
        pub fn getComponentCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "getComponentCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "getComponentCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pack](https://developer.android.com/reference/android/graphics/Color.html#pack())
        pub fn pack<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "pack", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "pack\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [convert](https://developer.android.com/reference/android/graphics/Color.html#convert(android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-Color", "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Color", feature = "android-graphics-ColorSpace")))]
        pub fn convert_ColorSpace<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Color>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "convert", .descriptor == "(Landroid/graphics/ColorSpace;)Landroid/graphics/Color;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "convert\0", "(Landroid/graphics/ColorSpace;)Landroid/graphics/Color;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toArgb](https://developer.android.com/reference/android/graphics/Color.html#toArgb())
        pub fn toArgb<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "toArgb", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "toArgb\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [red](https://developer.android.com/reference/android/graphics/Color.html#red())
        pub fn red<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "red", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "red\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [green](https://developer.android.com/reference/android/graphics/Color.html#green())
        pub fn green<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "green", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "green\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [blue](https://developer.android.com/reference/android/graphics/Color.html#blue())
        pub fn blue<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "blue", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "blue\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [alpha](https://developer.android.com/reference/android/graphics/Color.html#alpha())
        pub fn alpha<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "alpha", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "alpha\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComponents](https://developer.android.com/reference/android/graphics/Color.html#getComponents())
        pub fn getComponents<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "getComponents", .descriptor == "()[F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "getComponents\0", "()[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComponents](https://developer.android.com/reference/android/graphics/Color.html#getComponents(float%5B%5D))
        pub fn getComponents_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "getComponents", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "getComponents\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComponent](https://developer.android.com/reference/android/graphics/Color.html#getComponent(int))
        pub fn getComponent<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "getComponent", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "getComponent\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [luminance](https://developer.android.com/reference/android/graphics/Color.html#luminance())
        pub fn luminance<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "luminance", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "luminance\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/graphics/Color.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/graphics/Color.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/graphics/Color.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Color\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [colorSpace](https://developer.android.com/reference/android/graphics/Color.html#colorSpace(long))
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn colorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "colorSpace", .descriptor == "(J)Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "colorSpace\0", "(J)Landroid/graphics/ColorSpace;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [red](https://developer.android.com/reference/android/graphics/Color.html#red(long))
        pub fn red_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "red", .descriptor == "(J)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "red\0", "(J)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [green](https://developer.android.com/reference/android/graphics/Color.html#green(long))
        pub fn green_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "green", .descriptor == "(J)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "green\0", "(J)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [blue](https://developer.android.com/reference/android/graphics/Color.html#blue(long))
        pub fn blue_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "blue", .descriptor == "(J)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "blue\0", "(J)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [alpha](https://developer.android.com/reference/android/graphics/Color.html#alpha(long))
        pub fn alpha_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "alpha", .descriptor == "(J)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "alpha\0", "(J)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSrgb](https://developer.android.com/reference/android/graphics/Color.html#isSrgb(long))
        pub fn isSrgb_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "isSrgb", .descriptor == "(J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "isSrgb\0", "(J)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWideGamut](https://developer.android.com/reference/android/graphics/Color.html#isWideGamut(long))
        pub fn isWideGamut_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "isWideGamut", .descriptor == "(J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "isWideGamut\0", "(J)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInColorSpace](https://developer.android.com/reference/android/graphics/Color.html#isInColorSpace(long,%20android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn isInColorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "isInColorSpace", .descriptor == "(JLandroid/graphics/ColorSpace;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "isInColorSpace\0", "(JLandroid/graphics/ColorSpace;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toArgb](https://developer.android.com/reference/android/graphics/Color.html#toArgb(long))
        pub fn toArgb_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "toArgb", .descriptor == "(J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "toArgb\0", "(J)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/android/graphics/Color.html#valueOf(int))
        ///
        /// Required features: "android-graphics-Color"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Color")))]
        pub fn valueOf_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Color>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(I)Landroid/graphics/Color;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "valueOf\0", "(I)Landroid/graphics/Color;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/android/graphics/Color.html#valueOf(long))
        ///
        /// Required features: "android-graphics-Color"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Color")))]
        pub fn valueOf_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Color>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(J)Landroid/graphics/Color;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "valueOf\0", "(J)Landroid/graphics/Color;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/android/graphics/Color.html#valueOf(float,%20float,%20float))
        ///
        /// Required features: "android-graphics-Color"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Color")))]
        pub fn valueOf_float_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Color>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(FFF)Landroid/graphics/Color;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "valueOf\0", "(FFF)Landroid/graphics/Color;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/android/graphics/Color.html#valueOf(float,%20float,%20float,%20float))
        ///
        /// Required features: "android-graphics-Color"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Color")))]
        pub fn valueOf_float_float_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Color>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(FFFF)Landroid/graphics/Color;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "valueOf\0", "(FFFF)Landroid/graphics/Color;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/android/graphics/Color.html#valueOf(float,%20float,%20float,%20float,%20android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-Color", "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Color", feature = "android-graphics-ColorSpace")))]
        pub fn valueOf_float_float_float_float_ColorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Color>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(FFFFLandroid/graphics/ColorSpace;)Landroid/graphics/Color;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "valueOf\0", "(FFFFLandroid/graphics/ColorSpace;)Landroid/graphics/Color;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/android/graphics/Color.html#valueOf(float%5B%5D,%20android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-Color", "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Color", feature = "android-graphics-ColorSpace")))]
        pub fn valueOf_float_array_ColorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Color>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "([FLandroid/graphics/ColorSpace;)Landroid/graphics/Color;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "valueOf\0", "([FLandroid/graphics/ColorSpace;)Landroid/graphics/Color;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pack](https://developer.android.com/reference/android/graphics/Color.html#pack(int))
        pub fn pack_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "pack", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "pack\0", "(I)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pack](https://developer.android.com/reference/android/graphics/Color.html#pack(float,%20float,%20float))
        pub fn pack_float_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "pack", .descriptor == "(FFF)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "pack\0", "(FFF)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pack](https://developer.android.com/reference/android/graphics/Color.html#pack(float,%20float,%20float,%20float))
        pub fn pack_float_float_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "pack", .descriptor == "(FFFF)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "pack\0", "(FFFF)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pack](https://developer.android.com/reference/android/graphics/Color.html#pack(float,%20float,%20float,%20float,%20android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn pack_float_float_float_float_ColorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "pack", .descriptor == "(FFFFLandroid/graphics/ColorSpace;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "pack\0", "(FFFFLandroid/graphics/ColorSpace;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [convert](https://developer.android.com/reference/android/graphics/Color.html#convert(int,%20android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn convert_int_ColorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "convert", .descriptor == "(ILandroid/graphics/ColorSpace;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "convert\0", "(ILandroid/graphics/ColorSpace;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [convert](https://developer.android.com/reference/android/graphics/Color.html#convert(long,%20android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn convert_long_ColorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "convert", .descriptor == "(JLandroid/graphics/ColorSpace;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "convert\0", "(JLandroid/graphics/ColorSpace;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [convert](https://developer.android.com/reference/android/graphics/Color.html#convert(float,%20float,%20float,%20float,%20android.graphics.ColorSpace,%20android.graphics.ColorSpace))
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn convert_float_float_float_float_ColorSpace_ColorSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "convert", .descriptor == "(FFFFLandroid/graphics/ColorSpace;Landroid/graphics/ColorSpace;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "convert\0", "(FFFFLandroid/graphics/ColorSpace;Landroid/graphics/ColorSpace;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [convert](https://developer.android.com/reference/android/graphics/Color.html#convert(long,%20android.graphics.ColorSpace.Connector))
        ///
        /// Required features: "android-graphics-ColorSpace_Connector"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace_Connector")))]
        pub fn convert_long_Connector<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_Connector>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "convert", .descriptor == "(JLandroid/graphics/ColorSpace$Connector;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "convert\0", "(JLandroid/graphics/ColorSpace$Connector;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [convert](https://developer.android.com/reference/android/graphics/Color.html#convert(float,%20float,%20float,%20float,%20android.graphics.ColorSpace.Connector))
        ///
        /// Required features: "android-graphics-ColorSpace_Connector"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace_Connector")))]
        pub fn convert_float_float_float_float_Connector<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_Connector>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "convert", .descriptor == "(FFFFLandroid/graphics/ColorSpace$Connector;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "convert\0", "(FFFFLandroid/graphics/ColorSpace$Connector;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [luminance](https://developer.android.com/reference/android/graphics/Color.html#luminance(long))
        pub fn luminance_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "luminance", .descriptor == "(J)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "luminance\0", "(J)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [alpha](https://developer.android.com/reference/android/graphics/Color.html#alpha(int))
        pub fn alpha_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "alpha", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "alpha\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [red](https://developer.android.com/reference/android/graphics/Color.html#red(int))
        pub fn red_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "red", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "red\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [green](https://developer.android.com/reference/android/graphics/Color.html#green(int))
        pub fn green_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "green", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "green\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [blue](https://developer.android.com/reference/android/graphics/Color.html#blue(int))
        pub fn blue_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "blue", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "blue\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rgb](https://developer.android.com/reference/android/graphics/Color.html#rgb(int,%20int,%20int))
        pub fn rgb_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "rgb", .descriptor == "(III)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "rgb\0", "(III)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rgb](https://developer.android.com/reference/android/graphics/Color.html#rgb(float,%20float,%20float))
        pub fn rgb_float_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "rgb", .descriptor == "(FFF)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "rgb\0", "(FFF)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [argb](https://developer.android.com/reference/android/graphics/Color.html#argb(int,%20int,%20int,%20int))
        pub fn argb_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "argb", .descriptor == "(IIII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "argb\0", "(IIII)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [argb](https://developer.android.com/reference/android/graphics/Color.html#argb(float,%20float,%20float,%20float))
        pub fn argb_float_float_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "argb", .descriptor == "(FFFF)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "argb\0", "(FFFF)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [luminance](https://developer.android.com/reference/android/graphics/Color.html#luminance(int))
        pub fn luminance_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "luminance", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "luminance\0", "(I)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseColor](https://developer.android.com/reference/android/graphics/Color.html#parseColor(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn parseColor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "parseColor", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "parseColor\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [RGBToHSV](https://developer.android.com/reference/android/graphics/Color.html#RGBToHSV(int,%20int,%20int,%20float%5B%5D))
        pub fn RGBToHSV<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "RGBToHSV", .descriptor == "(III[F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "RGBToHSV\0", "(III[F)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [colorToHSV](https://developer.android.com/reference/android/graphics/Color.html#colorToHSV(int,%20float%5B%5D))
        pub fn colorToHSV<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "colorToHSV", .descriptor == "(I[F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "colorToHSV\0", "(I[F)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [HSVToColor](https://developer.android.com/reference/android/graphics/Color.html#HSVToColor(float%5B%5D))
        pub fn HSVToColor_float_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "HSVToColor", .descriptor == "([F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "HSVToColor\0", "([F)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [HSVToColor](https://developer.android.com/reference/android/graphics/Color.html#HSVToColor(int,%20float%5B%5D))
        pub fn HSVToColor_int_float_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Color", java.flags == PUBLIC | STATIC, .name == "HSVToColor", .descriptor == "(I[F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/Color\0", "HSVToColor\0", "(I[F)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [BLACK](https://developer.android.com/reference/android/graphics/Color.html#BLACK)
        pub const BLACK : i32 = -16777216;

        /// public static final [BLUE](https://developer.android.com/reference/android/graphics/Color.html#BLUE)
        pub const BLUE : i32 = -16776961;

        /// public static final [CYAN](https://developer.android.com/reference/android/graphics/Color.html#CYAN)
        pub const CYAN : i32 = -16711681;

        /// public static final [DKGRAY](https://developer.android.com/reference/android/graphics/Color.html#DKGRAY)
        pub const DKGRAY : i32 = -12303292;

        /// public static final [GRAY](https://developer.android.com/reference/android/graphics/Color.html#GRAY)
        pub const GRAY : i32 = -7829368;

        /// public static final [GREEN](https://developer.android.com/reference/android/graphics/Color.html#GREEN)
        pub const GREEN : i32 = -16711936;

        /// public static final [LTGRAY](https://developer.android.com/reference/android/graphics/Color.html#LTGRAY)
        pub const LTGRAY : i32 = -3355444;

        /// public static final [MAGENTA](https://developer.android.com/reference/android/graphics/Color.html#MAGENTA)
        pub const MAGENTA : i32 = -65281;

        /// public static final [RED](https://developer.android.com/reference/android/graphics/Color.html#RED)
        pub const RED : i32 = -65536;

        /// public static final [TRANSPARENT](https://developer.android.com/reference/android/graphics/Color.html#TRANSPARENT)
        pub const TRANSPARENT : i32 = 0;

        /// public static final [WHITE](https://developer.android.com/reference/android/graphics/Color.html#WHITE)
        pub const WHITE : i32 = -1;

        /// public static final [YELLOW](https://developer.android.com/reference/android/graphics/Color.html#YELLOW)
        pub const YELLOW : i32 = -256;
    }
}
