// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-LightingColorFilter"))]
__jni_bindgen! {
    /// public class [LightingColorFilter](https://developer.android.com/reference/android/graphics/LightingColorFilter.html)
    ///
    /// Required feature: android-graphics-LightingColorFilter
    public class LightingColorFilter ("android/graphics/LightingColorFilter") extends crate::android::graphics::ColorFilter {

        /// [LightingColorFilter](https://developer.android.com/reference/android/graphics/LightingColorFilter.html#LightingColorFilter(int,%20int))
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::LightingColorFilter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/LightingColorFilter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/LightingColorFilter\0", "<init>\0", "(II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorMultiply](https://developer.android.com/reference/android/graphics/LightingColorFilter.html#getColorMultiply())
        pub fn getColorMultiply<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/LightingColorFilter", java.flags == PUBLIC, .name == "getColorMultiply", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/LightingColorFilter\0", "getColorMultiply\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorAdd](https://developer.android.com/reference/android/graphics/LightingColorFilter.html#getColorAdd())
        pub fn getColorAdd<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/LightingColorFilter", java.flags == PUBLIC, .name == "getColorAdd", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/LightingColorFilter\0", "getColorAdd\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
