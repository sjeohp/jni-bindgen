// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-ComposeShader"))]
__jni_bindgen! {
    /// public class [ComposeShader](https://developer.android.com/reference/android/graphics/ComposeShader.html)
    ///
    /// Required feature: android-graphics-ComposeShader
    public class ComposeShader ("android/graphics/ComposeShader") extends crate::android::graphics::Shader {

        /// [ComposeShader](https://developer.android.com/reference/android/graphics/ComposeShader.html#ComposeShader(android.graphics.Shader,%20android.graphics.Shader,%20android.graphics.Xfermode))
        ///
        /// Required features: "android-graphics-Shader", "android-graphics-Xfermode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Shader", feature = "android-graphics-Xfermode")))]
        #[deprecated] pub fn new_Shader_Shader_Xfermode<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Shader>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Shader>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Xfermode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ComposeShader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ComposeShader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Shader;Landroid/graphics/Shader;Landroid/graphics/Xfermode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ComposeShader\0", "<init>\0", "(Landroid/graphics/Shader;Landroid/graphics/Shader;Landroid/graphics/Xfermode;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ComposeShader](https://developer.android.com/reference/android/graphics/ComposeShader.html#ComposeShader(android.graphics.Shader,%20android.graphics.Shader,%20android.graphics.PorterDuff.Mode))
        ///
        /// Required features: "android-graphics-PorterDuff_Mode", "android-graphics-Shader"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PorterDuff_Mode", feature = "android-graphics-Shader")))]
        pub fn new_Shader_Shader_Mode<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Shader>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Shader>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::PorterDuff_Mode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ComposeShader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ComposeShader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Shader;Landroid/graphics/Shader;Landroid/graphics/PorterDuff$Mode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ComposeShader\0", "<init>\0", "(Landroid/graphics/Shader;Landroid/graphics/Shader;Landroid/graphics/PorterDuff$Mode;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ComposeShader](https://developer.android.com/reference/android/graphics/ComposeShader.html#ComposeShader(android.graphics.Shader,%20android.graphics.Shader,%20android.graphics.BlendMode))
        ///
        /// Required features: "android-graphics-BlendMode", "android-graphics-Shader"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode", feature = "android-graphics-Shader")))]
        pub fn new_Shader_Shader_BlendMode<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Shader>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Shader>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::BlendMode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ComposeShader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ComposeShader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Shader;Landroid/graphics/Shader;Landroid/graphics/BlendMode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ComposeShader\0", "<init>\0", "(Landroid/graphics/Shader;Landroid/graphics/Shader;Landroid/graphics/BlendMode;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
