// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-Shader"))]
__jni_bindgen! {
    /// public class [Shader](https://developer.android.com/reference/android/graphics/Shader.html)
    ///
    /// Required feature: android-graphics-Shader
    public class Shader ("android/graphics/Shader") extends crate::java::lang::Object {

        /// [Shader](https://developer.android.com/reference/android/graphics/Shader.html#Shader())
        #[deprecated] pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::Shader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Shader", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Shader\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalMatrix](https://developer.android.com/reference/android/graphics/Shader.html#getLocalMatrix(android.graphics.Matrix))
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn getLocalMatrix<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Matrix>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Shader", java.flags == PUBLIC, .name == "getLocalMatrix", .descriptor == "(Landroid/graphics/Matrix;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Shader\0", "getLocalMatrix\0", "(Landroid/graphics/Matrix;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLocalMatrix](https://developer.android.com/reference/android/graphics/Shader.html#setLocalMatrix(android.graphics.Matrix))
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn setLocalMatrix<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Matrix>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Shader", java.flags == PUBLIC, .name == "setLocalMatrix", .descriptor == "(Landroid/graphics/Matrix;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Shader\0", "setLocalMatrix\0", "(Landroid/graphics/Matrix;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
