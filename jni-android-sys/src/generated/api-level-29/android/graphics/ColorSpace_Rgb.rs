// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-ColorSpace_Rgb"))]
__jni_bindgen! {
    /// public class [ColorSpace.Rgb](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html)
    ///
    /// Required feature: android-graphics-ColorSpace_Rgb
    public class ColorSpace_Rgb ("android/graphics/ColorSpace$Rgb") extends crate::android::graphics::ColorSpace {

        /// [Rgb](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#Rgb(java.lang.String,%20float%5B%5D,%20java.util.function.DoubleUnaryOperator,%20java.util.function.DoubleUnaryOperator))
        ///
        /// Required features: "java-lang-String", "java-util-function-DoubleUnaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-function-DoubleUnaryOperator")))]
        pub fn new_String_float_array_DoubleUnaryOperator_DoubleUnaryOperator<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleUnaryOperator>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleUnaryOperator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Rgb>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;[FLjava/util/function/DoubleUnaryOperator;Ljava/util/function/DoubleUnaryOperator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "<init>\0", "(Ljava/lang/String;[FLjava/util/function/DoubleUnaryOperator;Ljava/util/function/DoubleUnaryOperator;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Rgb](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#Rgb(java.lang.String,%20float%5B%5D,%20float%5B%5D,%20java.util.function.DoubleUnaryOperator,%20java.util.function.DoubleUnaryOperator,%20float,%20float))
        ///
        /// Required features: "java-lang-String", "java-util-function-DoubleUnaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-function-DoubleUnaryOperator")))]
        pub fn new_String_float_array_float_array_DoubleUnaryOperator_DoubleUnaryOperator_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleUnaryOperator>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleUnaryOperator>>, arg5: f32, arg6: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Rgb>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;[F[FLjava/util/function/DoubleUnaryOperator;Ljava/util/function/DoubleUnaryOperator;FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "<init>\0", "(Ljava/lang/String;[F[FLjava/util/function/DoubleUnaryOperator;Ljava/util/function/DoubleUnaryOperator;FF)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Rgb](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#Rgb(java.lang.String,%20float%5B%5D,%20android.graphics.ColorSpace.Rgb.TransferParameters))
        ///
        /// Required features: "android-graphics-ColorSpace_Rgb_TransferParameters", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace_Rgb_TransferParameters", feature = "java-lang-String")))]
        pub fn new_String_float_array_TransferParameters<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_Rgb_TransferParameters>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Rgb>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;[FLandroid/graphics/ColorSpace$Rgb$TransferParameters;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "<init>\0", "(Ljava/lang/String;[FLandroid/graphics/ColorSpace$Rgb$TransferParameters;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Rgb](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#Rgb(java.lang.String,%20float%5B%5D,%20float%5B%5D,%20android.graphics.ColorSpace.Rgb.TransferParameters))
        ///
        /// Required features: "android-graphics-ColorSpace_Rgb_TransferParameters", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace_Rgb_TransferParameters", feature = "java-lang-String")))]
        pub fn new_String_float_array_float_array_TransferParameters<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorSpace_Rgb_TransferParameters>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Rgb>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;[F[FLandroid/graphics/ColorSpace$Rgb$TransferParameters;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "<init>\0", "(Ljava/lang/String;[F[FLandroid/graphics/ColorSpace$Rgb$TransferParameters;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Rgb](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#Rgb(java.lang.String,%20float%5B%5D,%20double))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_float_array_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Rgb>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;[FD)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "<init>\0", "(Ljava/lang/String;[FD)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Rgb](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#Rgb(java.lang.String,%20float%5B%5D,%20float%5B%5D,%20double))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_float_array_float_array_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Rgb>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;[F[FD)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "<init>\0", "(Ljava/lang/String;[F[FD)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWhitePoint](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getWhitePoint(float%5B%5D))
        pub fn getWhitePoint_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getWhitePoint", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getWhitePoint\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWhitePoint](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getWhitePoint())
        pub fn getWhitePoint<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getWhitePoint", .descriptor == "()[F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getWhitePoint\0", "()[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaries](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getPrimaries(float%5B%5D))
        pub fn getPrimaries_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getPrimaries", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getPrimaries\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaries](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getPrimaries())
        pub fn getPrimaries<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getPrimaries", .descriptor == "()[F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getPrimaries\0", "()[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransform](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getTransform(float%5B%5D))
        pub fn getTransform_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getTransform", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getTransform\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransform](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getTransform())
        pub fn getTransform<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getTransform", .descriptor == "()[F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getTransform\0", "()[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInverseTransform](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getInverseTransform(float%5B%5D))
        pub fn getInverseTransform_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getInverseTransform", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getInverseTransform\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInverseTransform](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getInverseTransform())
        pub fn getInverseTransform<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getInverseTransform", .descriptor == "()[F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getInverseTransform\0", "()[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOetf](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getOetf())
        ///
        /// Required features: "java-util-function-DoubleUnaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleUnaryOperator")))]
        pub fn getOetf<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::function::DoubleUnaryOperator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getOetf", .descriptor == "()Ljava/util/function/DoubleUnaryOperator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getOetf\0", "()Ljava/util/function/DoubleUnaryOperator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEotf](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getEotf())
        ///
        /// Required features: "java-util-function-DoubleUnaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleUnaryOperator")))]
        pub fn getEotf<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::function::DoubleUnaryOperator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getEotf", .descriptor == "()Ljava/util/function/DoubleUnaryOperator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getEotf\0", "()Ljava/util/function/DoubleUnaryOperator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransferParameters](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getTransferParameters())
        ///
        /// Required features: "android-graphics-ColorSpace_Rgb_TransferParameters"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace_Rgb_TransferParameters")))]
        pub fn getTransferParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace_Rgb_TransferParameters>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getTransferParameters", .descriptor == "()Landroid/graphics/ColorSpace$Rgb$TransferParameters;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getTransferParameters\0", "()Landroid/graphics/ColorSpace$Rgb$TransferParameters;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSrgb](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#isSrgb())
        pub fn isSrgb<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "isSrgb", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "isSrgb\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWideGamut](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#isWideGamut())
        pub fn isWideGamut<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "isWideGamut", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "isWideGamut\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinValue](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getMinValue(int))
        pub fn getMinValue<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getMinValue", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getMinValue\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxValue](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getMaxValue(int))
        pub fn getMaxValue<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "getMaxValue", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "getMaxValue\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toLinear](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#toLinear(float,%20float,%20float))
        pub fn toLinear_float_float_float<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "toLinear", .descriptor == "(FFF)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "toLinear\0", "(FFF)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toLinear](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#toLinear(float%5B%5D))
        pub fn toLinear_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "toLinear", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "toLinear\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromLinear](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#fromLinear(float,%20float,%20float))
        pub fn fromLinear_float_float_float<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "fromLinear", .descriptor == "(FFF)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "fromLinear\0", "(FFF)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromLinear](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#fromLinear(float%5B%5D))
        pub fn fromLinear_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "fromLinear", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "fromLinear\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toXyz](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#toXyz(float%5B%5D))
        pub fn toXyz<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "toXyz", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "toXyz\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromXyz](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#fromXyz(float%5B%5D))
        pub fn fromXyz<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "fromXyz", .descriptor == "([F)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "fromXyz\0", "([F)[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ColorSpace$Rgb", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ColorSpace$Rgb\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
