// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-Paint"))]
__jni_bindgen! {
    /// public class [Paint](https://developer.android.com/reference/android/graphics/Paint.html)
    ///
    /// Required feature: android-graphics-Paint
    public class Paint ("android/graphics/Paint") extends crate::java::lang::Object {

        /// [Paint](https://developer.android.com/reference/android/graphics/Paint.html#Paint())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::Paint>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Paint](https://developer.android.com/reference/android/graphics/Paint.html#Paint(int))
        pub fn new_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::Paint>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Paint](https://developer.android.com/reference/android/graphics/Paint.html#Paint(android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn new_Paint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::Paint>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "<init>\0", "(Landroid/graphics/Paint;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reset](https://developer.android.com/reference/android/graphics/Paint.html#reset())
        pub fn reset<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "reset", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "reset\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/graphics/Paint.html#set(android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "set", .descriptor == "(Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "set\0", "(Landroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFlags](https://developer.android.com/reference/android/graphics/Paint.html#getFlags())
        pub fn getFlags<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getFlags", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getFlags\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFlags](https://developer.android.com/reference/android/graphics/Paint.html#setFlags(int))
        pub fn setFlags<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setFlags", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setFlags\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHinting](https://developer.android.com/reference/android/graphics/Paint.html#getHinting())
        pub fn getHinting<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getHinting", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getHinting\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHinting](https://developer.android.com/reference/android/graphics/Paint.html#setHinting(int))
        pub fn setHinting<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setHinting", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setHinting\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAntiAlias](https://developer.android.com/reference/android/graphics/Paint.html#isAntiAlias())
        pub fn isAntiAlias<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC | FINAL, .name == "isAntiAlias", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "isAntiAlias\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAntiAlias](https://developer.android.com/reference/android/graphics/Paint.html#setAntiAlias(boolean))
        pub fn setAntiAlias<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setAntiAlias", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setAntiAlias\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDither](https://developer.android.com/reference/android/graphics/Paint.html#isDither())
        pub fn isDither<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC | FINAL, .name == "isDither", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "isDither\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDither](https://developer.android.com/reference/android/graphics/Paint.html#setDither(boolean))
        pub fn setDither<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setDither", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setDither\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLinearText](https://developer.android.com/reference/android/graphics/Paint.html#isLinearText())
        pub fn isLinearText<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC | FINAL, .name == "isLinearText", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "isLinearText\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLinearText](https://developer.android.com/reference/android/graphics/Paint.html#setLinearText(boolean))
        pub fn setLinearText<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setLinearText", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setLinearText\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSubpixelText](https://developer.android.com/reference/android/graphics/Paint.html#isSubpixelText())
        pub fn isSubpixelText<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC | FINAL, .name == "isSubpixelText", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "isSubpixelText\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSubpixelText](https://developer.android.com/reference/android/graphics/Paint.html#setSubpixelText(boolean))
        pub fn setSubpixelText<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setSubpixelText", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setSubpixelText\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUnderlineText](https://developer.android.com/reference/android/graphics/Paint.html#isUnderlineText())
        pub fn isUnderlineText<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC | FINAL, .name == "isUnderlineText", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "isUnderlineText\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnderlinePosition](https://developer.android.com/reference/android/graphics/Paint.html#getUnderlinePosition())
        pub fn getUnderlinePosition<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getUnderlinePosition", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getUnderlinePosition\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnderlineThickness](https://developer.android.com/reference/android/graphics/Paint.html#getUnderlineThickness())
        pub fn getUnderlineThickness<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getUnderlineThickness", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getUnderlineThickness\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUnderlineText](https://developer.android.com/reference/android/graphics/Paint.html#setUnderlineText(boolean))
        pub fn setUnderlineText<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setUnderlineText", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setUnderlineText\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStrikeThruText](https://developer.android.com/reference/android/graphics/Paint.html#isStrikeThruText())
        pub fn isStrikeThruText<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC | FINAL, .name == "isStrikeThruText", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "isStrikeThruText\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStrikeThruPosition](https://developer.android.com/reference/android/graphics/Paint.html#getStrikeThruPosition())
        pub fn getStrikeThruPosition<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getStrikeThruPosition", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getStrikeThruPosition\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStrikeThruThickness](https://developer.android.com/reference/android/graphics/Paint.html#getStrikeThruThickness())
        pub fn getStrikeThruThickness<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getStrikeThruThickness", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getStrikeThruThickness\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStrikeThruText](https://developer.android.com/reference/android/graphics/Paint.html#setStrikeThruText(boolean))
        pub fn setStrikeThruText<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setStrikeThruText", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setStrikeThruText\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFakeBoldText](https://developer.android.com/reference/android/graphics/Paint.html#isFakeBoldText())
        pub fn isFakeBoldText<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC | FINAL, .name == "isFakeBoldText", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "isFakeBoldText\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFakeBoldText](https://developer.android.com/reference/android/graphics/Paint.html#setFakeBoldText(boolean))
        pub fn setFakeBoldText<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setFakeBoldText", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setFakeBoldText\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFilterBitmap](https://developer.android.com/reference/android/graphics/Paint.html#isFilterBitmap())
        pub fn isFilterBitmap<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC | FINAL, .name == "isFilterBitmap", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "isFilterBitmap\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFilterBitmap](https://developer.android.com/reference/android/graphics/Paint.html#setFilterBitmap(boolean))
        pub fn setFilterBitmap<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setFilterBitmap", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setFilterBitmap\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStyle](https://developer.android.com/reference/android/graphics/Paint.html#getStyle())
        ///
        /// Required features: "android-graphics-Paint_Style"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_Style")))]
        pub fn getStyle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Paint_Style>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getStyle", .descriptor == "()Landroid/graphics/Paint$Style;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getStyle\0", "()Landroid/graphics/Paint$Style;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStyle](https://developer.android.com/reference/android/graphics/Paint.html#setStyle(android.graphics.Paint.Style))
        ///
        /// Required features: "android-graphics-Paint_Style"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_Style")))]
        pub fn setStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint_Style>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setStyle", .descriptor == "(Landroid/graphics/Paint$Style;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setStyle\0", "(Landroid/graphics/Paint$Style;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColor](https://developer.android.com/reference/android/graphics/Paint.html#getColor())
        pub fn getColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorLong](https://developer.android.com/reference/android/graphics/Paint.html#getColorLong())
        pub fn getColorLong<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getColorLong", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getColorLong\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColor](https://developer.android.com/reference/android/graphics/Paint.html#setColor(int))
        pub fn setColor_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColor](https://developer.android.com/reference/android/graphics/Paint.html#setColor(long))
        pub fn setColor_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setColor", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setColor\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlpha](https://developer.android.com/reference/android/graphics/Paint.html#getAlpha())
        pub fn getAlpha<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getAlpha", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getAlpha\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlpha](https://developer.android.com/reference/android/graphics/Paint.html#setAlpha(int))
        pub fn setAlpha<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setAlpha", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setAlpha\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setARGB](https://developer.android.com/reference/android/graphics/Paint.html#setARGB(int,%20int,%20int,%20int))
        pub fn setARGB<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setARGB", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setARGB\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStrokeWidth](https://developer.android.com/reference/android/graphics/Paint.html#getStrokeWidth())
        pub fn getStrokeWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getStrokeWidth", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getStrokeWidth\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStrokeWidth](https://developer.android.com/reference/android/graphics/Paint.html#setStrokeWidth(float))
        pub fn setStrokeWidth<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setStrokeWidth", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setStrokeWidth\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStrokeMiter](https://developer.android.com/reference/android/graphics/Paint.html#getStrokeMiter())
        pub fn getStrokeMiter<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getStrokeMiter", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getStrokeMiter\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStrokeMiter](https://developer.android.com/reference/android/graphics/Paint.html#setStrokeMiter(float))
        pub fn setStrokeMiter<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setStrokeMiter", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setStrokeMiter\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStrokeCap](https://developer.android.com/reference/android/graphics/Paint.html#getStrokeCap())
        ///
        /// Required features: "android-graphics-Paint_Cap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_Cap")))]
        pub fn getStrokeCap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Paint_Cap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getStrokeCap", .descriptor == "()Landroid/graphics/Paint$Cap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getStrokeCap\0", "()Landroid/graphics/Paint$Cap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStrokeCap](https://developer.android.com/reference/android/graphics/Paint.html#setStrokeCap(android.graphics.Paint.Cap))
        ///
        /// Required features: "android-graphics-Paint_Cap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_Cap")))]
        pub fn setStrokeCap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint_Cap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setStrokeCap", .descriptor == "(Landroid/graphics/Paint$Cap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setStrokeCap\0", "(Landroid/graphics/Paint$Cap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStrokeJoin](https://developer.android.com/reference/android/graphics/Paint.html#getStrokeJoin())
        ///
        /// Required features: "android-graphics-Paint_Join"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_Join")))]
        pub fn getStrokeJoin<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Paint_Join>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getStrokeJoin", .descriptor == "()Landroid/graphics/Paint$Join;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getStrokeJoin\0", "()Landroid/graphics/Paint$Join;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStrokeJoin](https://developer.android.com/reference/android/graphics/Paint.html#setStrokeJoin(android.graphics.Paint.Join))
        ///
        /// Required features: "android-graphics-Paint_Join"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_Join")))]
        pub fn setStrokeJoin<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint_Join>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setStrokeJoin", .descriptor == "(Landroid/graphics/Paint$Join;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setStrokeJoin\0", "(Landroid/graphics/Paint$Join;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFillPath](https://developer.android.com/reference/android/graphics/Paint.html#getFillPath(android.graphics.Path,%20android.graphics.Path))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn getFillPath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getFillPath", .descriptor == "(Landroid/graphics/Path;Landroid/graphics/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getFillPath\0", "(Landroid/graphics/Path;Landroid/graphics/Path;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShader](https://developer.android.com/reference/android/graphics/Paint.html#getShader())
        ///
        /// Required features: "android-graphics-Shader"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Shader")))]
        pub fn getShader<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Shader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getShader", .descriptor == "()Landroid/graphics/Shader;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getShader\0", "()Landroid/graphics/Shader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShader](https://developer.android.com/reference/android/graphics/Paint.html#setShader(android.graphics.Shader))
        ///
        /// Required features: "android-graphics-Shader"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Shader")))]
        pub fn setShader<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Shader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Shader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setShader", .descriptor == "(Landroid/graphics/Shader;)Landroid/graphics/Shader;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setShader\0", "(Landroid/graphics/Shader;)Landroid/graphics/Shader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorFilter](https://developer.android.com/reference/android/graphics/Paint.html#getColorFilter())
        ///
        /// Required features: "android-graphics-ColorFilter"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorFilter")))]
        pub fn getColorFilter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorFilter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getColorFilter", .descriptor == "()Landroid/graphics/ColorFilter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getColorFilter\0", "()Landroid/graphics/ColorFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColorFilter](https://developer.android.com/reference/android/graphics/Paint.html#setColorFilter(android.graphics.ColorFilter))
        ///
        /// Required features: "android-graphics-ColorFilter"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorFilter")))]
        pub fn setColorFilter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ColorFilter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorFilter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setColorFilter", .descriptor == "(Landroid/graphics/ColorFilter;)Landroid/graphics/ColorFilter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setColorFilter\0", "(Landroid/graphics/ColorFilter;)Landroid/graphics/ColorFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getXfermode](https://developer.android.com/reference/android/graphics/Paint.html#getXfermode())
        ///
        /// Required features: "android-graphics-Xfermode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Xfermode")))]
        pub fn getXfermode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Xfermode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getXfermode", .descriptor == "()Landroid/graphics/Xfermode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getXfermode\0", "()Landroid/graphics/Xfermode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBlendMode](https://developer.android.com/reference/android/graphics/Paint.html#getBlendMode())
        ///
        /// Required features: "android-graphics-BlendMode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode")))]
        pub fn getBlendMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::BlendMode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getBlendMode", .descriptor == "()Landroid/graphics/BlendMode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getBlendMode\0", "()Landroid/graphics/BlendMode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setXfermode](https://developer.android.com/reference/android/graphics/Paint.html#setXfermode(android.graphics.Xfermode))
        ///
        /// Required features: "android-graphics-Xfermode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Xfermode")))]
        pub fn setXfermode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Xfermode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Xfermode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setXfermode", .descriptor == "(Landroid/graphics/Xfermode;)Landroid/graphics/Xfermode;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setXfermode\0", "(Landroid/graphics/Xfermode;)Landroid/graphics/Xfermode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBlendMode](https://developer.android.com/reference/android/graphics/Paint.html#setBlendMode(android.graphics.BlendMode))
        ///
        /// Required features: "android-graphics-BlendMode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode")))]
        pub fn setBlendMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::BlendMode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setBlendMode", .descriptor == "(Landroid/graphics/BlendMode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setBlendMode\0", "(Landroid/graphics/BlendMode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPathEffect](https://developer.android.com/reference/android/graphics/Paint.html#getPathEffect())
        ///
        /// Required features: "android-graphics-PathEffect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PathEffect")))]
        pub fn getPathEffect<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::PathEffect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getPathEffect", .descriptor == "()Landroid/graphics/PathEffect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getPathEffect\0", "()Landroid/graphics/PathEffect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPathEffect](https://developer.android.com/reference/android/graphics/Paint.html#setPathEffect(android.graphics.PathEffect))
        ///
        /// Required features: "android-graphics-PathEffect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PathEffect")))]
        pub fn setPathEffect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::PathEffect>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::PathEffect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setPathEffect", .descriptor == "(Landroid/graphics/PathEffect;)Landroid/graphics/PathEffect;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setPathEffect\0", "(Landroid/graphics/PathEffect;)Landroid/graphics/PathEffect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaskFilter](https://developer.android.com/reference/android/graphics/Paint.html#getMaskFilter())
        ///
        /// Required features: "android-graphics-MaskFilter"
        #[cfg(any(feature = "all", all(feature = "android-graphics-MaskFilter")))]
        pub fn getMaskFilter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::MaskFilter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getMaskFilter", .descriptor == "()Landroid/graphics/MaskFilter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getMaskFilter\0", "()Landroid/graphics/MaskFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaskFilter](https://developer.android.com/reference/android/graphics/Paint.html#setMaskFilter(android.graphics.MaskFilter))
        ///
        /// Required features: "android-graphics-MaskFilter"
        #[cfg(any(feature = "all", all(feature = "android-graphics-MaskFilter")))]
        pub fn setMaskFilter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::MaskFilter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::MaskFilter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setMaskFilter", .descriptor == "(Landroid/graphics/MaskFilter;)Landroid/graphics/MaskFilter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setMaskFilter\0", "(Landroid/graphics/MaskFilter;)Landroid/graphics/MaskFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTypeface](https://developer.android.com/reference/android/graphics/Paint.html#getTypeface())
        ///
        /// Required features: "android-graphics-Typeface"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Typeface")))]
        pub fn getTypeface<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Typeface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTypeface", .descriptor == "()Landroid/graphics/Typeface;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTypeface\0", "()Landroid/graphics/Typeface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTypeface](https://developer.android.com/reference/android/graphics/Paint.html#setTypeface(android.graphics.Typeface))
        ///
        /// Required features: "android-graphics-Typeface"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Typeface")))]
        pub fn setTypeface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Typeface>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Typeface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setTypeface", .descriptor == "(Landroid/graphics/Typeface;)Landroid/graphics/Typeface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setTypeface\0", "(Landroid/graphics/Typeface;)Landroid/graphics/Typeface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShadowLayer](https://developer.android.com/reference/android/graphics/Paint.html#setShadowLayer(float,%20float,%20float,%20int))
        pub fn setShadowLayer_float_float_float_int<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setShadowLayer", .descriptor == "(FFFI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setShadowLayer\0", "(FFFI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShadowLayer](https://developer.android.com/reference/android/graphics/Paint.html#setShadowLayer(float,%20float,%20float,%20long))
        pub fn setShadowLayer_float_float_float_long<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setShadowLayer", .descriptor == "(FFFJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setShadowLayer\0", "(FFFJ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearShadowLayer](https://developer.android.com/reference/android/graphics/Paint.html#clearShadowLayer())
        pub fn clearShadowLayer<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "clearShadowLayer", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "clearShadowLayer\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShadowLayerRadius](https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerRadius())
        pub fn getShadowLayerRadius<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getShadowLayerRadius", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getShadowLayerRadius\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShadowLayerDx](https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerDx())
        pub fn getShadowLayerDx<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getShadowLayerDx", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getShadowLayerDx\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShadowLayerDy](https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerDy())
        pub fn getShadowLayerDy<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getShadowLayerDy", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getShadowLayerDy\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShadowLayerColor](https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerColor())
        pub fn getShadowLayerColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getShadowLayerColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getShadowLayerColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShadowLayerColorLong](https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerColorLong())
        pub fn getShadowLayerColorLong<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getShadowLayerColorLong", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getShadowLayerColorLong\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextAlign](https://developer.android.com/reference/android/graphics/Paint.html#getTextAlign())
        ///
        /// Required features: "android-graphics-Paint_Align"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_Align")))]
        pub fn getTextAlign<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Paint_Align>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextAlign", .descriptor == "()Landroid/graphics/Paint$Align;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextAlign\0", "()Landroid/graphics/Paint$Align;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextAlign](https://developer.android.com/reference/android/graphics/Paint.html#setTextAlign(android.graphics.Paint.Align))
        ///
        /// Required features: "android-graphics-Paint_Align"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_Align")))]
        pub fn setTextAlign<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint_Align>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setTextAlign", .descriptor == "(Landroid/graphics/Paint$Align;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setTextAlign\0", "(Landroid/graphics/Paint$Align;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextLocale](https://developer.android.com/reference/android/graphics/Paint.html#getTextLocale())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn getTextLocale<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextLocale", .descriptor == "()Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextLocale\0", "()Ljava/util/Locale;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextLocales](https://developer.android.com/reference/android/graphics/Paint.html#getTextLocales())
        ///
        /// Required features: "android-os-LocaleList"
        #[cfg(any(feature = "all", all(feature = "android-os-LocaleList")))]
        pub fn getTextLocales<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::LocaleList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextLocales", .descriptor == "()Landroid/os/LocaleList;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextLocales\0", "()Landroid/os/LocaleList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextLocale](https://developer.android.com/reference/android/graphics/Paint.html#setTextLocale(java.util.Locale))
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn setTextLocale<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setTextLocale", .descriptor == "(Ljava/util/Locale;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setTextLocale\0", "(Ljava/util/Locale;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextLocales](https://developer.android.com/reference/android/graphics/Paint.html#setTextLocales(android.os.LocaleList))
        ///
        /// Required features: "android-os-LocaleList"
        #[cfg(any(feature = "all", all(feature = "android-os-LocaleList")))]
        pub fn setTextLocales<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::LocaleList>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setTextLocales", .descriptor == "(Landroid/os/LocaleList;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setTextLocales\0", "(Landroid/os/LocaleList;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isElegantTextHeight](https://developer.android.com/reference/android/graphics/Paint.html#isElegantTextHeight())
        pub fn isElegantTextHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "isElegantTextHeight", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "isElegantTextHeight\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setElegantTextHeight](https://developer.android.com/reference/android/graphics/Paint.html#setElegantTextHeight(boolean))
        pub fn setElegantTextHeight<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setElegantTextHeight", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setElegantTextHeight\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextSize](https://developer.android.com/reference/android/graphics/Paint.html#getTextSize())
        pub fn getTextSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextSize", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextSize\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextSize](https://developer.android.com/reference/android/graphics/Paint.html#setTextSize(float))
        pub fn setTextSize<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setTextSize", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setTextSize\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextScaleX](https://developer.android.com/reference/android/graphics/Paint.html#getTextScaleX())
        pub fn getTextScaleX<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextScaleX", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextScaleX\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextScaleX](https://developer.android.com/reference/android/graphics/Paint.html#setTextScaleX(float))
        pub fn setTextScaleX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setTextScaleX", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setTextScaleX\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextSkewX](https://developer.android.com/reference/android/graphics/Paint.html#getTextSkewX())
        pub fn getTextSkewX<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextSkewX", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextSkewX\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextSkewX](https://developer.android.com/reference/android/graphics/Paint.html#setTextSkewX(float))
        pub fn setTextSkewX<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setTextSkewX", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setTextSkewX\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLetterSpacing](https://developer.android.com/reference/android/graphics/Paint.html#getLetterSpacing())
        pub fn getLetterSpacing<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getLetterSpacing", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getLetterSpacing\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLetterSpacing](https://developer.android.com/reference/android/graphics/Paint.html#setLetterSpacing(float))
        pub fn setLetterSpacing<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setLetterSpacing", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setLetterSpacing\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWordSpacing](https://developer.android.com/reference/android/graphics/Paint.html#getWordSpacing())
        pub fn getWordSpacing<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getWordSpacing", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getWordSpacing\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWordSpacing](https://developer.android.com/reference/android/graphics/Paint.html#setWordSpacing(float))
        pub fn setWordSpacing<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setWordSpacing", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setWordSpacing\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFontFeatureSettings](https://developer.android.com/reference/android/graphics/Paint.html#getFontFeatureSettings())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFontFeatureSettings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getFontFeatureSettings", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getFontFeatureSettings\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFontFeatureSettings](https://developer.android.com/reference/android/graphics/Paint.html#setFontFeatureSettings(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFontFeatureSettings<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setFontFeatureSettings", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setFontFeatureSettings\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFontVariationSettings](https://developer.android.com/reference/android/graphics/Paint.html#getFontVariationSettings())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFontVariationSettings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getFontVariationSettings", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getFontVariationSettings\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFontVariationSettings](https://developer.android.com/reference/android/graphics/Paint.html#setFontVariationSettings(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFontVariationSettings<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setFontVariationSettings", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setFontVariationSettings\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStartHyphenEdit](https://developer.android.com/reference/android/graphics/Paint.html#getStartHyphenEdit())
        pub fn getStartHyphenEdit<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getStartHyphenEdit", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getStartHyphenEdit\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEndHyphenEdit](https://developer.android.com/reference/android/graphics/Paint.html#getEndHyphenEdit())
        pub fn getEndHyphenEdit<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getEndHyphenEdit", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getEndHyphenEdit\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStartHyphenEdit](https://developer.android.com/reference/android/graphics/Paint.html#setStartHyphenEdit(int))
        pub fn setStartHyphenEdit<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setStartHyphenEdit", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setStartHyphenEdit\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEndHyphenEdit](https://developer.android.com/reference/android/graphics/Paint.html#setEndHyphenEdit(int))
        pub fn setEndHyphenEdit<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "setEndHyphenEdit", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "setEndHyphenEdit\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ascent](https://developer.android.com/reference/android/graphics/Paint.html#ascent())
        pub fn ascent<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "ascent", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "ascent\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [descent](https://developer.android.com/reference/android/graphics/Paint.html#descent())
        pub fn descent<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "descent", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "descent\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFontMetrics](https://developer.android.com/reference/android/graphics/Paint.html#getFontMetrics(android.graphics.Paint.FontMetrics))
        ///
        /// Required features: "android-graphics-Paint_FontMetrics"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_FontMetrics")))]
        pub fn getFontMetrics_FontMetrics<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint_FontMetrics>>) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getFontMetrics", .descriptor == "(Landroid/graphics/Paint$FontMetrics;)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getFontMetrics\0", "(Landroid/graphics/Paint$FontMetrics;)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFontMetrics](https://developer.android.com/reference/android/graphics/Paint.html#getFontMetrics())
        ///
        /// Required features: "android-graphics-Paint_FontMetrics"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_FontMetrics")))]
        pub fn getFontMetrics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Paint_FontMetrics>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getFontMetrics", .descriptor == "()Landroid/graphics/Paint$FontMetrics;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getFontMetrics\0", "()Landroid/graphics/Paint$FontMetrics;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFontMetricsInt](https://developer.android.com/reference/android/graphics/Paint.html#getFontMetricsInt(android.graphics.Paint.FontMetricsInt))
        ///
        /// Required features: "android-graphics-Paint_FontMetricsInt"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_FontMetricsInt")))]
        pub fn getFontMetricsInt_FontMetricsInt<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint_FontMetricsInt>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getFontMetricsInt", .descriptor == "(Landroid/graphics/Paint$FontMetricsInt;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getFontMetricsInt\0", "(Landroid/graphics/Paint$FontMetricsInt;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFontMetricsInt](https://developer.android.com/reference/android/graphics/Paint.html#getFontMetricsInt())
        ///
        /// Required features: "android-graphics-Paint_FontMetricsInt"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint_FontMetricsInt")))]
        pub fn getFontMetricsInt<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Paint_FontMetricsInt>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getFontMetricsInt", .descriptor == "()Landroid/graphics/Paint$FontMetricsInt;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getFontMetricsInt\0", "()Landroid/graphics/Paint$FontMetricsInt;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFontSpacing](https://developer.android.com/reference/android/graphics/Paint.html#getFontSpacing())
        pub fn getFontSpacing<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getFontSpacing", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getFontSpacing\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [measureText](https://developer.android.com/reference/android/graphics/Paint.html#measureText(char%5B%5D,%20int,%20int))
        pub fn measureText_char_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "measureText", .descriptor == "([CII)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "measureText\0", "([CII)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [measureText](https://developer.android.com/reference/android/graphics/Paint.html#measureText(java.lang.String,%20int,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn measureText_String_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "measureText", .descriptor == "(Ljava/lang/String;II)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "measureText\0", "(Ljava/lang/String;II)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [measureText](https://developer.android.com/reference/android/graphics/Paint.html#measureText(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn measureText_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "measureText", .descriptor == "(Ljava/lang/String;)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "measureText\0", "(Ljava/lang/String;)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [measureText](https://developer.android.com/reference/android/graphics/Paint.html#measureText(java.lang.CharSequence,%20int,%20int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn measureText_CharSequence_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "measureText", .descriptor == "(Ljava/lang/CharSequence;II)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "measureText\0", "(Ljava/lang/CharSequence;II)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [breakText](https://developer.android.com/reference/android/graphics/Paint.html#breakText(char%5B%5D,%20int,%20int,%20float,%20float%5B%5D))
        pub fn breakText_char_array_int_int_float_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "breakText", .descriptor == "([CIIF[F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "breakText\0", "([CIIF[F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [breakText](https://developer.android.com/reference/android/graphics/Paint.html#breakText(java.lang.CharSequence,%20int,%20int,%20boolean,%20float,%20float%5B%5D))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn breakText_CharSequence_int_int_boolean_float_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: bool, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "breakText", .descriptor == "(Ljava/lang/CharSequence;IIZF[F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "breakText\0", "(Ljava/lang/CharSequence;IIZF[F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [breakText](https://developer.android.com/reference/android/graphics/Paint.html#breakText(java.lang.String,%20boolean,%20float,%20float%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn breakText_String_boolean_float_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "breakText", .descriptor == "(Ljava/lang/String;ZF[F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "breakText\0", "(Ljava/lang/String;ZF[F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextWidths](https://developer.android.com/reference/android/graphics/Paint.html#getTextWidths(char%5B%5D,%20int,%20int,%20float%5B%5D))
        pub fn getTextWidths_char_array_int_int_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextWidths", .descriptor == "([CII[F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextWidths\0", "([CII[F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextWidths](https://developer.android.com/reference/android/graphics/Paint.html#getTextWidths(java.lang.CharSequence,%20int,%20int,%20float%5B%5D))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getTextWidths_CharSequence_int_int_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextWidths", .descriptor == "(Ljava/lang/CharSequence;II[F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextWidths\0", "(Ljava/lang/CharSequence;II[F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextWidths](https://developer.android.com/reference/android/graphics/Paint.html#getTextWidths(java.lang.String,%20int,%20int,%20float%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getTextWidths_String_int_int_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextWidths", .descriptor == "(Ljava/lang/String;II[F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextWidths\0", "(Ljava/lang/String;II[F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextWidths](https://developer.android.com/reference/android/graphics/Paint.html#getTextWidths(java.lang.String,%20float%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getTextWidths_String_float_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextWidths", .descriptor == "(Ljava/lang/String;[F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextWidths\0", "(Ljava/lang/String;[F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextRunAdvances](https://developer.android.com/reference/android/graphics/Paint.html#getTextRunAdvances(char%5B%5D,%20int,%20int,%20int,%20int,%20boolean,%20float%5B%5D,%20int))
        pub fn getTextRunAdvances<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: bool, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg7: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextRunAdvances", .descriptor == "([CIIIIZ[FI)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextRunAdvances\0", "([CIIIIZ[FI)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextRunCursor](https://developer.android.com/reference/android/graphics/Paint.html#getTextRunCursor(char%5B%5D,%20int,%20int,%20boolean,%20int,%20int))
        pub fn getTextRunCursor_char_array_int_int_boolean_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: bool, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextRunCursor", .descriptor == "([CIIZII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextRunCursor\0", "([CIIZII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextRunCursor](https://developer.android.com/reference/android/graphics/Paint.html#getTextRunCursor(java.lang.CharSequence,%20int,%20int,%20boolean,%20int,%20int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getTextRunCursor_CharSequence_int_int_boolean_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: bool, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextRunCursor", .descriptor == "(Ljava/lang/CharSequence;IIZII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextRunCursor\0", "(Ljava/lang/CharSequence;IIZII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextPath](https://developer.android.com/reference/android/graphics/Paint.html#getTextPath(char%5B%5D,%20int,%20int,%20float,%20float,%20android.graphics.Path))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn getTextPath_char_array_int_int_float_float_Path<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: f32, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextPath", .descriptor == "([CIIFFLandroid/graphics/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextPath\0", "([CIIFFLandroid/graphics/Path;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextPath](https://developer.android.com/reference/android/graphics/Paint.html#getTextPath(java.lang.String,%20int,%20int,%20float,%20float,%20android.graphics.Path))
        ///
        /// Required features: "android-graphics-Path", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path", feature = "java-lang-String")))]
        pub fn getTextPath_String_int_int_float_float_Path<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32, arg3: f32, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextPath", .descriptor == "(Ljava/lang/String;IIFFLandroid/graphics/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextPath\0", "(Ljava/lang/String;IIFFLandroid/graphics/Path;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextBounds](https://developer.android.com/reference/android/graphics/Paint.html#getTextBounds(java.lang.String,%20int,%20int,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "java-lang-String")))]
        pub fn getTextBounds_String_int_int_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextBounds", .descriptor == "(Ljava/lang/String;IILandroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextBounds\0", "(Ljava/lang/String;IILandroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextBounds](https://developer.android.com/reference/android/graphics/Paint.html#getTextBounds(java.lang.CharSequence,%20int,%20int,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "java-lang-CharSequence")))]
        pub fn getTextBounds_CharSequence_int_int_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextBounds", .descriptor == "(Ljava/lang/CharSequence;IILandroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextBounds\0", "(Ljava/lang/CharSequence;IILandroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextBounds](https://developer.android.com/reference/android/graphics/Paint.html#getTextBounds(char%5B%5D,%20int,%20int,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getTextBounds_char_array_int_int_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getTextBounds", .descriptor == "([CIILandroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getTextBounds\0", "([CIILandroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasGlyph](https://developer.android.com/reference/android/graphics/Paint.html#hasGlyph(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn hasGlyph<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "hasGlyph", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "hasGlyph\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunAdvance](https://developer.android.com/reference/android/graphics/Paint.html#getRunAdvance(char%5B%5D,%20int,%20int,%20int,%20int,%20boolean,%20int))
        pub fn getRunAdvance_char_array_int_int_int_int_boolean_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: bool, arg6: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getRunAdvance", .descriptor == "([CIIIIZI)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getRunAdvance\0", "([CIIIIZI)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunAdvance](https://developer.android.com/reference/android/graphics/Paint.html#getRunAdvance(java.lang.CharSequence,%20int,%20int,%20int,%20int,%20boolean,%20int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getRunAdvance_CharSequence_int_int_int_int_boolean_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: bool, arg6: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getRunAdvance", .descriptor == "(Ljava/lang/CharSequence;IIIIZI)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getRunAdvance\0", "(Ljava/lang/CharSequence;IIIIZI)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffsetForAdvance](https://developer.android.com/reference/android/graphics/Paint.html#getOffsetForAdvance(char%5B%5D,%20int,%20int,%20int,%20int,%20boolean,%20float))
        pub fn getOffsetForAdvance_char_array_int_int_int_int_boolean_float<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: bool, arg6: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getOffsetForAdvance", .descriptor == "([CIIIIZF)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getOffsetForAdvance\0", "([CIIIIZF)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffsetForAdvance](https://developer.android.com/reference/android/graphics/Paint.html#getOffsetForAdvance(java.lang.CharSequence,%20int,%20int,%20int,%20int,%20boolean,%20float))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getOffsetForAdvance_CharSequence_int_int_int_int_boolean_float<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: bool, arg6: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "getOffsetForAdvance", .descriptor == "(Ljava/lang/CharSequence;IIIIZF)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "getOffsetForAdvance\0", "(Ljava/lang/CharSequence;IIIIZF)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equalsForTextMeasurement](https://developer.android.com/reference/android/graphics/Paint.html#equalsForTextMeasurement(android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn equalsForTextMeasurement<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/Paint", java.flags == PUBLIC, .name == "equalsForTextMeasurement", .descriptor == "(Landroid/graphics/Paint;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/Paint\0", "equalsForTextMeasurement\0", "(Landroid/graphics/Paint;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ANTI_ALIAS_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#ANTI_ALIAS_FLAG)
        pub const ANTI_ALIAS_FLAG : i32 = 1;

        /// public static final [CURSOR_AFTER](https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AFTER)
        pub const CURSOR_AFTER : i32 = 0;

        /// public static final [CURSOR_AT](https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AT)
        pub const CURSOR_AT : i32 = 4;

        /// public static final [CURSOR_AT_OR_AFTER](https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AT_OR_AFTER)
        pub const CURSOR_AT_OR_AFTER : i32 = 1;

        /// public static final [CURSOR_AT_OR_BEFORE](https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AT_OR_BEFORE)
        pub const CURSOR_AT_OR_BEFORE : i32 = 3;

        /// public static final [CURSOR_BEFORE](https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_BEFORE)
        pub const CURSOR_BEFORE : i32 = 2;

        /// public static final [DEV_KERN_TEXT_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#DEV_KERN_TEXT_FLAG)
        pub const DEV_KERN_TEXT_FLAG : i32 = 256;

        /// public static final [DITHER_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#DITHER_FLAG)
        pub const DITHER_FLAG : i32 = 4;

        /// public static final [EMBEDDED_BITMAP_TEXT_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#EMBEDDED_BITMAP_TEXT_FLAG)
        pub const EMBEDDED_BITMAP_TEXT_FLAG : i32 = 1024;

        /// public static final [END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN](https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN)
        pub const END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN : i32 = 3;

        /// public static final [END_HYPHEN_EDIT_INSERT_HYPHEN](https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_HYPHEN)
        pub const END_HYPHEN_EDIT_INSERT_HYPHEN : i32 = 2;

        /// public static final [END_HYPHEN_EDIT_INSERT_MAQAF](https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_MAQAF)
        pub const END_HYPHEN_EDIT_INSERT_MAQAF : i32 = 4;

        /// public static final [END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN](https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN)
        pub const END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN : i32 = 5;

        /// public static final [END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN](https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN)
        pub const END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN : i32 = 6;

        /// public static final [END_HYPHEN_EDIT_NO_EDIT](https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_NO_EDIT)
        pub const END_HYPHEN_EDIT_NO_EDIT : i32 = 0;

        /// public static final [END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN](https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN)
        pub const END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN : i32 = 1;

        /// public static final [FAKE_BOLD_TEXT_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#FAKE_BOLD_TEXT_FLAG)
        pub const FAKE_BOLD_TEXT_FLAG : i32 = 32;

        /// public static final [FILTER_BITMAP_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#FILTER_BITMAP_FLAG)
        pub const FILTER_BITMAP_FLAG : i32 = 2;

        /// public static final [HINTING_OFF](https://developer.android.com/reference/android/graphics/Paint.html#HINTING_OFF)
        pub const HINTING_OFF : i32 = 0;

        /// public static final [HINTING_ON](https://developer.android.com/reference/android/graphics/Paint.html#HINTING_ON)
        pub const HINTING_ON : i32 = 1;

        /// public static final [LINEAR_TEXT_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#LINEAR_TEXT_FLAG)
        pub const LINEAR_TEXT_FLAG : i32 = 64;

        /// public static final [START_HYPHEN_EDIT_INSERT_HYPHEN](https://developer.android.com/reference/android/graphics/Paint.html#START_HYPHEN_EDIT_INSERT_HYPHEN)
        pub const START_HYPHEN_EDIT_INSERT_HYPHEN : i32 = 1;

        /// public static final [START_HYPHEN_EDIT_INSERT_ZWJ](https://developer.android.com/reference/android/graphics/Paint.html#START_HYPHEN_EDIT_INSERT_ZWJ)
        pub const START_HYPHEN_EDIT_INSERT_ZWJ : i32 = 2;

        /// public static final [START_HYPHEN_EDIT_NO_EDIT](https://developer.android.com/reference/android/graphics/Paint.html#START_HYPHEN_EDIT_NO_EDIT)
        pub const START_HYPHEN_EDIT_NO_EDIT : i32 = 0;

        /// public static final [STRIKE_THRU_TEXT_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#STRIKE_THRU_TEXT_FLAG)
        pub const STRIKE_THRU_TEXT_FLAG : i32 = 16;

        /// public static final [SUBPIXEL_TEXT_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#SUBPIXEL_TEXT_FLAG)
        pub const SUBPIXEL_TEXT_FLAG : i32 = 128;

        /// public static final [UNDERLINE_TEXT_FLAG](https://developer.android.com/reference/android/graphics/Paint.html#UNDERLINE_TEXT_FLAG)
        pub const UNDERLINE_TEXT_FLAG : i32 = 8;
    }
}
