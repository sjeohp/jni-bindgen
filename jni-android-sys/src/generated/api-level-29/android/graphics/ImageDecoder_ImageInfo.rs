// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-ImageDecoder_ImageInfo"))]
__jni_bindgen! {
    /// public class [ImageDecoder.ImageInfo](https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html)
    ///
    /// Required feature: android-graphics-ImageDecoder_ImageInfo
    public class ImageDecoder_ImageInfo ("android/graphics/ImageDecoder$ImageInfo") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ImageInfo](https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html#ImageInfo(android.graphics.ImageDecoder))
        // ///
        // /// Required features: "android-graphics-ImageDecoder"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-ImageDecoder")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::ImageDecoder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::ImageDecoder_ImageInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/ImageDecoder$ImageInfo", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/graphics/ImageDecoder;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder$ImageInfo\0", "<init>\0", "(Landroid/graphics/ImageDecoder;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getSize](https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html#getSize())
        ///
        /// Required features: "android-util-Size"
        #[cfg(any(feature = "all", all(feature = "android-util-Size")))]
        pub fn getSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Size>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder$ImageInfo", java.flags == PUBLIC, .name == "getSize", .descriptor == "()Landroid/util/Size;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder$ImageInfo\0", "getSize\0", "()Landroid/util/Size;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMimeType](https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html#getMimeType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMimeType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder$ImageInfo", java.flags == PUBLIC, .name == "getMimeType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder$ImageInfo\0", "getMimeType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAnimated](https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html#isAnimated())
        pub fn isAnimated<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder$ImageInfo", java.flags == PUBLIC, .name == "isAnimated", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder$ImageInfo\0", "isAnimated\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorSpace](https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html#getColorSpace())
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn getColorSpace<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/ImageDecoder$ImageInfo", java.flags == PUBLIC, .name == "getColorSpace", .descriptor == "()Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/ImageDecoder$ImageInfo\0", "getColorSpace\0", "()Landroid/graphics/ColorSpace;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
