// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-BitmapRegionDecoder"))]
__jni_bindgen! {
    /// public final class [BitmapRegionDecoder](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html)
    ///
    /// Required feature: android-graphics-BitmapRegionDecoder
    public final class BitmapRegionDecoder ("android/graphics/BitmapRegionDecoder") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [BitmapRegionDecoder](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#BitmapRegionDecoder(long))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::BitmapRegionDecoder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/BitmapRegionDecoder", java.flags == (empty), .name == "<init>", .descriptor == "(J)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/BitmapRegionDecoder\0", "<init>\0", "(J)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newInstance](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#newInstance(byte%5B%5D,%20int,%20int,%20boolean))
        ///
        /// Required features: "android-graphics-BitmapRegionDecoder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BitmapRegionDecoder")))]
        pub fn newInstance_byte_array_int_int_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::BitmapRegionDecoder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "([BIIZ)Landroid/graphics/BitmapRegionDecoder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/BitmapRegionDecoder\0", "newInstance\0", "([BIIZ)Landroid/graphics/BitmapRegionDecoder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#newInstance(java.io.FileDescriptor,%20boolean))
        ///
        /// Required features: "android-graphics-BitmapRegionDecoder", "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BitmapRegionDecoder", feature = "java-io-FileDescriptor")))]
        pub fn newInstance_FileDescriptor_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::BitmapRegionDecoder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/io/FileDescriptor;Z)Landroid/graphics/BitmapRegionDecoder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/BitmapRegionDecoder\0", "newInstance\0", "(Ljava/io/FileDescriptor;Z)Landroid/graphics/BitmapRegionDecoder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#newInstance(java.io.InputStream,%20boolean))
        ///
        /// Required features: "android-graphics-BitmapRegionDecoder", "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BitmapRegionDecoder", feature = "java-io-InputStream")))]
        pub fn newInstance_InputStream_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::BitmapRegionDecoder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/io/InputStream;Z)Landroid/graphics/BitmapRegionDecoder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/BitmapRegionDecoder\0", "newInstance\0", "(Ljava/io/InputStream;Z)Landroid/graphics/BitmapRegionDecoder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#newInstance(java.lang.String,%20boolean))
        ///
        /// Required features: "android-graphics-BitmapRegionDecoder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BitmapRegionDecoder", feature = "java-lang-String")))]
        pub fn newInstance_String_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::BitmapRegionDecoder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/lang/String;Z)Landroid/graphics/BitmapRegionDecoder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/BitmapRegionDecoder\0", "newInstance\0", "(Ljava/lang/String;Z)Landroid/graphics/BitmapRegionDecoder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [decodeRegion](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#decodeRegion(android.graphics.Rect,%20android.graphics.BitmapFactory.Options))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-BitmapFactory_Options", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-BitmapFactory_Options", feature = "android-graphics-Rect")))]
        pub fn decodeRegion<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::BitmapFactory_Options>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PUBLIC, .name == "decodeRegion", .descriptor == "(Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/BitmapRegionDecoder\0", "decodeRegion\0", "(Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWidth](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#getWidth())
        pub fn getWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PUBLIC, .name == "getWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/BitmapRegionDecoder\0", "getWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeight](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#getHeight())
        pub fn getHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PUBLIC, .name == "getHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/BitmapRegionDecoder\0", "getHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [recycle](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#recycle())
        pub fn recycle<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PUBLIC, .name == "recycle", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/BitmapRegionDecoder\0", "recycle\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRecycled](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#isRecycled())
        pub fn isRecycled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PUBLIC, .name == "isRecycled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/BitmapRegionDecoder\0", "isRecycled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/BitmapRegionDecoder", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/BitmapRegionDecoder\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
