// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-drawable-Icon"))]
__jni_bindgen! {
    /// public final class [Icon](https://developer.android.com/reference/android/graphics/drawable/Icon.html)
    ///
    /// Required feature: android-graphics-drawable-Icon
    public final class Icon ("android/graphics/drawable/Icon") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [Icon](https://developer.android.com/reference/android/graphics/drawable/Icon.html#Icon(int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/drawable/Icon", java.flags == (empty), .name == "<init>", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "<init>\0", "(I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getType](https://developer.android.com/reference/android/graphics/drawable/Icon.html#getType())
        pub fn getType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "getType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "getType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResPackage](https://developer.android.com/reference/android/graphics/drawable/Icon.html#getResPackage())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getResPackage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "getResPackage", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "getResPackage\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResId](https://developer.android.com/reference/android/graphics/drawable/Icon.html#getResId())
        pub fn getResId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "getResId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "getResId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUri](https://developer.android.com/reference/android/graphics/drawable/Icon.html#getUri())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getUri<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "getUri", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "getUri\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadDrawableAsync](https://developer.android.com/reference/android/graphics/drawable/Icon.html#loadDrawableAsync(android.content.Context,%20android.os.Message))
        ///
        /// Required features: "android-content-Context", "android-os-Message"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-Message")))]
        pub fn loadDrawableAsync_Context_Message<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "loadDrawableAsync", .descriptor == "(Landroid/content/Context;Landroid/os/Message;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "loadDrawableAsync\0", "(Landroid/content/Context;Landroid/os/Message;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadDrawableAsync](https://developer.android.com/reference/android/graphics/drawable/Icon.html#loadDrawableAsync(android.content.Context,%20android.graphics.drawable.Icon.OnDrawableLoadedListener,%20android.os.Handler))
        ///
        /// Required features: "android-content-Context", "android-graphics-drawable-Icon_OnDrawableLoadedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-graphics-drawable-Icon_OnDrawableLoadedListener", feature = "android-os-Handler")))]
        pub fn loadDrawableAsync_Context_OnDrawableLoadedListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Icon_OnDrawableLoadedListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "loadDrawableAsync", .descriptor == "(Landroid/content/Context;Landroid/graphics/drawable/Icon$OnDrawableLoadedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "loadDrawableAsync\0", "(Landroid/content/Context;Landroid/graphics/drawable/Icon$OnDrawableLoadedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadDrawable](https://developer.android.com/reference/android/graphics/drawable/Icon.html#loadDrawable(android.content.Context))
        ///
        /// Required features: "android-content-Context", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-graphics-drawable-Drawable")))]
        pub fn loadDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "loadDrawable", .descriptor == "(Landroid/content/Context;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "loadDrawable\0", "(Landroid/content/Context;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWithResource](https://developer.android.com/reference/android/graphics/drawable/Icon.html#createWithResource(android.content.Context,%20int))
        ///
        /// Required features: "android-content-Context", "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-graphics-drawable-Icon")))]
        pub fn createWithResource_Context_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC | STATIC, .name == "createWithResource", .descriptor == "(Landroid/content/Context;I)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/drawable/Icon\0", "createWithResource\0", "(Landroid/content/Context;I)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWithResource](https://developer.android.com/reference/android/graphics/drawable/Icon.html#createWithResource(java.lang.String,%20int))
        ///
        /// Required features: "android-graphics-drawable-Icon", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Icon", feature = "java-lang-String")))]
        pub fn createWithResource_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC | STATIC, .name == "createWithResource", .descriptor == "(Ljava/lang/String;I)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/drawable/Icon\0", "createWithResource\0", "(Ljava/lang/String;I)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWithBitmap](https://developer.android.com/reference/android/graphics/drawable/Icon.html#createWithBitmap(android.graphics.Bitmap))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-drawable-Icon")))]
        pub fn createWithBitmap<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC | STATIC, .name == "createWithBitmap", .descriptor == "(Landroid/graphics/Bitmap;)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/drawable/Icon\0", "createWithBitmap\0", "(Landroid/graphics/Bitmap;)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWithAdaptiveBitmap](https://developer.android.com/reference/android/graphics/drawable/Icon.html#createWithAdaptiveBitmap(android.graphics.Bitmap))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-drawable-Icon")))]
        pub fn createWithAdaptiveBitmap<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC | STATIC, .name == "createWithAdaptiveBitmap", .descriptor == "(Landroid/graphics/Bitmap;)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/drawable/Icon\0", "createWithAdaptiveBitmap\0", "(Landroid/graphics/Bitmap;)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWithData](https://developer.android.com/reference/android/graphics/drawable/Icon.html#createWithData(byte%5B%5D,%20int,%20int))
        ///
        /// Required features: "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Icon")))]
        pub fn createWithData<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC | STATIC, .name == "createWithData", .descriptor == "([BII)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/drawable/Icon\0", "createWithData\0", "([BII)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWithContentUri](https://developer.android.com/reference/android/graphics/drawable/Icon.html#createWithContentUri(java.lang.String))
        ///
        /// Required features: "android-graphics-drawable-Icon", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Icon", feature = "java-lang-String")))]
        pub fn createWithContentUri_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC | STATIC, .name == "createWithContentUri", .descriptor == "(Ljava/lang/String;)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/drawable/Icon\0", "createWithContentUri\0", "(Ljava/lang/String;)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWithContentUri](https://developer.android.com/reference/android/graphics/drawable/Icon.html#createWithContentUri(android.net.Uri))
        ///
        /// Required features: "android-graphics-drawable-Icon", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Icon", feature = "android-net-Uri")))]
        pub fn createWithContentUri_Uri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC | STATIC, .name == "createWithContentUri", .descriptor == "(Landroid/net/Uri;)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/drawable/Icon\0", "createWithContentUri\0", "(Landroid/net/Uri;)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTint](https://developer.android.com/reference/android/graphics/drawable/Icon.html#setTint(int))
        ///
        /// Required features: "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Icon")))]
        pub fn setTint<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "setTint", .descriptor == "(I)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "setTint\0", "(I)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTintList](https://developer.android.com/reference/android/graphics/drawable/Icon.html#setTintList(android.content.res.ColorStateList))
        ///
        /// Required features: "android-content-res-ColorStateList", "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList", feature = "android-graphics-drawable-Icon")))]
        pub fn setTintList<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::ColorStateList>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "setTintList", .descriptor == "(Landroid/content/res/ColorStateList;)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "setTintList\0", "(Landroid/content/res/ColorStateList;)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTintMode](https://developer.android.com/reference/android/graphics/drawable/Icon.html#setTintMode(android.graphics.PorterDuff.Mode))
        ///
        /// Required features: "android-graphics-PorterDuff_Mode", "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PorterDuff_Mode", feature = "android-graphics-drawable-Icon")))]
        pub fn setTintMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::PorterDuff_Mode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "setTintMode", .descriptor == "(Landroid/graphics/PorterDuff$Mode;)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "setTintMode\0", "(Landroid/graphics/PorterDuff$Mode;)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTintBlendMode](https://developer.android.com/reference/android/graphics/drawable/Icon.html#setTintBlendMode(android.graphics.BlendMode))
        ///
        /// Required features: "android-graphics-BlendMode", "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode", feature = "android-graphics-drawable-Icon")))]
        pub fn setTintBlendMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::BlendMode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "setTintBlendMode", .descriptor == "(Landroid/graphics/BlendMode;)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "setTintBlendMode\0", "(Landroid/graphics/BlendMode;)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWithFilePath](https://developer.android.com/reference/android/graphics/drawable/Icon.html#createWithFilePath(java.lang.String))
        ///
        /// Required features: "android-graphics-drawable-Icon", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Icon", feature = "java-lang-String")))]
        pub fn createWithFilePath<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC | STATIC, .name == "createWithFilePath", .descriptor == "(Ljava/lang/String;)Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/graphics/drawable/Icon\0", "createWithFilePath\0", "(Ljava/lang/String;)Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/graphics/drawable/Icon.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/graphics/drawable/Icon.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/graphics/drawable/Icon.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/Icon", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/Icon\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/graphics/drawable/Icon.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/graphics/drawable/Icon\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [TYPE_ADAPTIVE_BITMAP](https://developer.android.com/reference/android/graphics/drawable/Icon.html#TYPE_ADAPTIVE_BITMAP)
        pub const TYPE_ADAPTIVE_BITMAP : i32 = 5;

        /// public static final [TYPE_BITMAP](https://developer.android.com/reference/android/graphics/drawable/Icon.html#TYPE_BITMAP)
        pub const TYPE_BITMAP : i32 = 1;

        /// public static final [TYPE_DATA](https://developer.android.com/reference/android/graphics/drawable/Icon.html#TYPE_DATA)
        pub const TYPE_DATA : i32 = 3;

        /// public static final [TYPE_RESOURCE](https://developer.android.com/reference/android/graphics/drawable/Icon.html#TYPE_RESOURCE)
        pub const TYPE_RESOURCE : i32 = 2;

        /// public static final [TYPE_URI](https://developer.android.com/reference/android/graphics/drawable/Icon.html#TYPE_URI)
        pub const TYPE_URI : i32 = 4;
    }
}
