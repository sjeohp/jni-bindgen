// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-drawable-DrawableContainer_DrawableContainerState"))]
__jni_bindgen! {
    /// public class [DrawableContainer.DrawableContainerState](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html)
    ///
    /// Required feature: android-graphics-drawable-DrawableContainer_DrawableContainerState
    public class DrawableContainer_DrawableContainerState ("android/graphics/drawable/DrawableContainer$DrawableContainerState") extends crate::android::graphics::drawable::Drawable_ConstantState {

        // // Not emitting: Non-public method
        // /// [DrawableContainerState](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#DrawableContainerState(android.graphics.drawable.DrawableContainer.DrawableContainerState,%20android.graphics.drawable.DrawableContainer,%20android.content.res.Resources))
        // ///
        // /// Required features: "android-content-res-Resources", "android-graphics-drawable-DrawableContainer", "android-graphics-drawable-DrawableContainer_DrawableContainerState"
        // #[cfg(any(feature = "all", all(feature = "android-content-res-Resources", feature = "android-graphics-drawable-DrawableContainer", feature = "android-graphics-drawable-DrawableContainer_DrawableContainerState")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::DrawableContainer_DrawableContainerState>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::DrawableContainer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::drawable::DrawableContainer_DrawableContainerState>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/graphics/drawable/DrawableContainer$DrawableContainerState;Landroid/graphics/drawable/DrawableContainer;Landroid/content/res/Resources;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "<init>\0", "(Landroid/graphics/drawable/DrawableContainer$DrawableContainerState;Landroid/graphics/drawable/DrawableContainer;Landroid/content/res/Resources;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getChangingConfigurations](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getChangingConfigurations())
        pub fn getChangingConfigurations<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC, .name == "getChangingConfigurations", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getChangingConfigurations\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addChild](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#addChild(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn addChild<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "addChild", .descriptor == "(Landroid/graphics/drawable/Drawable;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "addChild\0", "(Landroid/graphics/drawable/Drawable;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChildCount](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getChildCount())
        pub fn getChildCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getChildCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getChildCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChildren](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getChildren())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getChildren<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::graphics::drawable::Drawable, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getChildren", .descriptor == "()[Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getChildren\0", "()[Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChild](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getChild(int))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getChild<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getChild", .descriptor == "(I)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getChild\0", "(I)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canApplyTheme](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#canApplyTheme())
        pub fn canApplyTheme<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC, .name == "canApplyTheme", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "canApplyTheme\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVariablePadding](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#setVariablePadding(boolean))
        pub fn setVariablePadding<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "setVariablePadding", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "setVariablePadding\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConstantPadding](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getConstantPadding())
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getConstantPadding<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Rect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getConstantPadding", .descriptor == "()Landroid/graphics/Rect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getConstantPadding\0", "()Landroid/graphics/Rect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setConstantSize](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#setConstantSize(boolean))
        pub fn setConstantSize<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "setConstantSize", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "setConstantSize\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isConstantSize](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#isConstantSize())
        pub fn isConstantSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "isConstantSize", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "isConstantSize\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConstantWidth](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getConstantWidth())
        pub fn getConstantWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getConstantWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getConstantWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConstantHeight](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getConstantHeight())
        pub fn getConstantHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getConstantHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getConstantHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConstantMinimumWidth](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getConstantMinimumWidth())
        pub fn getConstantMinimumWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getConstantMinimumWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getConstantMinimumWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConstantMinimumHeight](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getConstantMinimumHeight())
        pub fn getConstantMinimumHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getConstantMinimumHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getConstantMinimumHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [computeConstantSize](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#computeConstantSize())
        // fn computeConstantSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PROTECTED, .name == "computeConstantSize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "computeConstantSize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setEnterFadeDuration](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#setEnterFadeDuration(int))
        pub fn setEnterFadeDuration<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "setEnterFadeDuration", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "setEnterFadeDuration\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEnterFadeDuration](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getEnterFadeDuration())
        pub fn getEnterFadeDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getEnterFadeDuration", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getEnterFadeDuration\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setExitFadeDuration](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#setExitFadeDuration(int))
        pub fn setExitFadeDuration<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "setExitFadeDuration", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "setExitFadeDuration\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExitFadeDuration](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getExitFadeDuration())
        pub fn getExitFadeDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getExitFadeDuration", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getExitFadeDuration\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOpacity](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#getOpacity())
        pub fn getOpacity<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "getOpacity", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "getOpacity\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStateful](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#isStateful())
        pub fn isStateful<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | FINAL, .name == "isStateful", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "isStateful\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [growArray](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#growArray(int,%20int))
        pub fn growArray<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC, .name == "growArray", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "growArray\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canConstantState](https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html#canConstantState())
        pub fn canConstantState<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/drawable/DrawableContainer$DrawableContainerState", java.flags == PUBLIC | SYNCRONIZED, .name == "canConstantState", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/drawable/DrawableContainer$DrawableContainerState\0", "canConstantState\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
