// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-graphics-BitmapFactory_Options"))]
__jni_bindgen! {
    /// public class [BitmapFactory.Options](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html)
    ///
    /// Required feature: android-graphics-BitmapFactory_Options
    public class BitmapFactory_Options ("android/graphics/BitmapFactory$Options") extends crate::java::lang::Object {

        /// [Options](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#Options())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::graphics::BitmapFactory_Options>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapFactory$Options", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/BitmapFactory$Options\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestCancelDecode](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#requestCancelDecode())
        #[deprecated] pub fn requestCancelDecode<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/graphics/BitmapFactory$Options", java.flags == PUBLIC, .name == "requestCancelDecode", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/graphics/BitmapFactory$Options\0", "requestCancelDecode\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public [inBitmap](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inBitmap)
        ///
        /// Required feature: android-graphics-Bitmap
        #[cfg(any(feature = "all", feature = "android-graphics-Bitmap"))]
        pub fn inBitmap<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inBitmap\0", "Landroid/graphics/Bitmap;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [inBitmap](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inBitmap)
        ///
        /// Required feature: android-graphics-Bitmap
        #[cfg(any(feature = "all", feature = "android-graphics-Bitmap"))]
        pub fn set_inBitmap<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::graphics::Bitmap>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inBitmap\0", "Landroid/graphics/Bitmap;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [inDensity](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inDensity)
        pub fn inDensity<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inDensity\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [inDensity](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inDensity)
        pub fn set_inDensity<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inDensity\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [inDither](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inDither)
        #[deprecated] pub fn inDither<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inDither\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [inDither](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inDither)
        #[deprecated] pub fn set_inDither<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inDither\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [inInputShareable](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inInputShareable)
        #[deprecated] pub fn inInputShareable<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inInputShareable\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [inInputShareable](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inInputShareable)
        #[deprecated] pub fn set_inInputShareable<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inInputShareable\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [inJustDecodeBounds](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inJustDecodeBounds)
        pub fn inJustDecodeBounds<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inJustDecodeBounds\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [inJustDecodeBounds](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inJustDecodeBounds)
        pub fn set_inJustDecodeBounds<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inJustDecodeBounds\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [inMutable](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inMutable)
        pub fn inMutable<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inMutable\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [inMutable](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inMutable)
        pub fn set_inMutable<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inMutable\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [inPreferQualityOverSpeed](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPreferQualityOverSpeed)
        #[deprecated] pub fn inPreferQualityOverSpeed<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPreferQualityOverSpeed\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [inPreferQualityOverSpeed](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPreferQualityOverSpeed)
        #[deprecated] pub fn set_inPreferQualityOverSpeed<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPreferQualityOverSpeed\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [inPreferredColorSpace](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPreferredColorSpace)
        ///
        /// Required feature: android-graphics-ColorSpace
        #[cfg(any(feature = "all", feature = "android-graphics-ColorSpace"))]
        pub fn inPreferredColorSpace<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPreferredColorSpace\0", "Landroid/graphics/ColorSpace;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [inPreferredColorSpace](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPreferredColorSpace)
        ///
        /// Required feature: android-graphics-ColorSpace
        #[cfg(any(feature = "all", feature = "android-graphics-ColorSpace"))]
        pub fn set_inPreferredColorSpace<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::graphics::ColorSpace>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPreferredColorSpace\0", "Landroid/graphics/ColorSpace;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [inPreferredConfig](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPreferredConfig)
        ///
        /// Required feature: android-graphics-Bitmap_Config
        #[cfg(any(feature = "all", feature = "android-graphics-Bitmap_Config"))]
        pub fn inPreferredConfig<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap_Config>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPreferredConfig\0", "Landroid/graphics/Bitmap$Config;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [inPreferredConfig](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPreferredConfig)
        ///
        /// Required feature: android-graphics-Bitmap_Config
        #[cfg(any(feature = "all", feature = "android-graphics-Bitmap_Config"))]
        pub fn set_inPreferredConfig<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::graphics::Bitmap_Config>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPreferredConfig\0", "Landroid/graphics/Bitmap$Config;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [inPremultiplied](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPremultiplied)
        pub fn inPremultiplied<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPremultiplied\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [inPremultiplied](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPremultiplied)
        pub fn set_inPremultiplied<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPremultiplied\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [inPurgeable](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPurgeable)
        #[deprecated] pub fn inPurgeable<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPurgeable\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [inPurgeable](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPurgeable)
        #[deprecated] pub fn set_inPurgeable<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inPurgeable\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [inSampleSize](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize)
        pub fn inSampleSize<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inSampleSize\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [inSampleSize](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize)
        pub fn set_inSampleSize<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inSampleSize\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [inScaled](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inScaled)
        pub fn inScaled<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inScaled\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [inScaled](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inScaled)
        pub fn set_inScaled<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inScaled\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [inScreenDensity](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inScreenDensity)
        pub fn inScreenDensity<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inScreenDensity\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [inScreenDensity](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inScreenDensity)
        pub fn set_inScreenDensity<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inScreenDensity\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [inTargetDensity](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inTargetDensity)
        pub fn inTargetDensity<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inTargetDensity\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [inTargetDensity](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inTargetDensity)
        pub fn set_inTargetDensity<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inTargetDensity\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [inTempStorage](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inTempStorage)
        pub fn inTempStorage<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inTempStorage\0", "[B\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [inTempStorage](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inTempStorage)
        pub fn set_inTempStorage<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ByteArray>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "inTempStorage\0", "[B\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [mCancel](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#mCancel)
        #[deprecated] pub fn mCancel<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "mCancel\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [mCancel](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#mCancel)
        #[deprecated] pub fn set_mCancel<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "mCancel\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [outColorSpace](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outColorSpace)
        ///
        /// Required feature: android-graphics-ColorSpace
        #[cfg(any(feature = "all", feature = "android-graphics-ColorSpace"))]
        pub fn outColorSpace<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outColorSpace\0", "Landroid/graphics/ColorSpace;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [outColorSpace](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outColorSpace)
        ///
        /// Required feature: android-graphics-ColorSpace
        #[cfg(any(feature = "all", feature = "android-graphics-ColorSpace"))]
        pub fn set_outColorSpace<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::graphics::ColorSpace>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outColorSpace\0", "Landroid/graphics/ColorSpace;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [outConfig](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outConfig)
        ///
        /// Required feature: android-graphics-Bitmap_Config
        #[cfg(any(feature = "all", feature = "android-graphics-Bitmap_Config"))]
        pub fn outConfig<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap_Config>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outConfig\0", "Landroid/graphics/Bitmap$Config;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [outConfig](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outConfig)
        ///
        /// Required feature: android-graphics-Bitmap_Config
        #[cfg(any(feature = "all", feature = "android-graphics-Bitmap_Config"))]
        pub fn set_outConfig<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::graphics::Bitmap_Config>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outConfig\0", "Landroid/graphics/Bitmap$Config;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [outHeight](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outHeight)
        pub fn outHeight<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outHeight\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [outHeight](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outHeight)
        pub fn set_outHeight<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outHeight\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [outMimeType](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outMimeType)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn outMimeType<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outMimeType\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [outMimeType](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outMimeType)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_outMimeType<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outMimeType\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [outWidth](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outWidth)
        pub fn outWidth<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outWidth\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [outWidth](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#outWidth)
        pub fn set_outWidth<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/graphics/BitmapFactory$Options\0", "outWidth\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
