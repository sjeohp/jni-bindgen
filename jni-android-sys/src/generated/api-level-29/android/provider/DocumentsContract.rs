// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-provider-DocumentsContract"))]
__jni_bindgen! {
    /// public final class [DocumentsContract](https://developer.android.com/reference/android/provider/DocumentsContract.html)
    ///
    /// Required feature: android-provider-DocumentsContract
    public final class DocumentsContract ("android/provider/DocumentsContract") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [DocumentsContract](https://developer.android.com/reference/android/provider/DocumentsContract.html#DocumentsContract())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::provider::DocumentsContract>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/provider/DocumentsContract", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/DocumentsContract\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [buildRootsUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#buildRootsUri(java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildRootsUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "buildRootsUri", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "buildRootsUri\0", "(Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildRootUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#buildRootUri(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildRootUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "buildRootUri", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "buildRootUri\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildRecentDocumentsUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#buildRecentDocumentsUri(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildRecentDocumentsUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "buildRecentDocumentsUri", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "buildRecentDocumentsUri\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildTreeDocumentUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#buildTreeDocumentUri(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildTreeDocumentUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "buildTreeDocumentUri", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "buildTreeDocumentUri\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildDocumentUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#buildDocumentUri(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildDocumentUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "buildDocumentUri", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "buildDocumentUri\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildDocumentUriUsingTree](https://developer.android.com/reference/android/provider/DocumentsContract.html#buildDocumentUriUsingTree(android.net.Uri,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildDocumentUriUsingTree<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "buildDocumentUriUsingTree", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "buildDocumentUriUsingTree\0", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildChildDocumentsUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#buildChildDocumentsUri(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildChildDocumentsUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "buildChildDocumentsUri", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "buildChildDocumentsUri\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildChildDocumentsUriUsingTree](https://developer.android.com/reference/android/provider/DocumentsContract.html#buildChildDocumentsUriUsingTree(android.net.Uri,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildChildDocumentsUriUsingTree<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "buildChildDocumentsUriUsingTree", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "buildChildDocumentsUriUsingTree\0", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildSearchDocumentsUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#buildSearchDocumentsUri(java.lang.String,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildSearchDocumentsUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "buildSearchDocumentsUri", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "buildSearchDocumentsUri\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDocumentUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#isDocumentUri(android.content.Context,%20android.net.Uri))
        ///
        /// Required features: "android-content-Context", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-Uri")))]
        pub fn isDocumentUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "isDocumentUri", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "isDocumentUri\0", "(Landroid/content/Context;Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRootsUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#isRootsUri(android.content.Context,%20android.net.Uri))
        ///
        /// Required features: "android-content-Context", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-Uri")))]
        pub fn isRootsUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "isRootsUri", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "isRootsUri\0", "(Landroid/content/Context;Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRootUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#isRootUri(android.content.Context,%20android.net.Uri))
        ///
        /// Required features: "android-content-Context", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-Uri")))]
        pub fn isRootUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "isRootUri", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "isRootUri\0", "(Landroid/content/Context;Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTreeUri](https://developer.android.com/reference/android/provider/DocumentsContract.html#isTreeUri(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn isTreeUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "isTreeUri", .descriptor == "(Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "isTreeUri\0", "(Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRootId](https://developer.android.com/reference/android/provider/DocumentsContract.html#getRootId(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getRootId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "getRootId", .descriptor == "(Landroid/net/Uri;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "getRootId\0", "(Landroid/net/Uri;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDocumentId](https://developer.android.com/reference/android/provider/DocumentsContract.html#getDocumentId(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getDocumentId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "getDocumentId", .descriptor == "(Landroid/net/Uri;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "getDocumentId\0", "(Landroid/net/Uri;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTreeDocumentId](https://developer.android.com/reference/android/provider/DocumentsContract.html#getTreeDocumentId(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getTreeDocumentId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "getTreeDocumentId", .descriptor == "(Landroid/net/Uri;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "getTreeDocumentId\0", "(Landroid/net/Uri;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSearchDocumentsQuery](https://developer.android.com/reference/android/provider/DocumentsContract.html#getSearchDocumentsQuery(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getSearchDocumentsQuery<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "getSearchDocumentsQuery", .descriptor == "(Landroid/net/Uri;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "getSearchDocumentsQuery\0", "(Landroid/net/Uri;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDocumentThumbnail](https://developer.android.com/reference/android/provider/DocumentsContract.html#getDocumentThumbnail(android.content.ContentResolver,%20android.net.Uri,%20android.graphics.Point,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-content-ContentResolver", "android-graphics-Bitmap", "android-graphics-Point", "android-net-Uri", "android-os-CancellationSignal"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-graphics-Bitmap", feature = "android-graphics-Point", feature = "android-net-Uri", feature = "android-os-CancellationSignal")))]
        pub fn getDocumentThumbnail<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Point>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "getDocumentThumbnail", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/graphics/Point;Landroid/os/CancellationSignal;)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "getDocumentThumbnail\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/graphics/Point;Landroid/os/CancellationSignal;)Landroid/graphics/Bitmap;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createDocument](https://developer.android.com/reference/android/provider/DocumentsContract.html#createDocument(android.content.ContentResolver,%20android.net.Uri,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn createDocument<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "createDocument", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "createDocument\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isChildDocument](https://developer.android.com/reference/android/provider/DocumentsContract.html#isChildDocument(android.content.ContentResolver,%20android.net.Uri,%20android.net.Uri))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri")))]
        pub fn isChildDocument<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "isChildDocument", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "isChildDocument\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [renameDocument](https://developer.android.com/reference/android/provider/DocumentsContract.html#renameDocument(android.content.ContentResolver,%20android.net.Uri,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn renameDocument<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "renameDocument", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "renameDocument\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteDocument](https://developer.android.com/reference/android/provider/DocumentsContract.html#deleteDocument(android.content.ContentResolver,%20android.net.Uri))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri")))]
        pub fn deleteDocument<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "deleteDocument", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "deleteDocument\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copyDocument](https://developer.android.com/reference/android/provider/DocumentsContract.html#copyDocument(android.content.ContentResolver,%20android.net.Uri,%20android.net.Uri))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri")))]
        pub fn copyDocument<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "copyDocument", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/net/Uri;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "copyDocument\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/net/Uri;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveDocument](https://developer.android.com/reference/android/provider/DocumentsContract.html#moveDocument(android.content.ContentResolver,%20android.net.Uri,%20android.net.Uri,%20android.net.Uri))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri")))]
        pub fn moveDocument<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "moveDocument", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/net/Uri;Landroid/net/Uri;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "moveDocument\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/net/Uri;Landroid/net/Uri;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeDocument](https://developer.android.com/reference/android/provider/DocumentsContract.html#removeDocument(android.content.ContentResolver,%20android.net.Uri,%20android.net.Uri))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri")))]
        pub fn removeDocument<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "removeDocument", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "removeDocument\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ejectRoot](https://developer.android.com/reference/android/provider/DocumentsContract.html#ejectRoot(android.content.ContentResolver,%20android.net.Uri))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri")))]
        pub fn ejectRoot<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "ejectRoot", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "ejectRoot\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDocumentMetadata](https://developer.android.com/reference/android/provider/DocumentsContract.html#getDocumentMetadata(android.content.ContentResolver,%20android.net.Uri))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri", feature = "android-os-Bundle")))]
        pub fn getDocumentMetadata<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "getDocumentMetadata", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "getDocumentMetadata\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/os/Bundle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findDocumentPath](https://developer.android.com/reference/android/provider/DocumentsContract.html#findDocumentPath(android.content.ContentResolver,%20android.net.Uri))
        ///
        /// Required features: "android-content-ContentResolver", "android-net-Uri", "android-provider-DocumentsContract_Path"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-net-Uri", feature = "android-provider-DocumentsContract_Path")))]
        pub fn findDocumentPath<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::provider::DocumentsContract_Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "findDocumentPath", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/provider/DocumentsContract$Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "findDocumentPath\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/provider/DocumentsContract$Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWebLinkIntent](https://developer.android.com/reference/android/provider/DocumentsContract.html#createWebLinkIntent(android.content.ContentResolver,%20android.net.Uri,%20android.os.Bundle))
        ///
        /// Required features: "android-content-ContentResolver", "android-content-IntentSender", "android-net-Uri", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-content-IntentSender", feature = "android-net-Uri", feature = "android-os-Bundle")))]
        pub fn createWebLinkIntent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::IntentSender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/DocumentsContract", java.flags == PUBLIC | STATIC, .name == "createWebLinkIntent", .descriptor == "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/os/Bundle;)Landroid/content/IntentSender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/DocumentsContract\0", "createWebLinkIntent\0", "(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/os/Bundle;)Landroid/content/IntentSender;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_DOCUMENT_SETTINGS](https://developer.android.com/reference/android/provider/DocumentsContract.html#ACTION_DOCUMENT_SETTINGS)
        pub const ACTION_DOCUMENT_SETTINGS : &'static str = "android.provider.action.DOCUMENT_SETTINGS";

        /// public static final [EXTRA_ERROR](https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_ERROR)
        pub const EXTRA_ERROR : &'static str = "error";

        /// public static final [EXTRA_EXCLUDE_SELF](https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_EXCLUDE_SELF)
        pub const EXTRA_EXCLUDE_SELF : &'static str = "android.provider.extra.EXCLUDE_SELF";

        /// public static final [EXTRA_INFO](https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_INFO)
        pub const EXTRA_INFO : &'static str = "info";

        /// public static final [EXTRA_INITIAL_URI](https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_INITIAL_URI)
        pub const EXTRA_INITIAL_URI : &'static str = "android.provider.extra.INITIAL_URI";

        /// public static final [EXTRA_LOADING](https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_LOADING)
        pub const EXTRA_LOADING : &'static str = "loading";

        /// public static final [EXTRA_ORIENTATION](https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_ORIENTATION)
        pub const EXTRA_ORIENTATION : &'static str = "android.provider.extra.ORIENTATION";

        /// public static final [EXTRA_PROMPT](https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_PROMPT)
        pub const EXTRA_PROMPT : &'static str = "android.provider.extra.PROMPT";

        /// public static final [METADATA_EXIF](https://developer.android.com/reference/android/provider/DocumentsContract.html#METADATA_EXIF)
        pub const METADATA_EXIF : &'static str = "android:documentExif";

        /// public static final [METADATA_TREE_COUNT](https://developer.android.com/reference/android/provider/DocumentsContract.html#METADATA_TREE_COUNT)
        pub const METADATA_TREE_COUNT : &'static str = "android:metadataTreeCount";

        /// public static final [METADATA_TREE_SIZE](https://developer.android.com/reference/android/provider/DocumentsContract.html#METADATA_TREE_SIZE)
        pub const METADATA_TREE_SIZE : &'static str = "android:metadataTreeSize";

        /// public static final [METADATA_TYPES](https://developer.android.com/reference/android/provider/DocumentsContract.html#METADATA_TYPES)
        pub const METADATA_TYPES : &'static str = "android:documentMetadataTypes";

        /// public static final [PROVIDER_INTERFACE](https://developer.android.com/reference/android/provider/DocumentsContract.html#PROVIDER_INTERFACE)
        pub const PROVIDER_INTERFACE : &'static str = "android.content.action.DOCUMENTS_PROVIDER";

        /// public static final [QUERY_ARG_DISPLAY_NAME](https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_DISPLAY_NAME)
        pub const QUERY_ARG_DISPLAY_NAME : &'static str = "android:query-arg-display-name";

        /// public static final [QUERY_ARG_EXCLUDE_MEDIA](https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_EXCLUDE_MEDIA)
        pub const QUERY_ARG_EXCLUDE_MEDIA : &'static str = "android:query-arg-exclude-media";

        /// public static final [QUERY_ARG_FILE_SIZE_OVER](https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_FILE_SIZE_OVER)
        pub const QUERY_ARG_FILE_SIZE_OVER : &'static str = "android:query-arg-file-size-over";

        /// public static final [QUERY_ARG_LAST_MODIFIED_AFTER](https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_LAST_MODIFIED_AFTER)
        pub const QUERY_ARG_LAST_MODIFIED_AFTER : &'static str = "android:query-arg-last-modified-after";

        /// public static final [QUERY_ARG_MIME_TYPES](https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_MIME_TYPES)
        pub const QUERY_ARG_MIME_TYPES : &'static str = "android:query-arg-mime-types";
    }
}
