// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-provider-Settings_Secure"))]
__jni_bindgen! {
    /// public final class [Settings.Secure](https://developer.android.com/reference/android/provider/Settings.Secure.html)
    ///
    /// Required feature: android-provider-Settings_Secure
    public final class Settings_Secure ("android/provider/Settings$Secure") extends crate::android::provider::Settings_NameValueTable {

        /// [Secure](https://developer.android.com/reference/android/provider/Settings.Secure.html#Secure())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::provider::Settings_Secure>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/Settings$Secure\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/provider/Settings.Secure.html#getString(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "getString", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "getString\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putString](https://developer.android.com/reference/android/provider/Settings.Secure.html#putString(android.content.ContentResolver,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "putString", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "putString\0", "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUriFor](https://developer.android.com/reference/android/provider/Settings.Secure.html#getUriFor(java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getUriFor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "getUriFor", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "getUriFor\0", "(Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/android/provider/Settings.Secure.html#getInt(android.content.ContentResolver,%20java.lang.String,%20int))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getInt_ContentResolver_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "getInt", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "getInt\0", "(Landroid/content/ContentResolver;Ljava/lang/String;I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/android/provider/Settings.Secure.html#getInt(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getInt_ContentResolver_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "getInt", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "getInt\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putInt](https://developer.android.com/reference/android/provider/Settings.Secure.html#putInt(android.content.ContentResolver,%20java.lang.String,%20int))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putInt<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "putInt", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "putInt\0", "(Landroid/content/ContentResolver;Ljava/lang/String;I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/android/provider/Settings.Secure.html#getLong(android.content.ContentResolver,%20java.lang.String,%20long))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getLong_ContentResolver_String_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "getLong", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "getLong\0", "(Landroid/content/ContentResolver;Ljava/lang/String;J)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/android/provider/Settings.Secure.html#getLong(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getLong_ContentResolver_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "getLong", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "getLong\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putLong](https://developer.android.com/reference/android/provider/Settings.Secure.html#putLong(android.content.ContentResolver,%20java.lang.String,%20long))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putLong<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "putLong", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "putLong\0", "(Landroid/content/ContentResolver;Ljava/lang/String;J)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/android/provider/Settings.Secure.html#getFloat(android.content.ContentResolver,%20java.lang.String,%20float))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getFloat_ContentResolver_String_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "getFloat", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;F)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "getFloat\0", "(Landroid/content/ContentResolver;Ljava/lang/String;F)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/android/provider/Settings.Secure.html#getFloat(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getFloat_ContentResolver_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "getFloat", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "getFloat\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putFloat](https://developer.android.com/reference/android/provider/Settings.Secure.html#putFloat(android.content.ContentResolver,%20java.lang.String,%20float))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putFloat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: f32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "putFloat", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;F)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "putFloat\0", "(Landroid/content/ContentResolver;Ljava/lang/String;F)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLocationProviderEnabled](https://developer.android.com/reference/android/provider/Settings.Secure.html#isLocationProviderEnabled(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        #[deprecated] pub fn isLocationProviderEnabled<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "isLocationProviderEnabled", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "isLocationProviderEnabled\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLocationProviderEnabled](https://developer.android.com/reference/android/provider/Settings.Secure.html#setLocationProviderEnabled(android.content.ContentResolver,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        #[deprecated] pub fn setLocationProviderEnabled<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Secure", java.flags == PUBLIC | STATIC, .name == "setLocationProviderEnabled", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Secure\0", "setLocationProviderEnabled\0", "(Landroid/content/ContentResolver;Ljava/lang/String;Z)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACCESSIBILITY_DISPLAY_INVERSION_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#ACCESSIBILITY_DISPLAY_INVERSION_ENABLED)
        pub const ACCESSIBILITY_DISPLAY_INVERSION_ENABLED : &'static str = "accessibility_display_inversion_enabled";

        /// public static final [ACCESSIBILITY_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#ACCESSIBILITY_ENABLED)
        pub const ACCESSIBILITY_ENABLED : &'static str = "accessibility_enabled";

        /// public static final [ACCESSIBILITY_SPEAK_PASSWORD](https://developer.android.com/reference/android/provider/Settings.Secure.html#ACCESSIBILITY_SPEAK_PASSWORD)
        #[deprecated] pub const ACCESSIBILITY_SPEAK_PASSWORD : &'static str = "speak_password";

        /// public static final [ADB_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#ADB_ENABLED)
        #[deprecated] pub const ADB_ENABLED : &'static str = "adb_enabled";

        /// public static final [ALLOWED_GEOLOCATION_ORIGINS](https://developer.android.com/reference/android/provider/Settings.Secure.html#ALLOWED_GEOLOCATION_ORIGINS)
        pub const ALLOWED_GEOLOCATION_ORIGINS : &'static str = "allowed_geolocation_origins";

        /// public static final [ALLOW_MOCK_LOCATION](https://developer.android.com/reference/android/provider/Settings.Secure.html#ALLOW_MOCK_LOCATION)
        #[deprecated] pub const ALLOW_MOCK_LOCATION : &'static str = "mock_location";

        /// public static final [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID)
        pub const ANDROID_ID : &'static str = "android_id";

        /// public static final [BACKGROUND_DATA](https://developer.android.com/reference/android/provider/Settings.Secure.html#BACKGROUND_DATA)
        #[deprecated] pub const BACKGROUND_DATA : &'static str = "background_data";

        /// public static final [BLUETOOTH_ON](https://developer.android.com/reference/android/provider/Settings.Secure.html#BLUETOOTH_ON)
        #[deprecated] pub const BLUETOOTH_ON : &'static str = "bluetooth_on";

        /// **get** public static final [CONTENT_URI](https://developer.android.com/reference/android/provider/Settings.Secure.html#CONTENT_URI)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn CONTENT_URI<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/provider/Settings$Secure\0", "CONTENT_URI\0", "Landroid/net/Uri;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DATA_ROAMING](https://developer.android.com/reference/android/provider/Settings.Secure.html#DATA_ROAMING)
        #[deprecated] pub const DATA_ROAMING : &'static str = "data_roaming";

        /// public static final [DEFAULT_INPUT_METHOD](https://developer.android.com/reference/android/provider/Settings.Secure.html#DEFAULT_INPUT_METHOD)
        pub const DEFAULT_INPUT_METHOD : &'static str = "default_input_method";

        /// public static final [DEVELOPMENT_SETTINGS_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#DEVELOPMENT_SETTINGS_ENABLED)
        #[deprecated] pub const DEVELOPMENT_SETTINGS_ENABLED : &'static str = "development_settings_enabled";

        /// public static final [DEVICE_PROVISIONED](https://developer.android.com/reference/android/provider/Settings.Secure.html#DEVICE_PROVISIONED)
        #[deprecated] pub const DEVICE_PROVISIONED : &'static str = "device_provisioned";

        /// public static final [ENABLED_ACCESSIBILITY_SERVICES](https://developer.android.com/reference/android/provider/Settings.Secure.html#ENABLED_ACCESSIBILITY_SERVICES)
        pub const ENABLED_ACCESSIBILITY_SERVICES : &'static str = "enabled_accessibility_services";

        /// public static final [ENABLED_INPUT_METHODS](https://developer.android.com/reference/android/provider/Settings.Secure.html#ENABLED_INPUT_METHODS)
        pub const ENABLED_INPUT_METHODS : &'static str = "enabled_input_methods";

        /// public static final [HTTP_PROXY](https://developer.android.com/reference/android/provider/Settings.Secure.html#HTTP_PROXY)
        #[deprecated] pub const HTTP_PROXY : &'static str = "http_proxy";

        /// public static final [INPUT_METHOD_SELECTOR_VISIBILITY](https://developer.android.com/reference/android/provider/Settings.Secure.html#INPUT_METHOD_SELECTOR_VISIBILITY)
        pub const INPUT_METHOD_SELECTOR_VISIBILITY : &'static str = "input_method_selector_visibility";

        /// public static final [INSTALL_NON_MARKET_APPS](https://developer.android.com/reference/android/provider/Settings.Secure.html#INSTALL_NON_MARKET_APPS)
        #[deprecated] pub const INSTALL_NON_MARKET_APPS : &'static str = "install_non_market_apps";

        /// public static final [LOCATION_MODE](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE)
        #[deprecated] pub const LOCATION_MODE : &'static str = "location_mode";

        /// public static final [LOCATION_MODE_BATTERY_SAVING](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE_BATTERY_SAVING)
        #[deprecated] pub const LOCATION_MODE_BATTERY_SAVING : i32 = 2;

        /// public static final [LOCATION_MODE_HIGH_ACCURACY](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE_HIGH_ACCURACY)
        #[deprecated] pub const LOCATION_MODE_HIGH_ACCURACY : i32 = 3;

        /// public static final [LOCATION_MODE_OFF](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE_OFF)
        pub const LOCATION_MODE_OFF : i32 = 0;

        /// public static final [LOCATION_MODE_SENSORS_ONLY](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE_SENSORS_ONLY)
        #[deprecated] pub const LOCATION_MODE_SENSORS_ONLY : i32 = 1;

        /// public static final [LOCATION_PROVIDERS_ALLOWED](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_PROVIDERS_ALLOWED)
        #[deprecated] pub const LOCATION_PROVIDERS_ALLOWED : &'static str = "location_providers_allowed";

        /// public static final [LOCK_PATTERN_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCK_PATTERN_ENABLED)
        #[deprecated] pub const LOCK_PATTERN_ENABLED : &'static str = "lock_pattern_autolock";

        /// public static final [LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED)
        #[deprecated] pub const LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED : &'static str = "lock_pattern_tactile_feedback_enabled";

        /// public static final [LOCK_PATTERN_VISIBLE](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCK_PATTERN_VISIBLE)
        #[deprecated] pub const LOCK_PATTERN_VISIBLE : &'static str = "lock_pattern_visible_pattern";

        /// public static final [LOGGING_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#LOGGING_ID)
        #[deprecated] pub const LOGGING_ID : &'static str = "logging_id";

        /// public static final [NETWORK_PREFERENCE](https://developer.android.com/reference/android/provider/Settings.Secure.html#NETWORK_PREFERENCE)
        #[deprecated] pub const NETWORK_PREFERENCE : &'static str = "network_preference";

        /// public static final [PARENTAL_CONTROL_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#PARENTAL_CONTROL_ENABLED)
        pub const PARENTAL_CONTROL_ENABLED : &'static str = "parental_control_enabled";

        /// public static final [PARENTAL_CONTROL_LAST_UPDATE](https://developer.android.com/reference/android/provider/Settings.Secure.html#PARENTAL_CONTROL_LAST_UPDATE)
        pub const PARENTAL_CONTROL_LAST_UPDATE : &'static str = "parental_control_last_update";

        /// public static final [PARENTAL_CONTROL_REDIRECT_URL](https://developer.android.com/reference/android/provider/Settings.Secure.html#PARENTAL_CONTROL_REDIRECT_URL)
        pub const PARENTAL_CONTROL_REDIRECT_URL : &'static str = "parental_control_redirect_url";

        /// public static final [RTT_CALLING_MODE](https://developer.android.com/reference/android/provider/Settings.Secure.html#RTT_CALLING_MODE)
        pub const RTT_CALLING_MODE : &'static str = "rtt_calling_mode";

        /// public static final [SELECTED_INPUT_METHOD_SUBTYPE](https://developer.android.com/reference/android/provider/Settings.Secure.html#SELECTED_INPUT_METHOD_SUBTYPE)
        pub const SELECTED_INPUT_METHOD_SUBTYPE : &'static str = "selected_input_method_subtype";

        /// public static final [SETTINGS_CLASSNAME](https://developer.android.com/reference/android/provider/Settings.Secure.html#SETTINGS_CLASSNAME)
        pub const SETTINGS_CLASSNAME : &'static str = "settings_classname";

        /// public static final [SKIP_FIRST_USE_HINTS](https://developer.android.com/reference/android/provider/Settings.Secure.html#SKIP_FIRST_USE_HINTS)
        pub const SKIP_FIRST_USE_HINTS : &'static str = "skip_first_use_hints";

        /// public static final [TOUCH_EXPLORATION_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#TOUCH_EXPLORATION_ENABLED)
        pub const TOUCH_EXPLORATION_ENABLED : &'static str = "touch_exploration_enabled";

        /// public static final [TTS_DEFAULT_COUNTRY](https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_COUNTRY)
        #[deprecated] pub const TTS_DEFAULT_COUNTRY : &'static str = "tts_default_country";

        /// public static final [TTS_DEFAULT_LANG](https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_LANG)
        #[deprecated] pub const TTS_DEFAULT_LANG : &'static str = "tts_default_lang";

        /// public static final [TTS_DEFAULT_PITCH](https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_PITCH)
        pub const TTS_DEFAULT_PITCH : &'static str = "tts_default_pitch";

        /// public static final [TTS_DEFAULT_RATE](https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_RATE)
        pub const TTS_DEFAULT_RATE : &'static str = "tts_default_rate";

        /// public static final [TTS_DEFAULT_SYNTH](https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_SYNTH)
        pub const TTS_DEFAULT_SYNTH : &'static str = "tts_default_synth";

        /// public static final [TTS_DEFAULT_VARIANT](https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_VARIANT)
        #[deprecated] pub const TTS_DEFAULT_VARIANT : &'static str = "tts_default_variant";

        /// public static final [TTS_ENABLED_PLUGINS](https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_ENABLED_PLUGINS)
        pub const TTS_ENABLED_PLUGINS : &'static str = "tts_enabled_plugins";

        /// public static final [TTS_USE_DEFAULTS](https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_USE_DEFAULTS)
        #[deprecated] pub const TTS_USE_DEFAULTS : &'static str = "tts_use_defaults";

        /// public static final [USB_MASS_STORAGE_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#USB_MASS_STORAGE_ENABLED)
        #[deprecated] pub const USB_MASS_STORAGE_ENABLED : &'static str = "usb_mass_storage_enabled";

        /// public static final [USE_GOOGLE_MAIL](https://developer.android.com/reference/android/provider/Settings.Secure.html#USE_GOOGLE_MAIL)
        #[deprecated] pub const USE_GOOGLE_MAIL : &'static str = "use_google_mail";

        /// public static final [WIFI_MAX_DHCP_RETRY_COUNT](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_MAX_DHCP_RETRY_COUNT)
        #[deprecated] pub const WIFI_MAX_DHCP_RETRY_COUNT : &'static str = "wifi_max_dhcp_retry_count";

        /// public static final [WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS)
        #[deprecated] pub const WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS : &'static str = "wifi_mobile_data_transition_wakelock_timeout_ms";

        /// public static final [WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON)
        #[deprecated] pub const WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON : &'static str = "wifi_networks_available_notification_on";

        /// public static final [WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY)
        #[deprecated] pub const WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY : &'static str = "wifi_networks_available_repeat_delay";

        /// public static final [WIFI_NUM_OPEN_NETWORKS_KEPT](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_NUM_OPEN_NETWORKS_KEPT)
        #[deprecated] pub const WIFI_NUM_OPEN_NETWORKS_KEPT : &'static str = "wifi_num_open_networks_kept";

        /// public static final [WIFI_ON](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_ON)
        #[deprecated] pub const WIFI_ON : &'static str = "wifi_on";

        /// public static final [WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE)
        #[deprecated] pub const WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE : &'static str = "wifi_watchdog_acceptable_packet_loss_percentage";

        /// public static final [WIFI_WATCHDOG_AP_COUNT](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_AP_COUNT)
        #[deprecated] pub const WIFI_WATCHDOG_AP_COUNT : &'static str = "wifi_watchdog_ap_count";

        /// public static final [WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS)
        #[deprecated] pub const WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS : &'static str = "wifi_watchdog_background_check_delay_ms";

        /// public static final [WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED)
        #[deprecated] pub const WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED : &'static str = "wifi_watchdog_background_check_enabled";

        /// public static final [WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS)
        #[deprecated] pub const WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS : &'static str = "wifi_watchdog_background_check_timeout_ms";

        /// public static final [WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT)
        #[deprecated] pub const WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT : &'static str = "wifi_watchdog_initial_ignored_ping_count";

        /// public static final [WIFI_WATCHDOG_MAX_AP_CHECKS](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_MAX_AP_CHECKS)
        #[deprecated] pub const WIFI_WATCHDOG_MAX_AP_CHECKS : &'static str = "wifi_watchdog_max_ap_checks";

        /// public static final [WIFI_WATCHDOG_ON](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_ON)
        #[deprecated] pub const WIFI_WATCHDOG_ON : &'static str = "wifi_watchdog_on";

        /// public static final [WIFI_WATCHDOG_PING_COUNT](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_PING_COUNT)
        #[deprecated] pub const WIFI_WATCHDOG_PING_COUNT : &'static str = "wifi_watchdog_ping_count";

        /// public static final [WIFI_WATCHDOG_PING_DELAY_MS](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_PING_DELAY_MS)
        #[deprecated] pub const WIFI_WATCHDOG_PING_DELAY_MS : &'static str = "wifi_watchdog_ping_delay_ms";

        /// public static final [WIFI_WATCHDOG_PING_TIMEOUT_MS](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_PING_TIMEOUT_MS)
        #[deprecated] pub const WIFI_WATCHDOG_PING_TIMEOUT_MS : &'static str = "wifi_watchdog_ping_timeout_ms";

        /// public static final [WIFI_WATCHDOG_WATCH_LIST](https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_WATCH_LIST)
        #[deprecated] pub const WIFI_WATCHDOG_WATCH_LIST : &'static str = "wifi_watchdog_watch_list";
    }
}
