// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-provider-MediaStore_Video_Media"))]
__jni_bindgen! {
    /// public final class [MediaStore.Video.Media](https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html)
    ///
    /// Required feature: android-provider-MediaStore_Video_Media
    public final class MediaStore_Video_Media ("android/provider/MediaStore$Video$Media") extends crate::java::lang::Object, implements crate::android::provider::MediaStore_Video_VideoColumns {

        /// [Media](https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#Media())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::provider::MediaStore_Video_Media>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/MediaStore$Video$Media", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/MediaStore$Video$Media\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentUri](https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#getContentUri(java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getContentUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/MediaStore$Video$Media", java.flags == PUBLIC | STATIC, .name == "getContentUri", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/MediaStore$Video$Media\0", "getContentUri\0", "(Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CONTENT_TYPE](https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#CONTENT_TYPE)
        pub const CONTENT_TYPE : &'static str = "vnd.android.cursor.dir/video";

        /// public static final [DEFAULT_SORT_ORDER](https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#DEFAULT_SORT_ORDER)
        pub const DEFAULT_SORT_ORDER : &'static str = "title";

        /// **get** public static final [EXTERNAL_CONTENT_URI](https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#EXTERNAL_CONTENT_URI)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn EXTERNAL_CONTENT_URI<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/provider/MediaStore$Video$Media\0", "EXTERNAL_CONTENT_URI\0", "Landroid/net/Uri;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [INTERNAL_CONTENT_URI](https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#INTERNAL_CONTENT_URI)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn INTERNAL_CONTENT_URI<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/provider/MediaStore$Video$Media\0", "INTERNAL_CONTENT_URI\0", "Landroid/net/Uri;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
