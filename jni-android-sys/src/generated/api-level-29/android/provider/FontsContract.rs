// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-provider-FontsContract"))]
__jni_bindgen! {
    /// public class [FontsContract](https://developer.android.com/reference/android/provider/FontsContract.html)
    ///
    /// Required feature: android-provider-FontsContract
    public class FontsContract ("android/provider/FontsContract") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [FontsContract](https://developer.android.com/reference/android/provider/FontsContract.html#FontsContract())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::provider::FontsContract>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/provider/FontsContract", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/FontsContract\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [requestFonts](https://developer.android.com/reference/android/provider/FontsContract.html#requestFonts(android.content.Context,%20android.provider.FontRequest,%20android.os.Handler,%20android.os.CancellationSignal,%20android.provider.FontsContract.FontRequestCallback))
        ///
        /// Required features: "android-content-Context", "android-os-CancellationSignal", "android-os-Handler", "android-provider-FontRequest", "android-provider-FontsContract_FontRequestCallback"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-CancellationSignal", feature = "android-os-Handler", feature = "android-provider-FontRequest", feature = "android-provider-FontsContract_FontRequestCallback")))]
        pub fn requestFonts<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::provider::FontRequest>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::provider::FontsContract_FontRequestCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/FontsContract", java.flags == PUBLIC | STATIC, .name == "requestFonts", .descriptor == "(Landroid/content/Context;Landroid/provider/FontRequest;Landroid/os/Handler;Landroid/os/CancellationSignal;Landroid/provider/FontsContract$FontRequestCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/FontsContract\0", "requestFonts\0", "(Landroid/content/Context;Landroid/provider/FontRequest;Landroid/os/Handler;Landroid/os/CancellationSignal;Landroid/provider/FontsContract$FontRequestCallback;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fetchFonts](https://developer.android.com/reference/android/provider/FontsContract.html#fetchFonts(android.content.Context,%20android.os.CancellationSignal,%20android.provider.FontRequest))
        ///
        /// Required features: "android-content-Context", "android-os-CancellationSignal", "android-provider-FontRequest", "android-provider-FontsContract_FontFamilyResult"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-CancellationSignal", feature = "android-provider-FontRequest", feature = "android-provider-FontsContract_FontFamilyResult")))]
        pub fn fetchFonts<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::provider::FontRequest>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::provider::FontsContract_FontFamilyResult>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/FontsContract", java.flags == PUBLIC | STATIC, .name == "fetchFonts", .descriptor == "(Landroid/content/Context;Landroid/os/CancellationSignal;Landroid/provider/FontRequest;)Landroid/provider/FontsContract$FontFamilyResult;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/FontsContract\0", "fetchFonts\0", "(Landroid/content/Context;Landroid/os/CancellationSignal;Landroid/provider/FontRequest;)Landroid/provider/FontsContract$FontFamilyResult;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildTypeface](https://developer.android.com/reference/android/provider/FontsContract.html#buildTypeface(android.content.Context,%20android.os.CancellationSignal,%20android.provider.FontsContract.FontInfo%5B%5D))
        ///
        /// Required features: "android-content-Context", "android-graphics-Typeface", "android-os-CancellationSignal", "android-provider-FontsContract_FontInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-graphics-Typeface", feature = "android-os-CancellationSignal", feature = "android-provider-FontsContract_FontInfo")))]
        pub fn buildTypeface<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::provider::FontsContract_FontInfo, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Typeface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/FontsContract", java.flags == PUBLIC | STATIC, .name == "buildTypeface", .descriptor == "(Landroid/content/Context;Landroid/os/CancellationSignal;[Landroid/provider/FontsContract$FontInfo;)Landroid/graphics/Typeface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/FontsContract\0", "buildTypeface\0", "(Landroid/content/Context;Landroid/os/CancellationSignal;[Landroid/provider/FontsContract$FontInfo;)Landroid/graphics/Typeface;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
