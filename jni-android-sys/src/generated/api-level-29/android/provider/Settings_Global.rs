// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-provider-Settings_Global"))]
__jni_bindgen! {
    /// public final class [Settings.Global](https://developer.android.com/reference/android/provider/Settings.Global.html)
    ///
    /// Required feature: android-provider-Settings_Global
    public final class Settings_Global ("android/provider/Settings$Global") extends crate::android::provider::Settings_NameValueTable {

        /// [Global](https://developer.android.com/reference/android/provider/Settings.Global.html#Global())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::provider::Settings_Global>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/Settings$Global\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/provider/Settings.Global.html#getString(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "getString", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "getString\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putString](https://developer.android.com/reference/android/provider/Settings.Global.html#putString(android.content.ContentResolver,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "putString", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "putString\0", "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUriFor](https://developer.android.com/reference/android/provider/Settings.Global.html#getUriFor(java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getUriFor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "getUriFor", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "getUriFor\0", "(Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/android/provider/Settings.Global.html#getInt(android.content.ContentResolver,%20java.lang.String,%20int))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getInt_ContentResolver_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "getInt", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "getInt\0", "(Landroid/content/ContentResolver;Ljava/lang/String;I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/android/provider/Settings.Global.html#getInt(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getInt_ContentResolver_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "getInt", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "getInt\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putInt](https://developer.android.com/reference/android/provider/Settings.Global.html#putInt(android.content.ContentResolver,%20java.lang.String,%20int))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putInt<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "putInt", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "putInt\0", "(Landroid/content/ContentResolver;Ljava/lang/String;I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/android/provider/Settings.Global.html#getLong(android.content.ContentResolver,%20java.lang.String,%20long))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getLong_ContentResolver_String_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "getLong", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "getLong\0", "(Landroid/content/ContentResolver;Ljava/lang/String;J)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/android/provider/Settings.Global.html#getLong(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getLong_ContentResolver_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "getLong", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "getLong\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putLong](https://developer.android.com/reference/android/provider/Settings.Global.html#putLong(android.content.ContentResolver,%20java.lang.String,%20long))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putLong<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "putLong", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "putLong\0", "(Landroid/content/ContentResolver;Ljava/lang/String;J)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/android/provider/Settings.Global.html#getFloat(android.content.ContentResolver,%20java.lang.String,%20float))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getFloat_ContentResolver_String_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "getFloat", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;F)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "getFloat\0", "(Landroid/content/ContentResolver;Ljava/lang/String;F)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/android/provider/Settings.Global.html#getFloat(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getFloat_ContentResolver_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "getFloat", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "getFloat\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putFloat](https://developer.android.com/reference/android/provider/Settings.Global.html#putFloat(android.content.ContentResolver,%20java.lang.String,%20float))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putFloat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: f32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$Global", java.flags == PUBLIC | STATIC, .name == "putFloat", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;F)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$Global\0", "putFloat\0", "(Landroid/content/ContentResolver;Ljava/lang/String;F)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ADB_ENABLED](https://developer.android.com/reference/android/provider/Settings.Global.html#ADB_ENABLED)
        pub const ADB_ENABLED : &'static str = "adb_enabled";

        /// public static final [AIRPLANE_MODE_ON](https://developer.android.com/reference/android/provider/Settings.Global.html#AIRPLANE_MODE_ON)
        pub const AIRPLANE_MODE_ON : &'static str = "airplane_mode_on";

        /// public static final [AIRPLANE_MODE_RADIOS](https://developer.android.com/reference/android/provider/Settings.Global.html#AIRPLANE_MODE_RADIOS)
        pub const AIRPLANE_MODE_RADIOS : &'static str = "airplane_mode_radios";

        /// public static final [ALWAYS_FINISH_ACTIVITIES](https://developer.android.com/reference/android/provider/Settings.Global.html#ALWAYS_FINISH_ACTIVITIES)
        pub const ALWAYS_FINISH_ACTIVITIES : &'static str = "always_finish_activities";

        /// public static final [ANIMATOR_DURATION_SCALE](https://developer.android.com/reference/android/provider/Settings.Global.html#ANIMATOR_DURATION_SCALE)
        pub const ANIMATOR_DURATION_SCALE : &'static str = "animator_duration_scale";

        /// public static final [APPLY_RAMPING_RINGER](https://developer.android.com/reference/android/provider/Settings.Global.html#APPLY_RAMPING_RINGER)
        pub const APPLY_RAMPING_RINGER : &'static str = "apply_ramping_ringer";

        /// public static final [AUTO_TIME](https://developer.android.com/reference/android/provider/Settings.Global.html#AUTO_TIME)
        pub const AUTO_TIME : &'static str = "auto_time";

        /// public static final [AUTO_TIME_ZONE](https://developer.android.com/reference/android/provider/Settings.Global.html#AUTO_TIME_ZONE)
        pub const AUTO_TIME_ZONE : &'static str = "auto_time_zone";

        /// public static final [BLUETOOTH_ON](https://developer.android.com/reference/android/provider/Settings.Global.html#BLUETOOTH_ON)
        pub const BLUETOOTH_ON : &'static str = "bluetooth_on";

        /// public static final [BOOT_COUNT](https://developer.android.com/reference/android/provider/Settings.Global.html#BOOT_COUNT)
        pub const BOOT_COUNT : &'static str = "boot_count";

        /// public static final [CONTACT_METADATA_SYNC_ENABLED](https://developer.android.com/reference/android/provider/Settings.Global.html#CONTACT_METADATA_SYNC_ENABLED)
        pub const CONTACT_METADATA_SYNC_ENABLED : &'static str = "contact_metadata_sync_enabled";

        /// **get** public static final [CONTENT_URI](https://developer.android.com/reference/android/provider/Settings.Global.html#CONTENT_URI)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn CONTENT_URI<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/provider/Settings$Global\0", "CONTENT_URI\0", "Landroid/net/Uri;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DATA_ROAMING](https://developer.android.com/reference/android/provider/Settings.Global.html#DATA_ROAMING)
        pub const DATA_ROAMING : &'static str = "data_roaming";

        /// public static final [DEBUG_APP](https://developer.android.com/reference/android/provider/Settings.Global.html#DEBUG_APP)
        pub const DEBUG_APP : &'static str = "debug_app";

        /// public static final [DEVELOPMENT_SETTINGS_ENABLED](https://developer.android.com/reference/android/provider/Settings.Global.html#DEVELOPMENT_SETTINGS_ENABLED)
        pub const DEVELOPMENT_SETTINGS_ENABLED : &'static str = "development_settings_enabled";

        /// public static final [DEVICE_NAME](https://developer.android.com/reference/android/provider/Settings.Global.html#DEVICE_NAME)
        pub const DEVICE_NAME : &'static str = "device_name";

        /// public static final [DEVICE_PROVISIONED](https://developer.android.com/reference/android/provider/Settings.Global.html#DEVICE_PROVISIONED)
        pub const DEVICE_PROVISIONED : &'static str = "device_provisioned";

        /// public static final [HTTP_PROXY](https://developer.android.com/reference/android/provider/Settings.Global.html#HTTP_PROXY)
        pub const HTTP_PROXY : &'static str = "http_proxy";

        /// public static final [INSTALL_NON_MARKET_APPS](https://developer.android.com/reference/android/provider/Settings.Global.html#INSTALL_NON_MARKET_APPS)
        #[deprecated] pub const INSTALL_NON_MARKET_APPS : &'static str = "install_non_market_apps";

        /// public static final [MODE_RINGER](https://developer.android.com/reference/android/provider/Settings.Global.html#MODE_RINGER)
        pub const MODE_RINGER : &'static str = "mode_ringer";

        /// public static final [NETWORK_PREFERENCE](https://developer.android.com/reference/android/provider/Settings.Global.html#NETWORK_PREFERENCE)
        pub const NETWORK_PREFERENCE : &'static str = "network_preference";

        /// public static final [RADIO_BLUETOOTH](https://developer.android.com/reference/android/provider/Settings.Global.html#RADIO_BLUETOOTH)
        pub const RADIO_BLUETOOTH : &'static str = "bluetooth";

        /// public static final [RADIO_CELL](https://developer.android.com/reference/android/provider/Settings.Global.html#RADIO_CELL)
        pub const RADIO_CELL : &'static str = "cell";

        /// public static final [RADIO_NFC](https://developer.android.com/reference/android/provider/Settings.Global.html#RADIO_NFC)
        pub const RADIO_NFC : &'static str = "nfc";

        /// public static final [RADIO_WIFI](https://developer.android.com/reference/android/provider/Settings.Global.html#RADIO_WIFI)
        pub const RADIO_WIFI : &'static str = "wifi";

        /// public static final [SHOW_PROCESSES](https://developer.android.com/reference/android/provider/Settings.Global.html#SHOW_PROCESSES)
        #[deprecated] pub const SHOW_PROCESSES : &'static str = "show_processes";

        /// public static final [STAY_ON_WHILE_PLUGGED_IN](https://developer.android.com/reference/android/provider/Settings.Global.html#STAY_ON_WHILE_PLUGGED_IN)
        pub const STAY_ON_WHILE_PLUGGED_IN : &'static str = "stay_on_while_plugged_in";

        /// public static final [TRANSITION_ANIMATION_SCALE](https://developer.android.com/reference/android/provider/Settings.Global.html#TRANSITION_ANIMATION_SCALE)
        pub const TRANSITION_ANIMATION_SCALE : &'static str = "transition_animation_scale";

        /// public static final [USB_MASS_STORAGE_ENABLED](https://developer.android.com/reference/android/provider/Settings.Global.html#USB_MASS_STORAGE_ENABLED)
        pub const USB_MASS_STORAGE_ENABLED : &'static str = "usb_mass_storage_enabled";

        /// public static final [USE_GOOGLE_MAIL](https://developer.android.com/reference/android/provider/Settings.Global.html#USE_GOOGLE_MAIL)
        pub const USE_GOOGLE_MAIL : &'static str = "use_google_mail";

        /// public static final [WAIT_FOR_DEBUGGER](https://developer.android.com/reference/android/provider/Settings.Global.html#WAIT_FOR_DEBUGGER)
        pub const WAIT_FOR_DEBUGGER : &'static str = "wait_for_debugger";

        /// public static final [WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN)
        pub const WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN : &'static str = "wifi_device_owner_configs_lockdown";

        /// public static final [WIFI_MAX_DHCP_RETRY_COUNT](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_MAX_DHCP_RETRY_COUNT)
        pub const WIFI_MAX_DHCP_RETRY_COUNT : &'static str = "wifi_max_dhcp_retry_count";

        /// public static final [WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS)
        pub const WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS : &'static str = "wifi_mobile_data_transition_wakelock_timeout_ms";

        /// public static final [WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON)
        #[deprecated] pub const WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON : &'static str = "wifi_networks_available_notification_on";

        /// public static final [WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY)
        pub const WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY : &'static str = "wifi_networks_available_repeat_delay";

        /// public static final [WIFI_NUM_OPEN_NETWORKS_KEPT](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_NUM_OPEN_NETWORKS_KEPT)
        pub const WIFI_NUM_OPEN_NETWORKS_KEPT : &'static str = "wifi_num_open_networks_kept";

        /// public static final [WIFI_ON](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_ON)
        pub const WIFI_ON : &'static str = "wifi_on";

        /// public static final [WIFI_SLEEP_POLICY](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_SLEEP_POLICY)
        pub const WIFI_SLEEP_POLICY : &'static str = "wifi_sleep_policy";

        /// public static final [WIFI_SLEEP_POLICY_DEFAULT](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_SLEEP_POLICY_DEFAULT)
        pub const WIFI_SLEEP_POLICY_DEFAULT : i32 = 0;

        /// public static final [WIFI_SLEEP_POLICY_NEVER](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_SLEEP_POLICY_NEVER)
        pub const WIFI_SLEEP_POLICY_NEVER : i32 = 2;

        /// public static final [WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED)
        pub const WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED : i32 = 1;

        /// public static final [WIFI_WATCHDOG_ON](https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_WATCHDOG_ON)
        pub const WIFI_WATCHDOG_ON : &'static str = "wifi_watchdog_on";

        /// public static final [WINDOW_ANIMATION_SCALE](https://developer.android.com/reference/android/provider/Settings.Global.html#WINDOW_ANIMATION_SCALE)
        pub const WINDOW_ANIMATION_SCALE : &'static str = "window_animation_scale";
    }
}
