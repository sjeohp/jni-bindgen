// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-provider-Settings_System"))]
__jni_bindgen! {
    /// public final class [Settings.System](https://developer.android.com/reference/android/provider/Settings.System.html)
    ///
    /// Required feature: android-provider-Settings_System
    public final class Settings_System ("android/provider/Settings$System") extends crate::android::provider::Settings_NameValueTable {

        /// [System](https://developer.android.com/reference/android/provider/Settings.System.html#System())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::provider::Settings_System>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/Settings$System\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/provider/Settings.System.html#getString(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getString", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getString\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putString](https://developer.android.com/reference/android/provider/Settings.System.html#putString(android.content.ContentResolver,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "putString", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "putString\0", "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUriFor](https://developer.android.com/reference/android/provider/Settings.System.html#getUriFor(java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getUriFor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getUriFor", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getUriFor\0", "(Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/android/provider/Settings.System.html#getInt(android.content.ContentResolver,%20java.lang.String,%20int))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getInt_ContentResolver_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getInt", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getInt\0", "(Landroid/content/ContentResolver;Ljava/lang/String;I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/android/provider/Settings.System.html#getInt(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getInt_ContentResolver_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getInt", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getInt\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putInt](https://developer.android.com/reference/android/provider/Settings.System.html#putInt(android.content.ContentResolver,%20java.lang.String,%20int))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putInt<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "putInt", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "putInt\0", "(Landroid/content/ContentResolver;Ljava/lang/String;I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/android/provider/Settings.System.html#getLong(android.content.ContentResolver,%20java.lang.String,%20long))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getLong_ContentResolver_String_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getLong", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getLong\0", "(Landroid/content/ContentResolver;Ljava/lang/String;J)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/android/provider/Settings.System.html#getLong(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getLong_ContentResolver_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getLong", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getLong\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putLong](https://developer.android.com/reference/android/provider/Settings.System.html#putLong(android.content.ContentResolver,%20java.lang.String,%20long))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putLong<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "putLong", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "putLong\0", "(Landroid/content/ContentResolver;Ljava/lang/String;J)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/android/provider/Settings.System.html#getFloat(android.content.ContentResolver,%20java.lang.String,%20float))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getFloat_ContentResolver_String_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getFloat", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;F)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getFloat\0", "(Landroid/content/ContentResolver;Ljava/lang/String;F)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/android/provider/Settings.System.html#getFloat(android.content.ContentResolver,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn getFloat_ContentResolver_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getFloat", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getFloat\0", "(Landroid/content/ContentResolver;Ljava/lang/String;)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putFloat](https://developer.android.com/reference/android/provider/Settings.System.html#putFloat(android.content.ContentResolver,%20java.lang.String,%20float))
        ///
        /// Required features: "android-content-ContentResolver", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "java-lang-String")))]
        pub fn putFloat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: f32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "putFloat", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/String;F)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "putFloat\0", "(Landroid/content/ContentResolver;Ljava/lang/String;F)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConfiguration](https://developer.android.com/reference/android/provider/Settings.System.html#getConfiguration(android.content.ContentResolver,%20android.content.res.Configuration))
        ///
        /// Required features: "android-content-ContentResolver", "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-content-res-Configuration")))]
        pub fn getConfiguration<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getConfiguration", .descriptor == "(Landroid/content/ContentResolver;Landroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getConfiguration\0", "(Landroid/content/ContentResolver;Landroid/content/res/Configuration;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putConfiguration](https://developer.android.com/reference/android/provider/Settings.System.html#putConfiguration(android.content.ContentResolver,%20android.content.res.Configuration))
        ///
        /// Required features: "android-content-ContentResolver", "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver", feature = "android-content-res-Configuration")))]
        pub fn putConfiguration<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "putConfiguration", .descriptor == "(Landroid/content/ContentResolver;Landroid/content/res/Configuration;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "putConfiguration\0", "(Landroid/content/ContentResolver;Landroid/content/res/Configuration;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShowGTalkServiceStatus](https://developer.android.com/reference/android/provider/Settings.System.html#getShowGTalkServiceStatus(android.content.ContentResolver))
        ///
        /// Required features: "android-content-ContentResolver"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver")))]
        #[deprecated] pub fn getShowGTalkServiceStatus<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "getShowGTalkServiceStatus", .descriptor == "(Landroid/content/ContentResolver;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "getShowGTalkServiceStatus\0", "(Landroid/content/ContentResolver;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShowGTalkServiceStatus](https://developer.android.com/reference/android/provider/Settings.System.html#setShowGTalkServiceStatus(android.content.ContentResolver,%20boolean))
        ///
        /// Required features: "android-content-ContentResolver"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver")))]
        #[deprecated] pub fn setShowGTalkServiceStatus<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "setShowGTalkServiceStatus", .descriptor == "(Landroid/content/ContentResolver;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "setShowGTalkServiceStatus\0", "(Landroid/content/ContentResolver;Z)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canWrite](https://developer.android.com/reference/android/provider/Settings.System.html#canWrite(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn canWrite<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/Settings$System", java.flags == PUBLIC | STATIC, .name == "canWrite", .descriptor == "(Landroid/content/Context;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/provider/Settings$System\0", "canWrite\0", "(Landroid/content/Context;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACCELEROMETER_ROTATION](https://developer.android.com/reference/android/provider/Settings.System.html#ACCELEROMETER_ROTATION)
        pub const ACCELEROMETER_ROTATION : &'static str = "accelerometer_rotation";

        /// public static final [ADB_ENABLED](https://developer.android.com/reference/android/provider/Settings.System.html#ADB_ENABLED)
        #[deprecated] pub const ADB_ENABLED : &'static str = "adb_enabled";

        /// public static final [AIRPLANE_MODE_ON](https://developer.android.com/reference/android/provider/Settings.System.html#AIRPLANE_MODE_ON)
        #[deprecated] pub const AIRPLANE_MODE_ON : &'static str = "airplane_mode_on";

        /// public static final [AIRPLANE_MODE_RADIOS](https://developer.android.com/reference/android/provider/Settings.System.html#AIRPLANE_MODE_RADIOS)
        #[deprecated] pub const AIRPLANE_MODE_RADIOS : &'static str = "airplane_mode_radios";

        /// public static final [ALARM_ALERT](https://developer.android.com/reference/android/provider/Settings.System.html#ALARM_ALERT)
        pub const ALARM_ALERT : &'static str = "alarm_alert";

        /// public static final [ALWAYS_FINISH_ACTIVITIES](https://developer.android.com/reference/android/provider/Settings.System.html#ALWAYS_FINISH_ACTIVITIES)
        #[deprecated] pub const ALWAYS_FINISH_ACTIVITIES : &'static str = "always_finish_activities";

        /// public static final [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.System.html#ANDROID_ID)
        #[deprecated] pub const ANDROID_ID : &'static str = "android_id";

        /// public static final [ANIMATOR_DURATION_SCALE](https://developer.android.com/reference/android/provider/Settings.System.html#ANIMATOR_DURATION_SCALE)
        #[deprecated] pub const ANIMATOR_DURATION_SCALE : &'static str = "animator_duration_scale";

        /// public static final [AUTO_TIME](https://developer.android.com/reference/android/provider/Settings.System.html#AUTO_TIME)
        #[deprecated] pub const AUTO_TIME : &'static str = "auto_time";

        /// public static final [AUTO_TIME_ZONE](https://developer.android.com/reference/android/provider/Settings.System.html#AUTO_TIME_ZONE)
        #[deprecated] pub const AUTO_TIME_ZONE : &'static str = "auto_time_zone";

        /// public static final [BLUETOOTH_DISCOVERABILITY](https://developer.android.com/reference/android/provider/Settings.System.html#BLUETOOTH_DISCOVERABILITY)
        pub const BLUETOOTH_DISCOVERABILITY : &'static str = "bluetooth_discoverability";

        /// public static final [BLUETOOTH_DISCOVERABILITY_TIMEOUT](https://developer.android.com/reference/android/provider/Settings.System.html#BLUETOOTH_DISCOVERABILITY_TIMEOUT)
        pub const BLUETOOTH_DISCOVERABILITY_TIMEOUT : &'static str = "bluetooth_discoverability_timeout";

        /// public static final [BLUETOOTH_ON](https://developer.android.com/reference/android/provider/Settings.System.html#BLUETOOTH_ON)
        #[deprecated] pub const BLUETOOTH_ON : &'static str = "bluetooth_on";

        /// **get** public static final [CONTENT_URI](https://developer.android.com/reference/android/provider/Settings.System.html#CONTENT_URI)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn CONTENT_URI<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/provider/Settings$System\0", "CONTENT_URI\0", "Landroid/net/Uri;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DATA_ROAMING](https://developer.android.com/reference/android/provider/Settings.System.html#DATA_ROAMING)
        #[deprecated] pub const DATA_ROAMING : &'static str = "data_roaming";

        /// public static final [DATE_FORMAT](https://developer.android.com/reference/android/provider/Settings.System.html#DATE_FORMAT)
        pub const DATE_FORMAT : &'static str = "date_format";

        /// public static final [DEBUG_APP](https://developer.android.com/reference/android/provider/Settings.System.html#DEBUG_APP)
        #[deprecated] pub const DEBUG_APP : &'static str = "debug_app";

        /// **get** public static final [DEFAULT_ALARM_ALERT_URI](https://developer.android.com/reference/android/provider/Settings.System.html#DEFAULT_ALARM_ALERT_URI)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn DEFAULT_ALARM_ALERT_URI<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/provider/Settings$System\0", "DEFAULT_ALARM_ALERT_URI\0", "Landroid/net/Uri;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [DEFAULT_NOTIFICATION_URI](https://developer.android.com/reference/android/provider/Settings.System.html#DEFAULT_NOTIFICATION_URI)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn DEFAULT_NOTIFICATION_URI<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/provider/Settings$System\0", "DEFAULT_NOTIFICATION_URI\0", "Landroid/net/Uri;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [DEFAULT_RINGTONE_URI](https://developer.android.com/reference/android/provider/Settings.System.html#DEFAULT_RINGTONE_URI)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn DEFAULT_RINGTONE_URI<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/provider/Settings$System\0", "DEFAULT_RINGTONE_URI\0", "Landroid/net/Uri;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DEVICE_PROVISIONED](https://developer.android.com/reference/android/provider/Settings.System.html#DEVICE_PROVISIONED)
        #[deprecated] pub const DEVICE_PROVISIONED : &'static str = "device_provisioned";

        /// public static final [DIM_SCREEN](https://developer.android.com/reference/android/provider/Settings.System.html#DIM_SCREEN)
        #[deprecated] pub const DIM_SCREEN : &'static str = "dim_screen";

        /// public static final [DTMF_TONE_TYPE_WHEN_DIALING](https://developer.android.com/reference/android/provider/Settings.System.html#DTMF_TONE_TYPE_WHEN_DIALING)
        pub const DTMF_TONE_TYPE_WHEN_DIALING : &'static str = "dtmf_tone_type";

        /// public static final [DTMF_TONE_WHEN_DIALING](https://developer.android.com/reference/android/provider/Settings.System.html#DTMF_TONE_WHEN_DIALING)
        pub const DTMF_TONE_WHEN_DIALING : &'static str = "dtmf_tone";

        /// public static final [END_BUTTON_BEHAVIOR](https://developer.android.com/reference/android/provider/Settings.System.html#END_BUTTON_BEHAVIOR)
        pub const END_BUTTON_BEHAVIOR : &'static str = "end_button_behavior";

        /// public static final [FONT_SCALE](https://developer.android.com/reference/android/provider/Settings.System.html#FONT_SCALE)
        pub const FONT_SCALE : &'static str = "font_scale";

        /// public static final [HAPTIC_FEEDBACK_ENABLED](https://developer.android.com/reference/android/provider/Settings.System.html#HAPTIC_FEEDBACK_ENABLED)
        pub const HAPTIC_FEEDBACK_ENABLED : &'static str = "haptic_feedback_enabled";

        /// public static final [HTTP_PROXY](https://developer.android.com/reference/android/provider/Settings.System.html#HTTP_PROXY)
        #[deprecated] pub const HTTP_PROXY : &'static str = "http_proxy";

        /// public static final [INSTALL_NON_MARKET_APPS](https://developer.android.com/reference/android/provider/Settings.System.html#INSTALL_NON_MARKET_APPS)
        #[deprecated] pub const INSTALL_NON_MARKET_APPS : &'static str = "install_non_market_apps";

        /// public static final [LOCATION_PROVIDERS_ALLOWED](https://developer.android.com/reference/android/provider/Settings.System.html#LOCATION_PROVIDERS_ALLOWED)
        #[deprecated] pub const LOCATION_PROVIDERS_ALLOWED : &'static str = "location_providers_allowed";

        /// public static final [LOCK_PATTERN_ENABLED](https://developer.android.com/reference/android/provider/Settings.System.html#LOCK_PATTERN_ENABLED)
        #[deprecated] pub const LOCK_PATTERN_ENABLED : &'static str = "lock_pattern_autolock";

        /// public static final [LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED](https://developer.android.com/reference/android/provider/Settings.System.html#LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED)
        #[deprecated] pub const LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED : &'static str = "lock_pattern_tactile_feedback_enabled";

        /// public static final [LOCK_PATTERN_VISIBLE](https://developer.android.com/reference/android/provider/Settings.System.html#LOCK_PATTERN_VISIBLE)
        #[deprecated] pub const LOCK_PATTERN_VISIBLE : &'static str = "lock_pattern_visible_pattern";

        /// public static final [LOGGING_ID](https://developer.android.com/reference/android/provider/Settings.System.html#LOGGING_ID)
        #[deprecated] pub const LOGGING_ID : &'static str = "logging_id";

        /// public static final [MODE_RINGER](https://developer.android.com/reference/android/provider/Settings.System.html#MODE_RINGER)
        #[deprecated] pub const MODE_RINGER : &'static str = "mode_ringer";

        /// public static final [MODE_RINGER_STREAMS_AFFECTED](https://developer.android.com/reference/android/provider/Settings.System.html#MODE_RINGER_STREAMS_AFFECTED)
        pub const MODE_RINGER_STREAMS_AFFECTED : &'static str = "mode_ringer_streams_affected";

        /// public static final [MUTE_STREAMS_AFFECTED](https://developer.android.com/reference/android/provider/Settings.System.html#MUTE_STREAMS_AFFECTED)
        pub const MUTE_STREAMS_AFFECTED : &'static str = "mute_streams_affected";

        /// public static final [NETWORK_PREFERENCE](https://developer.android.com/reference/android/provider/Settings.System.html#NETWORK_PREFERENCE)
        #[deprecated] pub const NETWORK_PREFERENCE : &'static str = "network_preference";

        /// public static final [NEXT_ALARM_FORMATTED](https://developer.android.com/reference/android/provider/Settings.System.html#NEXT_ALARM_FORMATTED)
        #[deprecated] pub const NEXT_ALARM_FORMATTED : &'static str = "next_alarm_formatted";

        /// public static final [NOTIFICATION_SOUND](https://developer.android.com/reference/android/provider/Settings.System.html#NOTIFICATION_SOUND)
        pub const NOTIFICATION_SOUND : &'static str = "notification_sound";

        /// public static final [PARENTAL_CONTROL_ENABLED](https://developer.android.com/reference/android/provider/Settings.System.html#PARENTAL_CONTROL_ENABLED)
        #[deprecated] pub const PARENTAL_CONTROL_ENABLED : &'static str = "parental_control_enabled";

        /// public static final [PARENTAL_CONTROL_LAST_UPDATE](https://developer.android.com/reference/android/provider/Settings.System.html#PARENTAL_CONTROL_LAST_UPDATE)
        #[deprecated] pub const PARENTAL_CONTROL_LAST_UPDATE : &'static str = "parental_control_last_update";

        /// public static final [PARENTAL_CONTROL_REDIRECT_URL](https://developer.android.com/reference/android/provider/Settings.System.html#PARENTAL_CONTROL_REDIRECT_URL)
        #[deprecated] pub const PARENTAL_CONTROL_REDIRECT_URL : &'static str = "parental_control_redirect_url";

        /// public static final [RADIO_BLUETOOTH](https://developer.android.com/reference/android/provider/Settings.System.html#RADIO_BLUETOOTH)
        #[deprecated] pub const RADIO_BLUETOOTH : &'static str = "bluetooth";

        /// public static final [RADIO_CELL](https://developer.android.com/reference/android/provider/Settings.System.html#RADIO_CELL)
        #[deprecated] pub const RADIO_CELL : &'static str = "cell";

        /// public static final [RADIO_NFC](https://developer.android.com/reference/android/provider/Settings.System.html#RADIO_NFC)
        #[deprecated] pub const RADIO_NFC : &'static str = "nfc";

        /// public static final [RADIO_WIFI](https://developer.android.com/reference/android/provider/Settings.System.html#RADIO_WIFI)
        #[deprecated] pub const RADIO_WIFI : &'static str = "wifi";

        /// public static final [RINGTONE](https://developer.android.com/reference/android/provider/Settings.System.html#RINGTONE)
        pub const RINGTONE : &'static str = "ringtone";

        /// public static final [SCREEN_BRIGHTNESS](https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_BRIGHTNESS)
        pub const SCREEN_BRIGHTNESS : &'static str = "screen_brightness";

        /// public static final [SCREEN_BRIGHTNESS_MODE](https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_BRIGHTNESS_MODE)
        pub const SCREEN_BRIGHTNESS_MODE : &'static str = "screen_brightness_mode";

        /// public static final [SCREEN_BRIGHTNESS_MODE_AUTOMATIC](https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_BRIGHTNESS_MODE_AUTOMATIC)
        pub const SCREEN_BRIGHTNESS_MODE_AUTOMATIC : i32 = 1;

        /// public static final [SCREEN_BRIGHTNESS_MODE_MANUAL](https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_BRIGHTNESS_MODE_MANUAL)
        pub const SCREEN_BRIGHTNESS_MODE_MANUAL : i32 = 0;

        /// public static final [SCREEN_OFF_TIMEOUT](https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_OFF_TIMEOUT)
        pub const SCREEN_OFF_TIMEOUT : &'static str = "screen_off_timeout";

        /// public static final [SETTINGS_CLASSNAME](https://developer.android.com/reference/android/provider/Settings.System.html#SETTINGS_CLASSNAME)
        #[deprecated] pub const SETTINGS_CLASSNAME : &'static str = "settings_classname";

        /// public static final [SETUP_WIZARD_HAS_RUN](https://developer.android.com/reference/android/provider/Settings.System.html#SETUP_WIZARD_HAS_RUN)
        pub const SETUP_WIZARD_HAS_RUN : &'static str = "setup_wizard_has_run";

        /// public static final [SHOW_GTALK_SERVICE_STATUS](https://developer.android.com/reference/android/provider/Settings.System.html#SHOW_GTALK_SERVICE_STATUS)
        pub const SHOW_GTALK_SERVICE_STATUS : &'static str = "SHOW_GTALK_SERVICE_STATUS";

        /// public static final [SHOW_PROCESSES](https://developer.android.com/reference/android/provider/Settings.System.html#SHOW_PROCESSES)
        #[deprecated] pub const SHOW_PROCESSES : &'static str = "show_processes";

        /// public static final [SHOW_WEB_SUGGESTIONS](https://developer.android.com/reference/android/provider/Settings.System.html#SHOW_WEB_SUGGESTIONS)
        #[deprecated] pub const SHOW_WEB_SUGGESTIONS : &'static str = "show_web_suggestions";

        /// public static final [SOUND_EFFECTS_ENABLED](https://developer.android.com/reference/android/provider/Settings.System.html#SOUND_EFFECTS_ENABLED)
        pub const SOUND_EFFECTS_ENABLED : &'static str = "sound_effects_enabled";

        /// public static final [STAY_ON_WHILE_PLUGGED_IN](https://developer.android.com/reference/android/provider/Settings.System.html#STAY_ON_WHILE_PLUGGED_IN)
        #[deprecated] pub const STAY_ON_WHILE_PLUGGED_IN : &'static str = "stay_on_while_plugged_in";

        /// public static final [TEXT_AUTO_CAPS](https://developer.android.com/reference/android/provider/Settings.System.html#TEXT_AUTO_CAPS)
        pub const TEXT_AUTO_CAPS : &'static str = "auto_caps";

        /// public static final [TEXT_AUTO_PUNCTUATE](https://developer.android.com/reference/android/provider/Settings.System.html#TEXT_AUTO_PUNCTUATE)
        pub const TEXT_AUTO_PUNCTUATE : &'static str = "auto_punctuate";

        /// public static final [TEXT_AUTO_REPLACE](https://developer.android.com/reference/android/provider/Settings.System.html#TEXT_AUTO_REPLACE)
        pub const TEXT_AUTO_REPLACE : &'static str = "auto_replace";

        /// public static final [TEXT_SHOW_PASSWORD](https://developer.android.com/reference/android/provider/Settings.System.html#TEXT_SHOW_PASSWORD)
        pub const TEXT_SHOW_PASSWORD : &'static str = "show_password";

        /// public static final [TIME_12_24](https://developer.android.com/reference/android/provider/Settings.System.html#TIME_12_24)
        pub const TIME_12_24 : &'static str = "time_12_24";

        /// public static final [TRANSITION_ANIMATION_SCALE](https://developer.android.com/reference/android/provider/Settings.System.html#TRANSITION_ANIMATION_SCALE)
        #[deprecated] pub const TRANSITION_ANIMATION_SCALE : &'static str = "transition_animation_scale";

        /// public static final [USB_MASS_STORAGE_ENABLED](https://developer.android.com/reference/android/provider/Settings.System.html#USB_MASS_STORAGE_ENABLED)
        #[deprecated] pub const USB_MASS_STORAGE_ENABLED : &'static str = "usb_mass_storage_enabled";

        /// public static final [USER_ROTATION](https://developer.android.com/reference/android/provider/Settings.System.html#USER_ROTATION)
        pub const USER_ROTATION : &'static str = "user_rotation";

        /// public static final [USE_GOOGLE_MAIL](https://developer.android.com/reference/android/provider/Settings.System.html#USE_GOOGLE_MAIL)
        #[deprecated] pub const USE_GOOGLE_MAIL : &'static str = "use_google_mail";

        /// public static final [VIBRATE_ON](https://developer.android.com/reference/android/provider/Settings.System.html#VIBRATE_ON)
        pub const VIBRATE_ON : &'static str = "vibrate_on";

        /// public static final [VIBRATE_WHEN_RINGING](https://developer.android.com/reference/android/provider/Settings.System.html#VIBRATE_WHEN_RINGING)
        pub const VIBRATE_WHEN_RINGING : &'static str = "vibrate_when_ringing";

        /// public static final [WAIT_FOR_DEBUGGER](https://developer.android.com/reference/android/provider/Settings.System.html#WAIT_FOR_DEBUGGER)
        #[deprecated] pub const WAIT_FOR_DEBUGGER : &'static str = "wait_for_debugger";

        /// public static final [WALLPAPER_ACTIVITY](https://developer.android.com/reference/android/provider/Settings.System.html#WALLPAPER_ACTIVITY)
        #[deprecated] pub const WALLPAPER_ACTIVITY : &'static str = "wallpaper_activity";

        /// public static final [WIFI_MAX_DHCP_RETRY_COUNT](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_MAX_DHCP_RETRY_COUNT)
        #[deprecated] pub const WIFI_MAX_DHCP_RETRY_COUNT : &'static str = "wifi_max_dhcp_retry_count";

        /// public static final [WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS)
        #[deprecated] pub const WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS : &'static str = "wifi_mobile_data_transition_wakelock_timeout_ms";

        /// public static final [WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON)
        #[deprecated] pub const WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON : &'static str = "wifi_networks_available_notification_on";

        /// public static final [WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY)
        #[deprecated] pub const WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY : &'static str = "wifi_networks_available_repeat_delay";

        /// public static final [WIFI_NUM_OPEN_NETWORKS_KEPT](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_NUM_OPEN_NETWORKS_KEPT)
        #[deprecated] pub const WIFI_NUM_OPEN_NETWORKS_KEPT : &'static str = "wifi_num_open_networks_kept";

        /// public static final [WIFI_ON](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_ON)
        #[deprecated] pub const WIFI_ON : &'static str = "wifi_on";

        /// public static final [WIFI_SLEEP_POLICY](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_SLEEP_POLICY)
        #[deprecated] pub const WIFI_SLEEP_POLICY : &'static str = "wifi_sleep_policy";

        /// public static final [WIFI_SLEEP_POLICY_DEFAULT](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_SLEEP_POLICY_DEFAULT)
        #[deprecated] pub const WIFI_SLEEP_POLICY_DEFAULT : i32 = 0;

        /// public static final [WIFI_SLEEP_POLICY_NEVER](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_SLEEP_POLICY_NEVER)
        #[deprecated] pub const WIFI_SLEEP_POLICY_NEVER : i32 = 2;

        /// public static final [WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED)
        #[deprecated] pub const WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED : i32 = 1;

        /// public static final [WIFI_STATIC_DNS1](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_DNS1)
        #[deprecated] pub const WIFI_STATIC_DNS1 : &'static str = "wifi_static_dns1";

        /// public static final [WIFI_STATIC_DNS2](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_DNS2)
        #[deprecated] pub const WIFI_STATIC_DNS2 : &'static str = "wifi_static_dns2";

        /// public static final [WIFI_STATIC_GATEWAY](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_GATEWAY)
        #[deprecated] pub const WIFI_STATIC_GATEWAY : &'static str = "wifi_static_gateway";

        /// public static final [WIFI_STATIC_IP](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_IP)
        #[deprecated] pub const WIFI_STATIC_IP : &'static str = "wifi_static_ip";

        /// public static final [WIFI_STATIC_NETMASK](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_NETMASK)
        #[deprecated] pub const WIFI_STATIC_NETMASK : &'static str = "wifi_static_netmask";

        /// public static final [WIFI_USE_STATIC_IP](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_USE_STATIC_IP)
        #[deprecated] pub const WIFI_USE_STATIC_IP : &'static str = "wifi_use_static_ip";

        /// public static final [WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE)
        #[deprecated] pub const WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE : &'static str = "wifi_watchdog_acceptable_packet_loss_percentage";

        /// public static final [WIFI_WATCHDOG_AP_COUNT](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_AP_COUNT)
        #[deprecated] pub const WIFI_WATCHDOG_AP_COUNT : &'static str = "wifi_watchdog_ap_count";

        /// public static final [WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS)
        #[deprecated] pub const WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS : &'static str = "wifi_watchdog_background_check_delay_ms";

        /// public static final [WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED)
        #[deprecated] pub const WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED : &'static str = "wifi_watchdog_background_check_enabled";

        /// public static final [WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS)
        #[deprecated] pub const WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS : &'static str = "wifi_watchdog_background_check_timeout_ms";

        /// public static final [WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT)
        #[deprecated] pub const WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT : &'static str = "wifi_watchdog_initial_ignored_ping_count";

        /// public static final [WIFI_WATCHDOG_MAX_AP_CHECKS](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_MAX_AP_CHECKS)
        #[deprecated] pub const WIFI_WATCHDOG_MAX_AP_CHECKS : &'static str = "wifi_watchdog_max_ap_checks";

        /// public static final [WIFI_WATCHDOG_ON](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_ON)
        #[deprecated] pub const WIFI_WATCHDOG_ON : &'static str = "wifi_watchdog_on";

        /// public static final [WIFI_WATCHDOG_PING_COUNT](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_PING_COUNT)
        #[deprecated] pub const WIFI_WATCHDOG_PING_COUNT : &'static str = "wifi_watchdog_ping_count";

        /// public static final [WIFI_WATCHDOG_PING_DELAY_MS](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_PING_DELAY_MS)
        #[deprecated] pub const WIFI_WATCHDOG_PING_DELAY_MS : &'static str = "wifi_watchdog_ping_delay_ms";

        /// public static final [WIFI_WATCHDOG_PING_TIMEOUT_MS](https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_PING_TIMEOUT_MS)
        #[deprecated] pub const WIFI_WATCHDOG_PING_TIMEOUT_MS : &'static str = "wifi_watchdog_ping_timeout_ms";

        /// public static final [WINDOW_ANIMATION_SCALE](https://developer.android.com/reference/android/provider/Settings.System.html#WINDOW_ANIMATION_SCALE)
        #[deprecated] pub const WINDOW_ANIMATION_SCALE : &'static str = "window_animation_scale";
    }
}
