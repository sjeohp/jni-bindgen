// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-provider-FontsContract_FontInfo"))]
__jni_bindgen! {
    /// public class [FontsContract.FontInfo](https://developer.android.com/reference/android/provider/FontsContract.FontInfo.html)
    ///
    /// Required feature: android-provider-FontsContract_FontInfo
    public class FontsContract_FontInfo ("android/provider/FontsContract$FontInfo") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [FontInfo](https://developer.android.com/reference/android/provider/FontsContract.FontInfo.html#FontInfo(android.net.Uri,%20int,%20android.graphics.fonts.FontVariationAxis%5B%5D,%20int,%20boolean,%20int))
        // ///
        // /// Required features: "android-graphics-fonts-FontVariationAxis", "android-net-Uri"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-fonts-FontVariationAxis", feature = "android-net-Uri")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::graphics::fonts::FontVariationAxis, crate::java::lang::Throwable>>>, arg3: i32, arg4: bool, arg5: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::provider::FontsContract_FontInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/provider/FontsContract$FontInfo", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/net/Uri;I[Landroid/graphics/fonts/FontVariationAxis;IZI)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/FontsContract$FontInfo\0", "<init>\0", "(Landroid/net/Uri;I[Landroid/graphics/fonts/FontVariationAxis;IZI)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getUri](https://developer.android.com/reference/android/provider/FontsContract.FontInfo.html#getUri())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getUri<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/FontsContract$FontInfo", java.flags == PUBLIC, .name == "getUri", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/FontsContract$FontInfo\0", "getUri\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTtcIndex](https://developer.android.com/reference/android/provider/FontsContract.FontInfo.html#getTtcIndex())
        pub fn getTtcIndex<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/FontsContract$FontInfo", java.flags == PUBLIC, .name == "getTtcIndex", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/FontsContract$FontInfo\0", "getTtcIndex\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAxes](https://developer.android.com/reference/android/provider/FontsContract.FontInfo.html#getAxes())
        ///
        /// Required features: "android-graphics-fonts-FontVariationAxis"
        #[cfg(any(feature = "all", all(feature = "android-graphics-fonts-FontVariationAxis")))]
        pub fn getAxes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::graphics::fonts::FontVariationAxis, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/FontsContract$FontInfo", java.flags == PUBLIC, .name == "getAxes", .descriptor == "()[Landroid/graphics/fonts/FontVariationAxis;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/FontsContract$FontInfo\0", "getAxes\0", "()[Landroid/graphics/fonts/FontVariationAxis;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWeight](https://developer.android.com/reference/android/provider/FontsContract.FontInfo.html#getWeight())
        pub fn getWeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/FontsContract$FontInfo", java.flags == PUBLIC, .name == "getWeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/FontsContract$FontInfo\0", "getWeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isItalic](https://developer.android.com/reference/android/provider/FontsContract.FontInfo.html#isItalic())
        pub fn isItalic<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/FontsContract$FontInfo", java.flags == PUBLIC, .name == "isItalic", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/FontsContract$FontInfo\0", "isItalic\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResultCode](https://developer.android.com/reference/android/provider/FontsContract.FontInfo.html#getResultCode())
        pub fn getResultCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/provider/FontsContract$FontInfo", java.flags == PUBLIC, .name == "getResultCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/provider/FontsContract$FontInfo\0", "getResultCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
