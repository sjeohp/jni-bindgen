// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-parsers-SAXParserFactory"))]
__jni_bindgen! {
    /// public class [SAXParserFactory](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html)
    ///
    /// Required feature: javax-xml-parsers-SAXParserFactory
    public class SAXParserFactory ("javax/xml/parsers/SAXParserFactory") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SAXParserFactory](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#SAXParserFactory())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::parsers::SAXParserFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newInstance](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#newInstance())
        ///
        /// Required features: "javax-xml-parsers-SAXParserFactory"
        #[cfg(any(feature = "all", all(feature = "javax-xml-parsers-SAXParserFactory")))]
        pub fn newInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::parsers::SAXParserFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "()Ljavax/xml/parsers/SAXParserFactory;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/xml/parsers/SAXParserFactory\0", "newInstance\0", "()Ljavax/xml/parsers/SAXParserFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#newInstance(java.lang.String,%20java.lang.ClassLoader))
        ///
        /// Required features: "java-lang-ClassLoader", "java-lang-String", "javax-xml-parsers-SAXParserFactory"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader", feature = "java-lang-String", feature = "javax-xml-parsers-SAXParserFactory")))]
        pub fn newInstance_String_ClassLoader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::parsers::SAXParserFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljavax/xml/parsers/SAXParserFactory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/xml/parsers/SAXParserFactory\0", "newInstance\0", "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljavax/xml/parsers/SAXParserFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSAXParser](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#newSAXParser())
        ///
        /// Required features: "javax-xml-parsers-SAXParser"
        #[cfg(any(feature = "all", all(feature = "javax-xml-parsers-SAXParser")))]
        pub fn newSAXParser<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::parsers::SAXParser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC | ABSTRACT, .name == "newSAXParser", .descriptor == "()Ljavax/xml/parsers/SAXParser;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "newSAXParser\0", "()Ljavax/xml/parsers/SAXParser;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNamespaceAware](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#setNamespaceAware(boolean))
        pub fn setNamespaceAware<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC, .name == "setNamespaceAware", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "setNamespaceAware\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setValidating](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#setValidating(boolean))
        pub fn setValidating<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC, .name == "setValidating", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "setValidating\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNamespaceAware](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#isNamespaceAware())
        pub fn isNamespaceAware<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC, .name == "isNamespaceAware", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "isNamespaceAware\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isValidating](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#isValidating())
        pub fn isValidating<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC, .name == "isValidating", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "isValidating\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeature](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#setFeature(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC | ABSTRACT, .name == "setFeature", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "setFeature\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFeature](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#getFeature(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC | ABSTRACT, .name == "getFeature", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "getFeature\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSchema](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#getSchema())
        ///
        /// Required features: "javax-xml-validation-Schema"
        #[cfg(any(feature = "all", all(feature = "javax-xml-validation-Schema")))]
        pub fn getSchema<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::validation::Schema>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC, .name == "getSchema", .descriptor == "()Ljavax/xml/validation/Schema;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "getSchema\0", "()Ljavax/xml/validation/Schema;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSchema](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#setSchema(javax.xml.validation.Schema))
        ///
        /// Required features: "javax-xml-validation-Schema"
        #[cfg(any(feature = "all", all(feature = "javax-xml-validation-Schema")))]
        pub fn setSchema<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::validation::Schema>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC, .name == "setSchema", .descriptor == "(Ljavax/xml/validation/Schema;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "setSchema\0", "(Ljavax/xml/validation/Schema;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setXIncludeAware](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#setXIncludeAware(boolean))
        pub fn setXIncludeAware<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC, .name == "setXIncludeAware", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "setXIncludeAware\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isXIncludeAware](https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html#isXIncludeAware())
        pub fn isXIncludeAware<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/parsers/SAXParserFactory", java.flags == PUBLIC, .name == "isXIncludeAware", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/parsers/SAXParserFactory\0", "isXIncludeAware\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
