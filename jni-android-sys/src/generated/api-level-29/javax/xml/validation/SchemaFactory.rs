// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-validation-SchemaFactory"))]
__jni_bindgen! {
    /// public class [SchemaFactory](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html)
    ///
    /// Required feature: javax-xml-validation-SchemaFactory
    public class SchemaFactory ("javax/xml/validation/SchemaFactory") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SchemaFactory](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#SchemaFactory())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::validation::SchemaFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/xml/validation/SchemaFactory", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newInstance](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#newInstance(java.lang.String))
        ///
        /// Required features: "java-lang-String", "javax-xml-validation-SchemaFactory"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "javax-xml-validation-SchemaFactory")))]
        pub fn newInstance_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::validation::SchemaFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/lang/String;)Ljavax/xml/validation/SchemaFactory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/xml/validation/SchemaFactory\0", "newInstance\0", "(Ljava/lang/String;)Ljavax/xml/validation/SchemaFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#newInstance(java.lang.String,%20java.lang.String,%20java.lang.ClassLoader))
        ///
        /// Required features: "java-lang-ClassLoader", "java-lang-String", "javax-xml-validation-SchemaFactory"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader", feature = "java-lang-String", feature = "javax-xml-validation-SchemaFactory")))]
        pub fn newInstance_String_String_ClassLoader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::validation::SchemaFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)Ljavax/xml/validation/SchemaFactory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/xml/validation/SchemaFactory\0", "newInstance\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)Ljavax/xml/validation/SchemaFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSchemaLanguageSupported](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#isSchemaLanguageSupported(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isSchemaLanguageSupported<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC | ABSTRACT, .name == "isSchemaLanguageSupported", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "isSchemaLanguageSupported\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFeature](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#getFeature(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC, .name == "getFeature", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "getFeature\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeature](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#setFeature(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC, .name == "setFeature", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "setFeature\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProperty](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#setProperty(java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn setProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC, .name == "setProperty", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "setProperty\0", "(Ljava/lang/String;Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProperty](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#getProperty(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC, .name == "getProperty", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "getProperty\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setErrorHandler](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#setErrorHandler(org.xml.sax.ErrorHandler))
        ///
        /// Required features: "org-xml-sax-ErrorHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ErrorHandler")))]
        pub fn setErrorHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::ErrorHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC | ABSTRACT, .name == "setErrorHandler", .descriptor == "(Lorg/xml/sax/ErrorHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "setErrorHandler\0", "(Lorg/xml/sax/ErrorHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getErrorHandler](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#getErrorHandler())
        ///
        /// Required features: "org-xml-sax-ErrorHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ErrorHandler")))]
        pub fn getErrorHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::ErrorHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC | ABSTRACT, .name == "getErrorHandler", .descriptor == "()Lorg/xml/sax/ErrorHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "getErrorHandler\0", "()Lorg/xml/sax/ErrorHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setResourceResolver](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#setResourceResolver(org.w3c.dom.ls.LSResourceResolver))
        ///
        /// Required features: "org-w3c-dom-ls-LSResourceResolver"
        #[cfg(any(feature = "all", all(feature = "org-w3c-dom-ls-LSResourceResolver")))]
        pub fn setResourceResolver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::w3c::dom::ls::LSResourceResolver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC | ABSTRACT, .name == "setResourceResolver", .descriptor == "(Lorg/w3c/dom/ls/LSResourceResolver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "setResourceResolver\0", "(Lorg/w3c/dom/ls/LSResourceResolver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourceResolver](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#getResourceResolver())
        ///
        /// Required features: "org-w3c-dom-ls-LSResourceResolver"
        #[cfg(any(feature = "all", all(feature = "org-w3c-dom-ls-LSResourceResolver")))]
        pub fn getResourceResolver<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::w3c::dom::ls::LSResourceResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC | ABSTRACT, .name == "getResourceResolver", .descriptor == "()Lorg/w3c/dom/ls/LSResourceResolver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "getResourceResolver\0", "()Lorg/w3c/dom/ls/LSResourceResolver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSchema](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#newSchema(javax.xml.transform.Source))
        ///
        /// Required features: "javax-xml-transform-Source", "javax-xml-validation-Schema"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Source", feature = "javax-xml-validation-Schema")))]
        pub fn newSchema_Source<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Source>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::validation::Schema>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC, .name == "newSchema", .descriptor == "(Ljavax/xml/transform/Source;)Ljavax/xml/validation/Schema;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "newSchema\0", "(Ljavax/xml/transform/Source;)Ljavax/xml/validation/Schema;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSchema](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#newSchema(java.io.File))
        ///
        /// Required features: "java-io-File", "javax-xml-validation-Schema"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "javax-xml-validation-Schema")))]
        pub fn newSchema_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::validation::Schema>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC, .name == "newSchema", .descriptor == "(Ljava/io/File;)Ljavax/xml/validation/Schema;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "newSchema\0", "(Ljava/io/File;)Ljavax/xml/validation/Schema;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSchema](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#newSchema(java.net.URL))
        ///
        /// Required features: "java-net-URL", "javax-xml-validation-Schema"
        #[cfg(any(feature = "all", all(feature = "java-net-URL", feature = "javax-xml-validation-Schema")))]
        pub fn newSchema_URL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::validation::Schema>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC, .name == "newSchema", .descriptor == "(Ljava/net/URL;)Ljavax/xml/validation/Schema;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "newSchema\0", "(Ljava/net/URL;)Ljavax/xml/validation/Schema;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSchema](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#newSchema(javax.xml.transform.Source%5B%5D))
        ///
        /// Required features: "javax-xml-transform-Source", "javax-xml-validation-Schema"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Source", feature = "javax-xml-validation-Schema")))]
        pub fn newSchema_Source_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::javax::xml::transform::Source, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::validation::Schema>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC | ABSTRACT, .name == "newSchema", .descriptor == "([Ljavax/xml/transform/Source;)Ljavax/xml/validation/Schema;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "newSchema\0", "([Ljavax/xml/transform/Source;)Ljavax/xml/validation/Schema;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSchema](https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html#newSchema())
        ///
        /// Required features: "javax-xml-validation-Schema"
        #[cfg(any(feature = "all", all(feature = "javax-xml-validation-Schema")))]
        pub fn newSchema<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::validation::Schema>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/validation/SchemaFactory", java.flags == PUBLIC | ABSTRACT, .name == "newSchema", .descriptor == "()Ljavax/xml/validation/Schema;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/validation/SchemaFactory\0", "newSchema\0", "()Ljavax/xml/validation/Schema;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
