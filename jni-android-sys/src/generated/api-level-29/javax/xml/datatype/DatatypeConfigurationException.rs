// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-datatype-DatatypeConfigurationException"))]
__jni_bindgen! {
    /// public class [DatatypeConfigurationException](https://developer.android.com/reference/javax/xml/datatype/DatatypeConfigurationException.html)
    ///
    /// Required feature: javax-xml-datatype-DatatypeConfigurationException
    public class DatatypeConfigurationException ("javax/xml/datatype/DatatypeConfigurationException") extends crate::java::lang::Exception {

        /// [DatatypeConfigurationException](https://developer.android.com/reference/javax/xml/datatype/DatatypeConfigurationException.html#DatatypeConfigurationException())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::datatype::DatatypeConfigurationException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/datatype/DatatypeConfigurationException", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/datatype/DatatypeConfigurationException\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatatypeConfigurationException](https://developer.android.com/reference/javax/xml/datatype/DatatypeConfigurationException.html#DatatypeConfigurationException(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::datatype::DatatypeConfigurationException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/datatype/DatatypeConfigurationException", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/datatype/DatatypeConfigurationException\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatatypeConfigurationException](https://developer.android.com/reference/javax/xml/datatype/DatatypeConfigurationException.html#DatatypeConfigurationException(java.lang.String,%20java.lang.Throwable))
        ///
        /// Required features: "java-lang-String", "java-lang-Throwable"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-lang-Throwable")))]
        pub fn new_String_Throwable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Throwable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::datatype::DatatypeConfigurationException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/datatype/DatatypeConfigurationException", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/lang/Throwable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/datatype/DatatypeConfigurationException\0", "<init>\0", "(Ljava/lang/String;Ljava/lang/Throwable;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatatypeConfigurationException](https://developer.android.com/reference/javax/xml/datatype/DatatypeConfigurationException.html#DatatypeConfigurationException(java.lang.Throwable))
        ///
        /// Required features: "java-lang-Throwable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Throwable")))]
        pub fn new_Throwable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Throwable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::datatype::DatatypeConfigurationException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/datatype/DatatypeConfigurationException", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/Throwable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/datatype/DatatypeConfigurationException\0", "<init>\0", "(Ljava/lang/Throwable;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [printStackTrace](https://developer.android.com/reference/javax/xml/datatype/DatatypeConfigurationException.html#printStackTrace())
        pub fn printStackTrace<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/datatype/DatatypeConfigurationException", java.flags == PUBLIC, .name == "printStackTrace", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/datatype/DatatypeConfigurationException\0", "printStackTrace\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [printStackTrace](https://developer.android.com/reference/javax/xml/datatype/DatatypeConfigurationException.html#printStackTrace(java.io.PrintStream))
        ///
        /// Required features: "java-io-PrintStream"
        #[cfg(any(feature = "all", all(feature = "java-io-PrintStream")))]
        pub fn printStackTrace_PrintStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/datatype/DatatypeConfigurationException", java.flags == PUBLIC, .name == "printStackTrace", .descriptor == "(Ljava/io/PrintStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/datatype/DatatypeConfigurationException\0", "printStackTrace\0", "(Ljava/io/PrintStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [printStackTrace](https://developer.android.com/reference/javax/xml/datatype/DatatypeConfigurationException.html#printStackTrace(java.io.PrintWriter))
        ///
        /// Required features: "java-io-PrintWriter"
        #[cfg(any(feature = "all", all(feature = "java-io-PrintWriter")))]
        pub fn printStackTrace_PrintWriter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintWriter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/datatype/DatatypeConfigurationException", java.flags == PUBLIC, .name == "printStackTrace", .descriptor == "(Ljava/io/PrintWriter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/datatype/DatatypeConfigurationException\0", "printStackTrace\0", "(Ljava/io/PrintWriter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
