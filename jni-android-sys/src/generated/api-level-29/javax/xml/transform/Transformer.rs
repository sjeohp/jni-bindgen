// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-transform-Transformer"))]
__jni_bindgen! {
    /// public class [Transformer](https://developer.android.com/reference/javax/xml/transform/Transformer.html)
    ///
    /// Required feature: javax-xml-transform-Transformer
    public class Transformer ("javax/xml/transform/Transformer") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Transformer](https://developer.android.com/reference/javax/xml/transform/Transformer.html#Transformer())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::transform::Transformer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/xml/transform/Transformer", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [reset](https://developer.android.com/reference/javax/xml/transform/Transformer.html#reset())
        pub fn reset<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC, .name == "reset", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "reset\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transform](https://developer.android.com/reference/javax/xml/transform/Transformer.html#transform(javax.xml.transform.Source,%20javax.xml.transform.Result))
        ///
        /// Required features: "javax-xml-transform-Result", "javax-xml-transform-Source"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Result", feature = "javax-xml-transform-Source")))]
        pub fn transform<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Source>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Result>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "transform", .descriptor == "(Ljavax/xml/transform/Source;Ljavax/xml/transform/Result;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "transform\0", "(Ljavax/xml/transform/Source;Ljavax/xml/transform/Result;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setParameter](https://developer.android.com/reference/javax/xml/transform/Transformer.html#setParameter(java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn setParameter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "setParameter", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "setParameter\0", "(Ljava/lang/String;Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParameter](https://developer.android.com/reference/javax/xml/transform/Transformer.html#getParameter(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getParameter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "getParameter", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "getParameter\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearParameters](https://developer.android.com/reference/javax/xml/transform/Transformer.html#clearParameters())
        pub fn clearParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "clearParameters", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "clearParameters\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setURIResolver](https://developer.android.com/reference/javax/xml/transform/Transformer.html#setURIResolver(javax.xml.transform.URIResolver))
        ///
        /// Required features: "javax-xml-transform-URIResolver"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-URIResolver")))]
        pub fn setURIResolver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::URIResolver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "setURIResolver", .descriptor == "(Ljavax/xml/transform/URIResolver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "setURIResolver\0", "(Ljavax/xml/transform/URIResolver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getURIResolver](https://developer.android.com/reference/javax/xml/transform/Transformer.html#getURIResolver())
        ///
        /// Required features: "javax-xml-transform-URIResolver"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-URIResolver")))]
        pub fn getURIResolver<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::URIResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "getURIResolver", .descriptor == "()Ljavax/xml/transform/URIResolver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "getURIResolver\0", "()Ljavax/xml/transform/URIResolver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutputProperties](https://developer.android.com/reference/javax/xml/transform/Transformer.html#setOutputProperties(java.util.Properties))
        ///
        /// Required features: "java-util-Properties"
        #[cfg(any(feature = "all", all(feature = "java-util-Properties")))]
        pub fn setOutputProperties<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Properties>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "setOutputProperties", .descriptor == "(Ljava/util/Properties;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "setOutputProperties\0", "(Ljava/util/Properties;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputProperties](https://developer.android.com/reference/javax/xml/transform/Transformer.html#getOutputProperties())
        ///
        /// Required features: "java-util-Properties"
        #[cfg(any(feature = "all", all(feature = "java-util-Properties")))]
        pub fn getOutputProperties<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Properties>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "getOutputProperties", .descriptor == "()Ljava/util/Properties;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "getOutputProperties\0", "()Ljava/util/Properties;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutputProperty](https://developer.android.com/reference/javax/xml/transform/Transformer.html#setOutputProperty(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setOutputProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "setOutputProperty", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "setOutputProperty\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputProperty](https://developer.android.com/reference/javax/xml/transform/Transformer.html#getOutputProperty(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getOutputProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "getOutputProperty", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "getOutputProperty\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setErrorListener](https://developer.android.com/reference/javax/xml/transform/Transformer.html#setErrorListener(javax.xml.transform.ErrorListener))
        ///
        /// Required features: "javax-xml-transform-ErrorListener"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-ErrorListener")))]
        pub fn setErrorListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::ErrorListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "setErrorListener", .descriptor == "(Ljavax/xml/transform/ErrorListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "setErrorListener\0", "(Ljavax/xml/transform/ErrorListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getErrorListener](https://developer.android.com/reference/javax/xml/transform/Transformer.html#getErrorListener())
        ///
        /// Required features: "javax-xml-transform-ErrorListener"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-ErrorListener")))]
        pub fn getErrorListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::ErrorListener>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/Transformer", java.flags == PUBLIC | ABSTRACT, .name == "getErrorListener", .descriptor == "()Ljavax/xml/transform/ErrorListener;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/Transformer\0", "getErrorListener\0", "()Ljavax/xml/transform/ErrorListener;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
