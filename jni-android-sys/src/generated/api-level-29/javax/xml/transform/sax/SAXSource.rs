// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-transform-sax-SAXSource"))]
__jni_bindgen! {
    /// public class [SAXSource](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html)
    ///
    /// Required feature: javax-xml-transform-sax-SAXSource
    public class SAXSource ("javax/xml/transform/sax/SAXSource") extends crate::java::lang::Object, implements crate::javax::xml::transform::Source {

        /// [SAXSource](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#SAXSource())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::transform::sax::SAXSource>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXSource\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SAXSource](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#SAXSource(org.xml.sax.XMLReader,%20org.xml.sax.InputSource))
        ///
        /// Required features: "org-xml-sax-InputSource", "org-xml-sax-XMLReader"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-InputSource", feature = "org-xml-sax-XMLReader")))]
        pub fn new_XMLReader_InputSource<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::XMLReader>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::InputSource>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::transform::sax::SAXSource>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Lorg/xml/sax/XMLReader;Lorg/xml/sax/InputSource;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXSource\0", "<init>\0", "(Lorg/xml/sax/XMLReader;Lorg/xml/sax/InputSource;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SAXSource](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#SAXSource(org.xml.sax.InputSource))
        ///
        /// Required features: "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-InputSource")))]
        pub fn new_InputSource<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::InputSource>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::transform::sax::SAXSource>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Lorg/xml/sax/InputSource;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXSource\0", "<init>\0", "(Lorg/xml/sax/InputSource;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setXMLReader](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#setXMLReader(org.xml.sax.XMLReader))
        ///
        /// Required features: "org-xml-sax-XMLReader"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-XMLReader")))]
        pub fn setXMLReader<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::XMLReader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC, .name == "setXMLReader", .descriptor == "(Lorg/xml/sax/XMLReader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXSource\0", "setXMLReader\0", "(Lorg/xml/sax/XMLReader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getXMLReader](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#getXMLReader())
        ///
        /// Required features: "org-xml-sax-XMLReader"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-XMLReader")))]
        pub fn getXMLReader<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::XMLReader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC, .name == "getXMLReader", .descriptor == "()Lorg/xml/sax/XMLReader;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXSource\0", "getXMLReader\0", "()Lorg/xml/sax/XMLReader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputSource](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#setInputSource(org.xml.sax.InputSource))
        ///
        /// Required features: "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-InputSource")))]
        pub fn setInputSource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::InputSource>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC, .name == "setInputSource", .descriptor == "(Lorg/xml/sax/InputSource;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXSource\0", "setInputSource\0", "(Lorg/xml/sax/InputSource;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputSource](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#getInputSource())
        ///
        /// Required features: "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-InputSource")))]
        pub fn getInputSource<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::InputSource>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC, .name == "getInputSource", .descriptor == "()Lorg/xml/sax/InputSource;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXSource\0", "getInputSource\0", "()Lorg/xml/sax/InputSource;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSystemId](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#setSystemId(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setSystemId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC, .name == "setSystemId", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXSource\0", "setSystemId\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemId](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#getSystemId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSystemId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC, .name == "getSystemId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXSource\0", "getSystemId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sourceToInputSource](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#sourceToInputSource(javax.xml.transform.Source))
        ///
        /// Required features: "javax-xml-transform-Source", "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Source", feature = "org-xml-sax-InputSource")))]
        pub fn sourceToInputSource<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Source>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::InputSource>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXSource", java.flags == PUBLIC | STATIC, .name == "sourceToInputSource", .descriptor == "(Ljavax/xml/transform/Source;)Lorg/xml/sax/InputSource;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/xml/transform/sax/SAXSource\0", "sourceToInputSource\0", "(Ljavax/xml/transform/Source;)Lorg/xml/sax/InputSource;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [FEATURE](https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html#FEATURE)
        pub const FEATURE : &'static str = "http://javax.xml.transform.sax.SAXSource/feature";
    }
}
