// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-transform-sax-SAXTransformerFactory"))]
__jni_bindgen! {
    /// public class [SAXTransformerFactory](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html)
    ///
    /// Required feature: javax-xml-transform-sax-SAXTransformerFactory
    public class SAXTransformerFactory ("javax/xml/transform/sax/SAXTransformerFactory") extends crate::javax::xml::transform::TransformerFactory {

        // // Not emitting: Non-public method
        // /// [SAXTransformerFactory](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html#SAXTransformerFactory())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::transform::sax::SAXTransformerFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/xml/transform/sax/SAXTransformerFactory", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXTransformerFactory\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newTransformerHandler](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html#newTransformerHandler(javax.xml.transform.Source))
        ///
        /// Required features: "javax-xml-transform-Source", "javax-xml-transform-sax-TransformerHandler"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Source", feature = "javax-xml-transform-sax-TransformerHandler")))]
        pub fn newTransformerHandler_Source<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Source>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::sax::TransformerHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXTransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "newTransformerHandler", .descriptor == "(Ljavax/xml/transform/Source;)Ljavax/xml/transform/sax/TransformerHandler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXTransformerFactory\0", "newTransformerHandler\0", "(Ljavax/xml/transform/Source;)Ljavax/xml/transform/sax/TransformerHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newTransformerHandler](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html#newTransformerHandler(javax.xml.transform.Templates))
        ///
        /// Required features: "javax-xml-transform-Templates", "javax-xml-transform-sax-TransformerHandler"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Templates", feature = "javax-xml-transform-sax-TransformerHandler")))]
        pub fn newTransformerHandler_Templates<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Templates>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::sax::TransformerHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXTransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "newTransformerHandler", .descriptor == "(Ljavax/xml/transform/Templates;)Ljavax/xml/transform/sax/TransformerHandler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXTransformerFactory\0", "newTransformerHandler\0", "(Ljavax/xml/transform/Templates;)Ljavax/xml/transform/sax/TransformerHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newTransformerHandler](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html#newTransformerHandler())
        ///
        /// Required features: "javax-xml-transform-sax-TransformerHandler"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-sax-TransformerHandler")))]
        pub fn newTransformerHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::sax::TransformerHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXTransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "newTransformerHandler", .descriptor == "()Ljavax/xml/transform/sax/TransformerHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXTransformerFactory\0", "newTransformerHandler\0", "()Ljavax/xml/transform/sax/TransformerHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newTemplatesHandler](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html#newTemplatesHandler())
        ///
        /// Required features: "javax-xml-transform-sax-TemplatesHandler"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-sax-TemplatesHandler")))]
        pub fn newTemplatesHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::sax::TemplatesHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXTransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "newTemplatesHandler", .descriptor == "()Ljavax/xml/transform/sax/TemplatesHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXTransformerFactory\0", "newTemplatesHandler\0", "()Ljavax/xml/transform/sax/TemplatesHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newXMLFilter](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html#newXMLFilter(javax.xml.transform.Source))
        ///
        /// Required features: "javax-xml-transform-Source", "org-xml-sax-XMLFilter"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Source", feature = "org-xml-sax-XMLFilter")))]
        pub fn newXMLFilter_Source<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Source>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::XMLFilter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXTransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "newXMLFilter", .descriptor == "(Ljavax/xml/transform/Source;)Lorg/xml/sax/XMLFilter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXTransformerFactory\0", "newXMLFilter\0", "(Ljavax/xml/transform/Source;)Lorg/xml/sax/XMLFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newXMLFilter](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html#newXMLFilter(javax.xml.transform.Templates))
        ///
        /// Required features: "javax-xml-transform-Templates", "org-xml-sax-XMLFilter"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Templates", feature = "org-xml-sax-XMLFilter")))]
        pub fn newXMLFilter_Templates<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Templates>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::XMLFilter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/sax/SAXTransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "newXMLFilter", .descriptor == "(Ljavax/xml/transform/Templates;)Lorg/xml/sax/XMLFilter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/sax/SAXTransformerFactory\0", "newXMLFilter\0", "(Ljavax/xml/transform/Templates;)Lorg/xml/sax/XMLFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [FEATURE](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html#FEATURE)
        pub const FEATURE : &'static str = "http://javax.xml.transform.sax.SAXTransformerFactory/feature";

        /// public static final [FEATURE_XMLFILTER](https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html#FEATURE_XMLFILTER)
        pub const FEATURE_XMLFILTER : &'static str = "http://javax.xml.transform.sax.SAXTransformerFactory/feature/xmlfilter";
    }
}
