// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-transform-TransformerFactory"))]
__jni_bindgen! {
    /// public class [TransformerFactory](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html)
    ///
    /// Required feature: javax-xml-transform-TransformerFactory
    public class TransformerFactory ("javax/xml/transform/TransformerFactory") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [TransformerFactory](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#TransformerFactory())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::xml::transform::TransformerFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/xml/transform/TransformerFactory", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newInstance](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#newInstance())
        ///
        /// Required features: "javax-xml-transform-TransformerFactory"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-TransformerFactory")))]
        pub fn newInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::TransformerFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "()Ljavax/xml/transform/TransformerFactory;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/xml/transform/TransformerFactory\0", "newInstance\0", "()Ljavax/xml/transform/TransformerFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#newInstance(java.lang.String,%20java.lang.ClassLoader))
        ///
        /// Required features: "java-lang-ClassLoader", "java-lang-String", "javax-xml-transform-TransformerFactory"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader", feature = "java-lang-String", feature = "javax-xml-transform-TransformerFactory")))]
        pub fn newInstance_String_ClassLoader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::TransformerFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljavax/xml/transform/TransformerFactory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/xml/transform/TransformerFactory\0", "newInstance\0", "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljavax/xml/transform/TransformerFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newTransformer](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#newTransformer(javax.xml.transform.Source))
        ///
        /// Required features: "javax-xml-transform-Source", "javax-xml-transform-Transformer"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Source", feature = "javax-xml-transform-Transformer")))]
        pub fn newTransformer_Source<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Source>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::Transformer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "newTransformer", .descriptor == "(Ljavax/xml/transform/Source;)Ljavax/xml/transform/Transformer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "newTransformer\0", "(Ljavax/xml/transform/Source;)Ljavax/xml/transform/Transformer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newTransformer](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#newTransformer())
        ///
        /// Required features: "javax-xml-transform-Transformer"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Transformer")))]
        pub fn newTransformer<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::Transformer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "newTransformer", .descriptor == "()Ljavax/xml/transform/Transformer;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "newTransformer\0", "()Ljavax/xml/transform/Transformer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newTemplates](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#newTemplates(javax.xml.transform.Source))
        ///
        /// Required features: "javax-xml-transform-Source", "javax-xml-transform-Templates"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-Source", feature = "javax-xml-transform-Templates")))]
        pub fn newTemplates<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Source>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::Templates>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "newTemplates", .descriptor == "(Ljavax/xml/transform/Source;)Ljavax/xml/transform/Templates;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "newTemplates\0", "(Ljavax/xml/transform/Source;)Ljavax/xml/transform/Templates;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAssociatedStylesheet](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#getAssociatedStylesheet(javax.xml.transform.Source,%20java.lang.String,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "javax-xml-transform-Source"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "javax-xml-transform-Source")))]
        pub fn getAssociatedStylesheet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::Source>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::Source>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "getAssociatedStylesheet", .descriptor == "(Ljavax/xml/transform/Source;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/xml/transform/Source;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "getAssociatedStylesheet\0", "(Ljavax/xml/transform/Source;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/xml/transform/Source;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setURIResolver](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#setURIResolver(javax.xml.transform.URIResolver))
        ///
        /// Required features: "javax-xml-transform-URIResolver"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-URIResolver")))]
        pub fn setURIResolver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::URIResolver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "setURIResolver", .descriptor == "(Ljavax/xml/transform/URIResolver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "setURIResolver\0", "(Ljavax/xml/transform/URIResolver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getURIResolver](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#getURIResolver())
        ///
        /// Required features: "javax-xml-transform-URIResolver"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-URIResolver")))]
        pub fn getURIResolver<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::URIResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "getURIResolver", .descriptor == "()Ljavax/xml/transform/URIResolver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "getURIResolver\0", "()Ljavax/xml/transform/URIResolver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeature](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#setFeature(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "setFeature", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "setFeature\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFeature](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#getFeature(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "getFeature", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "getFeature\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAttribute](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#setAttribute(java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn setAttribute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "setAttribute", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "setAttribute\0", "(Ljava/lang/String;Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttribute](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#getAttribute(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getAttribute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "getAttribute", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "getAttribute\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setErrorListener](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#setErrorListener(javax.xml.transform.ErrorListener))
        ///
        /// Required features: "javax-xml-transform-ErrorListener"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-ErrorListener")))]
        pub fn setErrorListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::ErrorListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "setErrorListener", .descriptor == "(Ljavax/xml/transform/ErrorListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "setErrorListener\0", "(Ljavax/xml/transform/ErrorListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getErrorListener](https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html#getErrorListener())
        ///
        /// Required features: "javax-xml-transform-ErrorListener"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-ErrorListener")))]
        pub fn getErrorListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::transform::ErrorListener>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/TransformerFactory", java.flags == PUBLIC | ABSTRACT, .name == "getErrorListener", .descriptor == "()Ljavax/xml/transform/ErrorListener;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/TransformerFactory\0", "getErrorListener\0", "()Ljavax/xml/transform/ErrorListener;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
