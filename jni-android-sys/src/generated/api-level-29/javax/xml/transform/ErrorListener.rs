// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-transform-ErrorListener"))]
__jni_bindgen! {
    /// public interface [ErrorListener](https://developer.android.com/reference/javax/xml/transform/ErrorListener.html)
    ///
    /// Required feature: javax-xml-transform-ErrorListener
    public interface ErrorListener ("javax/xml/transform/ErrorListener") extends crate::java::lang::Object {

        /// [warning](https://developer.android.com/reference/javax/xml/transform/ErrorListener.html#warning(javax.xml.transform.TransformerException))
        ///
        /// Required features: "javax-xml-transform-TransformerException"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-TransformerException")))]
        pub fn warning<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::TransformerException>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/ErrorListener", java.flags == PUBLIC | ABSTRACT, .name == "warning", .descriptor == "(Ljavax/xml/transform/TransformerException;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/ErrorListener\0", "warning\0", "(Ljavax/xml/transform/TransformerException;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [error](https://developer.android.com/reference/javax/xml/transform/ErrorListener.html#error(javax.xml.transform.TransformerException))
        ///
        /// Required features: "javax-xml-transform-TransformerException"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-TransformerException")))]
        pub fn error<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::TransformerException>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/ErrorListener", java.flags == PUBLIC | ABSTRACT, .name == "error", .descriptor == "(Ljavax/xml/transform/TransformerException;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/ErrorListener\0", "error\0", "(Ljavax/xml/transform/TransformerException;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fatalError](https://developer.android.com/reference/javax/xml/transform/ErrorListener.html#fatalError(javax.xml.transform.TransformerException))
        ///
        /// Required features: "javax-xml-transform-TransformerException"
        #[cfg(any(feature = "all", all(feature = "javax-xml-transform-TransformerException")))]
        pub fn fatalError<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::transform::TransformerException>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/transform/ErrorListener", java.flags == PUBLIC | ABSTRACT, .name == "fatalError", .descriptor == "(Ljavax/xml/transform/TransformerException;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/transform/ErrorListener\0", "fatalError\0", "(Ljavax/xml/transform/TransformerException;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
