// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-xpath-XPathExpression"))]
__jni_bindgen! {
    /// public interface [XPathExpression](https://developer.android.com/reference/javax/xml/xpath/XPathExpression.html)
    ///
    /// Required feature: javax-xml-xpath-XPathExpression
    public interface XPathExpression ("javax/xml/xpath/XPathExpression") extends crate::java::lang::Object {

        /// [evaluate](https://developer.android.com/reference/javax/xml/xpath/XPathExpression.html#evaluate(java.lang.Object,%20javax.xml.namespace.QName))
        ///
        /// Required features: "java-lang-Object", "javax-xml-namespace-QName"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "javax-xml-namespace-QName")))]
        pub fn evaluate_Object_QName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::namespace::QName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPathExpression", java.flags == PUBLIC | ABSTRACT, .name == "evaluate", .descriptor == "(Ljava/lang/Object;Ljavax/xml/namespace/QName;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPathExpression\0", "evaluate\0", "(Ljava/lang/Object;Ljavax/xml/namespace/QName;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [evaluate](https://developer.android.com/reference/javax/xml/xpath/XPathExpression.html#evaluate(java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn evaluate_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPathExpression", java.flags == PUBLIC | ABSTRACT, .name == "evaluate", .descriptor == "(Ljava/lang/Object;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPathExpression\0", "evaluate\0", "(Ljava/lang/Object;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [evaluate](https://developer.android.com/reference/javax/xml/xpath/XPathExpression.html#evaluate(org.xml.sax.InputSource,%20javax.xml.namespace.QName))
        ///
        /// Required features: "java-lang-Object", "javax-xml-namespace-QName", "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "javax-xml-namespace-QName", feature = "org-xml-sax-InputSource")))]
        pub fn evaluate_InputSource_QName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::InputSource>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::namespace::QName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPathExpression", java.flags == PUBLIC | ABSTRACT, .name == "evaluate", .descriptor == "(Lorg/xml/sax/InputSource;Ljavax/xml/namespace/QName;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPathExpression\0", "evaluate\0", "(Lorg/xml/sax/InputSource;Ljavax/xml/namespace/QName;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [evaluate](https://developer.android.com/reference/javax/xml/xpath/XPathExpression.html#evaluate(org.xml.sax.InputSource))
        ///
        /// Required features: "java-lang-String", "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "org-xml-sax-InputSource")))]
        pub fn evaluate_InputSource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::InputSource>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPathExpression", java.flags == PUBLIC | ABSTRACT, .name == "evaluate", .descriptor == "(Lorg/xml/sax/InputSource;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPathExpression\0", "evaluate\0", "(Lorg/xml/sax/InputSource;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
