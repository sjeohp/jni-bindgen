// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-xpath-XPath"))]
__jni_bindgen! {
    /// public interface [XPath](https://developer.android.com/reference/javax/xml/xpath/XPath.html)
    ///
    /// Required feature: javax-xml-xpath-XPath
    public interface XPath ("javax/xml/xpath/XPath") extends crate::java::lang::Object {

        /// [reset](https://developer.android.com/reference/javax/xml/xpath/XPath.html#reset())
        pub fn reset<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "reset", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "reset\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setXPathVariableResolver](https://developer.android.com/reference/javax/xml/xpath/XPath.html#setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver))
        ///
        /// Required features: "javax-xml-xpath-XPathVariableResolver"
        #[cfg(any(feature = "all", all(feature = "javax-xml-xpath-XPathVariableResolver")))]
        pub fn setXPathVariableResolver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::xpath::XPathVariableResolver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "setXPathVariableResolver", .descriptor == "(Ljavax/xml/xpath/XPathVariableResolver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "setXPathVariableResolver\0", "(Ljavax/xml/xpath/XPathVariableResolver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getXPathVariableResolver](https://developer.android.com/reference/javax/xml/xpath/XPath.html#getXPathVariableResolver())
        ///
        /// Required features: "javax-xml-xpath-XPathVariableResolver"
        #[cfg(any(feature = "all", all(feature = "javax-xml-xpath-XPathVariableResolver")))]
        pub fn getXPathVariableResolver<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::xpath::XPathVariableResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "getXPathVariableResolver", .descriptor == "()Ljavax/xml/xpath/XPathVariableResolver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "getXPathVariableResolver\0", "()Ljavax/xml/xpath/XPathVariableResolver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setXPathFunctionResolver](https://developer.android.com/reference/javax/xml/xpath/XPath.html#setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver))
        ///
        /// Required features: "javax-xml-xpath-XPathFunctionResolver"
        #[cfg(any(feature = "all", all(feature = "javax-xml-xpath-XPathFunctionResolver")))]
        pub fn setXPathFunctionResolver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::xpath::XPathFunctionResolver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "setXPathFunctionResolver", .descriptor == "(Ljavax/xml/xpath/XPathFunctionResolver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "setXPathFunctionResolver\0", "(Ljavax/xml/xpath/XPathFunctionResolver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getXPathFunctionResolver](https://developer.android.com/reference/javax/xml/xpath/XPath.html#getXPathFunctionResolver())
        ///
        /// Required features: "javax-xml-xpath-XPathFunctionResolver"
        #[cfg(any(feature = "all", all(feature = "javax-xml-xpath-XPathFunctionResolver")))]
        pub fn getXPathFunctionResolver<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::xpath::XPathFunctionResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "getXPathFunctionResolver", .descriptor == "()Ljavax/xml/xpath/XPathFunctionResolver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "getXPathFunctionResolver\0", "()Ljavax/xml/xpath/XPathFunctionResolver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNamespaceContext](https://developer.android.com/reference/javax/xml/xpath/XPath.html#setNamespaceContext(javax.xml.namespace.NamespaceContext))
        ///
        /// Required features: "javax-xml-namespace-NamespaceContext"
        #[cfg(any(feature = "all", all(feature = "javax-xml-namespace-NamespaceContext")))]
        pub fn setNamespaceContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::namespace::NamespaceContext>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "setNamespaceContext", .descriptor == "(Ljavax/xml/namespace/NamespaceContext;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "setNamespaceContext\0", "(Ljavax/xml/namespace/NamespaceContext;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNamespaceContext](https://developer.android.com/reference/javax/xml/xpath/XPath.html#getNamespaceContext())
        ///
        /// Required features: "javax-xml-namespace-NamespaceContext"
        #[cfg(any(feature = "all", all(feature = "javax-xml-namespace-NamespaceContext")))]
        pub fn getNamespaceContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::namespace::NamespaceContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "getNamespaceContext", .descriptor == "()Ljavax/xml/namespace/NamespaceContext;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "getNamespaceContext\0", "()Ljavax/xml/namespace/NamespaceContext;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compile](https://developer.android.com/reference/javax/xml/xpath/XPath.html#compile(java.lang.String))
        ///
        /// Required features: "java-lang-String", "javax-xml-xpath-XPathExpression"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "javax-xml-xpath-XPathExpression")))]
        pub fn compile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::xml::xpath::XPathExpression>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "compile", .descriptor == "(Ljava/lang/String;)Ljavax/xml/xpath/XPathExpression;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "compile\0", "(Ljava/lang/String;)Ljavax/xml/xpath/XPathExpression;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [evaluate](https://developer.android.com/reference/javax/xml/xpath/XPath.html#evaluate(java.lang.String,%20java.lang.Object,%20javax.xml.namespace.QName))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "javax-xml-namespace-QName"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "javax-xml-namespace-QName")))]
        pub fn evaluate_String_Object_QName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::namespace::QName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "evaluate", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;Ljavax/xml/namespace/QName;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "evaluate\0", "(Ljava/lang/String;Ljava/lang/Object;Ljavax/xml/namespace/QName;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [evaluate](https://developer.android.com/reference/javax/xml/xpath/XPath.html#evaluate(java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn evaluate_String_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "evaluate", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "evaluate\0", "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [evaluate](https://developer.android.com/reference/javax/xml/xpath/XPath.html#evaluate(java.lang.String,%20org.xml.sax.InputSource,%20javax.xml.namespace.QName))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "javax-xml-namespace-QName", "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "javax-xml-namespace-QName", feature = "org-xml-sax-InputSource")))]
        pub fn evaluate_String_InputSource_QName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::InputSource>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::xml::namespace::QName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "evaluate", .descriptor == "(Ljava/lang/String;Lorg/xml/sax/InputSource;Ljavax/xml/namespace/QName;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "evaluate\0", "(Ljava/lang/String;Lorg/xml/sax/InputSource;Ljavax/xml/namespace/QName;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [evaluate](https://developer.android.com/reference/javax/xml/xpath/XPath.html#evaluate(java.lang.String,%20org.xml.sax.InputSource))
        ///
        /// Required features: "java-lang-String", "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "org-xml-sax-InputSource")))]
        pub fn evaluate_String_InputSource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::InputSource>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/xpath/XPath", java.flags == PUBLIC | ABSTRACT, .name == "evaluate", .descriptor == "(Ljava/lang/String;Lorg/xml/sax/InputSource;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/xpath/XPath\0", "evaluate\0", "(Ljava/lang/String;Lorg/xml/sax/InputSource;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
