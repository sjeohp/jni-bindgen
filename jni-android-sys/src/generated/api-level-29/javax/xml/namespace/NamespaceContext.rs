// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-xml-namespace-NamespaceContext"))]
__jni_bindgen! {
    /// public interface [NamespaceContext](https://developer.android.com/reference/javax/xml/namespace/NamespaceContext.html)
    ///
    /// Required feature: javax-xml-namespace-NamespaceContext
    public interface NamespaceContext ("javax/xml/namespace/NamespaceContext") extends crate::java::lang::Object {

        /// [getNamespaceURI](https://developer.android.com/reference/javax/xml/namespace/NamespaceContext.html#getNamespaceURI(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNamespaceURI<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/namespace/NamespaceContext", java.flags == PUBLIC | ABSTRACT, .name == "getNamespaceURI", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/namespace/NamespaceContext\0", "getNamespaceURI\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrefix](https://developer.android.com/reference/javax/xml/namespace/NamespaceContext.html#getPrefix(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPrefix<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/namespace/NamespaceContext", java.flags == PUBLIC | ABSTRACT, .name == "getPrefix", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/namespace/NamespaceContext\0", "getPrefix\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrefixes](https://developer.android.com/reference/javax/xml/namespace/NamespaceContext.html#getPrefixes(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-Iterator"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Iterator")))]
        pub fn getPrefixes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Iterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/xml/namespace/NamespaceContext", java.flags == PUBLIC | ABSTRACT, .name == "getPrefixes", .descriptor == "(Ljava/lang/String;)Ljava/util/Iterator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/xml/namespace/NamespaceContext\0", "getPrefixes\0", "(Ljava/lang/String;)Ljava/util/Iterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
