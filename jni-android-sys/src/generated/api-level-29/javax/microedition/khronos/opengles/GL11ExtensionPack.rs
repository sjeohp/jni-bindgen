// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-microedition-khronos-opengles-GL11ExtensionPack"))]
__jni_bindgen! {
    /// public interface [GL11ExtensionPack](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html)
    ///
    /// Required feature: javax-microedition-khronos-opengles-GL11ExtensionPack
    public interface GL11ExtensionPack ("javax/microedition/khronos/opengles/GL11ExtensionPack") extends crate::java::lang::Object, implements crate::javax::microedition::khronos::opengles::GL {

        /// [glBindFramebufferOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBindFramebufferOES(int,%20int))
        pub fn glBindFramebufferOES<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glBindFramebufferOES", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glBindFramebufferOES\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBindRenderbufferOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBindRenderbufferOES(int,%20int))
        pub fn glBindRenderbufferOES<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glBindRenderbufferOES", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glBindRenderbufferOES\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBindTexture](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBindTexture(int,%20int))
        pub fn glBindTexture<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glBindTexture", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glBindTexture\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendEquation](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBlendEquation(int))
        pub fn glBlendEquation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glBlendEquation", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glBlendEquation\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendEquationSeparate](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBlendEquationSeparate(int,%20int))
        pub fn glBlendEquationSeparate<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glBlendEquationSeparate", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glBlendEquationSeparate\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendFuncSeparate](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBlendFuncSeparate(int,%20int,%20int,%20int))
        pub fn glBlendFuncSeparate<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glBlendFuncSeparate", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glBlendFuncSeparate\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCheckFramebufferStatusOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glCheckFramebufferStatusOES(int))
        pub fn glCheckFramebufferStatusOES<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glCheckFramebufferStatusOES", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glCheckFramebufferStatusOES\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCompressedTexImage2D](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glCompressedTexImage2D(int,%20int,%20int,%20int,%20int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glCompressedTexImage2D<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glCompressedTexImage2D", .descriptor == "(IIIIIIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glCompressedTexImage2D\0", "(IIIIIIILjava/nio/Buffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCopyTexImage2D](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glCopyTexImage2D(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int))
        pub fn glCopyTexImage2D<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glCopyTexImage2D", .descriptor == "(IIIIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glCopyTexImage2D\0", "(IIIIIIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteFramebuffersOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glDeleteFramebuffersOES(int,%20int%5B%5D,%20int))
        pub fn glDeleteFramebuffersOES_int_int_array_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glDeleteFramebuffersOES", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glDeleteFramebuffersOES\0", "(I[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteFramebuffersOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glDeleteFramebuffersOES(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glDeleteFramebuffersOES_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glDeleteFramebuffersOES", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glDeleteFramebuffersOES\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteRenderbuffersOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glDeleteRenderbuffersOES(int,%20int%5B%5D,%20int))
        pub fn glDeleteRenderbuffersOES_int_int_array_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glDeleteRenderbuffersOES", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glDeleteRenderbuffersOES\0", "(I[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteRenderbuffersOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glDeleteRenderbuffersOES(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glDeleteRenderbuffersOES_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glDeleteRenderbuffersOES", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glDeleteRenderbuffersOES\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glEnable](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glEnable(int))
        pub fn glEnable<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glEnable", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glEnable\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glFramebufferRenderbufferOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glFramebufferRenderbufferOES(int,%20int,%20int,%20int))
        pub fn glFramebufferRenderbufferOES<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glFramebufferRenderbufferOES", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glFramebufferRenderbufferOES\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glFramebufferTexture2DOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glFramebufferTexture2DOES(int,%20int,%20int,%20int,%20int))
        pub fn glFramebufferTexture2DOES<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glFramebufferTexture2DOES", .descriptor == "(IIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glFramebufferTexture2DOES\0", "(IIIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenerateMipmapOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenerateMipmapOES(int))
        pub fn glGenerateMipmapOES<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGenerateMipmapOES", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGenerateMipmapOES\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenFramebuffersOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenFramebuffersOES(int,%20int%5B%5D,%20int))
        pub fn glGenFramebuffersOES_int_int_array_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGenFramebuffersOES", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGenFramebuffersOES\0", "(I[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenFramebuffersOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenFramebuffersOES(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGenFramebuffersOES_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGenFramebuffersOES", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGenFramebuffersOES\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenRenderbuffersOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenRenderbuffersOES(int,%20int%5B%5D,%20int))
        pub fn glGenRenderbuffersOES_int_int_array_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGenRenderbuffersOES", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGenRenderbuffersOES\0", "(I[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenRenderbuffersOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenRenderbuffersOES(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGenRenderbuffersOES_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGenRenderbuffersOES", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGenRenderbuffersOES\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFramebufferAttachmentParameterivOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetFramebufferAttachmentParameterivOES(int,%20int,%20int,%20int%5B%5D,%20int))
        pub fn glGetFramebufferAttachmentParameterivOES_int_int_int_int_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetFramebufferAttachmentParameterivOES", .descriptor == "(III[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetFramebufferAttachmentParameterivOES\0", "(III[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFramebufferAttachmentParameterivOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetFramebufferAttachmentParameterivOES(int,%20int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetFramebufferAttachmentParameterivOES_int_int_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetFramebufferAttachmentParameterivOES", .descriptor == "(IIILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetFramebufferAttachmentParameterivOES\0", "(IIILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetIntegerv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetIntegerv(int,%20int%5B%5D,%20int))
        pub fn glGetIntegerv_int_int_array_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetIntegerv", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetIntegerv\0", "(I[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetIntegerv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetIntegerv(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetIntegerv_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetIntegerv", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetIntegerv\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetRenderbufferParameterivOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetRenderbufferParameterivOES(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetRenderbufferParameterivOES_int_int_int_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetRenderbufferParameterivOES", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetRenderbufferParameterivOES\0", "(II[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetRenderbufferParameterivOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetRenderbufferParameterivOES(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetRenderbufferParameterivOES_int_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetRenderbufferParameterivOES", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetRenderbufferParameterivOES\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexGenfv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGenfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glGetTexGenfv_int_int_float_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetTexGenfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetTexGenfv\0", "(II[FI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexGenfv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGenfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetTexGenfv_int_int_FloatBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetTexGenfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetTexGenfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexGeniv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGeniv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetTexGeniv_int_int_int_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetTexGeniv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetTexGeniv\0", "(II[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexGeniv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGeniv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetTexGeniv_int_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetTexGeniv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetTexGeniv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexGenxv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGenxv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetTexGenxv_int_int_int_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetTexGenxv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetTexGenxv\0", "(II[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexGenxv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGenxv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetTexGenxv_int_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glGetTexGenxv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glGetTexGenxv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsFramebufferOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glIsFramebufferOES(int))
        pub fn glIsFramebufferOES<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glIsFramebufferOES", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glIsFramebufferOES\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsRenderbufferOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glIsRenderbufferOES(int))
        pub fn glIsRenderbufferOES<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glIsRenderbufferOES", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glIsRenderbufferOES\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glRenderbufferStorageOES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glRenderbufferStorageOES(int,%20int,%20int,%20int))
        pub fn glRenderbufferStorageOES<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glRenderbufferStorageOES", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glRenderbufferStorageOES\0", "(IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glStencilOp](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glStencilOp(int,%20int,%20int))
        pub fn glStencilOp<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glStencilOp", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glStencilOp\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexEnvf](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvf(int,%20int,%20float))
        pub fn glTexEnvf<'env>(&'env self, arg0: i32, arg1: i32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexEnvf", .descriptor == "(IIF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexEnvf\0", "(IIF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexEnvfv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glTexEnvfv_int_int_float_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexEnvfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexEnvfv\0", "(II[FI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexEnvfv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glTexEnvfv_int_int_FloatBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexEnvfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexEnvfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexEnvx](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvx(int,%20int,%20int))
        pub fn glTexEnvx<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexEnvx", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexEnvx\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexEnvxv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvxv(int,%20int,%20int%5B%5D,%20int))
        pub fn glTexEnvxv_int_int_int_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexEnvxv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexEnvxv\0", "(II[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexEnvxv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvxv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glTexEnvxv_int_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexEnvxv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexEnvxv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexGenf](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenf(int,%20int,%20float))
        pub fn glTexGenf<'env>(&'env self, arg0: i32, arg1: i32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexGenf", .descriptor == "(IIF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexGenf\0", "(IIF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexGenfv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glTexGenfv_int_int_float_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexGenfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexGenfv\0", "(II[FI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexGenfv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glTexGenfv_int_int_FloatBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexGenfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexGenfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexGeni](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGeni(int,%20int,%20int))
        pub fn glTexGeni<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexGeni", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexGeni\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexGeniv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGeniv(int,%20int,%20int%5B%5D,%20int))
        pub fn glTexGeniv_int_int_int_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexGeniv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexGeniv\0", "(II[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexGeniv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGeniv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glTexGeniv_int_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexGeniv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexGeniv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexGenx](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenx(int,%20int,%20int))
        pub fn glTexGenx<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexGenx", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexGenx\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexGenxv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenxv(int,%20int,%20int%5B%5D,%20int))
        pub fn glTexGenxv_int_int_int_array_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexGenxv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexGenxv\0", "(II[II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexGenxv](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenxv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glTexGenxv_int_int_IntBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexGenxv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexGenxv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterf](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexParameterf(int,%20int,%20float))
        pub fn glTexParameterf<'env>(&'env self, arg0: i32, arg1: i32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/opengles/GL11ExtensionPack", java.flags == PUBLIC | ABSTRACT, .name == "glTexParameterf", .descriptor == "(IIF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/opengles/GL11ExtensionPack\0", "glTexParameterf\0", "(IIF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [GL_BLEND_DST_ALPHA](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_DST_ALPHA)
        pub const GL_BLEND_DST_ALPHA : i32 = 32970;

        /// public static final [GL_BLEND_DST_RGB](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_DST_RGB)
        pub const GL_BLEND_DST_RGB : i32 = 32968;

        /// public static final [GL_BLEND_EQUATION](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_EQUATION)
        pub const GL_BLEND_EQUATION : i32 = 32777;

        /// public static final [GL_BLEND_EQUATION_ALPHA](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_EQUATION_ALPHA)
        pub const GL_BLEND_EQUATION_ALPHA : i32 = 34877;

        /// public static final [GL_BLEND_EQUATION_RGB](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_EQUATION_RGB)
        pub const GL_BLEND_EQUATION_RGB : i32 = 32777;

        /// public static final [GL_BLEND_SRC_ALPHA](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_SRC_ALPHA)
        pub const GL_BLEND_SRC_ALPHA : i32 = 32971;

        /// public static final [GL_BLEND_SRC_RGB](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_SRC_RGB)
        pub const GL_BLEND_SRC_RGB : i32 = 32969;

        /// public static final [GL_COLOR_ATTACHMENT0_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT0_OES)
        pub const GL_COLOR_ATTACHMENT0_OES : i32 = 36064;

        /// public static final [GL_COLOR_ATTACHMENT10_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT10_OES)
        pub const GL_COLOR_ATTACHMENT10_OES : i32 = 36074;

        /// public static final [GL_COLOR_ATTACHMENT11_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT11_OES)
        pub const GL_COLOR_ATTACHMENT11_OES : i32 = 36075;

        /// public static final [GL_COLOR_ATTACHMENT12_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT12_OES)
        pub const GL_COLOR_ATTACHMENT12_OES : i32 = 36076;

        /// public static final [GL_COLOR_ATTACHMENT13_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT13_OES)
        pub const GL_COLOR_ATTACHMENT13_OES : i32 = 36077;

        /// public static final [GL_COLOR_ATTACHMENT14_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT14_OES)
        pub const GL_COLOR_ATTACHMENT14_OES : i32 = 36078;

        /// public static final [GL_COLOR_ATTACHMENT15_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT15_OES)
        pub const GL_COLOR_ATTACHMENT15_OES : i32 = 36079;

        /// public static final [GL_COLOR_ATTACHMENT1_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT1_OES)
        pub const GL_COLOR_ATTACHMENT1_OES : i32 = 36065;

        /// public static final [GL_COLOR_ATTACHMENT2_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT2_OES)
        pub const GL_COLOR_ATTACHMENT2_OES : i32 = 36066;

        /// public static final [GL_COLOR_ATTACHMENT3_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT3_OES)
        pub const GL_COLOR_ATTACHMENT3_OES : i32 = 36067;

        /// public static final [GL_COLOR_ATTACHMENT4_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT4_OES)
        pub const GL_COLOR_ATTACHMENT4_OES : i32 = 36068;

        /// public static final [GL_COLOR_ATTACHMENT5_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT5_OES)
        pub const GL_COLOR_ATTACHMENT5_OES : i32 = 36069;

        /// public static final [GL_COLOR_ATTACHMENT6_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT6_OES)
        pub const GL_COLOR_ATTACHMENT6_OES : i32 = 36070;

        /// public static final [GL_COLOR_ATTACHMENT7_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT7_OES)
        pub const GL_COLOR_ATTACHMENT7_OES : i32 = 36071;

        /// public static final [GL_COLOR_ATTACHMENT8_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT8_OES)
        pub const GL_COLOR_ATTACHMENT8_OES : i32 = 36072;

        /// public static final [GL_COLOR_ATTACHMENT9_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT9_OES)
        pub const GL_COLOR_ATTACHMENT9_OES : i32 = 36073;

        /// public static final [GL_DECR_WRAP](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DECR_WRAP)
        pub const GL_DECR_WRAP : i32 = 34056;

        /// public static final [GL_DEPTH_ATTACHMENT_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_ATTACHMENT_OES)
        pub const GL_DEPTH_ATTACHMENT_OES : i32 = 36096;

        /// public static final [GL_DEPTH_COMPONENT](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_COMPONENT)
        pub const GL_DEPTH_COMPONENT : i32 = 6402;

        /// public static final [GL_DEPTH_COMPONENT16](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_COMPONENT16)
        pub const GL_DEPTH_COMPONENT16 : i32 = 33189;

        /// public static final [GL_DEPTH_COMPONENT24](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_COMPONENT24)
        pub const GL_DEPTH_COMPONENT24 : i32 = 33190;

        /// public static final [GL_DEPTH_COMPONENT32](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_COMPONENT32)
        pub const GL_DEPTH_COMPONENT32 : i32 = 33191;

        /// public static final [GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES)
        pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES : i32 = 36049;

        /// public static final [GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES)
        pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES : i32 = 36048;

        /// public static final [GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES)
        pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES : i32 = 36051;

        /// public static final [GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES)
        pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES : i32 = 36050;

        /// public static final [GL_FRAMEBUFFER_BINDING_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_BINDING_OES)
        pub const GL_FRAMEBUFFER_BINDING_OES : i32 = 36006;

        /// public static final [GL_FRAMEBUFFER_COMPLETE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_COMPLETE_OES)
        pub const GL_FRAMEBUFFER_COMPLETE_OES : i32 = 36053;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES)
        pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES : i32 = 36054;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES)
        pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES : i32 = 36057;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES)
        pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES : i32 = 36059;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES)
        pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES : i32 = 36058;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES)
        pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES : i32 = 36055;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES)
        pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES : i32 = 36060;

        /// public static final [GL_FRAMEBUFFER_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_OES)
        pub const GL_FRAMEBUFFER_OES : i32 = 36160;

        /// public static final [GL_FRAMEBUFFER_UNSUPPORTED_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_UNSUPPORTED_OES)
        pub const GL_FRAMEBUFFER_UNSUPPORTED_OES : i32 = 36061;

        /// public static final [GL_FUNC_ADD](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FUNC_ADD)
        pub const GL_FUNC_ADD : i32 = 32774;

        /// public static final [GL_FUNC_REVERSE_SUBTRACT](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FUNC_REVERSE_SUBTRACT)
        pub const GL_FUNC_REVERSE_SUBTRACT : i32 = 32779;

        /// public static final [GL_FUNC_SUBTRACT](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FUNC_SUBTRACT)
        pub const GL_FUNC_SUBTRACT : i32 = 32778;

        /// public static final [GL_INCR_WRAP](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_INCR_WRAP)
        pub const GL_INCR_WRAP : i32 = 34055;

        /// public static final [GL_INVALID_FRAMEBUFFER_OPERATION_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_INVALID_FRAMEBUFFER_OPERATION_OES)
        pub const GL_INVALID_FRAMEBUFFER_OPERATION_OES : i32 = 1286;

        /// public static final [GL_MAX_COLOR_ATTACHMENTS_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_MAX_COLOR_ATTACHMENTS_OES)
        pub const GL_MAX_COLOR_ATTACHMENTS_OES : i32 = 36063;

        /// public static final [GL_MAX_CUBE_MAP_TEXTURE_SIZE](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_MAX_CUBE_MAP_TEXTURE_SIZE)
        pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE : i32 = 34076;

        /// public static final [GL_MAX_RENDERBUFFER_SIZE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_MAX_RENDERBUFFER_SIZE_OES)
        pub const GL_MAX_RENDERBUFFER_SIZE_OES : i32 = 34024;

        /// public static final [GL_MIRRORED_REPEAT](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_MIRRORED_REPEAT)
        pub const GL_MIRRORED_REPEAT : i32 = 33648;

        /// public static final [GL_NORMAL_MAP](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_NORMAL_MAP)
        pub const GL_NORMAL_MAP : i32 = 34065;

        /// public static final [GL_REFLECTION_MAP](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_REFLECTION_MAP)
        pub const GL_REFLECTION_MAP : i32 = 34066;

        /// public static final [GL_RENDERBUFFER_ALPHA_SIZE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_ALPHA_SIZE_OES)
        pub const GL_RENDERBUFFER_ALPHA_SIZE_OES : i32 = 36179;

        /// public static final [GL_RENDERBUFFER_BINDING_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_BINDING_OES)
        pub const GL_RENDERBUFFER_BINDING_OES : i32 = 36007;

        /// public static final [GL_RENDERBUFFER_BLUE_SIZE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_BLUE_SIZE_OES)
        pub const GL_RENDERBUFFER_BLUE_SIZE_OES : i32 = 36178;

        /// public static final [GL_RENDERBUFFER_DEPTH_SIZE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_DEPTH_SIZE_OES)
        pub const GL_RENDERBUFFER_DEPTH_SIZE_OES : i32 = 36180;

        /// public static final [GL_RENDERBUFFER_GREEN_SIZE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_GREEN_SIZE_OES)
        pub const GL_RENDERBUFFER_GREEN_SIZE_OES : i32 = 36177;

        /// public static final [GL_RENDERBUFFER_HEIGHT_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_HEIGHT_OES)
        pub const GL_RENDERBUFFER_HEIGHT_OES : i32 = 36163;

        /// public static final [GL_RENDERBUFFER_INTERNAL_FORMAT_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_INTERNAL_FORMAT_OES)
        pub const GL_RENDERBUFFER_INTERNAL_FORMAT_OES : i32 = 36164;

        /// public static final [GL_RENDERBUFFER_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_OES)
        pub const GL_RENDERBUFFER_OES : i32 = 36161;

        /// public static final [GL_RENDERBUFFER_RED_SIZE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_RED_SIZE_OES)
        pub const GL_RENDERBUFFER_RED_SIZE_OES : i32 = 36176;

        /// public static final [GL_RENDERBUFFER_STENCIL_SIZE_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_STENCIL_SIZE_OES)
        pub const GL_RENDERBUFFER_STENCIL_SIZE_OES : i32 = 36181;

        /// public static final [GL_RENDERBUFFER_WIDTH_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_WIDTH_OES)
        pub const GL_RENDERBUFFER_WIDTH_OES : i32 = 36162;

        /// public static final [GL_RGB565_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGB565_OES)
        pub const GL_RGB565_OES : i32 = 36194;

        /// public static final [GL_RGB5_A1](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGB5_A1)
        pub const GL_RGB5_A1 : i32 = 32855;

        /// public static final [GL_RGB8](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGB8)
        pub const GL_RGB8 : i32 = 32849;

        /// public static final [GL_RGBA4](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGBA4)
        pub const GL_RGBA4 : i32 = 32854;

        /// public static final [GL_RGBA8](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGBA8)
        pub const GL_RGBA8 : i32 = 32856;

        /// public static final [GL_STENCIL_ATTACHMENT_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_ATTACHMENT_OES)
        pub const GL_STENCIL_ATTACHMENT_OES : i32 = 36128;

        /// public static final [GL_STENCIL_INDEX](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_INDEX)
        pub const GL_STENCIL_INDEX : i32 = 6401;

        /// public static final [GL_STENCIL_INDEX1_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_INDEX1_OES)
        pub const GL_STENCIL_INDEX1_OES : i32 = 36166;

        /// public static final [GL_STENCIL_INDEX4_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_INDEX4_OES)
        pub const GL_STENCIL_INDEX4_OES : i32 = 36167;

        /// public static final [GL_STENCIL_INDEX8_OES](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_INDEX8_OES)
        pub const GL_STENCIL_INDEX8_OES : i32 = 36168;

        /// public static final [GL_STR](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STR)
        pub const GL_STR : i32 = -1;

        /// public static final [GL_TEXTURE_BINDING_CUBE_MAP](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_BINDING_CUBE_MAP)
        pub const GL_TEXTURE_BINDING_CUBE_MAP : i32 = 34068;

        /// public static final [GL_TEXTURE_CUBE_MAP](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP)
        pub const GL_TEXTURE_CUBE_MAP : i32 = 34067;

        /// public static final [GL_TEXTURE_CUBE_MAP_NEGATIVE_X](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_X)
        pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X : i32 = 34070;

        /// public static final [GL_TEXTURE_CUBE_MAP_NEGATIVE_Y](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y)
        pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y : i32 = 34072;

        /// public static final [GL_TEXTURE_CUBE_MAP_NEGATIVE_Z](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z)
        pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z : i32 = 34074;

        /// public static final [GL_TEXTURE_CUBE_MAP_POSITIVE_X](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_POSITIVE_X)
        pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X : i32 = 34069;

        /// public static final [GL_TEXTURE_CUBE_MAP_POSITIVE_Y](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Y)
        pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y : i32 = 34071;

        /// public static final [GL_TEXTURE_CUBE_MAP_POSITIVE_Z](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Z)
        pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z : i32 = 34073;

        /// public static final [GL_TEXTURE_GEN_MODE](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_GEN_MODE)
        pub const GL_TEXTURE_GEN_MODE : i32 = 9472;

        /// public static final [GL_TEXTURE_GEN_STR](https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_GEN_STR)
        pub const GL_TEXTURE_GEN_STR : i32 = 36192;
    }
}
