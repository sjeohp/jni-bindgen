// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-microedition-khronos-egl-EGL10"))]
__jni_bindgen! {
    /// public interface [EGL10](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html)
    ///
    /// Required feature: javax-microedition-khronos-egl-EGL10
    public interface EGL10 ("javax/microedition/khronos/egl/EGL10") extends crate::java::lang::Object, implements crate::javax::microedition::khronos::egl::EGL {

        /// [eglChooseConfig](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,%20int%5B%5D,%20javax.microedition.khronos.egl.EGLConfig%5B%5D,%20int,%20int%5B%5D))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLConfig", "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLConfig", feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglChooseConfig<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::javax::microedition::khronos::egl::EGLConfig, crate::java::lang::Throwable>>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglChooseConfig", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;[I[Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglChooseConfig\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;[I[Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCopyBuffers](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLSurface,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "javax-microedition-khronos-egl-EGLDisplay", "javax-microedition-khronos-egl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "javax-microedition-khronos-egl-EGLDisplay", feature = "javax-microedition-khronos-egl-EGLSurface")))]
        pub fn eglCopyBuffers<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLSurface>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglCopyBuffers", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglCopyBuffers\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCreateContext](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLConfig,%20javax.microedition.khronos.egl.EGLContext,%20int%5B%5D))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLConfig", "javax-microedition-khronos-egl-EGLContext", "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLConfig", feature = "javax-microedition-khronos-egl-EGLContext", feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglCreateContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLConfig>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLContext>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglCreateContext", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljavax/microedition/khronos/egl/EGLContext;[I)Ljavax/microedition/khronos/egl/EGLContext;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglCreateContext\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljavax/microedition/khronos/egl/EGLContext;[I)Ljavax/microedition/khronos/egl/EGLContext;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCreatePbufferSurface](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLConfig,%20int%5B%5D))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLConfig", "javax-microedition-khronos-egl-EGLDisplay", "javax-microedition-khronos-egl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLConfig", feature = "javax-microedition-khronos-egl-EGLDisplay", feature = "javax-microedition-khronos-egl-EGLSurface")))]
        pub fn eglCreatePbufferSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLConfig>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLSurface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglCreatePbufferSurface", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;[I)Ljavax/microedition/khronos/egl/EGLSurface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglCreatePbufferSurface\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;[I)Ljavax/microedition/khronos/egl/EGLSurface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCreatePixmapSurface](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLConfig,%20java.lang.Object,%20int%5B%5D))
        ///
        /// Required features: "java-lang-Object", "javax-microedition-khronos-egl-EGLConfig", "javax-microedition-khronos-egl-EGLDisplay", "javax-microedition-khronos-egl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "javax-microedition-khronos-egl-EGLConfig", feature = "javax-microedition-khronos-egl-EGLDisplay", feature = "javax-microedition-khronos-egl-EGLSurface")))]
        #[deprecated] pub fn eglCreatePixmapSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLConfig>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLSurface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglCreatePixmapSurface", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljava/lang/Object;[I)Ljavax/microedition/khronos/egl/EGLSurface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglCreatePixmapSurface\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljava/lang/Object;[I)Ljavax/microedition/khronos/egl/EGLSurface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCreateWindowSurface](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLConfig,%20java.lang.Object,%20int%5B%5D))
        ///
        /// Required features: "java-lang-Object", "javax-microedition-khronos-egl-EGLConfig", "javax-microedition-khronos-egl-EGLDisplay", "javax-microedition-khronos-egl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "javax-microedition-khronos-egl-EGLConfig", feature = "javax-microedition-khronos-egl-EGLDisplay", feature = "javax-microedition-khronos-egl-EGLSurface")))]
        pub fn eglCreateWindowSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLConfig>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLSurface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglCreateWindowSurface", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljava/lang/Object;[I)Ljavax/microedition/khronos/egl/EGLSurface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglCreateWindowSurface\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljava/lang/Object;[I)Ljavax/microedition/khronos/egl/EGLSurface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglDestroyContext](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLContext))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLContext", "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLContext", feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglDestroyContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLContext>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglDestroyContext", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLContext;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglDestroyContext\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLContext;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglDestroySurface](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLSurface))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLDisplay", "javax-microedition-khronos-egl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLDisplay", feature = "javax-microedition-khronos-egl-EGLSurface")))]
        pub fn eglDestroySurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLSurface>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglDestroySurface", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglDestroySurface\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetConfigAttrib](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLConfig,%20int,%20int%5B%5D))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLConfig", "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLConfig", feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglGetConfigAttrib<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLConfig>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglGetConfigAttrib", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglGetConfigAttrib\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetConfigs](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLConfig%5B%5D,%20int,%20int%5B%5D))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLConfig", "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLConfig", feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglGetConfigs<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::javax::microedition::khronos::egl::EGLConfig, crate::java::lang::Throwable>>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglGetConfigs", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;[Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglGetConfigs\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;[Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetCurrentContext](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetCurrentContext())
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLContext"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLContext")))]
        pub fn eglGetCurrentContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglGetCurrentContext", .descriptor == "()Ljavax/microedition/khronos/egl/EGLContext;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglGetCurrentContext\0", "()Ljavax/microedition/khronos/egl/EGLContext;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetCurrentDisplay](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetCurrentDisplay())
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglGetCurrentDisplay<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLDisplay>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglGetCurrentDisplay", .descriptor == "()Ljavax/microedition/khronos/egl/EGLDisplay;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglGetCurrentDisplay\0", "()Ljavax/microedition/khronos/egl/EGLDisplay;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetCurrentSurface](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetCurrentSurface(int))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLSurface")))]
        pub fn eglGetCurrentSurface<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLSurface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglGetCurrentSurface", .descriptor == "(I)Ljavax/microedition/khronos/egl/EGLSurface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglGetCurrentSurface\0", "(I)Ljavax/microedition/khronos/egl/EGLSurface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetDisplay](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetDisplay(java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglGetDisplay<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLDisplay>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglGetDisplay", .descriptor == "(Ljava/lang/Object;)Ljavax/microedition/khronos/egl/EGLDisplay;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglGetDisplay\0", "(Ljava/lang/Object;)Ljavax/microedition/khronos/egl/EGLDisplay;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetError](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetError())
        pub fn eglGetError<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglGetError", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglGetError\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglInitialize](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglInitialize(javax.microedition.khronos.egl.EGLDisplay,%20int%5B%5D))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglInitialize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglInitialize", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;[I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglInitialize\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;[I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglMakeCurrent](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLSurface,%20javax.microedition.khronos.egl.EGLSurface,%20javax.microedition.khronos.egl.EGLContext))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLContext", "javax-microedition-khronos-egl-EGLDisplay", "javax-microedition-khronos-egl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLContext", feature = "javax-microedition-khronos-egl-EGLDisplay", feature = "javax-microedition-khronos-egl-EGLSurface")))]
        pub fn eglMakeCurrent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLSurface>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLSurface>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLContext>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglMakeCurrent", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;Ljavax/microedition/khronos/egl/EGLSurface;Ljavax/microedition/khronos/egl/EGLContext;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglMakeCurrent\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;Ljavax/microedition/khronos/egl/EGLSurface;Ljavax/microedition/khronos/egl/EGLContext;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglQueryContext](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLContext,%20int,%20int%5B%5D))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLContext", "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLContext", feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglQueryContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLContext>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglQueryContext", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLContext;I[I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglQueryContext\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLContext;I[I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglQueryString](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglQueryString(javax.microedition.khronos.egl.EGLDisplay,%20int))
        ///
        /// Required features: "java-lang-String", "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglQueryString<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglQueryString", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglQueryString\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglQuerySurface](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLSurface,%20int,%20int%5B%5D))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLDisplay", "javax-microedition-khronos-egl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLDisplay", feature = "javax-microedition-khronos-egl-EGLSurface")))]
        pub fn eglQuerySurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLSurface>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglQuerySurface", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;I[I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglQuerySurface\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;I[I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglSwapBuffers](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLSurface))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLDisplay", "javax-microedition-khronos-egl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLDisplay", feature = "javax-microedition-khronos-egl-EGLSurface")))]
        pub fn eglSwapBuffers<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLSurface>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglSwapBuffers", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglSwapBuffers\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglTerminate](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglTerminate(javax.microedition.khronos.egl.EGLDisplay))
        ///
        /// Required features: "javax-microedition-khronos-egl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "javax-microedition-khronos-egl-EGLDisplay")))]
        pub fn eglTerminate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::microedition::khronos::egl::EGLDisplay>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglTerminate", .descriptor == "(Ljavax/microedition/khronos/egl/EGLDisplay;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglTerminate\0", "(Ljavax/microedition/khronos/egl/EGLDisplay;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglWaitGL](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglWaitGL())
        pub fn eglWaitGL<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglWaitGL", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglWaitGL\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglWaitNative](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglWaitNative(int,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn eglWaitNative<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/microedition/khronos/egl/EGL10", java.flags == PUBLIC | ABSTRACT, .name == "eglWaitNative", .descriptor == "(ILjava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/microedition/khronos/egl/EGL10\0", "eglWaitNative\0", "(ILjava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EGL_ALPHA_FORMAT](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_ALPHA_FORMAT)
        pub const EGL_ALPHA_FORMAT : i32 = 12424;

        /// public static final [EGL_ALPHA_MASK_SIZE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_ALPHA_MASK_SIZE)
        pub const EGL_ALPHA_MASK_SIZE : i32 = 12350;

        /// public static final [EGL_ALPHA_SIZE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_ALPHA_SIZE)
        pub const EGL_ALPHA_SIZE : i32 = 12321;

        /// public static final [EGL_BAD_ACCESS](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_ACCESS)
        pub const EGL_BAD_ACCESS : i32 = 12290;

        /// public static final [EGL_BAD_ALLOC](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_ALLOC)
        pub const EGL_BAD_ALLOC : i32 = 12291;

        /// public static final [EGL_BAD_ATTRIBUTE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_ATTRIBUTE)
        pub const EGL_BAD_ATTRIBUTE : i32 = 12292;

        /// public static final [EGL_BAD_CONFIG](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_CONFIG)
        pub const EGL_BAD_CONFIG : i32 = 12293;

        /// public static final [EGL_BAD_CONTEXT](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_CONTEXT)
        pub const EGL_BAD_CONTEXT : i32 = 12294;

        /// public static final [EGL_BAD_CURRENT_SURFACE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_CURRENT_SURFACE)
        pub const EGL_BAD_CURRENT_SURFACE : i32 = 12295;

        /// public static final [EGL_BAD_DISPLAY](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_DISPLAY)
        pub const EGL_BAD_DISPLAY : i32 = 12296;

        /// public static final [EGL_BAD_MATCH](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_MATCH)
        pub const EGL_BAD_MATCH : i32 = 12297;

        /// public static final [EGL_BAD_NATIVE_PIXMAP](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_NATIVE_PIXMAP)
        pub const EGL_BAD_NATIVE_PIXMAP : i32 = 12298;

        /// public static final [EGL_BAD_NATIVE_WINDOW](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_NATIVE_WINDOW)
        pub const EGL_BAD_NATIVE_WINDOW : i32 = 12299;

        /// public static final [EGL_BAD_PARAMETER](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_PARAMETER)
        pub const EGL_BAD_PARAMETER : i32 = 12300;

        /// public static final [EGL_BAD_SURFACE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_SURFACE)
        pub const EGL_BAD_SURFACE : i32 = 12301;

        /// public static final [EGL_BLUE_SIZE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BLUE_SIZE)
        pub const EGL_BLUE_SIZE : i32 = 12322;

        /// public static final [EGL_BUFFER_SIZE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BUFFER_SIZE)
        pub const EGL_BUFFER_SIZE : i32 = 12320;

        /// public static final [EGL_COLORSPACE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_COLORSPACE)
        pub const EGL_COLORSPACE : i32 = 12423;

        /// public static final [EGL_COLOR_BUFFER_TYPE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_COLOR_BUFFER_TYPE)
        pub const EGL_COLOR_BUFFER_TYPE : i32 = 12351;

        /// public static final [EGL_CONFIG_CAVEAT](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_CONFIG_CAVEAT)
        pub const EGL_CONFIG_CAVEAT : i32 = 12327;

        /// public static final [EGL_CONFIG_ID](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_CONFIG_ID)
        pub const EGL_CONFIG_ID : i32 = 12328;

        /// public static final [EGL_CORE_NATIVE_ENGINE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_CORE_NATIVE_ENGINE)
        pub const EGL_CORE_NATIVE_ENGINE : i32 = 12379;

        /// **get** public static final [EGL_DEFAULT_DISPLAY](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_DEFAULT_DISPLAY)
        ///
        /// Required feature: java-lang-Object
        #[cfg(any(feature = "all", feature = "java-lang-Object"))]
        pub fn EGL_DEFAULT_DISPLAY<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>> {
            unsafe {
                let (class, field) = env.require_class_static_field("javax/microedition/khronos/egl/EGL10\0", "EGL_DEFAULT_DISPLAY\0", "Ljava/lang/Object;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [EGL_DEPTH_SIZE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_DEPTH_SIZE)
        pub const EGL_DEPTH_SIZE : i32 = 12325;

        /// public static final [EGL_DONT_CARE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_DONT_CARE)
        pub const EGL_DONT_CARE : i32 = -1;

        /// public static final [EGL_DRAW](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_DRAW)
        pub const EGL_DRAW : i32 = 12377;

        /// public static final [EGL_EXTENSIONS](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_EXTENSIONS)
        pub const EGL_EXTENSIONS : i32 = 12373;

        /// public static final [EGL_GREEN_SIZE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_GREEN_SIZE)
        pub const EGL_GREEN_SIZE : i32 = 12323;

        /// public static final [EGL_HEIGHT](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_HEIGHT)
        pub const EGL_HEIGHT : i32 = 12374;

        /// public static final [EGL_HORIZONTAL_RESOLUTION](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_HORIZONTAL_RESOLUTION)
        pub const EGL_HORIZONTAL_RESOLUTION : i32 = 12432;

        /// public static final [EGL_LARGEST_PBUFFER](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_LARGEST_PBUFFER)
        pub const EGL_LARGEST_PBUFFER : i32 = 12376;

        /// public static final [EGL_LEVEL](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_LEVEL)
        pub const EGL_LEVEL : i32 = 12329;

        /// public static final [EGL_LUMINANCE_BUFFER](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_LUMINANCE_BUFFER)
        pub const EGL_LUMINANCE_BUFFER : i32 = 12431;

        /// public static final [EGL_LUMINANCE_SIZE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_LUMINANCE_SIZE)
        pub const EGL_LUMINANCE_SIZE : i32 = 12349;

        /// public static final [EGL_MAX_PBUFFER_HEIGHT](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_MAX_PBUFFER_HEIGHT)
        pub const EGL_MAX_PBUFFER_HEIGHT : i32 = 12330;

        /// public static final [EGL_MAX_PBUFFER_PIXELS](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_MAX_PBUFFER_PIXELS)
        pub const EGL_MAX_PBUFFER_PIXELS : i32 = 12331;

        /// public static final [EGL_MAX_PBUFFER_WIDTH](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_MAX_PBUFFER_WIDTH)
        pub const EGL_MAX_PBUFFER_WIDTH : i32 = 12332;

        /// public static final [EGL_NATIVE_RENDERABLE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NATIVE_RENDERABLE)
        pub const EGL_NATIVE_RENDERABLE : i32 = 12333;

        /// public static final [EGL_NATIVE_VISUAL_ID](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NATIVE_VISUAL_ID)
        pub const EGL_NATIVE_VISUAL_ID : i32 = 12334;

        /// public static final [EGL_NATIVE_VISUAL_TYPE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NATIVE_VISUAL_TYPE)
        pub const EGL_NATIVE_VISUAL_TYPE : i32 = 12335;

        /// public static final [EGL_NONE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NONE)
        pub const EGL_NONE : i32 = 12344;

        /// public static final [EGL_NON_CONFORMANT_CONFIG](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NON_CONFORMANT_CONFIG)
        pub const EGL_NON_CONFORMANT_CONFIG : i32 = 12369;

        /// public static final [EGL_NOT_INITIALIZED](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NOT_INITIALIZED)
        pub const EGL_NOT_INITIALIZED : i32 = 12289;

        /// **get** public static final [EGL_NO_CONTEXT](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NO_CONTEXT)
        ///
        /// Required feature: javax-microedition-khronos-egl-EGLContext
        #[cfg(any(feature = "all", feature = "javax-microedition-khronos-egl-EGLContext"))]
        pub fn EGL_NO_CONTEXT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLContext>> {
            unsafe {
                let (class, field) = env.require_class_static_field("javax/microedition/khronos/egl/EGL10\0", "EGL_NO_CONTEXT\0", "Ljavax/microedition/khronos/egl/EGLContext;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [EGL_NO_DISPLAY](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NO_DISPLAY)
        ///
        /// Required feature: javax-microedition-khronos-egl-EGLDisplay
        #[cfg(any(feature = "all", feature = "javax-microedition-khronos-egl-EGLDisplay"))]
        pub fn EGL_NO_DISPLAY<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLDisplay>> {
            unsafe {
                let (class, field) = env.require_class_static_field("javax/microedition/khronos/egl/EGL10\0", "EGL_NO_DISPLAY\0", "Ljavax/microedition/khronos/egl/EGLDisplay;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [EGL_NO_SURFACE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NO_SURFACE)
        ///
        /// Required feature: javax-microedition-khronos-egl-EGLSurface
        #[cfg(any(feature = "all", feature = "javax-microedition-khronos-egl-EGLSurface"))]
        pub fn EGL_NO_SURFACE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::microedition::khronos::egl::EGLSurface>> {
            unsafe {
                let (class, field) = env.require_class_static_field("javax/microedition/khronos/egl/EGL10\0", "EGL_NO_SURFACE\0", "Ljavax/microedition/khronos/egl/EGLSurface;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [EGL_PBUFFER_BIT](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_PBUFFER_BIT)
        pub const EGL_PBUFFER_BIT : i32 = 1;

        /// public static final [EGL_PIXEL_ASPECT_RATIO](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_PIXEL_ASPECT_RATIO)
        pub const EGL_PIXEL_ASPECT_RATIO : i32 = 12434;

        /// public static final [EGL_PIXMAP_BIT](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_PIXMAP_BIT)
        pub const EGL_PIXMAP_BIT : i32 = 2;

        /// public static final [EGL_READ](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_READ)
        pub const EGL_READ : i32 = 12378;

        /// public static final [EGL_RED_SIZE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_RED_SIZE)
        pub const EGL_RED_SIZE : i32 = 12324;

        /// public static final [EGL_RENDERABLE_TYPE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_RENDERABLE_TYPE)
        pub const EGL_RENDERABLE_TYPE : i32 = 12352;

        /// public static final [EGL_RENDER_BUFFER](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_RENDER_BUFFER)
        pub const EGL_RENDER_BUFFER : i32 = 12422;

        /// public static final [EGL_RGB_BUFFER](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_RGB_BUFFER)
        pub const EGL_RGB_BUFFER : i32 = 12430;

        /// public static final [EGL_SAMPLES](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SAMPLES)
        pub const EGL_SAMPLES : i32 = 12337;

        /// public static final [EGL_SAMPLE_BUFFERS](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SAMPLE_BUFFERS)
        pub const EGL_SAMPLE_BUFFERS : i32 = 12338;

        /// public static final [EGL_SINGLE_BUFFER](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SINGLE_BUFFER)
        pub const EGL_SINGLE_BUFFER : i32 = 12421;

        /// public static final [EGL_SLOW_CONFIG](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SLOW_CONFIG)
        pub const EGL_SLOW_CONFIG : i32 = 12368;

        /// public static final [EGL_STENCIL_SIZE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_STENCIL_SIZE)
        pub const EGL_STENCIL_SIZE : i32 = 12326;

        /// public static final [EGL_SUCCESS](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SUCCESS)
        pub const EGL_SUCCESS : i32 = 12288;

        /// public static final [EGL_SURFACE_TYPE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SURFACE_TYPE)
        pub const EGL_SURFACE_TYPE : i32 = 12339;

        /// public static final [EGL_TRANSPARENT_BLUE_VALUE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_BLUE_VALUE)
        pub const EGL_TRANSPARENT_BLUE_VALUE : i32 = 12341;

        /// public static final [EGL_TRANSPARENT_GREEN_VALUE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_GREEN_VALUE)
        pub const EGL_TRANSPARENT_GREEN_VALUE : i32 = 12342;

        /// public static final [EGL_TRANSPARENT_RED_VALUE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_RED_VALUE)
        pub const EGL_TRANSPARENT_RED_VALUE : i32 = 12343;

        /// public static final [EGL_TRANSPARENT_RGB](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_RGB)
        pub const EGL_TRANSPARENT_RGB : i32 = 12370;

        /// public static final [EGL_TRANSPARENT_TYPE](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_TYPE)
        pub const EGL_TRANSPARENT_TYPE : i32 = 12340;

        /// public static final [EGL_VENDOR](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_VENDOR)
        pub const EGL_VENDOR : i32 = 12371;

        /// public static final [EGL_VERSION](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_VERSION)
        pub const EGL_VERSION : i32 = 12372;

        /// public static final [EGL_VERTICAL_RESOLUTION](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_VERTICAL_RESOLUTION)
        pub const EGL_VERTICAL_RESOLUTION : i32 = 12433;

        /// public static final [EGL_WIDTH](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_WIDTH)
        pub const EGL_WIDTH : i32 = 12375;

        /// public static final [EGL_WINDOW_BIT](https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_WINDOW_BIT)
        pub const EGL_WINDOW_BIT : i32 = 4;
    }
}
