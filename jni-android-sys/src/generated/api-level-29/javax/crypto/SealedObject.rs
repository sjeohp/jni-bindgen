// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-crypto-SealedObject"))]
__jni_bindgen! {
    /// public class [SealedObject](https://developer.android.com/reference/javax/crypto/SealedObject.html)
    ///
    /// Required feature: javax-crypto-SealedObject
    public class SealedObject ("javax/crypto/SealedObject") extends crate::java::lang::Object, implements crate::java::io::Serializable {

        /// [SealedObject](https://developer.android.com/reference/javax/crypto/SealedObject.html#SealedObject(java.io.Serializable,%20javax.crypto.Cipher))
        ///
        /// Required features: "java-io-Serializable", "javax-crypto-Cipher"
        #[cfg(any(feature = "all", all(feature = "java-io-Serializable", feature = "javax-crypto-Cipher")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Serializable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::crypto::Cipher>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::crypto::SealedObject>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/SealedObject", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/Serializable;Ljavax/crypto/Cipher;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/SealedObject\0", "<init>\0", "(Ljava/io/Serializable;Ljavax/crypto/Cipher;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [SealedObject](https://developer.android.com/reference/javax/crypto/SealedObject.html#SealedObject(javax.crypto.SealedObject))
        // ///
        // /// Required features: "javax-crypto-SealedObject"
        // #[cfg(any(feature = "all", all(feature = "javax-crypto-SealedObject")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::crypto::SealedObject>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::crypto::SealedObject>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/SealedObject", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljavax/crypto/SealedObject;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/SealedObject\0", "<init>\0", "(Ljavax/crypto/SealedObject;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getAlgorithm](https://developer.android.com/reference/javax/crypto/SealedObject.html#getAlgorithm())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAlgorithm<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/SealedObject", java.flags == PUBLIC | FINAL, .name == "getAlgorithm", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/SealedObject\0", "getAlgorithm\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getObject](https://developer.android.com/reference/javax/crypto/SealedObject.html#getObject(java.security.Key))
        ///
        /// Required features: "java-lang-Object", "java-security-Key"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-Key")))]
        pub fn getObject_Key<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/SealedObject", java.flags == PUBLIC | FINAL, .name == "getObject", .descriptor == "(Ljava/security/Key;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/SealedObject\0", "getObject\0", "(Ljava/security/Key;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getObject](https://developer.android.com/reference/javax/crypto/SealedObject.html#getObject(javax.crypto.Cipher))
        ///
        /// Required features: "java-lang-Object", "javax-crypto-Cipher"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "javax-crypto-Cipher")))]
        pub fn getObject_Cipher<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::crypto::Cipher>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/SealedObject", java.flags == PUBLIC | FINAL, .name == "getObject", .descriptor == "(Ljavax/crypto/Cipher;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/SealedObject\0", "getObject\0", "(Ljavax/crypto/Cipher;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getObject](https://developer.android.com/reference/javax/crypto/SealedObject.html#getObject(java.security.Key,%20java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-security-Key"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-security-Key")))]
        pub fn getObject_Key_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/SealedObject", java.flags == PUBLIC | FINAL, .name == "getObject", .descriptor == "(Ljava/security/Key;Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/SealedObject\0", "getObject\0", "(Ljava/security/Key;Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public field
        // /// **get** protected [encodedParams](https://developer.android.com/reference/javax/crypto/SealedObject.html#encodedParams)
        // pub fn encodedParams<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("javax/crypto/SealedObject\0", "encodedParams\0", "[B\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [encodedParams](https://developer.android.com/reference/javax/crypto/SealedObject.html#encodedParams)
        // pub fn set_encodedParams<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ByteArray>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("javax/crypto/SealedObject\0", "encodedParams\0", "[B\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }
    }
}
