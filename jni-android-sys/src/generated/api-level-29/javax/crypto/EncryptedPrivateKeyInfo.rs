// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-crypto-EncryptedPrivateKeyInfo"))]
__jni_bindgen! {
    /// public class [EncryptedPrivateKeyInfo](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html)
    ///
    /// Required feature: javax-crypto-EncryptedPrivateKeyInfo
    public class EncryptedPrivateKeyInfo ("javax/crypto/EncryptedPrivateKeyInfo") extends crate::java::lang::Object {

        /// [EncryptedPrivateKeyInfo](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#EncryptedPrivateKeyInfo(byte%5B%5D))
        pub fn new_byte_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::crypto::EncryptedPrivateKeyInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "<init>\0", "([B)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [EncryptedPrivateKeyInfo](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#EncryptedPrivateKeyInfo(java.lang.String,%20byte%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_byte_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::crypto::EncryptedPrivateKeyInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "<init>\0", "(Ljava/lang/String;[B)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [EncryptedPrivateKeyInfo](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#EncryptedPrivateKeyInfo(java.security.AlgorithmParameters,%20byte%5B%5D))
        ///
        /// Required features: "java-security-AlgorithmParameters"
        #[cfg(any(feature = "all", all(feature = "java-security-AlgorithmParameters")))]
        pub fn new_AlgorithmParameters_byte_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::AlgorithmParameters>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::crypto::EncryptedPrivateKeyInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/security/AlgorithmParameters;[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "<init>\0", "(Ljava/security/AlgorithmParameters;[B)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlgName](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#getAlgName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAlgName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "getAlgName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "getAlgName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlgParameters](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#getAlgParameters())
        ///
        /// Required features: "java-security-AlgorithmParameters"
        #[cfg(any(feature = "all", all(feature = "java-security-AlgorithmParameters")))]
        pub fn getAlgParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::AlgorithmParameters>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "getAlgParameters", .descriptor == "()Ljava/security/AlgorithmParameters;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "getAlgParameters\0", "()Ljava/security/AlgorithmParameters;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEncryptedData](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#getEncryptedData())
        pub fn getEncryptedData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "getEncryptedData", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "getEncryptedData\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeySpec](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#getKeySpec(javax.crypto.Cipher))
        ///
        /// Required features: "java-security-spec-PKCS8EncodedKeySpec", "javax-crypto-Cipher"
        #[cfg(any(feature = "all", all(feature = "java-security-spec-PKCS8EncodedKeySpec", feature = "javax-crypto-Cipher")))]
        pub fn getKeySpec_Cipher<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::crypto::Cipher>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::spec::PKCS8EncodedKeySpec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "getKeySpec", .descriptor == "(Ljavax/crypto/Cipher;)Ljava/security/spec/PKCS8EncodedKeySpec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "getKeySpec\0", "(Ljavax/crypto/Cipher;)Ljava/security/spec/PKCS8EncodedKeySpec;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeySpec](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#getKeySpec(java.security.Key))
        ///
        /// Required features: "java-security-Key", "java-security-spec-PKCS8EncodedKeySpec"
        #[cfg(any(feature = "all", all(feature = "java-security-Key", feature = "java-security-spec-PKCS8EncodedKeySpec")))]
        pub fn getKeySpec_Key<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::spec::PKCS8EncodedKeySpec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "getKeySpec", .descriptor == "(Ljava/security/Key;)Ljava/security/spec/PKCS8EncodedKeySpec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "getKeySpec\0", "(Ljava/security/Key;)Ljava/security/spec/PKCS8EncodedKeySpec;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeySpec](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#getKeySpec(java.security.Key,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-Key", "java-security-spec-PKCS8EncodedKeySpec"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Key", feature = "java-security-spec-PKCS8EncodedKeySpec")))]
        pub fn getKeySpec_Key_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::spec::PKCS8EncodedKeySpec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "getKeySpec", .descriptor == "(Ljava/security/Key;Ljava/lang/String;)Ljava/security/spec/PKCS8EncodedKeySpec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "getKeySpec\0", "(Ljava/security/Key;Ljava/lang/String;)Ljava/security/spec/PKCS8EncodedKeySpec;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeySpec](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#getKeySpec(java.security.Key,%20java.security.Provider))
        ///
        /// Required features: "java-security-Key", "java-security-Provider", "java-security-spec-PKCS8EncodedKeySpec"
        #[cfg(any(feature = "all", all(feature = "java-security-Key", feature = "java-security-Provider", feature = "java-security-spec-PKCS8EncodedKeySpec")))]
        pub fn getKeySpec_Key_Provider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Provider>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::spec::PKCS8EncodedKeySpec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "getKeySpec", .descriptor == "(Ljava/security/Key;Ljava/security/Provider;)Ljava/security/spec/PKCS8EncodedKeySpec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "getKeySpec\0", "(Ljava/security/Key;Ljava/security/Provider;)Ljava/security/spec/PKCS8EncodedKeySpec;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEncoded](https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html#getEncoded())
        pub fn getEncoded<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/EncryptedPrivateKeyInfo", java.flags == PUBLIC, .name == "getEncoded", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/EncryptedPrivateKeyInfo\0", "getEncoded\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
