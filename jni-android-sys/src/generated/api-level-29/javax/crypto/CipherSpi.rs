// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-crypto-CipherSpi"))]
__jni_bindgen! {
    /// public class [CipherSpi](https://developer.android.com/reference/javax/crypto/CipherSpi.html)
    ///
    /// Required feature: javax-crypto-CipherSpi
    public class CipherSpi ("javax/crypto/CipherSpi") extends crate::java::lang::Object {

        /// [CipherSpi](https://developer.android.com/reference/javax/crypto/CipherSpi.html#CipherSpi())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::crypto::CipherSpi>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/crypto/CipherSpi", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [engineSetMode](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineSetMode(java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn engineSetMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineSetMode", .descriptor == "(Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineSetMode\0", "(Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineSetPadding](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineSetPadding(java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn engineSetPadding<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineSetPadding", .descriptor == "(Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineSetPadding\0", "(Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineGetBlockSize](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineGetBlockSize())
        // fn engineGetBlockSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineGetBlockSize", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineGetBlockSize\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineGetOutputSize](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineGetOutputSize(int))
        // fn engineGetOutputSize<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineGetOutputSize", .descriptor == "(I)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineGetOutputSize\0", "(I)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineGetIV](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineGetIV())
        // fn engineGetIV<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineGetIV", .descriptor == "()[B"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineGetIV\0", "()[B\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineGetParameters](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineGetParameters())
        // ///
        // /// Required features: "java-security-AlgorithmParameters"
        // #[cfg(any(feature = "all", all(feature = "java-security-AlgorithmParameters")))]
        // fn engineGetParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::AlgorithmParameters>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineGetParameters", .descriptor == "()Ljava/security/AlgorithmParameters;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineGetParameters\0", "()Ljava/security/AlgorithmParameters;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineInit](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineInit(int,%20java.security.Key,%20java.security.SecureRandom))
        // ///
        // /// Required features: "java-security-Key", "java-security-SecureRandom"
        // #[cfg(any(feature = "all", all(feature = "java-security-Key", feature = "java-security-SecureRandom")))]
        // fn engineInit<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::SecureRandom>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineInit", .descriptor == "(ILjava/security/Key;Ljava/security/SecureRandom;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineInit\0", "(ILjava/security/Key;Ljava/security/SecureRandom;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineInit](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineInit(int,%20java.security.Key,%20java.security.spec.AlgorithmParameterSpec,%20java.security.SecureRandom))
        // ///
        // /// Required features: "java-security-Key", "java-security-SecureRandom", "java-security-spec-AlgorithmParameterSpec"
        // #[cfg(any(feature = "all", all(feature = "java-security-Key", feature = "java-security-SecureRandom", feature = "java-security-spec-AlgorithmParameterSpec")))]
        // fn engineInit<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::spec::AlgorithmParameterSpec>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::SecureRandom>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineInit", .descriptor == "(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineInit\0", "(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineInit](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineInit(int,%20java.security.Key,%20java.security.AlgorithmParameters,%20java.security.SecureRandom))
        // ///
        // /// Required features: "java-security-AlgorithmParameters", "java-security-Key", "java-security-SecureRandom"
        // #[cfg(any(feature = "all", all(feature = "java-security-AlgorithmParameters", feature = "java-security-Key", feature = "java-security-SecureRandom")))]
        // fn engineInit<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::AlgorithmParameters>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::SecureRandom>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineInit", .descriptor == "(ILjava/security/Key;Ljava/security/AlgorithmParameters;Ljava/security/SecureRandom;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineInit\0", "(ILjava/security/Key;Ljava/security/AlgorithmParameters;Ljava/security/SecureRandom;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineUpdate](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineUpdate(byte%5B%5D,%20int,%20int))
        // fn engineUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineUpdate", .descriptor == "([BII)[B"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineUpdate\0", "([BII)[B\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineUpdate](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineUpdate(byte%5B%5D,%20int,%20int,%20byte%5B%5D,%20int))
        // fn engineUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineUpdate", .descriptor == "([BII[BI)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineUpdate\0", "([BII[BI)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineUpdate](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineUpdate(java.nio.ByteBuffer,%20java.nio.ByteBuffer))
        // ///
        // /// Required features: "java-nio-ByteBuffer"
        // #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        // fn engineUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED, .name == "engineUpdate", .descriptor == "(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineUpdate\0", "(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineDoFinal](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineDoFinal(byte%5B%5D,%20int,%20int))
        // fn engineDoFinal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineDoFinal", .descriptor == "([BII)[B"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineDoFinal\0", "([BII)[B\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineDoFinal](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineDoFinal(byte%5B%5D,%20int,%20int,%20byte%5B%5D,%20int))
        // fn engineDoFinal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED | ABSTRACT, .name == "engineDoFinal", .descriptor == "([BII[BI)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineDoFinal\0", "([BII[BI)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineDoFinal](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineDoFinal(java.nio.ByteBuffer,%20java.nio.ByteBuffer))
        // ///
        // /// Required features: "java-nio-ByteBuffer"
        // #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        // fn engineDoFinal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED, .name == "engineDoFinal", .descriptor == "(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineDoFinal\0", "(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineWrap](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineWrap(java.security.Key))
        // ///
        // /// Required features: "java-security-Key"
        // #[cfg(any(feature = "all", all(feature = "java-security-Key")))]
        // fn engineWrap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED, .name == "engineWrap", .descriptor == "(Ljava/security/Key;)[B"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineWrap\0", "(Ljava/security/Key;)[B\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineUnwrap](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineUnwrap(byte%5B%5D,%20java.lang.String,%20int))
        // ///
        // /// Required features: "java-lang-String", "java-security-Key"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Key")))]
        // fn engineUnwrap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Key>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED, .name == "engineUnwrap", .descriptor == "([BLjava/lang/String;I)Ljava/security/Key;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineUnwrap\0", "([BLjava/lang/String;I)Ljava/security/Key;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineGetKeySize](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineGetKeySize(java.security.Key))
        // ///
        // /// Required features: "java-security-Key"
        // #[cfg(any(feature = "all", all(feature = "java-security-Key")))]
        // fn engineGetKeySize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED, .name == "engineGetKeySize", .descriptor == "(Ljava/security/Key;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineGetKeySize\0", "(Ljava/security/Key;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineUpdateAAD](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineUpdateAAD(byte%5B%5D,%20int,%20int))
        // fn engineUpdateAAD<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED, .name == "engineUpdateAAD", .descriptor == "([BII)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineUpdateAAD\0", "([BII)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [engineUpdateAAD](https://developer.android.com/reference/javax/crypto/CipherSpi.html#engineUpdateAAD(java.nio.ByteBuffer))
        // ///
        // /// Required features: "java-nio-ByteBuffer"
        // #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        // fn engineUpdateAAD<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/crypto/CipherSpi", java.flags == PROTECTED, .name == "engineUpdateAAD", .descriptor == "(Ljava/nio/ByteBuffer;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/crypto/CipherSpi\0", "engineUpdateAAD\0", "(Ljava/nio/ByteBuffer;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
