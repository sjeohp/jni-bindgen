// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-security-cert-X509Certificate"))]
__jni_bindgen! {
    /// public class [X509Certificate](https://developer.android.com/reference/javax/security/cert/X509Certificate.html)
    ///
    /// Required feature: javax-security-cert-X509Certificate
    public class X509Certificate ("javax/security/cert/X509Certificate") extends crate::javax::security::cert::Certificate {

        /// [X509Certificate](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#X509Certificate())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::security::cert::X509Certificate>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getInstance(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "javax-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "javax-security-cert-X509Certificate")))]
        pub fn getInstance_InputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::security::cert::X509Certificate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | STATIC | FINAL, .name == "getInstance", .descriptor == "(Ljava/io/InputStream;)Ljavax/security/cert/X509Certificate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/security/cert/X509Certificate\0", "getInstance\0", "(Ljava/io/InputStream;)Ljavax/security/cert/X509Certificate;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getInstance(byte%5B%5D))
        ///
        /// Required features: "javax-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "javax-security-cert-X509Certificate")))]
        pub fn getInstance_byte_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::security::cert::X509Certificate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | STATIC | FINAL, .name == "getInstance", .descriptor == "([B)Ljavax/security/cert/X509Certificate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/security/cert/X509Certificate\0", "getInstance\0", "([B)Ljavax/security/cert/X509Certificate;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkValidity](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#checkValidity())
        pub fn checkValidity<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "checkValidity", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "checkValidity\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkValidity](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#checkValidity(java.util.Date))
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn checkValidity_Date<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Date>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "checkValidity", .descriptor == "(Ljava/util/Date;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "checkValidity\0", "(Ljava/util/Date;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVersion](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getVersion())
        pub fn getVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "getVersion", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "getVersion\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSerialNumber](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getSerialNumber())
        ///
        /// Required features: "java-math-BigInteger"
        #[cfg(any(feature = "all", all(feature = "java-math-BigInteger")))]
        pub fn getSerialNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::math::BigInteger>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "getSerialNumber", .descriptor == "()Ljava/math/BigInteger;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "getSerialNumber\0", "()Ljava/math/BigInteger;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIssuerDN](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getIssuerDN())
        ///
        /// Required features: "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal")))]
        pub fn getIssuerDN<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Principal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "getIssuerDN", .descriptor == "()Ljava/security/Principal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "getIssuerDN\0", "()Ljava/security/Principal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubjectDN](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getSubjectDN())
        ///
        /// Required features: "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal")))]
        pub fn getSubjectDN<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Principal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "getSubjectDN", .descriptor == "()Ljava/security/Principal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "getSubjectDN\0", "()Ljava/security/Principal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotBefore](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getNotBefore())
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn getNotBefore<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "getNotBefore", .descriptor == "()Ljava/util/Date;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "getNotBefore\0", "()Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotAfter](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getNotAfter())
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn getNotAfter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "getNotAfter", .descriptor == "()Ljava/util/Date;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "getNotAfter\0", "()Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSigAlgName](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getSigAlgName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSigAlgName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "getSigAlgName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "getSigAlgName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSigAlgOID](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getSigAlgOID())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSigAlgOID<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "getSigAlgOID", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "getSigAlgOID\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSigAlgParams](https://developer.android.com/reference/javax/security/cert/X509Certificate.html#getSigAlgParams())
        pub fn getSigAlgParams<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/cert/X509Certificate", java.flags == PUBLIC | ABSTRACT, .name == "getSigAlgParams", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/cert/X509Certificate\0", "getSigAlgParams\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
