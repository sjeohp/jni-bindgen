// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-security-auth-Subject"))]
__jni_bindgen! {
    /// public final class [Subject](https://developer.android.com/reference/javax/security/auth/Subject.html)
    ///
    /// Required feature: javax-security-auth-Subject
    public final class Subject ("javax/security/auth/Subject") extends crate::java::lang::Object, implements crate::java::io::Serializable {

        /// [Subject](https://developer.android.com/reference/javax/security/auth/Subject.html#Subject())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::security::auth::Subject>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Subject](https://developer.android.com/reference/javax/security/auth/Subject.html#Subject(boolean,%20java.util.Set,%20java.util.Set,%20java.util.Set))
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn new_boolean_Set_Set_Set<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::security::auth::Subject>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ZLjava/util/Set;Ljava/util/Set;Ljava/util/Set;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "<init>\0", "(ZLjava/util/Set;Ljava/util/Set;Ljava/util/Set;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setReadOnly](https://developer.android.com/reference/javax/security/auth/Subject.html#setReadOnly())
        pub fn setReadOnly<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "setReadOnly", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "setReadOnly\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isReadOnly](https://developer.android.com/reference/javax/security/auth/Subject.html#isReadOnly())
        pub fn isReadOnly<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "isReadOnly", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "isReadOnly\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubject](https://developer.android.com/reference/javax/security/auth/Subject.html#getSubject(java.security.AccessControlContext))
        ///
        /// Required features: "java-security-AccessControlContext", "javax-security-auth-Subject"
        #[cfg(any(feature = "all", all(feature = "java-security-AccessControlContext", feature = "javax-security-auth-Subject")))]
        pub fn getSubject<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::AccessControlContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::security::auth::Subject>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC | STATIC, .name == "getSubject", .descriptor == "(Ljava/security/AccessControlContext;)Ljavax/security/auth/Subject;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/security/auth/Subject\0", "getSubject\0", "(Ljava/security/AccessControlContext;)Ljavax/security/auth/Subject;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doAs](https://developer.android.com/reference/javax/security/auth/Subject.html#doAs(javax.security.auth.Subject,%20java.security.PrivilegedAction))
        ///
        /// Required features: "java-lang-Object", "java-security-PrivilegedAction", "javax-security-auth-Subject"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-PrivilegedAction", feature = "javax-security-auth-Subject")))]
        pub fn doAs_Subject_PrivilegedAction<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::security::auth::Subject>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedAction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC | STATIC, .name == "doAs", .descriptor == "(Ljavax/security/auth/Subject;Ljava/security/PrivilegedAction;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/security/auth/Subject\0", "doAs\0", "(Ljavax/security/auth/Subject;Ljava/security/PrivilegedAction;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doAs](https://developer.android.com/reference/javax/security/auth/Subject.html#doAs(javax.security.auth.Subject,%20java.security.PrivilegedExceptionAction))
        ///
        /// Required features: "java-lang-Object", "java-security-PrivilegedExceptionAction", "javax-security-auth-Subject"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-PrivilegedExceptionAction", feature = "javax-security-auth-Subject")))]
        pub fn doAs_Subject_PrivilegedExceptionAction<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::security::auth::Subject>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedExceptionAction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC | STATIC, .name == "doAs", .descriptor == "(Ljavax/security/auth/Subject;Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/security/auth/Subject\0", "doAs\0", "(Ljavax/security/auth/Subject;Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doAsPrivileged](https://developer.android.com/reference/javax/security/auth/Subject.html#doAsPrivileged(javax.security.auth.Subject,%20java.security.PrivilegedAction,%20java.security.AccessControlContext))
        ///
        /// Required features: "java-lang-Object", "java-security-AccessControlContext", "java-security-PrivilegedAction", "javax-security-auth-Subject"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-AccessControlContext", feature = "java-security-PrivilegedAction", feature = "javax-security-auth-Subject")))]
        pub fn doAsPrivileged_Subject_PrivilegedAction_AccessControlContext<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::security::auth::Subject>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedAction>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::AccessControlContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC | STATIC, .name == "doAsPrivileged", .descriptor == "(Ljavax/security/auth/Subject;Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/security/auth/Subject\0", "doAsPrivileged\0", "(Ljavax/security/auth/Subject;Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doAsPrivileged](https://developer.android.com/reference/javax/security/auth/Subject.html#doAsPrivileged(javax.security.auth.Subject,%20java.security.PrivilegedExceptionAction,%20java.security.AccessControlContext))
        ///
        /// Required features: "java-lang-Object", "java-security-AccessControlContext", "java-security-PrivilegedExceptionAction", "javax-security-auth-Subject"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-AccessControlContext", feature = "java-security-PrivilegedExceptionAction", feature = "javax-security-auth-Subject")))]
        pub fn doAsPrivileged_Subject_PrivilegedExceptionAction_AccessControlContext<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::security::auth::Subject>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedExceptionAction>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::AccessControlContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC | STATIC, .name == "doAsPrivileged", .descriptor == "(Ljavax/security/auth/Subject;Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/security/auth/Subject\0", "doAsPrivileged\0", "(Ljavax/security/auth/Subject;Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrincipals](https://developer.android.com/reference/javax/security/auth/Subject.html#getPrincipals())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getPrincipals<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "getPrincipals", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "getPrincipals\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrincipals](https://developer.android.com/reference/javax/security/auth/Subject.html#getPrincipals(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-util-Set")))]
        pub fn getPrincipals_Class<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "getPrincipals", .descriptor == "(Ljava/lang/Class;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "getPrincipals\0", "(Ljava/lang/Class;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPublicCredentials](https://developer.android.com/reference/javax/security/auth/Subject.html#getPublicCredentials())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getPublicCredentials<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "getPublicCredentials", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "getPublicCredentials\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrivateCredentials](https://developer.android.com/reference/javax/security/auth/Subject.html#getPrivateCredentials())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getPrivateCredentials<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "getPrivateCredentials", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "getPrivateCredentials\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPublicCredentials](https://developer.android.com/reference/javax/security/auth/Subject.html#getPublicCredentials(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-util-Set")))]
        pub fn getPublicCredentials_Class<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "getPublicCredentials", .descriptor == "(Ljava/lang/Class;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "getPublicCredentials\0", "(Ljava/lang/Class;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrivateCredentials](https://developer.android.com/reference/javax/security/auth/Subject.html#getPrivateCredentials(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-util-Set")))]
        pub fn getPrivateCredentials_Class<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "getPrivateCredentials", .descriptor == "(Ljava/lang/Class;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "getPrivateCredentials\0", "(Ljava/lang/Class;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/javax/security/auth/Subject.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/javax/security/auth/Subject.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/javax/security/auth/Subject.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/security/auth/Subject", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/security/auth/Subject\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
