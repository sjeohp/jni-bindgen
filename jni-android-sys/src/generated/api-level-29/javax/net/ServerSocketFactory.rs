// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-net-ServerSocketFactory"))]
__jni_bindgen! {
    /// public class [ServerSocketFactory](https://developer.android.com/reference/javax/net/ServerSocketFactory.html)
    ///
    /// Required feature: javax-net-ServerSocketFactory
    public class ServerSocketFactory ("javax/net/ServerSocketFactory") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ServerSocketFactory](https://developer.android.com/reference/javax/net/ServerSocketFactory.html#ServerSocketFactory())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::net::ServerSocketFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/net/ServerSocketFactory", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ServerSocketFactory\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDefault](https://developer.android.com/reference/javax/net/ServerSocketFactory.html#getDefault())
        ///
        /// Required features: "javax-net-ServerSocketFactory"
        #[cfg(any(feature = "all", all(feature = "javax-net-ServerSocketFactory")))]
        pub fn getDefault<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ServerSocketFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ServerSocketFactory", java.flags == PUBLIC | STATIC, .name == "getDefault", .descriptor == "()Ljavax/net/ServerSocketFactory;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/net/ServerSocketFactory\0", "getDefault\0", "()Ljavax/net/ServerSocketFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createServerSocket](https://developer.android.com/reference/javax/net/ServerSocketFactory.html#createServerSocket())
        ///
        /// Required features: "java-net-ServerSocket"
        #[cfg(any(feature = "all", all(feature = "java-net-ServerSocket")))]
        pub fn createServerSocket<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::ServerSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ServerSocketFactory", java.flags == PUBLIC, .name == "createServerSocket", .descriptor == "()Ljava/net/ServerSocket;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ServerSocketFactory\0", "createServerSocket\0", "()Ljava/net/ServerSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createServerSocket](https://developer.android.com/reference/javax/net/ServerSocketFactory.html#createServerSocket(int))
        ///
        /// Required features: "java-net-ServerSocket"
        #[cfg(any(feature = "all", all(feature = "java-net-ServerSocket")))]
        pub fn createServerSocket_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::ServerSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ServerSocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "createServerSocket", .descriptor == "(I)Ljava/net/ServerSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ServerSocketFactory\0", "createServerSocket\0", "(I)Ljava/net/ServerSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createServerSocket](https://developer.android.com/reference/javax/net/ServerSocketFactory.html#createServerSocket(int,%20int))
        ///
        /// Required features: "java-net-ServerSocket"
        #[cfg(any(feature = "all", all(feature = "java-net-ServerSocket")))]
        pub fn createServerSocket_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::ServerSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ServerSocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "createServerSocket", .descriptor == "(II)Ljava/net/ServerSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ServerSocketFactory\0", "createServerSocket\0", "(II)Ljava/net/ServerSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createServerSocket](https://developer.android.com/reference/javax/net/ServerSocketFactory.html#createServerSocket(int,%20int,%20java.net.InetAddress))
        ///
        /// Required features: "java-net-InetAddress", "java-net-ServerSocket"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress", feature = "java-net-ServerSocket")))]
        pub fn createServerSocket_int_int_InetAddress<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::ServerSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ServerSocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "createServerSocket", .descriptor == "(IILjava/net/InetAddress;)Ljava/net/ServerSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ServerSocketFactory\0", "createServerSocket\0", "(IILjava/net/InetAddress;)Ljava/net/ServerSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
