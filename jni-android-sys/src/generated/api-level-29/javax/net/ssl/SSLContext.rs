// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-net-ssl-SSLContext"))]
__jni_bindgen! {
    /// public class [SSLContext](https://developer.android.com/reference/javax/net/ssl/SSLContext.html)
    ///
    /// Required feature: javax-net-ssl-SSLContext
    public class SSLContext ("javax/net/ssl/SSLContext") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SSLContext](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#SSLContext(javax.net.ssl.SSLContextSpi,%20java.security.Provider,%20java.lang.String))
        // ///
        // /// Required features: "java-lang-String", "java-security-Provider", "javax-net-ssl-SSLContextSpi"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Provider", feature = "javax-net-ssl-SSLContextSpi")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::net::ssl::SSLContextSpi>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Provider>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLContext>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/net/ssl/SSLContext", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljavax/net/ssl/SSLContextSpi;Ljava/security/Provider;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "<init>\0", "(Ljavax/net/ssl/SSLContextSpi;Ljava/security/Provider;Ljava/lang/String;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDefault](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getDefault())
        ///
        /// Required features: "javax-net-ssl-SSLContext"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-SSLContext")))]
        pub fn getDefault<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "getDefault", .descriptor == "()Ljavax/net/ssl/SSLContext;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/net/ssl/SSLContext\0", "getDefault\0", "()Ljavax/net/ssl/SSLContext;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDefault](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#setDefault(javax.net.ssl.SSLContext))
        ///
        /// Required features: "javax-net-ssl-SSLContext"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-SSLContext")))]
        pub fn setDefault<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::net::ssl::SSLContext>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "setDefault", .descriptor == "(Ljavax/net/ssl/SSLContext;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/net/ssl/SSLContext\0", "setDefault\0", "(Ljavax/net/ssl/SSLContext;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getInstance(java.lang.String))
        ///
        /// Required features: "java-lang-String", "javax-net-ssl-SSLContext"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "javax-net-ssl-SSLContext")))]
        pub fn getInstance_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/net/ssl/SSLContext\0", "getInstance\0", "(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getInstance(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "javax-net-ssl-SSLContext"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "javax-net-ssl-SSLContext")))]
        pub fn getInstance_String_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljavax/net/ssl/SSLContext;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/net/ssl/SSLContext\0", "getInstance\0", "(Ljava/lang/String;Ljava/lang/String;)Ljavax/net/ssl/SSLContext;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getInstance(java.lang.String,%20java.security.Provider))
        ///
        /// Required features: "java-lang-String", "java-security-Provider", "javax-net-ssl-SSLContext"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Provider", feature = "javax-net-ssl-SSLContext")))]
        pub fn getInstance_String_Provider<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Provider>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/net/ssl/SSLContext\0", "getInstance\0", "(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProtocol](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getProtocol())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getProtocol<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "getProtocol", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "getProtocol\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProvider](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getProvider())
        ///
        /// Required features: "java-security-Provider"
        #[cfg(any(feature = "all", all(feature = "java-security-Provider")))]
        pub fn getProvider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Provider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "getProvider", .descriptor == "()Ljava/security/Provider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "getProvider\0", "()Ljava/security/Provider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [init](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#init(javax.net.ssl.KeyManager%5B%5D,%20javax.net.ssl.TrustManager%5B%5D,%20java.security.SecureRandom))
        ///
        /// Required features: "java-security-SecureRandom", "javax-net-ssl-KeyManager", "javax-net-ssl-TrustManager"
        #[cfg(any(feature = "all", all(feature = "java-security-SecureRandom", feature = "javax-net-ssl-KeyManager", feature = "javax-net-ssl-TrustManager")))]
        pub fn init<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::javax::net::ssl::KeyManager, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::javax::net::ssl::TrustManager, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::SecureRandom>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "init", .descriptor == "([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "init\0", "([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSocketFactory](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getSocketFactory())
        ///
        /// Required features: "javax-net-ssl-SSLSocketFactory"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-SSLSocketFactory")))]
        pub fn getSocketFactory<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLSocketFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "getSocketFactory", .descriptor == "()Ljavax/net/ssl/SSLSocketFactory;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "getSocketFactory\0", "()Ljavax/net/ssl/SSLSocketFactory;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getServerSocketFactory](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getServerSocketFactory())
        ///
        /// Required features: "javax-net-ssl-SSLServerSocketFactory"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-SSLServerSocketFactory")))]
        pub fn getServerSocketFactory<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLServerSocketFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "getServerSocketFactory", .descriptor == "()Ljavax/net/ssl/SSLServerSocketFactory;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "getServerSocketFactory\0", "()Ljavax/net/ssl/SSLServerSocketFactory;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSSLEngine](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#createSSLEngine())
        ///
        /// Required features: "javax-net-ssl-SSLEngine"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-SSLEngine")))]
        pub fn createSSLEngine<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLEngine>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "createSSLEngine", .descriptor == "()Ljavax/net/ssl/SSLEngine;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "createSSLEngine\0", "()Ljavax/net/ssl/SSLEngine;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSSLEngine](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#createSSLEngine(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String", "javax-net-ssl-SSLEngine"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "javax-net-ssl-SSLEngine")))]
        pub fn createSSLEngine_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLEngine>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "createSSLEngine", .descriptor == "(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "createSSLEngine\0", "(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getServerSessionContext](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getServerSessionContext())
        ///
        /// Required features: "javax-net-ssl-SSLSessionContext"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-SSLSessionContext")))]
        pub fn getServerSessionContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLSessionContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "getServerSessionContext", .descriptor == "()Ljavax/net/ssl/SSLSessionContext;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "getServerSessionContext\0", "()Ljavax/net/ssl/SSLSessionContext;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClientSessionContext](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getClientSessionContext())
        ///
        /// Required features: "javax-net-ssl-SSLSessionContext"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-SSLSessionContext")))]
        pub fn getClientSessionContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLSessionContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "getClientSessionContext", .descriptor == "()Ljavax/net/ssl/SSLSessionContext;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "getClientSessionContext\0", "()Ljavax/net/ssl/SSLSessionContext;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultSSLParameters](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getDefaultSSLParameters())
        ///
        /// Required features: "javax-net-ssl-SSLParameters"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-SSLParameters")))]
        pub fn getDefaultSSLParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLParameters>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "getDefaultSSLParameters", .descriptor == "()Ljavax/net/ssl/SSLParameters;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "getDefaultSSLParameters\0", "()Ljavax/net/ssl/SSLParameters;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedSSLParameters](https://developer.android.com/reference/javax/net/ssl/SSLContext.html#getSupportedSSLParameters())
        ///
        /// Required features: "javax-net-ssl-SSLParameters"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-SSLParameters")))]
        pub fn getSupportedSSLParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLParameters>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLContext", java.flags == PUBLIC | FINAL, .name == "getSupportedSSLParameters", .descriptor == "()Ljavax/net/ssl/SSLParameters;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLContext\0", "getSupportedSSLParameters\0", "()Ljavax/net/ssl/SSLParameters;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
