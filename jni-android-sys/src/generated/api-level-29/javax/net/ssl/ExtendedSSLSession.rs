// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-net-ssl-ExtendedSSLSession"))]
__jni_bindgen! {
    /// public class [ExtendedSSLSession](https://developer.android.com/reference/javax/net/ssl/ExtendedSSLSession.html)
    ///
    /// Required feature: javax-net-ssl-ExtendedSSLSession
    public class ExtendedSSLSession ("javax/net/ssl/ExtendedSSLSession") extends crate::java::lang::Object, implements crate::javax::net::ssl::SSLSession {

        /// [ExtendedSSLSession](https://developer.android.com/reference/javax/net/ssl/ExtendedSSLSession.html#ExtendedSSLSession())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::net::ssl::ExtendedSSLSession>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/ExtendedSSLSession", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/ExtendedSSLSession\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalSupportedSignatureAlgorithms](https://developer.android.com/reference/javax/net/ssl/ExtendedSSLSession.html#getLocalSupportedSignatureAlgorithms())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLocalSupportedSignatureAlgorithms<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/ExtendedSSLSession", java.flags == PUBLIC | ABSTRACT, .name == "getLocalSupportedSignatureAlgorithms", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/ExtendedSSLSession\0", "getLocalSupportedSignatureAlgorithms\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPeerSupportedSignatureAlgorithms](https://developer.android.com/reference/javax/net/ssl/ExtendedSSLSession.html#getPeerSupportedSignatureAlgorithms())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPeerSupportedSignatureAlgorithms<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/ExtendedSSLSession", java.flags == PUBLIC | ABSTRACT, .name == "getPeerSupportedSignatureAlgorithms", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/ExtendedSSLSession\0", "getPeerSupportedSignatureAlgorithms\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRequestedServerNames](https://developer.android.com/reference/javax/net/ssl/ExtendedSSLSession.html#getRequestedServerNames())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getRequestedServerNames<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/ExtendedSSLSession", java.flags == PUBLIC, .name == "getRequestedServerNames", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/ExtendedSSLSession\0", "getRequestedServerNames\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
