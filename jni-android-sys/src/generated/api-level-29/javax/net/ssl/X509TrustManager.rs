// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-net-ssl-X509TrustManager"))]
__jni_bindgen! {
    /// public interface [X509TrustManager](https://developer.android.com/reference/javax/net/ssl/X509TrustManager.html)
    ///
    /// Required feature: javax-net-ssl-X509TrustManager
    public interface X509TrustManager ("javax/net/ssl/X509TrustManager") extends crate::java::lang::Object, implements crate::javax::net::ssl::TrustManager {

        /// [checkClientTrusted](https://developer.android.com/reference/javax/net/ssl/X509TrustManager.html#checkClientTrusted(java.security.cert.X509Certificate%5B%5D,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-X509Certificate")))]
        pub fn checkClientTrusted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509TrustManager", java.flags == PUBLIC | ABSTRACT, .name == "checkClientTrusted", .descriptor == "([Ljava/security/cert/X509Certificate;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509TrustManager\0", "checkClientTrusted\0", "([Ljava/security/cert/X509Certificate;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkServerTrusted](https://developer.android.com/reference/javax/net/ssl/X509TrustManager.html#checkServerTrusted(java.security.cert.X509Certificate%5B%5D,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-X509Certificate")))]
        pub fn checkServerTrusted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509TrustManager", java.flags == PUBLIC | ABSTRACT, .name == "checkServerTrusted", .descriptor == "([Ljava/security/cert/X509Certificate;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509TrustManager\0", "checkServerTrusted\0", "([Ljava/security/cert/X509Certificate;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAcceptedIssuers](https://developer.android.com/reference/javax/net/ssl/X509TrustManager.html#getAcceptedIssuers())
        ///
        /// Required features: "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-X509Certificate")))]
        pub fn getAcceptedIssuers<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509TrustManager", java.flags == PUBLIC | ABSTRACT, .name == "getAcceptedIssuers", .descriptor == "()[Ljava/security/cert/X509Certificate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509TrustManager\0", "getAcceptedIssuers\0", "()[Ljava/security/cert/X509Certificate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
