// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-net-ssl-X509KeyManager"))]
__jni_bindgen! {
    /// public interface [X509KeyManager](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html)
    ///
    /// Required feature: javax-net-ssl-X509KeyManager
    public interface X509KeyManager ("javax/net/ssl/X509KeyManager") extends crate::java::lang::Object, implements crate::javax::net::ssl::KeyManager {

        /// [getClientAliases](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html#getClientAliases(java.lang.String,%20java.security.Principal%5B%5D))
        ///
        /// Required features: "java-lang-String", "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Principal")))]
        pub fn getClientAliases<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::Principal, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509KeyManager", java.flags == PUBLIC | ABSTRACT, .name == "getClientAliases", .descriptor == "(Ljava/lang/String;[Ljava/security/Principal;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509KeyManager\0", "getClientAliases\0", "(Ljava/lang/String;[Ljava/security/Principal;)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [chooseClientAlias](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html#chooseClientAlias(java.lang.String%5B%5D,%20java.security.Principal%5B%5D,%20java.net.Socket))
        ///
        /// Required features: "java-lang-String", "java-net-Socket", "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-Socket", feature = "java-security-Principal")))]
        pub fn chooseClientAlias<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::Principal, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509KeyManager", java.flags == PUBLIC | ABSTRACT, .name == "chooseClientAlias", .descriptor == "([Ljava/lang/String;[Ljava/security/Principal;Ljava/net/Socket;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509KeyManager\0", "chooseClientAlias\0", "([Ljava/lang/String;[Ljava/security/Principal;Ljava/net/Socket;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getServerAliases](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html#getServerAliases(java.lang.String,%20java.security.Principal%5B%5D))
        ///
        /// Required features: "java-lang-String", "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Principal")))]
        pub fn getServerAliases<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::Principal, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509KeyManager", java.flags == PUBLIC | ABSTRACT, .name == "getServerAliases", .descriptor == "(Ljava/lang/String;[Ljava/security/Principal;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509KeyManager\0", "getServerAliases\0", "(Ljava/lang/String;[Ljava/security/Principal;)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [chooseServerAlias](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html#chooseServerAlias(java.lang.String,%20java.security.Principal%5B%5D,%20java.net.Socket))
        ///
        /// Required features: "java-lang-String", "java-net-Socket", "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-Socket", feature = "java-security-Principal")))]
        pub fn chooseServerAlias<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::Principal, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509KeyManager", java.flags == PUBLIC | ABSTRACT, .name == "chooseServerAlias", .descriptor == "(Ljava/lang/String;[Ljava/security/Principal;Ljava/net/Socket;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509KeyManager\0", "chooseServerAlias\0", "(Ljava/lang/String;[Ljava/security/Principal;Ljava/net/Socket;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCertificateChain](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html#getCertificateChain(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-X509Certificate")))]
        pub fn getCertificateChain<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509KeyManager", java.flags == PUBLIC | ABSTRACT, .name == "getCertificateChain", .descriptor == "(Ljava/lang/String;)[Ljava/security/cert/X509Certificate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509KeyManager\0", "getCertificateChain\0", "(Ljava/lang/String;)[Ljava/security/cert/X509Certificate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrivateKey](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html#getPrivateKey(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-PrivateKey"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-PrivateKey")))]
        pub fn getPrivateKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::PrivateKey>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509KeyManager", java.flags == PUBLIC | ABSTRACT, .name == "getPrivateKey", .descriptor == "(Ljava/lang/String;)Ljava/security/PrivateKey;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509KeyManager\0", "getPrivateKey\0", "(Ljava/lang/String;)Ljava/security/PrivateKey;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
