// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-net-ssl-SSLSocketFactory"))]
__jni_bindgen! {
    /// public class [SSLSocketFactory](https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html)
    ///
    /// Required feature: javax-net-ssl-SSLSocketFactory
    public class SSLSocketFactory ("javax/net/ssl/SSLSocketFactory") extends crate::javax::net::SocketFactory {

        /// [SSLSocketFactory](https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html#SSLSocketFactory())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::net::ssl::SSLSocketFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLSocketFactory\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefault](https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html#getDefault())
        ///
        /// Required features: "javax-net-SocketFactory"
        #[cfg(any(feature = "all", all(feature = "javax-net-SocketFactory")))]
        pub fn getDefault<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::SocketFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLSocketFactory", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "getDefault", .descriptor == "()Ljavax/net/SocketFactory;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/net/ssl/SSLSocketFactory\0", "getDefault\0", "()Ljavax/net/SocketFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultCipherSuites](https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html#getDefaultCipherSuites())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDefaultCipherSuites<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLSocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "getDefaultCipherSuites", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLSocketFactory\0", "getDefaultCipherSuites\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedCipherSuites](https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html#getSupportedCipherSuites())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSupportedCipherSuites<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLSocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "getSupportedCipherSuites", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLSocketFactory\0", "getSupportedCipherSuites\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSocket](https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html#createSocket(java.net.Socket,%20java.lang.String,%20int,%20boolean))
        ///
        /// Required features: "java-lang-String", "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-Socket")))]
        pub fn createSocket<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Socket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/SSLSocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "createSocket", .descriptor == "(Ljava/net/Socket;Ljava/lang/String;IZ)Ljava/net/Socket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/SSLSocketFactory\0", "createSocket\0", "(Ljava/net/Socket;Ljava/lang/String;IZ)Ljava/net/Socket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
