// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-net-ssl-X509ExtendedTrustManager"))]
__jni_bindgen! {
    /// public class [X509ExtendedTrustManager](https://developer.android.com/reference/javax/net/ssl/X509ExtendedTrustManager.html)
    ///
    /// Required feature: javax-net-ssl-X509ExtendedTrustManager
    public class X509ExtendedTrustManager ("javax/net/ssl/X509ExtendedTrustManager") extends crate::java::lang::Object, implements crate::javax::net::ssl::X509TrustManager {

        /// [X509ExtendedTrustManager](https://developer.android.com/reference/javax/net/ssl/X509ExtendedTrustManager.html#X509ExtendedTrustManager())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::net::ssl::X509ExtendedTrustManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509ExtendedTrustManager", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509ExtendedTrustManager\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkClientTrusted](https://developer.android.com/reference/javax/net/ssl/X509ExtendedTrustManager.html#checkClientTrusted(java.security.cert.X509Certificate%5B%5D,%20java.lang.String,%20java.net.Socket))
        ///
        /// Required features: "java-lang-String", "java-net-Socket", "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-Socket", feature = "java-security-cert-X509Certificate")))]
        pub fn checkClientTrusted_X509Certificate_array_String_Socket<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509ExtendedTrustManager", java.flags == PUBLIC | ABSTRACT, .name == "checkClientTrusted", .descriptor == "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljava/net/Socket;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509ExtendedTrustManager\0", "checkClientTrusted\0", "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljava/net/Socket;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkServerTrusted](https://developer.android.com/reference/javax/net/ssl/X509ExtendedTrustManager.html#checkServerTrusted(java.security.cert.X509Certificate%5B%5D,%20java.lang.String,%20java.net.Socket))
        ///
        /// Required features: "java-lang-String", "java-net-Socket", "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-Socket", feature = "java-security-cert-X509Certificate")))]
        pub fn checkServerTrusted_X509Certificate_array_String_Socket<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509ExtendedTrustManager", java.flags == PUBLIC | ABSTRACT, .name == "checkServerTrusted", .descriptor == "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljava/net/Socket;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509ExtendedTrustManager\0", "checkServerTrusted\0", "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljava/net/Socket;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkClientTrusted](https://developer.android.com/reference/javax/net/ssl/X509ExtendedTrustManager.html#checkClientTrusted(java.security.cert.X509Certificate%5B%5D,%20java.lang.String,%20javax.net.ssl.SSLEngine))
        ///
        /// Required features: "java-lang-String", "java-security-cert-X509Certificate", "javax-net-ssl-SSLEngine"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-X509Certificate", feature = "javax-net-ssl-SSLEngine")))]
        pub fn checkClientTrusted_X509Certificate_array_String_SSLEngine<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::net::ssl::SSLEngine>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509ExtendedTrustManager", java.flags == PUBLIC | ABSTRACT, .name == "checkClientTrusted", .descriptor == "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljavax/net/ssl/SSLEngine;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509ExtendedTrustManager\0", "checkClientTrusted\0", "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljavax/net/ssl/SSLEngine;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkServerTrusted](https://developer.android.com/reference/javax/net/ssl/X509ExtendedTrustManager.html#checkServerTrusted(java.security.cert.X509Certificate%5B%5D,%20java.lang.String,%20javax.net.ssl.SSLEngine))
        ///
        /// Required features: "java-lang-String", "java-security-cert-X509Certificate", "javax-net-ssl-SSLEngine"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-X509Certificate", feature = "javax-net-ssl-SSLEngine")))]
        pub fn checkServerTrusted_X509Certificate_array_String_SSLEngine<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::net::ssl::SSLEngine>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/ssl/X509ExtendedTrustManager", java.flags == PUBLIC | ABSTRACT, .name == "checkServerTrusted", .descriptor == "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljavax/net/ssl/SSLEngine;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/ssl/X509ExtendedTrustManager\0", "checkServerTrusted\0", "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljavax/net/ssl/SSLEngine;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
