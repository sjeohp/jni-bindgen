// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "javax-net-SocketFactory"))]
__jni_bindgen! {
    /// public class [SocketFactory](https://developer.android.com/reference/javax/net/SocketFactory.html)
    ///
    /// Required feature: javax-net-SocketFactory
    public class SocketFactory ("javax/net/SocketFactory") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SocketFactory](https://developer.android.com/reference/javax/net/SocketFactory.html#SocketFactory())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::javax::net::SocketFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "javax/net/SocketFactory", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/SocketFactory\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDefault](https://developer.android.com/reference/javax/net/SocketFactory.html#getDefault())
        ///
        /// Required features: "javax-net-SocketFactory"
        #[cfg(any(feature = "all", all(feature = "javax-net-SocketFactory")))]
        pub fn getDefault<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::net::SocketFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/SocketFactory", java.flags == PUBLIC | STATIC, .name == "getDefault", .descriptor == "()Ljavax/net/SocketFactory;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("javax/net/SocketFactory\0", "getDefault\0", "()Ljavax/net/SocketFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSocket](https://developer.android.com/reference/javax/net/SocketFactory.html#createSocket())
        ///
        /// Required features: "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-net-Socket")))]
        pub fn createSocket<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Socket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/SocketFactory", java.flags == PUBLIC, .name == "createSocket", .descriptor == "()Ljava/net/Socket;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/SocketFactory\0", "createSocket\0", "()Ljava/net/Socket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSocket](https://developer.android.com/reference/javax/net/SocketFactory.html#createSocket(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String", "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-Socket")))]
        pub fn createSocket_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Socket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/SocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "createSocket", .descriptor == "(Ljava/lang/String;I)Ljava/net/Socket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/SocketFactory\0", "createSocket\0", "(Ljava/lang/String;I)Ljava/net/Socket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSocket](https://developer.android.com/reference/javax/net/SocketFactory.html#createSocket(java.lang.String,%20int,%20java.net.InetAddress,%20int))
        ///
        /// Required features: "java-lang-String", "java-net-InetAddress", "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-InetAddress", feature = "java-net-Socket")))]
        pub fn createSocket_String_int_InetAddress_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Socket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/SocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "createSocket", .descriptor == "(Ljava/lang/String;ILjava/net/InetAddress;I)Ljava/net/Socket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/SocketFactory\0", "createSocket\0", "(Ljava/lang/String;ILjava/net/InetAddress;I)Ljava/net/Socket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSocket](https://developer.android.com/reference/javax/net/SocketFactory.html#createSocket(java.net.InetAddress,%20int))
        ///
        /// Required features: "java-net-InetAddress", "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress", feature = "java-net-Socket")))]
        pub fn createSocket_InetAddress_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Socket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/SocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "createSocket", .descriptor == "(Ljava/net/InetAddress;I)Ljava/net/Socket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/SocketFactory\0", "createSocket\0", "(Ljava/net/InetAddress;I)Ljava/net/Socket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSocket](https://developer.android.com/reference/javax/net/SocketFactory.html#createSocket(java.net.InetAddress,%20int,%20java.net.InetAddress,%20int))
        ///
        /// Required features: "java-net-InetAddress", "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress", feature = "java-net-Socket")))]
        pub fn createSocket_InetAddress_int_InetAddress_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Socket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "javax/net/SocketFactory", java.flags == PUBLIC | ABSTRACT, .name == "createSocket", .descriptor == "(Ljava/net/InetAddress;ILjava/net/InetAddress;I)Ljava/net/Socket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("javax/net/SocketFactory\0", "createSocket\0", "(Ljava/net/InetAddress;ILjava/net/InetAddress;I)Ljava/net/Socket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
