// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "org-xmlpull-v1-XmlPullParser"))]
__jni_bindgen! {
    /// public interface [XmlPullParser](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html)
    ///
    /// Required feature: org-xmlpull-v1-XmlPullParser
    public interface XmlPullParser ("org/xmlpull/v1/XmlPullParser") extends crate::java::lang::Object {

        /// [setFeature](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#setFeature(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "setFeature", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "setFeature\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFeature](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getFeature(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getFeature", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getFeature\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProperty](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#setProperty(java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn setProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "setProperty", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "setProperty\0", "(Ljava/lang/String;Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProperty](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getProperty(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getProperty", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getProperty\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInput](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#setInput(java.io.Reader))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn setInput_Reader<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "setInput", .descriptor == "(Ljava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "setInput\0", "(Ljava/io/Reader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInput](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#setInput(java.io.InputStream,%20java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn setInput_InputStream_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "setInput", .descriptor == "(Ljava/io/InputStream;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "setInput\0", "(Ljava/io/InputStream;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputEncoding](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getInputEncoding())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getInputEncoding<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getInputEncoding", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getInputEncoding\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [defineEntityReplacementText](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#defineEntityReplacementText(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn defineEntityReplacementText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "defineEntityReplacementText", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "defineEntityReplacementText\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNamespaceCount](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getNamespaceCount(int))
        pub fn getNamespaceCount<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getNamespaceCount", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getNamespaceCount\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNamespacePrefix](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getNamespacePrefix(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNamespacePrefix<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getNamespacePrefix", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getNamespacePrefix\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNamespaceUri](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getNamespaceUri(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNamespaceUri<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getNamespaceUri", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getNamespaceUri\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNamespace](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getNamespace(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNamespace_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getNamespace", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getNamespace\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDepth](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getDepth())
        pub fn getDepth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getDepth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getDepth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPositionDescription](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getPositionDescription())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPositionDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getPositionDescription", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getPositionDescription\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineNumber](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getLineNumber())
        pub fn getLineNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getLineNumber", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getLineNumber\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColumnNumber](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getColumnNumber())
        pub fn getColumnNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getColumnNumber", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getColumnNumber\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWhitespace](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#isWhitespace())
        pub fn isWhitespace<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "isWhitespace", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "isWhitespace\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getText())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getText", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getText\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextCharacters](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getTextCharacters(int%5B%5D))
        pub fn getTextCharacters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::CharArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getTextCharacters", .descriptor == "([I)[C"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getTextCharacters\0", "([I)[C\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNamespace](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getNamespace())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNamespace<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getNamespace", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getNamespace\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrefix](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getPrefix())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPrefix<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getPrefix", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getPrefix\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEmptyElementTag](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#isEmptyElementTag())
        pub fn isEmptyElementTag<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "isEmptyElementTag", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "isEmptyElementTag\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeCount](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getAttributeCount())
        pub fn getAttributeCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getAttributeCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getAttributeCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeNamespace](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getAttributeNamespace(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributeNamespace<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getAttributeNamespace", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getAttributeNamespace\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeName](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getAttributeName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributeName<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getAttributeName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getAttributeName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributePrefix](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getAttributePrefix(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributePrefix<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getAttributePrefix", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getAttributePrefix\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeType](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getAttributeType(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributeType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getAttributeType", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getAttributeType\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAttributeDefault](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#isAttributeDefault(int))
        pub fn isAttributeDefault<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "isAttributeDefault", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "isAttributeDefault\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeValue](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getAttributeValue(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributeValue_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getAttributeValue", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getAttributeValue\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeValue](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getAttributeValue(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributeValue_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getAttributeValue", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getAttributeValue\0", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEventType](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#getEventType())
        pub fn getEventType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "getEventType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "getEventType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [next](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#next())
        pub fn next<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "next", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "next\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextToken](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#nextToken())
        pub fn nextToken<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "nextToken", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "nextToken\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [require](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#require(int,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn require<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "require", .descriptor == "(ILjava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "require\0", "(ILjava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextText](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#nextText())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn nextText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "nextText", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "nextText\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextTag](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#nextTag())
        pub fn nextTag<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/XmlPullParser", java.flags == PUBLIC | ABSTRACT, .name == "nextTag", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/XmlPullParser\0", "nextTag\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CDSECT](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#CDSECT)
        pub const CDSECT : i32 = 5;

        /// public static final [COMMENT](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#COMMENT)
        pub const COMMENT : i32 = 9;

        /// public static final [DOCDECL](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#DOCDECL)
        pub const DOCDECL : i32 = 10;

        /// public static final [END_DOCUMENT](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#END_DOCUMENT)
        pub const END_DOCUMENT : i32 = 1;

        /// public static final [END_TAG](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#END_TAG)
        pub const END_TAG : i32 = 3;

        /// public static final [ENTITY_REF](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#ENTITY_REF)
        pub const ENTITY_REF : i32 = 6;

        /// public static final [FEATURE_PROCESS_DOCDECL](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#FEATURE_PROCESS_DOCDECL)
        pub const FEATURE_PROCESS_DOCDECL : &'static str = "http://xmlpull.org/v1/doc/features.html#process-docdecl";

        /// public static final [FEATURE_PROCESS_NAMESPACES](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#FEATURE_PROCESS_NAMESPACES)
        pub const FEATURE_PROCESS_NAMESPACES : &'static str = "http://xmlpull.org/v1/doc/features.html#process-namespaces";

        /// public static final [FEATURE_REPORT_NAMESPACE_ATTRIBUTES](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#FEATURE_REPORT_NAMESPACE_ATTRIBUTES)
        pub const FEATURE_REPORT_NAMESPACE_ATTRIBUTES : &'static str = "http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes";

        /// public static final [FEATURE_VALIDATION](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#FEATURE_VALIDATION)
        pub const FEATURE_VALIDATION : &'static str = "http://xmlpull.org/v1/doc/features.html#validation";

        /// public static final [IGNORABLE_WHITESPACE](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#IGNORABLE_WHITESPACE)
        pub const IGNORABLE_WHITESPACE : i32 = 7;

        /// public static final [NO_NAMESPACE](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#NO_NAMESPACE)
        pub const NO_NAMESPACE : &'static str = "";

        /// public static final [PROCESSING_INSTRUCTION](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#PROCESSING_INSTRUCTION)
        pub const PROCESSING_INSTRUCTION : i32 = 8;

        /// public static final [START_DOCUMENT](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#START_DOCUMENT)
        pub const START_DOCUMENT : i32 = 0;

        /// public static final [START_TAG](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#START_TAG)
        pub const START_TAG : i32 = 2;

        /// public static final [TEXT](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#TEXT)
        pub const TEXT : i32 = 4;

        /// **get** public static final [TYPES](https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#TYPES)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn TYPES<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let (class, field) = env.require_class_static_field("org/xmlpull/v1/XmlPullParser\0", "TYPES\0", "[Ljava/lang/String;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
