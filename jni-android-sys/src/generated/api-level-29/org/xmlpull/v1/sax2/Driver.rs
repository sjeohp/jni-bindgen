// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "org-xmlpull-v1-sax2-Driver"))]
__jni_bindgen! {
    /// public class [Driver](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html)
    ///
    /// Required feature: org-xmlpull-v1-sax2-Driver
    public class Driver ("org/xmlpull/v1/sax2/Driver") extends crate::java::lang::Object, implements crate::org::xml::sax::Locator, crate::org::xml::sax::XMLReader, crate::org::xml::sax::Attributes {

        /// [Driver](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#Driver())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::xmlpull::v1::sax2::Driver>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Driver](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#Driver(org.xmlpull.v1.XmlPullParser))
        ///
        /// Required features: "org-xmlpull-v1-XmlPullParser"
        #[cfg(any(feature = "all", all(feature = "org-xmlpull-v1-XmlPullParser")))]
        pub fn new_XmlPullParser<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xmlpull::v1::XmlPullParser>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::xmlpull::v1::sax2::Driver>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Lorg/xmlpull/v1/XmlPullParser;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "<init>\0", "(Lorg/xmlpull/v1/XmlPullParser;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLength](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getLength())
        pub fn getLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getURI](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getURI(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getURI<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getURI", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getURI\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalName](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getLocalName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLocalName<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getLocalName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getLocalName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQName](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getQName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getQName<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getQName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getQName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getType(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getType_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getType", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getType\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValue](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getValue(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getValue_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getValue", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getValue\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIndex](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getIndex(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getIndex_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getIndex", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getIndex\0", "(Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIndex](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getIndex(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getIndex_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getIndex", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getIndex\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getType(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getType_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getType", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getType\0", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getType(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getType_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getType", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getType\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValue](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getValue(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getValue_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getValue", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getValue\0", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValue](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getValue(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getValue_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getValue", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getValue\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPublicId](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getPublicId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPublicId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getPublicId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getPublicId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemId](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getSystemId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSystemId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getSystemId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getSystemId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineNumber](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getLineNumber())
        pub fn getLineNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getLineNumber", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getLineNumber\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColumnNumber](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getColumnNumber())
        pub fn getColumnNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getColumnNumber", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getColumnNumber\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFeature](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getFeature(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getFeature", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getFeature\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeature](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#setFeature(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "setFeature", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "setFeature\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProperty](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getProperty(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getProperty", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getProperty\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProperty](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#setProperty(java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn setProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "setProperty", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "setProperty\0", "(Ljava/lang/String;Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEntityResolver](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#setEntityResolver(org.xml.sax.EntityResolver))
        ///
        /// Required features: "org-xml-sax-EntityResolver"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-EntityResolver")))]
        pub fn setEntityResolver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::EntityResolver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "setEntityResolver", .descriptor == "(Lorg/xml/sax/EntityResolver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "setEntityResolver\0", "(Lorg/xml/sax/EntityResolver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEntityResolver](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getEntityResolver())
        ///
        /// Required features: "org-xml-sax-EntityResolver"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-EntityResolver")))]
        pub fn getEntityResolver<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::EntityResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getEntityResolver", .descriptor == "()Lorg/xml/sax/EntityResolver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getEntityResolver\0", "()Lorg/xml/sax/EntityResolver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDTDHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#setDTDHandler(org.xml.sax.DTDHandler))
        ///
        /// Required features: "org-xml-sax-DTDHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-DTDHandler")))]
        pub fn setDTDHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::DTDHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "setDTDHandler", .descriptor == "(Lorg/xml/sax/DTDHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "setDTDHandler\0", "(Lorg/xml/sax/DTDHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDTDHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getDTDHandler())
        ///
        /// Required features: "org-xml-sax-DTDHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-DTDHandler")))]
        pub fn getDTDHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::DTDHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getDTDHandler", .descriptor == "()Lorg/xml/sax/DTDHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getDTDHandler\0", "()Lorg/xml/sax/DTDHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#setContentHandler(org.xml.sax.ContentHandler))
        ///
        /// Required features: "org-xml-sax-ContentHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ContentHandler")))]
        pub fn setContentHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::ContentHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "setContentHandler", .descriptor == "(Lorg/xml/sax/ContentHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "setContentHandler\0", "(Lorg/xml/sax/ContentHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getContentHandler())
        ///
        /// Required features: "org-xml-sax-ContentHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ContentHandler")))]
        pub fn getContentHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::ContentHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getContentHandler", .descriptor == "()Lorg/xml/sax/ContentHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getContentHandler\0", "()Lorg/xml/sax/ContentHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setErrorHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#setErrorHandler(org.xml.sax.ErrorHandler))
        ///
        /// Required features: "org-xml-sax-ErrorHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ErrorHandler")))]
        pub fn setErrorHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::ErrorHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "setErrorHandler", .descriptor == "(Lorg/xml/sax/ErrorHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "setErrorHandler\0", "(Lorg/xml/sax/ErrorHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getErrorHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#getErrorHandler())
        ///
        /// Required features: "org-xml-sax-ErrorHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ErrorHandler")))]
        pub fn getErrorHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::ErrorHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "getErrorHandler", .descriptor == "()Lorg/xml/sax/ErrorHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "getErrorHandler\0", "()Lorg/xml/sax/ErrorHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#parse(org.xml.sax.InputSource))
        ///
        /// Required features: "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-InputSource")))]
        pub fn parse_InputSource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::InputSource>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "parse", .descriptor == "(Lorg/xml/sax/InputSource;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "parse\0", "(Lorg/xml/sax/InputSource;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#parse(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn parse_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "parse", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "parse\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseSubTree](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#parseSubTree(org.xmlpull.v1.XmlPullParser))
        ///
        /// Required features: "org-xmlpull-v1-XmlPullParser"
        #[cfg(any(feature = "all", all(feature = "org-xmlpull-v1-XmlPullParser")))]
        pub fn parseSubTree<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xmlpull::v1::XmlPullParser>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PUBLIC, .name == "parseSubTree", .descriptor == "(Lorg/xmlpull/v1/XmlPullParser;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "parseSubTree\0", "(Lorg/xmlpull/v1/XmlPullParser;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [startElement](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#startElement(java.lang.String,%20java.lang.String,%20java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn startElement<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "org/xmlpull/v1/sax2/Driver", java.flags == PROTECTED, .name == "startElement", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xmlpull/v1/sax2/Driver\0", "startElement\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public field
        // /// protected static final [APACHE_DYNAMIC_VALIDATION_FEATURE](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#APACHE_DYNAMIC_VALIDATION_FEATURE)
        // pub const APACHE_DYNAMIC_VALIDATION_FEATURE : &'static str = "http://apache.org/xml/features/validation/dynamic";

        // // Not emitting: Non-public field
        // /// protected static final [APACHE_SCHEMA_VALIDATION_FEATURE](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#APACHE_SCHEMA_VALIDATION_FEATURE)
        // pub const APACHE_SCHEMA_VALIDATION_FEATURE : &'static str = "http://apache.org/xml/features/validation/schema";

        // // Not emitting: Non-public field
        // /// protected static final [DECLARATION_HANDLER_PROPERTY](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#DECLARATION_HANDLER_PROPERTY)
        // pub const DECLARATION_HANDLER_PROPERTY : &'static str = "http://xml.org/sax/properties/declaration-handler";

        // // Not emitting: Non-public field
        // /// protected static final [LEXICAL_HANDLER_PROPERTY](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#LEXICAL_HANDLER_PROPERTY)
        // pub const LEXICAL_HANDLER_PROPERTY : &'static str = "http://xml.org/sax/properties/lexical-handler";

        // // Not emitting: Non-public field
        // /// protected static final [NAMESPACES_FEATURE](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#NAMESPACES_FEATURE)
        // pub const NAMESPACES_FEATURE : &'static str = "http://xml.org/sax/features/namespaces";

        // // Not emitting: Non-public field
        // /// protected static final [NAMESPACE_PREFIXES_FEATURE](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#NAMESPACE_PREFIXES_FEATURE)
        // pub const NAMESPACE_PREFIXES_FEATURE : &'static str = "http://xml.org/sax/features/namespace-prefixes";

        // // Not emitting: Non-public field
        // /// protected static final [VALIDATION_FEATURE](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#VALIDATION_FEATURE)
        // pub const VALIDATION_FEATURE : &'static str = "http://xml.org/sax/features/validation";

        // // Not emitting: Non-public field
        // /// **get** protected [contentHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#contentHandler)
        // ///
        // /// Required feature: org-xml-sax-ContentHandler
        // #[cfg(any(feature = "all", feature = "org-xml-sax-ContentHandler"))]
        // pub fn contentHandler<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::ContentHandler>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("org/xmlpull/v1/sax2/Driver\0", "contentHandler\0", "Lorg/xml/sax/ContentHandler;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [contentHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#contentHandler)
        // ///
        // /// Required feature: org-xml-sax-ContentHandler
        // #[cfg(any(feature = "all", feature = "org-xml-sax-ContentHandler"))]
        // pub fn set_contentHandler<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::org::xml::sax::ContentHandler>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("org/xmlpull/v1/sax2/Driver\0", "contentHandler\0", "Lorg/xml/sax/ContentHandler;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [errorHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#errorHandler)
        // ///
        // /// Required feature: org-xml-sax-ErrorHandler
        // #[cfg(any(feature = "all", feature = "org-xml-sax-ErrorHandler"))]
        // pub fn errorHandler<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::ErrorHandler>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("org/xmlpull/v1/sax2/Driver\0", "errorHandler\0", "Lorg/xml/sax/ErrorHandler;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [errorHandler](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#errorHandler)
        // ///
        // /// Required feature: org-xml-sax-ErrorHandler
        // #[cfg(any(feature = "all", feature = "org-xml-sax-ErrorHandler"))]
        // pub fn set_errorHandler<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::org::xml::sax::ErrorHandler>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("org/xmlpull/v1/sax2/Driver\0", "errorHandler\0", "Lorg/xml/sax/ErrorHandler;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [pp](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#pp)
        // ///
        // /// Required feature: org-xmlpull-v1-XmlPullParser
        // #[cfg(any(feature = "all", feature = "org-xmlpull-v1-XmlPullParser"))]
        // pub fn pp<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xmlpull::v1::XmlPullParser>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("org/xmlpull/v1/sax2/Driver\0", "pp\0", "Lorg/xmlpull/v1/XmlPullParser;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [pp](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#pp)
        // ///
        // /// Required feature: org-xmlpull-v1-XmlPullParser
        // #[cfg(any(feature = "all", feature = "org-xmlpull-v1-XmlPullParser"))]
        // pub fn set_pp<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::org::xmlpull::v1::XmlPullParser>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("org/xmlpull/v1/sax2/Driver\0", "pp\0", "Lorg/xmlpull/v1/XmlPullParser;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [systemId](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#systemId)
        // ///
        // /// Required feature: java-lang-String
        // #[cfg(any(feature = "all", feature = "java-lang-String"))]
        // pub fn systemId<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("org/xmlpull/v1/sax2/Driver\0", "systemId\0", "Ljava/lang/String;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [systemId](https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html#systemId)
        // ///
        // /// Required feature: java-lang-String
        // #[cfg(any(feature = "all", feature = "java-lang-String"))]
        // pub fn set_systemId<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("org/xmlpull/v1/sax2/Driver\0", "systemId\0", "Ljava/lang/String;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }
    }
}
