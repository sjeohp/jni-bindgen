// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "org-json-JSONArray"))]
__jni_bindgen! {
    /// public class [JSONArray](https://developer.android.com/reference/org/json/JSONArray.html)
    ///
    /// Required feature: org-json-JSONArray
    public class JSONArray ("org/json/JSONArray") extends crate::java::lang::Object {

        /// [JSONArray](https://developer.android.com/reference/org/json/JSONArray.html#JSONArray())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::json::JSONArray>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [JSONArray](https://developer.android.com/reference/org/json/JSONArray.html#JSONArray(java.util.Collection))
        ///
        /// Required features: "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        pub fn new_Collection<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::json::JSONArray>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/util/Collection;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "<init>\0", "(Ljava/util/Collection;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [JSONArray](https://developer.android.com/reference/org/json/JSONArray.html#JSONArray(org.json.JSONTokener))
        ///
        /// Required features: "org-json-JSONTokener"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONTokener")))]
        pub fn new_JSONTokener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::json::JSONTokener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::json::JSONArray>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Lorg/json/JSONTokener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "<init>\0", "(Lorg/json/JSONTokener;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [JSONArray](https://developer.android.com/reference/org/json/JSONArray.html#JSONArray(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::json::JSONArray>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [JSONArray](https://developer.android.com/reference/org/json/JSONArray.html#JSONArray(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn new_Object<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::json::JSONArray>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "<init>\0", "(Ljava/lang/Object;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [length](https://developer.android.com/reference/org/json/JSONArray.html#length())
        pub fn length<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "length", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "length\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(boolean))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn put_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(Z)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(Z)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(double))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn put_double<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(D)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(D)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(int))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn put_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(I)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(I)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(long))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn put_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(J)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(J)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "org-json-JSONArray")))]
        pub fn put_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(Ljava/lang/Object;)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(Ljava/lang/Object;)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(int,%20boolean))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn put_int_boolean<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(IZ)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(IZ)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(int,%20double))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn put_int_double<'env>(&'env self, arg0: i32, arg1: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(ID)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(ID)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(int,%20int))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn put_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(II)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(II)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(int,%20long))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn put_int_long<'env>(&'env self, arg0: i32, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(IJ)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(IJ)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/org/json/JSONArray.html#put(int,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "org-json-JSONArray")))]
        pub fn put_int_Object<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "put", .descriptor == "(ILjava/lang/Object;)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "put\0", "(ILjava/lang/Object;)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNull](https://developer.android.com/reference/org/json/JSONArray.html#isNull(int))
        pub fn isNull<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "isNull", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "isNull\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/org/json/JSONArray.html#get(int))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn get<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "get", .descriptor == "(I)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "get\0", "(I)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [opt](https://developer.android.com/reference/org/json/JSONArray.html#opt(int))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn opt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "opt", .descriptor == "(I)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "opt\0", "(I)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [remove](https://developer.android.com/reference/org/json/JSONArray.html#remove(int))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn remove<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "remove", .descriptor == "(I)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "remove\0", "(I)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBoolean](https://developer.android.com/reference/org/json/JSONArray.html#getBoolean(int))
        pub fn getBoolean<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "getBoolean", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "getBoolean\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optBoolean](https://developer.android.com/reference/org/json/JSONArray.html#optBoolean(int))
        pub fn optBoolean_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optBoolean", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optBoolean\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optBoolean](https://developer.android.com/reference/org/json/JSONArray.html#optBoolean(int,%20boolean))
        pub fn optBoolean_int_boolean<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optBoolean", .descriptor == "(IZ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optBoolean\0", "(IZ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDouble](https://developer.android.com/reference/org/json/JSONArray.html#getDouble(int))
        pub fn getDouble<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "getDouble", .descriptor == "(I)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "getDouble\0", "(I)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optDouble](https://developer.android.com/reference/org/json/JSONArray.html#optDouble(int))
        pub fn optDouble_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optDouble", .descriptor == "(I)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optDouble\0", "(I)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optDouble](https://developer.android.com/reference/org/json/JSONArray.html#optDouble(int,%20double))
        pub fn optDouble_int_double<'env>(&'env self, arg0: i32, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optDouble", .descriptor == "(ID)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optDouble\0", "(ID)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/org/json/JSONArray.html#getInt(int))
        pub fn getInt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "getInt", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "getInt\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optInt](https://developer.android.com/reference/org/json/JSONArray.html#optInt(int))
        pub fn optInt_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optInt", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optInt\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optInt](https://developer.android.com/reference/org/json/JSONArray.html#optInt(int,%20int))
        pub fn optInt_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optInt", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optInt\0", "(II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/org/json/JSONArray.html#getLong(int))
        pub fn getLong<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "getLong", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "getLong\0", "(I)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optLong](https://developer.android.com/reference/org/json/JSONArray.html#optLong(int))
        pub fn optLong_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optLong", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optLong\0", "(I)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optLong](https://developer.android.com/reference/org/json/JSONArray.html#optLong(int,%20long))
        pub fn optLong_int_long<'env>(&'env self, arg0: i32, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optLong", .descriptor == "(IJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optLong\0", "(IJ)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/org/json/JSONArray.html#getString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getString<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "getString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "getString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optString](https://developer.android.com/reference/org/json/JSONArray.html#optString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn optString_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optString](https://developer.android.com/reference/org/json/JSONArray.html#optString(int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn optString_int_String<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optString", .descriptor == "(ILjava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optString\0", "(ILjava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getJSONArray](https://developer.android.com/reference/org/json/JSONArray.html#getJSONArray(int))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn getJSONArray<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "getJSONArray", .descriptor == "(I)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "getJSONArray\0", "(I)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optJSONArray](https://developer.android.com/reference/org/json/JSONArray.html#optJSONArray(int))
        ///
        /// Required features: "org-json-JSONArray"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray")))]
        pub fn optJSONArray<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optJSONArray", .descriptor == "(I)Lorg/json/JSONArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optJSONArray\0", "(I)Lorg/json/JSONArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getJSONObject](https://developer.android.com/reference/org/json/JSONArray.html#getJSONObject(int))
        ///
        /// Required features: "org-json-JSONObject"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONObject")))]
        pub fn getJSONObject<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONObject>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "getJSONObject", .descriptor == "(I)Lorg/json/JSONObject;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "getJSONObject\0", "(I)Lorg/json/JSONObject;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optJSONObject](https://developer.android.com/reference/org/json/JSONArray.html#optJSONObject(int))
        ///
        /// Required features: "org-json-JSONObject"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONObject")))]
        pub fn optJSONObject<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONObject>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "optJSONObject", .descriptor == "(I)Lorg/json/JSONObject;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "optJSONObject\0", "(I)Lorg/json/JSONObject;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toJSONObject](https://developer.android.com/reference/org/json/JSONArray.html#toJSONObject(org.json.JSONArray))
        ///
        /// Required features: "org-json-JSONArray", "org-json-JSONObject"
        #[cfg(any(feature = "all", all(feature = "org-json-JSONArray", feature = "org-json-JSONObject")))]
        pub fn toJSONObject<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::json::JSONArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::json::JSONObject>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "toJSONObject", .descriptor == "(Lorg/json/JSONArray;)Lorg/json/JSONObject;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "toJSONObject\0", "(Lorg/json/JSONArray;)Lorg/json/JSONObject;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [join](https://developer.android.com/reference/org/json/JSONArray.html#join(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn join<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "join", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "join\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/org/json/JSONArray.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/org/json/JSONArray.html#toString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "toString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "toString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/org/json/JSONArray.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/org/json/JSONArray.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/json/JSONArray", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/json/JSONArray\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
