// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "org-apache-http-conn-ssl-SSLSocketFactory"))]
__jni_bindgen! {
    /// public class [SSLSocketFactory](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html)
    ///
    /// Required feature: org-apache-http-conn-ssl-SSLSocketFactory
    #[deprecated] public class SSLSocketFactory ("org/apache/http/conn/ssl/SSLSocketFactory") extends crate::java::lang::Object, implements crate::org::apache::http::conn::scheme::LayeredSocketFactory {

        /// [SSLSocketFactory](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#SSLSocketFactory(java.lang.String,%20java.security.KeyStore,%20java.lang.String,%20java.security.KeyStore,%20java.security.SecureRandom,%20org.apache.http.conn.scheme.HostNameResolver))
        ///
        /// Required features: "java-lang-String", "java-security-KeyStore", "java-security-SecureRandom", "org-apache-http-conn-scheme-HostNameResolver"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-KeyStore", feature = "java-security-SecureRandom", feature = "org-apache-http-conn-scheme-HostNameResolver")))]
        #[deprecated] pub fn new_String_KeyStore_String_KeyStore_SecureRandom_HostNameResolver<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::SecureRandom>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::apache::http::conn::scheme::HostNameResolver>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::apache::http::conn::ssl::SSLSocketFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/security/KeyStore;Ljava/lang/String;Ljava/security/KeyStore;Ljava/security/SecureRandom;Lorg/apache/http/conn/scheme/HostNameResolver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "<init>\0", "(Ljava/lang/String;Ljava/security/KeyStore;Ljava/lang/String;Ljava/security/KeyStore;Ljava/security/SecureRandom;Lorg/apache/http/conn/scheme/HostNameResolver;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSLSocketFactory](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#SSLSocketFactory(java.security.KeyStore,%20java.lang.String,%20java.security.KeyStore))
        ///
        /// Required features: "java-lang-String", "java-security-KeyStore"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-KeyStore")))]
        #[deprecated] pub fn new_KeyStore_String_KeyStore<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::apache::http::conn::ssl::SSLSocketFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/security/KeyStore;Ljava/lang/String;Ljava/security/KeyStore;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "<init>\0", "(Ljava/security/KeyStore;Ljava/lang/String;Ljava/security/KeyStore;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSLSocketFactory](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#SSLSocketFactory(java.security.KeyStore,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-KeyStore"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-KeyStore")))]
        #[deprecated] pub fn new_KeyStore_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::apache::http::conn::ssl::SSLSocketFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/security/KeyStore;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "<init>\0", "(Ljava/security/KeyStore;Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSLSocketFactory](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#SSLSocketFactory(java.security.KeyStore))
        ///
        /// Required features: "java-security-KeyStore"
        #[cfg(any(feature = "all", all(feature = "java-security-KeyStore")))]
        #[deprecated] pub fn new_KeyStore<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::org::apache::http::conn::ssl::SSLSocketFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/security/KeyStore;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "<init>\0", "(Ljava/security/KeyStore;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSocketFactory](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#getSocketFactory())
        ///
        /// Required features: "org-apache-http-conn-ssl-SSLSocketFactory"
        #[cfg(any(feature = "all", all(feature = "org-apache-http-conn-ssl-SSLSocketFactory")))]
        #[deprecated] pub fn getSocketFactory<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::apache::http::conn::ssl::SSLSocketFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC | STATIC, .name == "getSocketFactory", .descriptor == "()Lorg/apache/http/conn/ssl/SSLSocketFactory;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "getSocketFactory\0", "()Lorg/apache/http/conn/ssl/SSLSocketFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSocket](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#createSocket())
        ///
        /// Required features: "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-net-Socket")))]
        #[deprecated] pub fn createSocket<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Socket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "createSocket", .descriptor == "()Ljava/net/Socket;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "createSocket\0", "()Ljava/net/Socket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connectSocket](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#connectSocket(java.net.Socket,%20java.lang.String,%20int,%20java.net.InetAddress,%20int,%20org.apache.http.params.HttpParams))
        ///
        /// Required features: "java-lang-String", "java-net-InetAddress", "java-net-Socket", "org-apache-http-params-HttpParams"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-InetAddress", feature = "java-net-Socket", feature = "org-apache-http-params-HttpParams")))]
        #[deprecated] pub fn connectSocket<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::apache::http::params::HttpParams>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Socket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "connectSocket", .descriptor == "(Ljava/net/Socket;Ljava/lang/String;ILjava/net/InetAddress;ILorg/apache/http/params/HttpParams;)Ljava/net/Socket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "connectSocket\0", "(Ljava/net/Socket;Ljava/lang/String;ILjava/net/InetAddress;ILorg/apache/http/params/HttpParams;)Ljava/net/Socket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSecure](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#isSecure(java.net.Socket))
        ///
        /// Required features: "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-net-Socket")))]
        #[deprecated] pub fn isSecure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "isSecure", .descriptor == "(Ljava/net/Socket;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "isSecure\0", "(Ljava/net/Socket;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSocket](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#createSocket(java.net.Socket,%20java.lang.String,%20int,%20boolean))
        ///
        /// Required features: "java-lang-String", "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-Socket")))]
        #[deprecated] pub fn createSocket_Socket_String_int_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Socket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "createSocket", .descriptor == "(Ljava/net/Socket;Ljava/lang/String;IZ)Ljava/net/Socket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "createSocket\0", "(Ljava/net/Socket;Ljava/lang/String;IZ)Ljava/net/Socket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHostnameVerifier](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier))
        ///
        /// Required features: "org-apache-http-conn-ssl-X509HostnameVerifier"
        #[cfg(any(feature = "all", all(feature = "org-apache-http-conn-ssl-X509HostnameVerifier")))]
        #[deprecated] pub fn setHostnameVerifier<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::apache::http::conn::ssl::X509HostnameVerifier>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "setHostnameVerifier", .descriptor == "(Lorg/apache/http/conn/ssl/X509HostnameVerifier;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "setHostnameVerifier\0", "(Lorg/apache/http/conn/ssl/X509HostnameVerifier;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHostnameVerifier](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#getHostnameVerifier())
        ///
        /// Required features: "org-apache-http-conn-ssl-X509HostnameVerifier"
        #[cfg(any(feature = "all", all(feature = "org-apache-http-conn-ssl-X509HostnameVerifier")))]
        #[deprecated] pub fn getHostnameVerifier<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::apache::http::conn::ssl::X509HostnameVerifier>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/apache/http/conn/ssl/SSLSocketFactory", java.flags == PUBLIC, .name == "getHostnameVerifier", .descriptor == "()Lorg/apache/http/conn/ssl/X509HostnameVerifier;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/apache/http/conn/ssl/SSLSocketFactory\0", "getHostnameVerifier\0", "()Lorg/apache/http/conn/ssl/X509HostnameVerifier;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [ALLOW_ALL_HOSTNAME_VERIFIER](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#ALLOW_ALL_HOSTNAME_VERIFIER)
        ///
        /// Required feature: org-apache-http-conn-ssl-X509HostnameVerifier
        #[cfg(any(feature = "all", feature = "org-apache-http-conn-ssl-X509HostnameVerifier"))]
        #[deprecated] pub fn ALLOW_ALL_HOSTNAME_VERIFIER<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::apache::http::conn::ssl::X509HostnameVerifier>> {
            unsafe {
                let (class, field) = env.require_class_static_field("org/apache/http/conn/ssl/SSLSocketFactory\0", "ALLOW_ALL_HOSTNAME_VERIFIER\0", "Lorg/apache/http/conn/ssl/X509HostnameVerifier;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [BROWSER_COMPATIBLE_HOSTNAME_VERIFIER](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#BROWSER_COMPATIBLE_HOSTNAME_VERIFIER)
        ///
        /// Required feature: org-apache-http-conn-ssl-X509HostnameVerifier
        #[cfg(any(feature = "all", feature = "org-apache-http-conn-ssl-X509HostnameVerifier"))]
        #[deprecated] pub fn BROWSER_COMPATIBLE_HOSTNAME_VERIFIER<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::apache::http::conn::ssl::X509HostnameVerifier>> {
            unsafe {
                let (class, field) = env.require_class_static_field("org/apache/http/conn/ssl/SSLSocketFactory\0", "BROWSER_COMPATIBLE_HOSTNAME_VERIFIER\0", "Lorg/apache/http/conn/ssl/X509HostnameVerifier;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [SSL](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#SSL)
        #[deprecated] pub const SSL : &'static str = "SSL";

        /// public static final [SSLV2](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#SSLV2)
        #[deprecated] pub const SSLV2 : &'static str = "SSLv2";

        /// **get** public static final [STRICT_HOSTNAME_VERIFIER](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#STRICT_HOSTNAME_VERIFIER)
        ///
        /// Required feature: org-apache-http-conn-ssl-X509HostnameVerifier
        #[cfg(any(feature = "all", feature = "org-apache-http-conn-ssl-X509HostnameVerifier"))]
        #[deprecated] pub fn STRICT_HOSTNAME_VERIFIER<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::apache::http::conn::ssl::X509HostnameVerifier>> {
            unsafe {
                let (class, field) = env.require_class_static_field("org/apache/http/conn/ssl/SSLSocketFactory\0", "STRICT_HOSTNAME_VERIFIER\0", "Lorg/apache/http/conn/ssl/X509HostnameVerifier;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [TLS](https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html#TLS)
        #[deprecated] pub const TLS : &'static str = "TLS";
    }
}
