// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "org-xml-sax-XMLReader"))]
__jni_bindgen! {
    /// public interface [XMLReader](https://developer.android.com/reference/org/xml/sax/XMLReader.html)
    ///
    /// Required feature: org-xml-sax-XMLReader
    public interface XMLReader ("org/xml/sax/XMLReader") extends crate::java::lang::Object {

        /// [getFeature](https://developer.android.com/reference/org/xml/sax/XMLReader.html#getFeature(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "getFeature", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "getFeature\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeature](https://developer.android.com/reference/org/xml/sax/XMLReader.html#setFeature(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "setFeature", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "setFeature\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProperty](https://developer.android.com/reference/org/xml/sax/XMLReader.html#getProperty(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "getProperty", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "getProperty\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProperty](https://developer.android.com/reference/org/xml/sax/XMLReader.html#setProperty(java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn setProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "setProperty", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "setProperty\0", "(Ljava/lang/String;Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEntityResolver](https://developer.android.com/reference/org/xml/sax/XMLReader.html#setEntityResolver(org.xml.sax.EntityResolver))
        ///
        /// Required features: "org-xml-sax-EntityResolver"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-EntityResolver")))]
        pub fn setEntityResolver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::EntityResolver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "setEntityResolver", .descriptor == "(Lorg/xml/sax/EntityResolver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "setEntityResolver\0", "(Lorg/xml/sax/EntityResolver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEntityResolver](https://developer.android.com/reference/org/xml/sax/XMLReader.html#getEntityResolver())
        ///
        /// Required features: "org-xml-sax-EntityResolver"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-EntityResolver")))]
        pub fn getEntityResolver<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::EntityResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "getEntityResolver", .descriptor == "()Lorg/xml/sax/EntityResolver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "getEntityResolver\0", "()Lorg/xml/sax/EntityResolver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDTDHandler](https://developer.android.com/reference/org/xml/sax/XMLReader.html#setDTDHandler(org.xml.sax.DTDHandler))
        ///
        /// Required features: "org-xml-sax-DTDHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-DTDHandler")))]
        pub fn setDTDHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::DTDHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "setDTDHandler", .descriptor == "(Lorg/xml/sax/DTDHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "setDTDHandler\0", "(Lorg/xml/sax/DTDHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDTDHandler](https://developer.android.com/reference/org/xml/sax/XMLReader.html#getDTDHandler())
        ///
        /// Required features: "org-xml-sax-DTDHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-DTDHandler")))]
        pub fn getDTDHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::DTDHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "getDTDHandler", .descriptor == "()Lorg/xml/sax/DTDHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "getDTDHandler\0", "()Lorg/xml/sax/DTDHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentHandler](https://developer.android.com/reference/org/xml/sax/XMLReader.html#setContentHandler(org.xml.sax.ContentHandler))
        ///
        /// Required features: "org-xml-sax-ContentHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ContentHandler")))]
        pub fn setContentHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::ContentHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "setContentHandler", .descriptor == "(Lorg/xml/sax/ContentHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "setContentHandler\0", "(Lorg/xml/sax/ContentHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentHandler](https://developer.android.com/reference/org/xml/sax/XMLReader.html#getContentHandler())
        ///
        /// Required features: "org-xml-sax-ContentHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ContentHandler")))]
        pub fn getContentHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::ContentHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "getContentHandler", .descriptor == "()Lorg/xml/sax/ContentHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "getContentHandler\0", "()Lorg/xml/sax/ContentHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setErrorHandler](https://developer.android.com/reference/org/xml/sax/XMLReader.html#setErrorHandler(org.xml.sax.ErrorHandler))
        ///
        /// Required features: "org-xml-sax-ErrorHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ErrorHandler")))]
        pub fn setErrorHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::ErrorHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "setErrorHandler", .descriptor == "(Lorg/xml/sax/ErrorHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "setErrorHandler\0", "(Lorg/xml/sax/ErrorHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getErrorHandler](https://developer.android.com/reference/org/xml/sax/XMLReader.html#getErrorHandler())
        ///
        /// Required features: "org-xml-sax-ErrorHandler"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-ErrorHandler")))]
        pub fn getErrorHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xml::sax::ErrorHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "getErrorHandler", .descriptor == "()Lorg/xml/sax/ErrorHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "getErrorHandler\0", "()Lorg/xml/sax/ErrorHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/org/xml/sax/XMLReader.html#parse(org.xml.sax.InputSource))
        ///
        /// Required features: "org-xml-sax-InputSource"
        #[cfg(any(feature = "all", all(feature = "org-xml-sax-InputSource")))]
        pub fn parse_InputSource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::InputSource>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "parse", .descriptor == "(Lorg/xml/sax/InputSource;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "parse\0", "(Lorg/xml/sax/InputSource;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/org/xml/sax/XMLReader.html#parse(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn parse_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "org/xml/sax/XMLReader", java.flags == PUBLIC | ABSTRACT, .name == "parse", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("org/xml/sax/XMLReader\0", "parse\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
