// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "dalvik-system-BaseDexClassLoader"))]
__jni_bindgen! {
    /// public class [BaseDexClassLoader](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html)
    ///
    /// Required feature: dalvik-system-BaseDexClassLoader
    public class BaseDexClassLoader ("dalvik/system/BaseDexClassLoader") extends crate::java::lang::ClassLoader {

        /// [BaseDexClassLoader](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#BaseDexClassLoader(java.lang.String,%20java.io.File,%20java.lang.String,%20java.lang.ClassLoader))
        ///
        /// Required features: "java-io-File", "java-lang-ClassLoader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-ClassLoader", feature = "java-lang-String")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::dalvik::system::BaseDexClassLoader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/io/File;Ljava/lang/String;Ljava/lang/ClassLoader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/system/BaseDexClassLoader\0", "<init>\0", "(Ljava/lang/String;Ljava/io/File;Ljava/lang/String;Ljava/lang/ClassLoader;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [findClass](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#findClass(java.lang.String))
        // ///
        // /// Required features: "java-lang-Class", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        // fn findClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PROTECTED, .name == "findClass", .descriptor == "(Ljava/lang/String;)Ljava/lang/Class;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/system/BaseDexClassLoader\0", "findClass\0", "(Ljava/lang/String;)Ljava/lang/Class;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [findResource](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#findResource(java.lang.String))
        // ///
        // /// Required features: "java-lang-String", "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        // fn findResource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::URL>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PROTECTED, .name == "findResource", .descriptor == "(Ljava/lang/String;)Ljava/net/URL;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/system/BaseDexClassLoader\0", "findResource\0", "(Ljava/lang/String;)Ljava/net/URL;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [findResources](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#findResources(java.lang.String))
        // ///
        // /// Required features: "java-lang-String", "java-util-Enumeration"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Enumeration")))]
        // fn findResources<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PROTECTED, .name == "findResources", .descriptor == "(Ljava/lang/String;)Ljava/util/Enumeration;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/system/BaseDexClassLoader\0", "findResources\0", "(Ljava/lang/String;)Ljava/util/Enumeration;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [findLibrary](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#findLibrary(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn findLibrary<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PUBLIC, .name == "findLibrary", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/system/BaseDexClassLoader\0", "findLibrary\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getPackage](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#getPackage(java.lang.String))
        // ///
        // /// Required features: "java-lang-Package", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Package", feature = "java-lang-String")))]
        // fn getPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Package>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PROTECTED | SYNCRONIZED, .name == "getPackage", .descriptor == "(Ljava/lang/String;)Ljava/lang/Package;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/system/BaseDexClassLoader\0", "getPackage\0", "(Ljava/lang/String;)Ljava/lang/Package;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [toString](https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "dalvik/system/BaseDexClassLoader", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/system/BaseDexClassLoader\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
