// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "dalvik-annotation-TestTarget"))]
__jni_bindgen! {
    /// public interface [TestTarget](https://developer.android.com/reference/dalvik/annotation/TestTarget.html)
    ///
    /// Required feature: dalvik-annotation-TestTarget
    #[deprecated] public interface TestTarget ("dalvik/annotation/TestTarget") extends crate::java::lang::Object, implements crate::java::lang::annotation::Annotation {

        /// [methodName](https://developer.android.com/reference/dalvik/annotation/TestTarget.html#methodName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn methodName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "dalvik/annotation/TestTarget", java.flags == PUBLIC | ABSTRACT, .name == "methodName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/annotation/TestTarget\0", "methodName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [conceptName](https://developer.android.com/reference/dalvik/annotation/TestTarget.html#conceptName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn conceptName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "dalvik/annotation/TestTarget", java.flags == PUBLIC | ABSTRACT, .name == "conceptName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/annotation/TestTarget\0", "conceptName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [methodArgs](https://developer.android.com/reference/dalvik/annotation/TestTarget.html#methodArgs())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        #[deprecated] pub fn methodArgs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "dalvik/annotation/TestTarget", java.flags == PUBLIC | ABSTRACT, .name == "methodArgs", .descriptor == "()[Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("dalvik/annotation/TestTarget\0", "methodArgs\0", "()[Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
