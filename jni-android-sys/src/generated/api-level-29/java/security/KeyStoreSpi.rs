// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-KeyStoreSpi"))]
__jni_bindgen! {
    /// public class [KeyStoreSpi](https://developer.android.com/reference/java/security/KeyStoreSpi.html)
    ///
    /// Required feature: java-security-KeyStoreSpi
    public class KeyStoreSpi ("java/security/KeyStoreSpi") extends crate::java::lang::Object {

        /// [KeyStoreSpi](https://developer.android.com/reference/java/security/KeyStoreSpi.html#KeyStoreSpi())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::KeyStoreSpi>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGetKey](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineGetKey(java.lang.String,%20char%5B%5D))
        ///
        /// Required features: "java-lang-String", "java-security-Key"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Key")))]
        pub fn engineGetKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Key>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineGetKey", .descriptor == "(Ljava/lang/String;[C)Ljava/security/Key;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineGetKey\0", "(Ljava/lang/String;[C)Ljava/security/Key;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGetCertificateChain](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineGetCertificateChain(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-Certificate")))]
        pub fn engineGetCertificateChain<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::security::cert::Certificate, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineGetCertificateChain", .descriptor == "(Ljava/lang/String;)[Ljava/security/cert/Certificate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineGetCertificateChain\0", "(Ljava/lang/String;)[Ljava/security/cert/Certificate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGetCertificate](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineGetCertificate(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-Certificate")))]
        pub fn engineGetCertificate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::Certificate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineGetCertificate", .descriptor == "(Ljava/lang/String;)Ljava/security/cert/Certificate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineGetCertificate\0", "(Ljava/lang/String;)Ljava/security/cert/Certificate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGetCreationDate](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineGetCreationDate(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Date")))]
        pub fn engineGetCreationDate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineGetCreationDate", .descriptor == "(Ljava/lang/String;)Ljava/util/Date;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineGetCreationDate\0", "(Ljava/lang/String;)Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineSetKeyEntry](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineSetKeyEntry(java.lang.String,%20java.security.Key,%20char%5B%5D,%20java.security.cert.Certificate%5B%5D))
        ///
        /// Required features: "java-lang-String", "java-security-Key", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Key", feature = "java-security-cert-Certificate")))]
        pub fn engineSetKeyEntry_String_Key_char_array_Certificate_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Key>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::Certificate, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineSetKeyEntry", .descriptor == "(Ljava/lang/String;Ljava/security/Key;[C[Ljava/security/cert/Certificate;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineSetKeyEntry\0", "(Ljava/lang/String;Ljava/security/Key;[C[Ljava/security/cert/Certificate;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineSetKeyEntry](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineSetKeyEntry(java.lang.String,%20byte%5B%5D,%20java.security.cert.Certificate%5B%5D))
        ///
        /// Required features: "java-lang-String", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-Certificate")))]
        pub fn engineSetKeyEntry_String_byte_array_Certificate_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::Certificate, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineSetKeyEntry", .descriptor == "(Ljava/lang/String;[B[Ljava/security/cert/Certificate;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineSetKeyEntry\0", "(Ljava/lang/String;[B[Ljava/security/cert/Certificate;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineSetCertificateEntry](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineSetCertificateEntry(java.lang.String,%20java.security.cert.Certificate))
        ///
        /// Required features: "java-lang-String", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-Certificate")))]
        pub fn engineSetCertificateEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::Certificate>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineSetCertificateEntry", .descriptor == "(Ljava/lang/String;Ljava/security/cert/Certificate;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineSetCertificateEntry\0", "(Ljava/lang/String;Ljava/security/cert/Certificate;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineDeleteEntry](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineDeleteEntry(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn engineDeleteEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineDeleteEntry", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineDeleteEntry\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineAliases](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineAliases())
        ///
        /// Required features: "java-util-Enumeration"
        #[cfg(any(feature = "all", all(feature = "java-util-Enumeration")))]
        pub fn engineAliases<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineAliases", .descriptor == "()Ljava/util/Enumeration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineAliases\0", "()Ljava/util/Enumeration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineContainsAlias](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineContainsAlias(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn engineContainsAlias<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineContainsAlias", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineContainsAlias\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineSize](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineSize())
        pub fn engineSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineSize", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineSize\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineIsKeyEntry](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineIsKeyEntry(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn engineIsKeyEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineIsKeyEntry", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineIsKeyEntry\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineIsCertificateEntry](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineIsCertificateEntry(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn engineIsCertificateEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineIsCertificateEntry", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineIsCertificateEntry\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGetCertificateAlias](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineGetCertificateAlias(java.security.cert.Certificate))
        ///
        /// Required features: "java-lang-String", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-Certificate")))]
        pub fn engineGetCertificateAlias<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::Certificate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineGetCertificateAlias", .descriptor == "(Ljava/security/cert/Certificate;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineGetCertificateAlias\0", "(Ljava/security/cert/Certificate;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineStore](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineStore(java.io.OutputStream,%20char%5B%5D))
        ///
        /// Required features: "java-io-OutputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream")))]
        pub fn engineStore_OutputStream_char_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineStore", .descriptor == "(Ljava/io/OutputStream;[C)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineStore\0", "(Ljava/io/OutputStream;[C)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineStore](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineStore(java.security.KeyStore.LoadStoreParameter))
        ///
        /// Required features: "java-security-KeyStore_LoadStoreParameter"
        #[cfg(any(feature = "all", all(feature = "java-security-KeyStore_LoadStoreParameter")))]
        pub fn engineStore_LoadStoreParameter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore_LoadStoreParameter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC, .name == "engineStore", .descriptor == "(Ljava/security/KeyStore$LoadStoreParameter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineStore\0", "(Ljava/security/KeyStore$LoadStoreParameter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineLoad](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineLoad(java.io.InputStream,%20char%5B%5D))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn engineLoad_InputStream_char_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC | ABSTRACT, .name == "engineLoad", .descriptor == "(Ljava/io/InputStream;[C)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineLoad\0", "(Ljava/io/InputStream;[C)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineLoad](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineLoad(java.security.KeyStore.LoadStoreParameter))
        ///
        /// Required features: "java-security-KeyStore_LoadStoreParameter"
        #[cfg(any(feature = "all", all(feature = "java-security-KeyStore_LoadStoreParameter")))]
        pub fn engineLoad_LoadStoreParameter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore_LoadStoreParameter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC, .name == "engineLoad", .descriptor == "(Ljava/security/KeyStore$LoadStoreParameter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineLoad\0", "(Ljava/security/KeyStore$LoadStoreParameter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGetEntry](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineGetEntry(java.lang.String,%20java.security.KeyStore.ProtectionParameter))
        ///
        /// Required features: "java-lang-String", "java-security-KeyStore_Entry", "java-security-KeyStore_ProtectionParameter"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-KeyStore_Entry", feature = "java-security-KeyStore_ProtectionParameter")))]
        pub fn engineGetEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore_ProtectionParameter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::KeyStore_Entry>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC, .name == "engineGetEntry", .descriptor == "(Ljava/lang/String;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Entry;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineGetEntry\0", "(Ljava/lang/String;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Entry;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineSetEntry](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineSetEntry(java.lang.String,%20java.security.KeyStore.Entry,%20java.security.KeyStore.ProtectionParameter))
        ///
        /// Required features: "java-lang-String", "java-security-KeyStore_Entry", "java-security-KeyStore_ProtectionParameter"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-KeyStore_Entry", feature = "java-security-KeyStore_ProtectionParameter")))]
        pub fn engineSetEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore_Entry>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore_ProtectionParameter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC, .name == "engineSetEntry", .descriptor == "(Ljava/lang/String;Ljava/security/KeyStore$Entry;Ljava/security/KeyStore$ProtectionParameter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineSetEntry\0", "(Ljava/lang/String;Ljava/security/KeyStore$Entry;Ljava/security/KeyStore$ProtectionParameter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineEntryInstanceOf](https://developer.android.com/reference/java/security/KeyStoreSpi.html#engineEntryInstanceOf(java.lang.String,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        pub fn engineEntryInstanceOf<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStoreSpi", java.flags == PUBLIC, .name == "engineEntryInstanceOf", .descriptor == "(Ljava/lang/String;Ljava/lang/Class;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStoreSpi\0", "engineEntryInstanceOf\0", "(Ljava/lang/String;Ljava/lang/Class;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
