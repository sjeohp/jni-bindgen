// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-KeyPairGeneratorSpi"))]
__jni_bindgen! {
    /// public class [KeyPairGeneratorSpi](https://developer.android.com/reference/java/security/KeyPairGeneratorSpi.html)
    ///
    /// Required feature: java-security-KeyPairGeneratorSpi
    public class KeyPairGeneratorSpi ("java/security/KeyPairGeneratorSpi") extends crate::java::lang::Object {

        /// [KeyPairGeneratorSpi](https://developer.android.com/reference/java/security/KeyPairGeneratorSpi.html#KeyPairGeneratorSpi())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::KeyPairGeneratorSpi>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyPairGeneratorSpi", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyPairGeneratorSpi\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [initialize](https://developer.android.com/reference/java/security/KeyPairGeneratorSpi.html#initialize(int,%20java.security.SecureRandom))
        ///
        /// Required features: "java-security-SecureRandom"
        #[cfg(any(feature = "all", all(feature = "java-security-SecureRandom")))]
        pub fn initialize_int_SecureRandom<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::SecureRandom>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyPairGeneratorSpi", java.flags == PUBLIC | ABSTRACT, .name == "initialize", .descriptor == "(ILjava/security/SecureRandom;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyPairGeneratorSpi\0", "initialize\0", "(ILjava/security/SecureRandom;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [initialize](https://developer.android.com/reference/java/security/KeyPairGeneratorSpi.html#initialize(java.security.spec.AlgorithmParameterSpec,%20java.security.SecureRandom))
        ///
        /// Required features: "java-security-SecureRandom", "java-security-spec-AlgorithmParameterSpec"
        #[cfg(any(feature = "all", all(feature = "java-security-SecureRandom", feature = "java-security-spec-AlgorithmParameterSpec")))]
        pub fn initialize_AlgorithmParameterSpec_SecureRandom<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::spec::AlgorithmParameterSpec>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::SecureRandom>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyPairGeneratorSpi", java.flags == PUBLIC, .name == "initialize", .descriptor == "(Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyPairGeneratorSpi\0", "initialize\0", "(Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateKeyPair](https://developer.android.com/reference/java/security/KeyPairGeneratorSpi.html#generateKeyPair())
        ///
        /// Required features: "java-security-KeyPair"
        #[cfg(any(feature = "all", all(feature = "java-security-KeyPair")))]
        pub fn generateKeyPair<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::KeyPair>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyPairGeneratorSpi", java.flags == PUBLIC | ABSTRACT, .name == "generateKeyPair", .descriptor == "()Ljava/security/KeyPair;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyPairGeneratorSpi\0", "generateKeyPair\0", "()Ljava/security/KeyPair;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
