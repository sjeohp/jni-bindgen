// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-acl-AclEntry"))]
__jni_bindgen! {
    /// public interface [AclEntry](https://developer.android.com/reference/java/security/acl/AclEntry.html)
    ///
    /// Required feature: java-security-acl-AclEntry
    public interface AclEntry ("java/security/acl/AclEntry") extends crate::java::lang::Object, implements crate::java::lang::Cloneable {

        /// [setPrincipal](https://developer.android.com/reference/java/security/acl/AclEntry.html#setPrincipal(java.security.Principal))
        ///
        /// Required features: "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal")))]
        pub fn setPrincipal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "setPrincipal", .descriptor == "(Ljava/security/Principal;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "setPrincipal\0", "(Ljava/security/Principal;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrincipal](https://developer.android.com/reference/java/security/acl/AclEntry.html#getPrincipal())
        ///
        /// Required features: "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal")))]
        pub fn getPrincipal<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Principal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "getPrincipal", .descriptor == "()Ljava/security/Principal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "getPrincipal\0", "()Ljava/security/Principal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNegativePermissions](https://developer.android.com/reference/java/security/acl/AclEntry.html#setNegativePermissions())
        pub fn setNegativePermissions<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "setNegativePermissions", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "setNegativePermissions\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNegative](https://developer.android.com/reference/java/security/acl/AclEntry.html#isNegative())
        pub fn isNegative<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "isNegative", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "isNegative\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPermission](https://developer.android.com/reference/java/security/acl/AclEntry.html#addPermission(java.security.acl.Permission))
        ///
        /// Required features: "java-security-acl-Permission"
        #[cfg(any(feature = "all", all(feature = "java-security-acl-Permission")))]
        pub fn addPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::acl::Permission>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "addPermission", .descriptor == "(Ljava/security/acl/Permission;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "addPermission\0", "(Ljava/security/acl/Permission;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removePermission](https://developer.android.com/reference/java/security/acl/AclEntry.html#removePermission(java.security.acl.Permission))
        ///
        /// Required features: "java-security-acl-Permission"
        #[cfg(any(feature = "all", all(feature = "java-security-acl-Permission")))]
        pub fn removePermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::acl::Permission>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "removePermission", .descriptor == "(Ljava/security/acl/Permission;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "removePermission\0", "(Ljava/security/acl/Permission;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkPermission](https://developer.android.com/reference/java/security/acl/AclEntry.html#checkPermission(java.security.acl.Permission))
        ///
        /// Required features: "java-security-acl-Permission"
        #[cfg(any(feature = "all", all(feature = "java-security-acl-Permission")))]
        pub fn checkPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::acl::Permission>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "checkPermission", .descriptor == "(Ljava/security/acl/Permission;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "checkPermission\0", "(Ljava/security/acl/Permission;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permissions](https://developer.android.com/reference/java/security/acl/AclEntry.html#permissions())
        ///
        /// Required features: "java-util-Enumeration"
        #[cfg(any(feature = "all", all(feature = "java-util-Enumeration")))]
        pub fn permissions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "permissions", .descriptor == "()Ljava/util/Enumeration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "permissions\0", "()Ljava/util/Enumeration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/security/acl/AclEntry.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/java/security/acl/AclEntry.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/AclEntry", java.flags == PUBLIC | ABSTRACT, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/AclEntry\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
