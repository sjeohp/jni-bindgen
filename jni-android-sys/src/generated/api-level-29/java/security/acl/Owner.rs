// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-acl-Owner"))]
__jni_bindgen! {
    /// public interface [Owner](https://developer.android.com/reference/java/security/acl/Owner.html)
    ///
    /// Required feature: java-security-acl-Owner
    public interface Owner ("java/security/acl/Owner") extends crate::java::lang::Object {

        /// [addOwner](https://developer.android.com/reference/java/security/acl/Owner.html#addOwner(java.security.Principal,%20java.security.Principal))
        ///
        /// Required features: "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal")))]
        pub fn addOwner<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Owner", java.flags == PUBLIC | ABSTRACT, .name == "addOwner", .descriptor == "(Ljava/security/Principal;Ljava/security/Principal;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Owner\0", "addOwner\0", "(Ljava/security/Principal;Ljava/security/Principal;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteOwner](https://developer.android.com/reference/java/security/acl/Owner.html#deleteOwner(java.security.Principal,%20java.security.Principal))
        ///
        /// Required features: "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal")))]
        pub fn deleteOwner<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Owner", java.flags == PUBLIC | ABSTRACT, .name == "deleteOwner", .descriptor == "(Ljava/security/Principal;Ljava/security/Principal;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Owner\0", "deleteOwner\0", "(Ljava/security/Principal;Ljava/security/Principal;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOwner](https://developer.android.com/reference/java/security/acl/Owner.html#isOwner(java.security.Principal))
        ///
        /// Required features: "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal")))]
        pub fn isOwner<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Owner", java.flags == PUBLIC | ABSTRACT, .name == "isOwner", .descriptor == "(Ljava/security/Principal;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Owner\0", "isOwner\0", "(Ljava/security/Principal;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
