// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-acl-Acl"))]
__jni_bindgen! {
    /// public interface [Acl](https://developer.android.com/reference/java/security/acl/Acl.html)
    ///
    /// Required feature: java-security-acl-Acl
    public interface Acl ("java/security/acl/Acl") extends crate::java::lang::Object, implements crate::java::security::acl::Owner {

        /// [setName](https://developer.android.com/reference/java/security/acl/Acl.html#setName(java.security.Principal,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Principal")))]
        pub fn setName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Acl", java.flags == PUBLIC | ABSTRACT, .name == "setName", .descriptor == "(Ljava/security/Principal;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Acl\0", "setName\0", "(Ljava/security/Principal;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/java/security/acl/Acl.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Acl", java.flags == PUBLIC | ABSTRACT, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Acl\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addEntry](https://developer.android.com/reference/java/security/acl/Acl.html#addEntry(java.security.Principal,%20java.security.acl.AclEntry))
        ///
        /// Required features: "java-security-Principal", "java-security-acl-AclEntry"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal", feature = "java-security-acl-AclEntry")))]
        pub fn addEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::acl::AclEntry>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Acl", java.flags == PUBLIC | ABSTRACT, .name == "addEntry", .descriptor == "(Ljava/security/Principal;Ljava/security/acl/AclEntry;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Acl\0", "addEntry\0", "(Ljava/security/Principal;Ljava/security/acl/AclEntry;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeEntry](https://developer.android.com/reference/java/security/acl/Acl.html#removeEntry(java.security.Principal,%20java.security.acl.AclEntry))
        ///
        /// Required features: "java-security-Principal", "java-security-acl-AclEntry"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal", feature = "java-security-acl-AclEntry")))]
        pub fn removeEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::acl::AclEntry>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Acl", java.flags == PUBLIC | ABSTRACT, .name == "removeEntry", .descriptor == "(Ljava/security/Principal;Ljava/security/acl/AclEntry;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Acl\0", "removeEntry\0", "(Ljava/security/Principal;Ljava/security/acl/AclEntry;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermissions](https://developer.android.com/reference/java/security/acl/Acl.html#getPermissions(java.security.Principal))
        ///
        /// Required features: "java-security-Principal", "java-util-Enumeration"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal", feature = "java-util-Enumeration")))]
        pub fn getPermissions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Acl", java.flags == PUBLIC | ABSTRACT, .name == "getPermissions", .descriptor == "(Ljava/security/Principal;)Ljava/util/Enumeration;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Acl\0", "getPermissions\0", "(Ljava/security/Principal;)Ljava/util/Enumeration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [entries](https://developer.android.com/reference/java/security/acl/Acl.html#entries())
        ///
        /// Required features: "java-util-Enumeration"
        #[cfg(any(feature = "all", all(feature = "java-util-Enumeration")))]
        pub fn entries<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Acl", java.flags == PUBLIC | ABSTRACT, .name == "entries", .descriptor == "()Ljava/util/Enumeration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Acl\0", "entries\0", "()Ljava/util/Enumeration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkPermission](https://developer.android.com/reference/java/security/acl/Acl.html#checkPermission(java.security.Principal,%20java.security.acl.Permission))
        ///
        /// Required features: "java-security-Principal", "java-security-acl-Permission"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal", feature = "java-security-acl-Permission")))]
        pub fn checkPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Principal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::acl::Permission>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Acl", java.flags == PUBLIC | ABSTRACT, .name == "checkPermission", .descriptor == "(Ljava/security/Principal;Ljava/security/acl/Permission;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Acl\0", "checkPermission\0", "(Ljava/security/Principal;Ljava/security/acl/Permission;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/security/acl/Acl.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/acl/Acl", java.flags == PUBLIC | ABSTRACT, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/acl/Acl\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
