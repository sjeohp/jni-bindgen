// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-AccessControlContext"))]
__jni_bindgen! {
    /// public final class [AccessControlContext](https://developer.android.com/reference/java/security/AccessControlContext.html)
    ///
    /// Required feature: java-security-AccessControlContext
    public final class AccessControlContext ("java/security/AccessControlContext") extends crate::java::lang::Object {

        /// [AccessControlContext](https://developer.android.com/reference/java/security/AccessControlContext.html#AccessControlContext(java.security.ProtectionDomain%5B%5D))
        ///
        /// Required features: "java-security-ProtectionDomain"
        #[cfg(any(feature = "all", all(feature = "java-security-ProtectionDomain")))]
        pub fn new_ProtectionDomain_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::ProtectionDomain, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::AccessControlContext>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessControlContext", java.flags == PUBLIC, .name == "<init>", .descriptor == "([Ljava/security/ProtectionDomain;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/AccessControlContext\0", "<init>\0", "([Ljava/security/ProtectionDomain;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [AccessControlContext](https://developer.android.com/reference/java/security/AccessControlContext.html#AccessControlContext(java.security.AccessControlContext,%20java.security.DomainCombiner))
        ///
        /// Required features: "java-security-AccessControlContext", "java-security-DomainCombiner"
        #[cfg(any(feature = "all", all(feature = "java-security-AccessControlContext", feature = "java-security-DomainCombiner")))]
        pub fn new_AccessControlContext_DomainCombiner<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::AccessControlContext>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::DomainCombiner>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::AccessControlContext>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessControlContext", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/security/AccessControlContext;Ljava/security/DomainCombiner;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/AccessControlContext\0", "<init>\0", "(Ljava/security/AccessControlContext;Ljava/security/DomainCombiner;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDomainCombiner](https://developer.android.com/reference/java/security/AccessControlContext.html#getDomainCombiner())
        ///
        /// Required features: "java-security-DomainCombiner"
        #[cfg(any(feature = "all", all(feature = "java-security-DomainCombiner")))]
        pub fn getDomainCombiner<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::DomainCombiner>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessControlContext", java.flags == PUBLIC, .name == "getDomainCombiner", .descriptor == "()Ljava/security/DomainCombiner;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/AccessControlContext\0", "getDomainCombiner\0", "()Ljava/security/DomainCombiner;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkPermission](https://developer.android.com/reference/java/security/AccessControlContext.html#checkPermission(java.security.Permission))
        ///
        /// Required features: "java-security-Permission"
        #[cfg(any(feature = "all", all(feature = "java-security-Permission")))]
        pub fn checkPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Permission>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessControlContext", java.flags == PUBLIC, .name == "checkPermission", .descriptor == "(Ljava/security/Permission;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/AccessControlContext\0", "checkPermission\0", "(Ljava/security/Permission;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
