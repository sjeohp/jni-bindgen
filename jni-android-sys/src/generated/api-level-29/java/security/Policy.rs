// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-Policy"))]
__jni_bindgen! {
    /// public class [Policy](https://developer.android.com/reference/java/security/Policy.html)
    ///
    /// Required feature: java-security-Policy
    public class Policy ("java/security/Policy") extends crate::java::lang::Object {

        /// [Policy](https://developer.android.com/reference/java/security/Policy.html#Policy())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::Policy>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Policy\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPolicy](https://developer.android.com/reference/java/security/Policy.html#getPolicy())
        ///
        /// Required features: "java-security-Policy"
        #[cfg(any(feature = "all", all(feature = "java-security-Policy")))]
        pub fn getPolicy<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Policy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC | STATIC, .name == "getPolicy", .descriptor == "()Ljava/security/Policy;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/Policy\0", "getPolicy\0", "()Ljava/security/Policy;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPolicy](https://developer.android.com/reference/java/security/Policy.html#setPolicy(java.security.Policy))
        ///
        /// Required features: "java-security-Policy"
        #[cfg(any(feature = "all", all(feature = "java-security-Policy")))]
        pub fn setPolicy<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Policy>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC | STATIC, .name == "setPolicy", .descriptor == "(Ljava/security/Policy;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/Policy\0", "setPolicy\0", "(Ljava/security/Policy;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/java/security/Policy.html#getInstance(java.lang.String,%20java.security.Policy.Parameters))
        ///
        /// Required features: "java-lang-String", "java-security-Policy", "java-security-Policy_Parameters"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Policy", feature = "java-security-Policy_Parameters")))]
        pub fn getInstance_String_Parameters<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Policy_Parameters>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Policy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/lang/String;Ljava/security/Policy$Parameters;)Ljava/security/Policy;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/Policy\0", "getInstance\0", "(Ljava/lang/String;Ljava/security/Policy$Parameters;)Ljava/security/Policy;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/java/security/Policy.html#getInstance(java.lang.String,%20java.security.Policy.Parameters,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-Policy", "java-security-Policy_Parameters"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Policy", feature = "java-security-Policy_Parameters")))]
        pub fn getInstance_String_Parameters_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Policy_Parameters>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Policy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/lang/String;Ljava/security/Policy$Parameters;Ljava/lang/String;)Ljava/security/Policy;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/Policy\0", "getInstance\0", "(Ljava/lang/String;Ljava/security/Policy$Parameters;Ljava/lang/String;)Ljava/security/Policy;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/java/security/Policy.html#getInstance(java.lang.String,%20java.security.Policy.Parameters,%20java.security.Provider))
        ///
        /// Required features: "java-lang-String", "java-security-Policy", "java-security-Policy_Parameters", "java-security-Provider"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Policy", feature = "java-security-Policy_Parameters", feature = "java-security-Provider")))]
        pub fn getInstance_String_Parameters_Provider<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Policy_Parameters>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Provider>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Policy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/lang/String;Ljava/security/Policy$Parameters;Ljava/security/Provider;)Ljava/security/Policy;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/Policy\0", "getInstance\0", "(Ljava/lang/String;Ljava/security/Policy$Parameters;Ljava/security/Provider;)Ljava/security/Policy;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProvider](https://developer.android.com/reference/java/security/Policy.html#getProvider())
        ///
        /// Required features: "java-security-Provider"
        #[cfg(any(feature = "all", all(feature = "java-security-Provider")))]
        pub fn getProvider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Provider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC, .name == "getProvider", .descriptor == "()Ljava/security/Provider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Policy\0", "getProvider\0", "()Ljava/security/Provider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/java/security/Policy.html#getType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC, .name == "getType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Policy\0", "getType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParameters](https://developer.android.com/reference/java/security/Policy.html#getParameters())
        ///
        /// Required features: "java-security-Policy_Parameters"
        #[cfg(any(feature = "all", all(feature = "java-security-Policy_Parameters")))]
        pub fn getParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Policy_Parameters>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC, .name == "getParameters", .descriptor == "()Ljava/security/Policy$Parameters;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Policy\0", "getParameters\0", "()Ljava/security/Policy$Parameters;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermissions](https://developer.android.com/reference/java/security/Policy.html#getPermissions(java.security.CodeSource))
        ///
        /// Required features: "java-security-CodeSource", "java-security-PermissionCollection"
        #[cfg(any(feature = "all", all(feature = "java-security-CodeSource", feature = "java-security-PermissionCollection")))]
        pub fn getPermissions_CodeSource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::CodeSource>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::PermissionCollection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC, .name == "getPermissions", .descriptor == "(Ljava/security/CodeSource;)Ljava/security/PermissionCollection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Policy\0", "getPermissions\0", "(Ljava/security/CodeSource;)Ljava/security/PermissionCollection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermissions](https://developer.android.com/reference/java/security/Policy.html#getPermissions(java.security.ProtectionDomain))
        ///
        /// Required features: "java-security-PermissionCollection", "java-security-ProtectionDomain"
        #[cfg(any(feature = "all", all(feature = "java-security-PermissionCollection", feature = "java-security-ProtectionDomain")))]
        pub fn getPermissions_ProtectionDomain<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::ProtectionDomain>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::PermissionCollection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC, .name == "getPermissions", .descriptor == "(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Policy\0", "getPermissions\0", "(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [implies](https://developer.android.com/reference/java/security/Policy.html#implies(java.security.ProtectionDomain,%20java.security.Permission))
        ///
        /// Required features: "java-security-Permission", "java-security-ProtectionDomain"
        #[cfg(any(feature = "all", all(feature = "java-security-Permission", feature = "java-security-ProtectionDomain")))]
        pub fn implies<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::ProtectionDomain>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Permission>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC, .name == "implies", .descriptor == "(Ljava/security/ProtectionDomain;Ljava/security/Permission;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Policy\0", "implies\0", "(Ljava/security/ProtectionDomain;Ljava/security/Permission;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [refresh](https://developer.android.com/reference/java/security/Policy.html#refresh())
        pub fn refresh<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Policy", java.flags == PUBLIC, .name == "refresh", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Policy\0", "refresh\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [UNSUPPORTED_EMPTY_COLLECTION](https://developer.android.com/reference/java/security/Policy.html#UNSUPPORTED_EMPTY_COLLECTION)
        ///
        /// Required feature: java-security-PermissionCollection
        #[cfg(any(feature = "all", feature = "java-security-PermissionCollection"))]
        pub fn UNSUPPORTED_EMPTY_COLLECTION<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::PermissionCollection>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/security/Policy\0", "UNSUPPORTED_EMPTY_COLLECTION\0", "Ljava/security/PermissionCollection;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
