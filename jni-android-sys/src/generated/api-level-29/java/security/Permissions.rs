// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-Permissions"))]
__jni_bindgen! {
    /// public final class [Permissions](https://developer.android.com/reference/java/security/Permissions.html)
    ///
    /// Required feature: java-security-Permissions
    public final class Permissions ("java/security/Permissions") extends crate::java::security::PermissionCollection, implements crate::java::io::Serializable {

        /// [Permissions](https://developer.android.com/reference/java/security/Permissions.html#Permissions())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::Permissions>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Permissions", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Permissions\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/java/security/Permissions.html#add(java.security.Permission))
        ///
        /// Required features: "java-security-Permission"
        #[cfg(any(feature = "all", all(feature = "java-security-Permission")))]
        pub fn add<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Permission>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Permissions", java.flags == PUBLIC, .name == "add", .descriptor == "(Ljava/security/Permission;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Permissions\0", "add\0", "(Ljava/security/Permission;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [implies](https://developer.android.com/reference/java/security/Permissions.html#implies(java.security.Permission))
        ///
        /// Required features: "java-security-Permission"
        #[cfg(any(feature = "all", all(feature = "java-security-Permission")))]
        pub fn implies<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Permission>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Permissions", java.flags == PUBLIC, .name == "implies", .descriptor == "(Ljava/security/Permission;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Permissions\0", "implies\0", "(Ljava/security/Permission;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [elements](https://developer.android.com/reference/java/security/Permissions.html#elements())
        ///
        /// Required features: "java-util-Enumeration"
        #[cfg(any(feature = "all", all(feature = "java-util-Enumeration")))]
        pub fn elements<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/Permissions", java.flags == PUBLIC, .name == "elements", .descriptor == "()Ljava/util/Enumeration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/Permissions\0", "elements\0", "()Ljava/util/Enumeration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
