// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-KeyStore_Builder"))]
__jni_bindgen! {
    /// public class [KeyStore.Builder](https://developer.android.com/reference/java/security/KeyStore.Builder.html)
    ///
    /// Required feature: java-security-KeyStore_Builder
    public class KeyStore_Builder ("java/security/KeyStore$Builder") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Builder](https://developer.android.com/reference/java/security/KeyStore.Builder.html#Builder())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::KeyStore_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/security/KeyStore$Builder", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStore$Builder\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getKeyStore](https://developer.android.com/reference/java/security/KeyStore.Builder.html#getKeyStore())
        ///
        /// Required features: "java-security-KeyStore"
        #[cfg(any(feature = "all", all(feature = "java-security-KeyStore")))]
        pub fn getKeyStore<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::KeyStore>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStore$Builder", java.flags == PUBLIC | ABSTRACT, .name == "getKeyStore", .descriptor == "()Ljava/security/KeyStore;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStore$Builder\0", "getKeyStore\0", "()Ljava/security/KeyStore;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProtectionParameter](https://developer.android.com/reference/java/security/KeyStore.Builder.html#getProtectionParameter(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-KeyStore_ProtectionParameter"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-KeyStore_ProtectionParameter")))]
        pub fn getProtectionParameter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::KeyStore_ProtectionParameter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStore$Builder", java.flags == PUBLIC | ABSTRACT, .name == "getProtectionParameter", .descriptor == "(Ljava/lang/String;)Ljava/security/KeyStore$ProtectionParameter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/KeyStore$Builder\0", "getProtectionParameter\0", "(Ljava/lang/String;)Ljava/security/KeyStore$ProtectionParameter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/java/security/KeyStore.Builder.html#newInstance(java.security.KeyStore,%20java.security.KeyStore.ProtectionParameter))
        ///
        /// Required features: "java-security-KeyStore", "java-security-KeyStore_Builder", "java-security-KeyStore_ProtectionParameter"
        #[cfg(any(feature = "all", all(feature = "java-security-KeyStore", feature = "java-security-KeyStore_Builder", feature = "java-security-KeyStore_ProtectionParameter")))]
        pub fn newInstance_KeyStore_ProtectionParameter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore_ProtectionParameter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::KeyStore_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStore$Builder", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/security/KeyStore;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/KeyStore$Builder\0", "newInstance\0", "(Ljava/security/KeyStore;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/java/security/KeyStore.Builder.html#newInstance(java.lang.String,%20java.security.Provider,%20java.io.File,%20java.security.KeyStore.ProtectionParameter))
        ///
        /// Required features: "java-io-File", "java-lang-String", "java-security-KeyStore_Builder", "java-security-KeyStore_ProtectionParameter", "java-security-Provider"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-String", feature = "java-security-KeyStore_Builder", feature = "java-security-KeyStore_ProtectionParameter", feature = "java-security-Provider")))]
        pub fn newInstance_String_Provider_File_ProtectionParameter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Provider>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore_ProtectionParameter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::KeyStore_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStore$Builder", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/lang/String;Ljava/security/Provider;Ljava/io/File;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/KeyStore$Builder\0", "newInstance\0", "(Ljava/lang/String;Ljava/security/Provider;Ljava/io/File;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/java/security/KeyStore.Builder.html#newInstance(java.lang.String,%20java.security.Provider,%20java.security.KeyStore.ProtectionParameter))
        ///
        /// Required features: "java-lang-String", "java-security-KeyStore_Builder", "java-security-KeyStore_ProtectionParameter", "java-security-Provider"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-KeyStore_Builder", feature = "java-security-KeyStore_ProtectionParameter", feature = "java-security-Provider")))]
        pub fn newInstance_String_Provider_ProtectionParameter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Provider>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::KeyStore_ProtectionParameter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::KeyStore_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/KeyStore$Builder", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/lang/String;Ljava/security/Provider;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/KeyStore$Builder\0", "newInstance\0", "(Ljava/lang/String;Ljava/security/Provider;Ljava/security/KeyStore$ProtectionParameter;)Ljava/security/KeyStore$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
