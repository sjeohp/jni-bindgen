// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-cert-X509Extension"))]
__jni_bindgen! {
    /// public interface [X509Extension](https://developer.android.com/reference/java/security/cert/X509Extension.html)
    ///
    /// Required feature: java-security-cert-X509Extension
    public interface X509Extension ("java/security/cert/X509Extension") extends crate::java::lang::Object {

        /// [hasUnsupportedCriticalExtension](https://developer.android.com/reference/java/security/cert/X509Extension.html#hasUnsupportedCriticalExtension())
        pub fn hasUnsupportedCriticalExtension<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509Extension", java.flags == PUBLIC | ABSTRACT, .name == "hasUnsupportedCriticalExtension", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509Extension\0", "hasUnsupportedCriticalExtension\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCriticalExtensionOIDs](https://developer.android.com/reference/java/security/cert/X509Extension.html#getCriticalExtensionOIDs())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getCriticalExtensionOIDs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509Extension", java.flags == PUBLIC | ABSTRACT, .name == "getCriticalExtensionOIDs", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509Extension\0", "getCriticalExtensionOIDs\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNonCriticalExtensionOIDs](https://developer.android.com/reference/java/security/cert/X509Extension.html#getNonCriticalExtensionOIDs())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getNonCriticalExtensionOIDs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509Extension", java.flags == PUBLIC | ABSTRACT, .name == "getNonCriticalExtensionOIDs", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509Extension\0", "getNonCriticalExtensionOIDs\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExtensionValue](https://developer.android.com/reference/java/security/cert/X509Extension.html#getExtensionValue(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getExtensionValue<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509Extension", java.flags == PUBLIC | ABSTRACT, .name == "getExtensionValue", .descriptor == "(Ljava/lang/String;)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509Extension\0", "getExtensionValue\0", "(Ljava/lang/String;)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
