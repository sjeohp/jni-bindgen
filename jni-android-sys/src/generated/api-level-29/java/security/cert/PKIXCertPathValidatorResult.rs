// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-cert-PKIXCertPathValidatorResult"))]
__jni_bindgen! {
    /// public class [PKIXCertPathValidatorResult](https://developer.android.com/reference/java/security/cert/PKIXCertPathValidatorResult.html)
    ///
    /// Required feature: java-security-cert-PKIXCertPathValidatorResult
    public class PKIXCertPathValidatorResult ("java/security/cert/PKIXCertPathValidatorResult") extends crate::java::lang::Object, implements crate::java::security::cert::CertPathValidatorResult {

        /// [PKIXCertPathValidatorResult](https://developer.android.com/reference/java/security/cert/PKIXCertPathValidatorResult.html#PKIXCertPathValidatorResult(java.security.cert.TrustAnchor,%20java.security.cert.PolicyNode,%20java.security.PublicKey))
        ///
        /// Required features: "java-security-PublicKey", "java-security-cert-PolicyNode", "java-security-cert-TrustAnchor"
        #[cfg(any(feature = "all", all(feature = "java-security-PublicKey", feature = "java-security-cert-PolicyNode", feature = "java-security-cert-TrustAnchor")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::TrustAnchor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::PolicyNode>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PublicKey>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::cert::PKIXCertPathValidatorResult>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/PKIXCertPathValidatorResult", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/security/cert/TrustAnchor;Ljava/security/cert/PolicyNode;Ljava/security/PublicKey;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/PKIXCertPathValidatorResult\0", "<init>\0", "(Ljava/security/cert/TrustAnchor;Ljava/security/cert/PolicyNode;Ljava/security/PublicKey;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTrustAnchor](https://developer.android.com/reference/java/security/cert/PKIXCertPathValidatorResult.html#getTrustAnchor())
        ///
        /// Required features: "java-security-cert-TrustAnchor"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-TrustAnchor")))]
        pub fn getTrustAnchor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::TrustAnchor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/PKIXCertPathValidatorResult", java.flags == PUBLIC, .name == "getTrustAnchor", .descriptor == "()Ljava/security/cert/TrustAnchor;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/PKIXCertPathValidatorResult\0", "getTrustAnchor\0", "()Ljava/security/cert/TrustAnchor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPolicyTree](https://developer.android.com/reference/java/security/cert/PKIXCertPathValidatorResult.html#getPolicyTree())
        ///
        /// Required features: "java-security-cert-PolicyNode"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-PolicyNode")))]
        pub fn getPolicyTree<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::PolicyNode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/PKIXCertPathValidatorResult", java.flags == PUBLIC, .name == "getPolicyTree", .descriptor == "()Ljava/security/cert/PolicyNode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/PKIXCertPathValidatorResult\0", "getPolicyTree\0", "()Ljava/security/cert/PolicyNode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPublicKey](https://developer.android.com/reference/java/security/cert/PKIXCertPathValidatorResult.html#getPublicKey())
        ///
        /// Required features: "java-security-PublicKey"
        #[cfg(any(feature = "all", all(feature = "java-security-PublicKey")))]
        pub fn getPublicKey<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::PublicKey>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/PKIXCertPathValidatorResult", java.flags == PUBLIC, .name == "getPublicKey", .descriptor == "()Ljava/security/PublicKey;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/PKIXCertPathValidatorResult\0", "getPublicKey\0", "()Ljava/security/PublicKey;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/java/security/cert/PKIXCertPathValidatorResult.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/PKIXCertPathValidatorResult", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/PKIXCertPathValidatorResult\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/security/cert/PKIXCertPathValidatorResult.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/PKIXCertPathValidatorResult", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/PKIXCertPathValidatorResult\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
