// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-cert-CertificateFactorySpi"))]
__jni_bindgen! {
    /// public class [CertificateFactorySpi](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html)
    ///
    /// Required feature: java-security-cert-CertificateFactorySpi
    public class CertificateFactorySpi ("java/security/cert/CertificateFactorySpi") extends crate::java::lang::Object {

        /// [CertificateFactorySpi](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html#CertificateFactorySpi())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::cert::CertificateFactorySpi>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactorySpi", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactorySpi\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGenerateCertificate](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html#engineGenerateCertificate(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-security-cert-Certificate")))]
        pub fn engineGenerateCertificate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::Certificate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactorySpi", java.flags == PUBLIC | ABSTRACT, .name == "engineGenerateCertificate", .descriptor == "(Ljava/io/InputStream;)Ljava/security/cert/Certificate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactorySpi\0", "engineGenerateCertificate\0", "(Ljava/io/InputStream;)Ljava/security/cert/Certificate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGenerateCertPath](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html#engineGenerateCertPath(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-security-cert-CertPath"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-security-cert-CertPath")))]
        pub fn engineGenerateCertPath_InputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CertPath>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactorySpi", java.flags == PUBLIC, .name == "engineGenerateCertPath", .descriptor == "(Ljava/io/InputStream;)Ljava/security/cert/CertPath;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactorySpi\0", "engineGenerateCertPath\0", "(Ljava/io/InputStream;)Ljava/security/cert/CertPath;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGenerateCertPath](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html#engineGenerateCertPath(java.io.InputStream,%20java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String", "java-security-cert-CertPath"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String", feature = "java-security-cert-CertPath")))]
        pub fn engineGenerateCertPath_InputStream_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CertPath>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactorySpi", java.flags == PUBLIC, .name == "engineGenerateCertPath", .descriptor == "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/security/cert/CertPath;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactorySpi\0", "engineGenerateCertPath\0", "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/security/cert/CertPath;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGenerateCertPath](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html#engineGenerateCertPath(java.util.List))
        ///
        /// Required features: "java-security-cert-CertPath", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-CertPath", feature = "java-util-List")))]
        pub fn engineGenerateCertPath_List<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CertPath>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactorySpi", java.flags == PUBLIC, .name == "engineGenerateCertPath", .descriptor == "(Ljava/util/List;)Ljava/security/cert/CertPath;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactorySpi\0", "engineGenerateCertPath\0", "(Ljava/util/List;)Ljava/security/cert/CertPath;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGetCertPathEncodings](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html#engineGetCertPathEncodings())
        ///
        /// Required features: "java-util-Iterator"
        #[cfg(any(feature = "all", all(feature = "java-util-Iterator")))]
        pub fn engineGetCertPathEncodings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Iterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactorySpi", java.flags == PUBLIC, .name == "engineGetCertPathEncodings", .descriptor == "()Ljava/util/Iterator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactorySpi\0", "engineGetCertPathEncodings\0", "()Ljava/util/Iterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGenerateCertificates](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html#engineGenerateCertificates(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-util-Collection")))]
        pub fn engineGenerateCertificates<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactorySpi", java.flags == PUBLIC | ABSTRACT, .name == "engineGenerateCertificates", .descriptor == "(Ljava/io/InputStream;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactorySpi\0", "engineGenerateCertificates\0", "(Ljava/io/InputStream;)Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGenerateCRL](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html#engineGenerateCRL(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-security-cert-CRL"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-security-cert-CRL")))]
        pub fn engineGenerateCRL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CRL>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactorySpi", java.flags == PUBLIC | ABSTRACT, .name == "engineGenerateCRL", .descriptor == "(Ljava/io/InputStream;)Ljava/security/cert/CRL;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactorySpi\0", "engineGenerateCRL\0", "(Ljava/io/InputStream;)Ljava/security/cert/CRL;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [engineGenerateCRLs](https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html#engineGenerateCRLs(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-util-Collection")))]
        pub fn engineGenerateCRLs<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactorySpi", java.flags == PUBLIC | ABSTRACT, .name == "engineGenerateCRLs", .descriptor == "(Ljava/io/InputStream;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactorySpi\0", "engineGenerateCRLs\0", "(Ljava/io/InputStream;)Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
