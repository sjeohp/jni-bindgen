// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-cert-CertificateFactory"))]
__jni_bindgen! {
    /// public class [CertificateFactory](https://developer.android.com/reference/java/security/cert/CertificateFactory.html)
    ///
    /// Required feature: java-security-cert-CertificateFactory
    public class CertificateFactory ("java/security/cert/CertificateFactory") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [CertificateFactory](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#CertificateFactory(java.security.cert.CertificateFactorySpi,%20java.security.Provider,%20java.lang.String))
        // ///
        // /// Required features: "java-lang-String", "java-security-Provider", "java-security-cert-CertificateFactorySpi"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Provider", feature = "java-security-cert-CertificateFactorySpi")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::CertificateFactorySpi>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Provider>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::cert::CertificateFactory>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/security/cert/CertificateFactory", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljava/security/cert/CertificateFactorySpi;Ljava/security/Provider;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "<init>\0", "(Ljava/security/cert/CertificateFactorySpi;Ljava/security/Provider;Ljava/lang/String;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#getInstance(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-cert-CertificateFactory"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-CertificateFactory")))]
        pub fn getInstance_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CertificateFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | STATIC | FINAL, .name == "getInstance", .descriptor == "(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/cert/CertificateFactory\0", "getInstance\0", "(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#getInstance(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-cert-CertificateFactory"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-CertificateFactory")))]
        pub fn getInstance_String_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CertificateFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | STATIC | FINAL, .name == "getInstance", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/security/cert/CertificateFactory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/cert/CertificateFactory\0", "getInstance\0", "(Ljava/lang/String;Ljava/lang/String;)Ljava/security/cert/CertificateFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#getInstance(java.lang.String,%20java.security.Provider))
        ///
        /// Required features: "java-lang-String", "java-security-Provider", "java-security-cert-CertificateFactory"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-Provider", feature = "java-security-cert-CertificateFactory")))]
        pub fn getInstance_String_Provider<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Provider>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CertificateFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | STATIC | FINAL, .name == "getInstance", .descriptor == "(Ljava/lang/String;Ljava/security/Provider;)Ljava/security/cert/CertificateFactory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/cert/CertificateFactory\0", "getInstance\0", "(Ljava/lang/String;Ljava/security/Provider;)Ljava/security/cert/CertificateFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProvider](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#getProvider())
        ///
        /// Required features: "java-security-Provider"
        #[cfg(any(feature = "all", all(feature = "java-security-Provider")))]
        pub fn getProvider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Provider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "getProvider", .descriptor == "()Ljava/security/Provider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "getProvider\0", "()Ljava/security/Provider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#getType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "getType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "getType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateCertificate](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#generateCertificate(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-security-cert-Certificate")))]
        pub fn generateCertificate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::Certificate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "generateCertificate", .descriptor == "(Ljava/io/InputStream;)Ljava/security/cert/Certificate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "generateCertificate\0", "(Ljava/io/InputStream;)Ljava/security/cert/Certificate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCertPathEncodings](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#getCertPathEncodings())
        ///
        /// Required features: "java-util-Iterator"
        #[cfg(any(feature = "all", all(feature = "java-util-Iterator")))]
        pub fn getCertPathEncodings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Iterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "getCertPathEncodings", .descriptor == "()Ljava/util/Iterator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "getCertPathEncodings\0", "()Ljava/util/Iterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateCertPath](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#generateCertPath(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-security-cert-CertPath"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-security-cert-CertPath")))]
        pub fn generateCertPath_InputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CertPath>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "generateCertPath", .descriptor == "(Ljava/io/InputStream;)Ljava/security/cert/CertPath;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "generateCertPath\0", "(Ljava/io/InputStream;)Ljava/security/cert/CertPath;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateCertPath](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#generateCertPath(java.io.InputStream,%20java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String", "java-security-cert-CertPath"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String", feature = "java-security-cert-CertPath")))]
        pub fn generateCertPath_InputStream_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CertPath>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "generateCertPath", .descriptor == "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/security/cert/CertPath;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "generateCertPath\0", "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/security/cert/CertPath;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateCertPath](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#generateCertPath(java.util.List))
        ///
        /// Required features: "java-security-cert-CertPath", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-CertPath", feature = "java-util-List")))]
        pub fn generateCertPath_List<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CertPath>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "generateCertPath", .descriptor == "(Ljava/util/List;)Ljava/security/cert/CertPath;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "generateCertPath\0", "(Ljava/util/List;)Ljava/security/cert/CertPath;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateCertificates](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#generateCertificates(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-util-Collection")))]
        pub fn generateCertificates<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "generateCertificates", .descriptor == "(Ljava/io/InputStream;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "generateCertificates\0", "(Ljava/io/InputStream;)Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateCRL](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#generateCRL(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-security-cert-CRL"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-security-cert-CRL")))]
        pub fn generateCRL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::CRL>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "generateCRL", .descriptor == "(Ljava/io/InputStream;)Ljava/security/cert/CRL;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "generateCRL\0", "(Ljava/io/InputStream;)Ljava/security/cert/CRL;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateCRLs](https://developer.android.com/reference/java/security/cert/CertificateFactory.html#generateCRLs(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-util-Collection")))]
        pub fn generateCRLs<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/CertificateFactory", java.flags == PUBLIC | FINAL, .name == "generateCRLs", .descriptor == "(Ljava/io/InputStream;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/CertificateFactory\0", "generateCRLs\0", "(Ljava/io/InputStream;)Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
