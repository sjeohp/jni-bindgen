// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-cert-X509CRL"))]
__jni_bindgen! {
    /// public class [X509CRL](https://developer.android.com/reference/java/security/cert/X509CRL.html)
    ///
    /// Required feature: java-security-cert-X509CRL
    public class X509CRL ("java/security/cert/X509CRL") extends crate::java::security::cert::CRL, implements crate::java::security::cert::X509Extension {

        // // Not emitting: Non-public method
        // /// [X509CRL](https://developer.android.com/reference/java/security/cert/X509CRL.html#X509CRL())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::cert::X509CRL>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/security/cert/X509CRL", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [equals](https://developer.android.com/reference/java/security/cert/X509CRL.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/security/cert/X509CRL.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEncoded](https://developer.android.com/reference/java/security/cert/X509CRL.html#getEncoded())
        pub fn getEncoded<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getEncoded", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getEncoded\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [verify](https://developer.android.com/reference/java/security/cert/X509CRL.html#verify(java.security.PublicKey))
        ///
        /// Required features: "java-security-PublicKey"
        #[cfg(any(feature = "all", all(feature = "java-security-PublicKey")))]
        pub fn verify_PublicKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PublicKey>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "verify", .descriptor == "(Ljava/security/PublicKey;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "verify\0", "(Ljava/security/PublicKey;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [verify](https://developer.android.com/reference/java/security/cert/X509CRL.html#verify(java.security.PublicKey,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-PublicKey"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-PublicKey")))]
        pub fn verify_PublicKey_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PublicKey>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "verify", .descriptor == "(Ljava/security/PublicKey;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "verify\0", "(Ljava/security/PublicKey;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [verify](https://developer.android.com/reference/java/security/cert/X509CRL.html#verify(java.security.PublicKey,%20java.security.Provider))
        ///
        /// Required features: "java-security-Provider", "java-security-PublicKey"
        #[cfg(any(feature = "all", all(feature = "java-security-Provider", feature = "java-security-PublicKey")))]
        pub fn verify_PublicKey_Provider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PublicKey>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Provider>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC, .name == "verify", .descriptor == "(Ljava/security/PublicKey;Ljava/security/Provider;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "verify\0", "(Ljava/security/PublicKey;Ljava/security/Provider;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVersion](https://developer.android.com/reference/java/security/cert/X509CRL.html#getVersion())
        pub fn getVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getVersion", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getVersion\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIssuerDN](https://developer.android.com/reference/java/security/cert/X509CRL.html#getIssuerDN())
        ///
        /// Required features: "java-security-Principal"
        #[cfg(any(feature = "all", all(feature = "java-security-Principal")))]
        pub fn getIssuerDN<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::Principal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getIssuerDN", .descriptor == "()Ljava/security/Principal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getIssuerDN\0", "()Ljava/security/Principal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIssuerX500Principal](https://developer.android.com/reference/java/security/cert/X509CRL.html#getIssuerX500Principal())
        ///
        /// Required features: "javax-security-auth-x500-X500Principal"
        #[cfg(any(feature = "all", all(feature = "javax-security-auth-x500-X500Principal")))]
        pub fn getIssuerX500Principal<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::javax::security::auth::x500::X500Principal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC, .name == "getIssuerX500Principal", .descriptor == "()Ljavax/security/auth/x500/X500Principal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getIssuerX500Principal\0", "()Ljavax/security/auth/x500/X500Principal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getThisUpdate](https://developer.android.com/reference/java/security/cert/X509CRL.html#getThisUpdate())
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn getThisUpdate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getThisUpdate", .descriptor == "()Ljava/util/Date;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getThisUpdate\0", "()Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNextUpdate](https://developer.android.com/reference/java/security/cert/X509CRL.html#getNextUpdate())
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn getNextUpdate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getNextUpdate", .descriptor == "()Ljava/util/Date;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getNextUpdate\0", "()Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRevokedCertificate](https://developer.android.com/reference/java/security/cert/X509CRL.html#getRevokedCertificate(java.math.BigInteger))
        ///
        /// Required features: "java-math-BigInteger", "java-security-cert-X509CRLEntry"
        #[cfg(any(feature = "all", all(feature = "java-math-BigInteger", feature = "java-security-cert-X509CRLEntry")))]
        pub fn getRevokedCertificate_BigInteger<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigInteger>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::X509CRLEntry>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getRevokedCertificate", .descriptor == "(Ljava/math/BigInteger;)Ljava/security/cert/X509CRLEntry;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getRevokedCertificate\0", "(Ljava/math/BigInteger;)Ljava/security/cert/X509CRLEntry;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRevokedCertificate](https://developer.android.com/reference/java/security/cert/X509CRL.html#getRevokedCertificate(java.security.cert.X509Certificate))
        ///
        /// Required features: "java-security-cert-X509CRLEntry", "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-X509CRLEntry", feature = "java-security-cert-X509Certificate")))]
        pub fn getRevokedCertificate_X509Certificate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::X509Certificate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::X509CRLEntry>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC, .name == "getRevokedCertificate", .descriptor == "(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509CRLEntry;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getRevokedCertificate\0", "(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509CRLEntry;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRevokedCertificates](https://developer.android.com/reference/java/security/cert/X509CRL.html#getRevokedCertificates())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getRevokedCertificates<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getRevokedCertificates", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getRevokedCertificates\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTBSCertList](https://developer.android.com/reference/java/security/cert/X509CRL.html#getTBSCertList())
        pub fn getTBSCertList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getTBSCertList", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getTBSCertList\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSignature](https://developer.android.com/reference/java/security/cert/X509CRL.html#getSignature())
        pub fn getSignature<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getSignature", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getSignature\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSigAlgName](https://developer.android.com/reference/java/security/cert/X509CRL.html#getSigAlgName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSigAlgName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getSigAlgName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getSigAlgName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSigAlgOID](https://developer.android.com/reference/java/security/cert/X509CRL.html#getSigAlgOID())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSigAlgOID<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getSigAlgOID", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getSigAlgOID\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSigAlgParams](https://developer.android.com/reference/java/security/cert/X509CRL.html#getSigAlgParams())
        pub fn getSigAlgParams<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/cert/X509CRL", java.flags == PUBLIC | ABSTRACT, .name == "getSigAlgParams", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/cert/X509CRL\0", "getSigAlgParams\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
