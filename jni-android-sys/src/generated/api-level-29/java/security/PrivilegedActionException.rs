// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-PrivilegedActionException"))]
__jni_bindgen! {
    /// public class [PrivilegedActionException](https://developer.android.com/reference/java/security/PrivilegedActionException.html)
    ///
    /// Required feature: java-security-PrivilegedActionException
    public class PrivilegedActionException ("java/security/PrivilegedActionException") extends crate::java::lang::Exception {

        /// [PrivilegedActionException](https://developer.android.com/reference/java/security/PrivilegedActionException.html#PrivilegedActionException(java.lang.Exception))
        ///
        /// Required features: "java-lang-Exception"
        #[cfg(any(feature = "all", all(feature = "java-lang-Exception")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Exception>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::PrivilegedActionException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/PrivilegedActionException", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/Exception;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/PrivilegedActionException\0", "<init>\0", "(Ljava/lang/Exception;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getException](https://developer.android.com/reference/java/security/PrivilegedActionException.html#getException())
        ///
        /// Required features: "java-lang-Exception"
        #[cfg(any(feature = "all", all(feature = "java-lang-Exception")))]
        pub fn getException<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Exception>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/PrivilegedActionException", java.flags == PUBLIC, .name == "getException", .descriptor == "()Ljava/lang/Exception;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/PrivilegedActionException\0", "getException\0", "()Ljava/lang/Exception;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCause](https://developer.android.com/reference/java/security/PrivilegedActionException.html#getCause())
        ///
        /// Required features: "java-lang-Throwable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Throwable")))]
        pub fn getCause<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Throwable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/PrivilegedActionException", java.flags == PUBLIC, .name == "getCause", .descriptor == "()Ljava/lang/Throwable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/PrivilegedActionException\0", "getCause\0", "()Ljava/lang/Throwable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/security/PrivilegedActionException.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/PrivilegedActionException", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/PrivilegedActionException\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
