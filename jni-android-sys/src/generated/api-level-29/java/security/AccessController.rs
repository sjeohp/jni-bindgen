// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-security-AccessController"))]
__jni_bindgen! {
    /// public final class [AccessController](https://developer.android.com/reference/java/security/AccessController.html)
    ///
    /// Required feature: java-security-AccessController
    public final class AccessController ("java/security/AccessController") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AccessController](https://developer.android.com/reference/java/security/AccessController.html#AccessController())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::security::AccessController>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/security/AccessController", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/security/AccessController\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [doPrivileged](https://developer.android.com/reference/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction))
        ///
        /// Required features: "java-lang-Object", "java-security-PrivilegedAction"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-PrivilegedAction")))]
        pub fn doPrivileged_PrivilegedAction<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedAction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessController", java.flags == PUBLIC | STATIC, .name == "doPrivileged", .descriptor == "(Ljava/security/PrivilegedAction;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/AccessController\0", "doPrivileged\0", "(Ljava/security/PrivilegedAction;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doPrivilegedWithCombiner](https://developer.android.com/reference/java/security/AccessController.html#doPrivilegedWithCombiner(java.security.PrivilegedAction))
        ///
        /// Required features: "java-lang-Object", "java-security-PrivilegedAction"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-PrivilegedAction")))]
        pub fn doPrivilegedWithCombiner_PrivilegedAction<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedAction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessController", java.flags == PUBLIC | STATIC, .name == "doPrivilegedWithCombiner", .descriptor == "(Ljava/security/PrivilegedAction;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/AccessController\0", "doPrivilegedWithCombiner\0", "(Ljava/security/PrivilegedAction;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doPrivileged](https://developer.android.com/reference/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction,%20java.security.AccessControlContext))
        ///
        /// Required features: "java-lang-Object", "java-security-AccessControlContext", "java-security-PrivilegedAction"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-AccessControlContext", feature = "java-security-PrivilegedAction")))]
        pub fn doPrivileged_PrivilegedAction_AccessControlContext<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedAction>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::AccessControlContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessController", java.flags == PUBLIC | STATIC, .name == "doPrivileged", .descriptor == "(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/AccessController\0", "doPrivileged\0", "(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doPrivileged](https://developer.android.com/reference/java/security/AccessController.html#doPrivileged(java.security.PrivilegedExceptionAction))
        ///
        /// Required features: "java-lang-Object", "java-security-PrivilegedExceptionAction"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-PrivilegedExceptionAction")))]
        pub fn doPrivileged_PrivilegedExceptionAction<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedExceptionAction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessController", java.flags == PUBLIC | STATIC, .name == "doPrivileged", .descriptor == "(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/AccessController\0", "doPrivileged\0", "(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doPrivilegedWithCombiner](https://developer.android.com/reference/java/security/AccessController.html#doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction))
        ///
        /// Required features: "java-lang-Object", "java-security-PrivilegedExceptionAction"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-PrivilegedExceptionAction")))]
        pub fn doPrivilegedWithCombiner_PrivilegedExceptionAction<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedExceptionAction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessController", java.flags == PUBLIC | STATIC, .name == "doPrivilegedWithCombiner", .descriptor == "(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/AccessController\0", "doPrivilegedWithCombiner\0", "(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doPrivileged](https://developer.android.com/reference/java/security/AccessController.html#doPrivileged(java.security.PrivilegedExceptionAction,%20java.security.AccessControlContext))
        ///
        /// Required features: "java-lang-Object", "java-security-AccessControlContext", "java-security-PrivilegedExceptionAction"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-security-AccessControlContext", feature = "java-security-PrivilegedExceptionAction")))]
        pub fn doPrivileged_PrivilegedExceptionAction_AccessControlContext<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedExceptionAction>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::AccessControlContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessController", java.flags == PUBLIC | STATIC, .name == "doPrivileged", .descriptor == "(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/AccessController\0", "doPrivileged\0", "(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContext](https://developer.android.com/reference/java/security/AccessController.html#getContext())
        ///
        /// Required features: "java-security-AccessControlContext"
        #[cfg(any(feature = "all", all(feature = "java-security-AccessControlContext")))]
        pub fn getContext<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::AccessControlContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessController", java.flags == PUBLIC | STATIC, .name == "getContext", .descriptor == "()Ljava/security/AccessControlContext;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/AccessController\0", "getContext\0", "()Ljava/security/AccessControlContext;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkPermission](https://developer.android.com/reference/java/security/AccessController.html#checkPermission(java.security.Permission))
        ///
        /// Required features: "java-security-Permission"
        #[cfg(any(feature = "all", all(feature = "java-security-Permission")))]
        pub fn checkPermission<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::Permission>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/security/AccessController", java.flags == PUBLIC | STATIC, .name == "checkPermission", .descriptor == "(Ljava/security/Permission;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/security/AccessController\0", "checkPermission\0", "(Ljava/security/Permission;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
