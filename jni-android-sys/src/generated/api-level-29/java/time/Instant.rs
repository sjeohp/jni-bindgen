// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-Instant"))]
__jni_bindgen! {
    /// public final class [Instant](https://developer.android.com/reference/java/time/Instant.html)
    ///
    /// Required feature: java-time-Instant
    public final class Instant ("java/time/Instant") extends crate::java::lang::Object, implements crate::java::time::temporal::Temporal, crate::java::time::temporal::TemporalAdjuster, crate::java::lang::Comparable, crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [Instant](https://developer.android.com/reference/java/time/Instant.html#Instant(long,%20int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::time::Instant>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/Instant", java.flags == (empty), .name == "<init>", .descriptor == "(JI)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "<init>\0", "(JI)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [now](https://developer.android.com/reference/java/time/Instant.html#now())
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn now<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC | STATIC, .name == "now", .descriptor == "()Ljava/time/Instant;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/Instant\0", "now\0", "()Ljava/time/Instant;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [now](https://developer.android.com/reference/java/time/Instant.html#now(java.time.Clock))
        ///
        /// Required features: "java-time-Clock", "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Clock", feature = "java-time-Instant")))]
        pub fn now_Clock<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Clock>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC | STATIC, .name == "now", .descriptor == "(Ljava/time/Clock;)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/Instant\0", "now\0", "(Ljava/time/Clock;)Ljava/time/Instant;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofEpochSecond](https://developer.android.com/reference/java/time/Instant.html#ofEpochSecond(long))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn ofEpochSecond_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC | STATIC, .name == "ofEpochSecond", .descriptor == "(J)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/Instant\0", "ofEpochSecond\0", "(J)Ljava/time/Instant;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofEpochSecond](https://developer.android.com/reference/java/time/Instant.html#ofEpochSecond(long,%20long))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn ofEpochSecond_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC | STATIC, .name == "ofEpochSecond", .descriptor == "(JJ)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/Instant\0", "ofEpochSecond\0", "(JJ)Ljava/time/Instant;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofEpochMilli](https://developer.android.com/reference/java/time/Instant.html#ofEpochMilli(long))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn ofEpochMilli<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC | STATIC, .name == "ofEpochMilli", .descriptor == "(J)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/Instant\0", "ofEpochMilli\0", "(J)Ljava/time/Instant;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [from](https://developer.android.com/reference/java/time/Instant.html#from(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-Instant", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn from<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC | STATIC, .name == "from", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/Instant\0", "from\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/Instant;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/time/Instant.html#parse(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-time-Instant")))]
        pub fn parse<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC | STATIC, .name == "parse", .descriptor == "(Ljava/lang/CharSequence;)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/Instant\0", "parse\0", "(Ljava/lang/CharSequence;)Ljava/time/Instant;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSupported](https://developer.android.com/reference/java/time/Instant.html#isSupported(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn isSupported_TemporalField<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "isSupported", .descriptor == "(Ljava/time/temporal/TemporalField;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "isSupported\0", "(Ljava/time/temporal/TemporalField;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSupported](https://developer.android.com/reference/java/time/Instant.html#isSupported(java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalUnit")))]
        pub fn isSupported_TemporalUnit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "isSupported", .descriptor == "(Ljava/time/temporal/TemporalUnit;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "isSupported\0", "(Ljava/time/temporal/TemporalUnit;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [range](https://developer.android.com/reference/java/time/Instant.html#range(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField", "java-time-temporal-ValueRange"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField", feature = "java-time-temporal-ValueRange")))]
        pub fn range<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::ValueRange>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "range", .descriptor == "(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "range\0", "(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/time/Instant.html#get(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn get<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "get", .descriptor == "(Ljava/time/temporal/TemporalField;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "get\0", "(Ljava/time/temporal/TemporalField;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/java/time/Instant.html#getLong(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn getLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "getLong", .descriptor == "(Ljava/time/temporal/TemporalField;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "getLong\0", "(Ljava/time/temporal/TemporalField;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEpochSecond](https://developer.android.com/reference/java/time/Instant.html#getEpochSecond())
        pub fn getEpochSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "getEpochSecond", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "getEpochSecond\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNano](https://developer.android.com/reference/java/time/Instant.html#getNano())
        pub fn getNano<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "getNano", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "getNano\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [with](https://developer.android.com/reference/java/time/Instant.html#with(java.time.temporal.TemporalAdjuster))
        ///
        /// Required features: "java-time-Instant", "java-time-temporal-TemporalAdjuster"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-temporal-TemporalAdjuster")))]
        pub fn with_TemporalAdjuster<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAdjuster>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "with\0", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [with](https://developer.android.com/reference/java/time/Instant.html#with(java.time.temporal.TemporalField,%20long))
        ///
        /// Required features: "java-time-Instant", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-temporal-TemporalField")))]
        pub fn with_TemporalField_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalField;J)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "with\0", "(Ljava/time/temporal/TemporalField;J)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [truncatedTo](https://developer.android.com/reference/java/time/Instant.html#truncatedTo(java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-Instant", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-temporal-TemporalUnit")))]
        pub fn truncatedTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "truncatedTo", .descriptor == "(Ljava/time/temporal/TemporalUnit;)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "truncatedTo\0", "(Ljava/time/temporal/TemporalUnit;)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/java/time/Instant.html#plus(java.time.temporal.TemporalAmount))
        ///
        /// Required features: "java-time-Instant", "java-time-temporal-TemporalAmount"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-temporal-TemporalAmount")))]
        pub fn plus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "plus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "plus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/java/time/Instant.html#plus(long,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-Instant", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-temporal-TemporalUnit")))]
        pub fn plus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "plus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "plus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plusSeconds](https://developer.android.com/reference/java/time/Instant.html#plusSeconds(long))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn plusSeconds<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "plusSeconds", .descriptor == "(J)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "plusSeconds\0", "(J)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plusMillis](https://developer.android.com/reference/java/time/Instant.html#plusMillis(long))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn plusMillis<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "plusMillis", .descriptor == "(J)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "plusMillis\0", "(J)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plusNanos](https://developer.android.com/reference/java/time/Instant.html#plusNanos(long))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn plusNanos<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "plusNanos", .descriptor == "(J)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "plusNanos\0", "(J)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minus](https://developer.android.com/reference/java/time/Instant.html#minus(java.time.temporal.TemporalAmount))
        ///
        /// Required features: "java-time-Instant", "java-time-temporal-TemporalAmount"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-temporal-TemporalAmount")))]
        pub fn minus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "minus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "minus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minus](https://developer.android.com/reference/java/time/Instant.html#minus(long,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-Instant", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-temporal-TemporalUnit")))]
        pub fn minus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "minus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "minus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minusSeconds](https://developer.android.com/reference/java/time/Instant.html#minusSeconds(long))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn minusSeconds<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "minusSeconds", .descriptor == "(J)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "minusSeconds\0", "(J)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minusMillis](https://developer.android.com/reference/java/time/Instant.html#minusMillis(long))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn minusMillis<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "minusMillis", .descriptor == "(J)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "minusMillis\0", "(J)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minusNanos](https://developer.android.com/reference/java/time/Instant.html#minusNanos(long))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn minusNanos<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "minusNanos", .descriptor == "(J)Ljava/time/Instant;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "minusNanos\0", "(J)Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/java/time/Instant.html#query(java.time.temporal.TemporalQuery))
        ///
        /// Required features: "java-lang-Object", "java-time-temporal-TemporalQuery"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-time-temporal-TemporalQuery")))]
        pub fn query<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalQuery>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "query", .descriptor == "(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "query\0", "(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adjustInto](https://developer.android.com/reference/java/time/Instant.html#adjustInto(java.time.temporal.Temporal))
        ///
        /// Required features: "java-time-temporal-Temporal"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal")))]
        pub fn adjustInto<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::Temporal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "adjustInto", .descriptor == "(Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "adjustInto\0", "(Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [until](https://developer.android.com/reference/java/time/Instant.html#until(java.time.temporal.Temporal,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        pub fn until<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::Temporal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "until", .descriptor == "(Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "until\0", "(Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [atOffset](https://developer.android.com/reference/java/time/Instant.html#atOffset(java.time.ZoneOffset))
        ///
        /// Required features: "java-time-OffsetDateTime", "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-OffsetDateTime", feature = "java-time-ZoneOffset")))]
        pub fn atOffset<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::OffsetDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "atOffset", .descriptor == "(Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "atOffset\0", "(Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [atZone](https://developer.android.com/reference/java/time/Instant.html#atZone(java.time.ZoneId))
        ///
        /// Required features: "java-time-ZoneId", "java-time-ZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneId", feature = "java-time-ZonedDateTime")))]
        pub fn atZone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "atZone", .descriptor == "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "atZone\0", "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toEpochMilli](https://developer.android.com/reference/java/time/Instant.html#toEpochMilli())
        pub fn toEpochMilli<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "toEpochMilli", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "toEpochMilli\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/java/time/Instant.html#compareTo(java.time.Instant))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn compareTo_Instant<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/time/Instant;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "compareTo\0", "(Ljava/time/Instant;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAfter](https://developer.android.com/reference/java/time/Instant.html#isAfter(java.time.Instant))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn isAfter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "isAfter", .descriptor == "(Ljava/time/Instant;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "isAfter\0", "(Ljava/time/Instant;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBefore](https://developer.android.com/reference/java/time/Instant.html#isBefore(java.time.Instant))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn isBefore<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "isBefore", .descriptor == "(Ljava/time/Instant;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "isBefore\0", "(Ljava/time/Instant;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/time/Instant.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/time/Instant.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/time/Instant.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/Instant", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [minus](https://developer.android.com/reference/java/time/Instant.html#minus(long,%20java.time.temporal.TemporalUnit))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        // pub fn minus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/Instant", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "minus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "minus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [minus](https://developer.android.com/reference/java/time/Instant.html#minus(java.time.temporal.TemporalAmount))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAmount"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAmount")))]
        // pub fn minus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/Instant", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "minus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "minus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [plus](https://developer.android.com/reference/java/time/Instant.html#plus(long,%20java.time.temporal.TemporalUnit))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        // pub fn plus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/Instant", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "plus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "plus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [plus](https://developer.android.com/reference/java/time/Instant.html#plus(java.time.temporal.TemporalAmount))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAmount"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAmount")))]
        // pub fn plus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/Instant", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "plus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "plus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [with](https://developer.android.com/reference/java/time/Instant.html#with(java.time.temporal.TemporalField,%20long))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalField"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalField")))]
        // pub fn with_TemporalField_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/Instant", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalField;J)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "with\0", "(Ljava/time/temporal/TemporalField;J)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [with](https://developer.android.com/reference/java/time/Instant.html#with(java.time.temporal.TemporalAdjuster))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAdjuster"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAdjuster")))]
        // pub fn with_TemporalAdjuster<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAdjuster>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/Instant", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "with\0", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/java/time/Instant.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/Instant", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/Instant\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public static final [EPOCH](https://developer.android.com/reference/java/time/Instant.html#EPOCH)
        ///
        /// Required feature: java-time-Instant
        #[cfg(any(feature = "all", feature = "java-time-Instant"))]
        pub fn EPOCH<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/Instant\0", "EPOCH\0", "Ljava/time/Instant;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [MAX](https://developer.android.com/reference/java/time/Instant.html#MAX)
        ///
        /// Required feature: java-time-Instant
        #[cfg(any(feature = "all", feature = "java-time-Instant"))]
        pub fn MAX<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/Instant\0", "MAX\0", "Ljava/time/Instant;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [MIN](https://developer.android.com/reference/java/time/Instant.html#MIN)
        ///
        /// Required feature: java-time-Instant
        #[cfg(any(feature = "all", feature = "java-time-Instant"))]
        pub fn MIN<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/Instant\0", "MIN\0", "Ljava/time/Instant;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
