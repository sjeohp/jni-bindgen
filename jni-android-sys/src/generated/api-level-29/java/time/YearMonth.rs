// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-YearMonth"))]
__jni_bindgen! {
    /// public final class [YearMonth](https://developer.android.com/reference/java/time/YearMonth.html)
    ///
    /// Required feature: java-time-YearMonth
    public final class YearMonth ("java/time/YearMonth") extends crate::java::lang::Object, implements crate::java::time::temporal::Temporal, crate::java::time::temporal::TemporalAdjuster, crate::java::lang::Comparable, crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [YearMonth](https://developer.android.com/reference/java/time/YearMonth.html#YearMonth(int,%20int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::time::YearMonth>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/YearMonth", java.flags == (empty), .name == "<init>", .descriptor == "(II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "<init>\0", "(II)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [now](https://developer.android.com/reference/java/time/YearMonth.html#now())
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn now<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC | STATIC, .name == "now", .descriptor == "()Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/YearMonth\0", "now\0", "()Ljava/time/YearMonth;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [now](https://developer.android.com/reference/java/time/YearMonth.html#now(java.time.ZoneId))
        ///
        /// Required features: "java-time-YearMonth", "java-time-ZoneId"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth", feature = "java-time-ZoneId")))]
        pub fn now_ZoneId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC | STATIC, .name == "now", .descriptor == "(Ljava/time/ZoneId;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/YearMonth\0", "now\0", "(Ljava/time/ZoneId;)Ljava/time/YearMonth;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [now](https://developer.android.com/reference/java/time/YearMonth.html#now(java.time.Clock))
        ///
        /// Required features: "java-time-Clock", "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-Clock", feature = "java-time-YearMonth")))]
        pub fn now_Clock<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Clock>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC | STATIC, .name == "now", .descriptor == "(Ljava/time/Clock;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/YearMonth\0", "now\0", "(Ljava/time/Clock;)Ljava/time/YearMonth;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/time/YearMonth.html#of(int,%20java.time.Month))
        ///
        /// Required features: "java-time-Month", "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-Month", feature = "java-time-YearMonth")))]
        pub fn of_int_Month<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Month>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(ILjava/time/Month;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/YearMonth\0", "of\0", "(ILjava/time/Month;)Ljava/time/YearMonth;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/time/YearMonth.html#of(int,%20int))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn of_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(II)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/YearMonth\0", "of\0", "(II)Ljava/time/YearMonth;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [from](https://developer.android.com/reference/java/time/YearMonth.html#from(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-YearMonth", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn from<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC | STATIC, .name == "from", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/YearMonth\0", "from\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/YearMonth;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/time/YearMonth.html#parse(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-time-YearMonth")))]
        pub fn parse_CharSequence<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC | STATIC, .name == "parse", .descriptor == "(Ljava/lang/CharSequence;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/YearMonth\0", "parse\0", "(Ljava/lang/CharSequence;)Ljava/time/YearMonth;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/time/YearMonth.html#parse(java.lang.CharSequence,%20java.time.format.DateTimeFormatter))
        ///
        /// Required features: "java-lang-CharSequence", "java-time-YearMonth", "java-time-format-DateTimeFormatter"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-time-YearMonth", feature = "java-time-format-DateTimeFormatter")))]
        pub fn parse_CharSequence_DateTimeFormatter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::DateTimeFormatter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC | STATIC, .name == "parse", .descriptor == "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/YearMonth\0", "parse\0", "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/YearMonth;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSupported](https://developer.android.com/reference/java/time/YearMonth.html#isSupported(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn isSupported_TemporalField<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "isSupported", .descriptor == "(Ljava/time/temporal/TemporalField;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "isSupported\0", "(Ljava/time/temporal/TemporalField;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSupported](https://developer.android.com/reference/java/time/YearMonth.html#isSupported(java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalUnit")))]
        pub fn isSupported_TemporalUnit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "isSupported", .descriptor == "(Ljava/time/temporal/TemporalUnit;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "isSupported\0", "(Ljava/time/temporal/TemporalUnit;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [range](https://developer.android.com/reference/java/time/YearMonth.html#range(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField", "java-time-temporal-ValueRange"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField", feature = "java-time-temporal-ValueRange")))]
        pub fn range<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::ValueRange>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "range", .descriptor == "(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "range\0", "(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/time/YearMonth.html#get(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn get<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "get", .descriptor == "(Ljava/time/temporal/TemporalField;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "get\0", "(Ljava/time/temporal/TemporalField;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/java/time/YearMonth.html#getLong(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn getLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "getLong", .descriptor == "(Ljava/time/temporal/TemporalField;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "getLong\0", "(Ljava/time/temporal/TemporalField;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getYear](https://developer.android.com/reference/java/time/YearMonth.html#getYear())
        pub fn getYear<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "getYear", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "getYear\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMonthValue](https://developer.android.com/reference/java/time/YearMonth.html#getMonthValue())
        pub fn getMonthValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "getMonthValue", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "getMonthValue\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMonth](https://developer.android.com/reference/java/time/YearMonth.html#getMonth())
        ///
        /// Required features: "java-time-Month"
        #[cfg(any(feature = "all", all(feature = "java-time-Month")))]
        pub fn getMonth<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Month>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "getMonth", .descriptor == "()Ljava/time/Month;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "getMonth\0", "()Ljava/time/Month;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLeapYear](https://developer.android.com/reference/java/time/YearMonth.html#isLeapYear())
        pub fn isLeapYear<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "isLeapYear", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "isLeapYear\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isValidDay](https://developer.android.com/reference/java/time/YearMonth.html#isValidDay(int))
        pub fn isValidDay<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "isValidDay", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "isValidDay\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lengthOfMonth](https://developer.android.com/reference/java/time/YearMonth.html#lengthOfMonth())
        pub fn lengthOfMonth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "lengthOfMonth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "lengthOfMonth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lengthOfYear](https://developer.android.com/reference/java/time/YearMonth.html#lengthOfYear())
        pub fn lengthOfYear<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "lengthOfYear", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "lengthOfYear\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [with](https://developer.android.com/reference/java/time/YearMonth.html#with(java.time.temporal.TemporalAdjuster))
        ///
        /// Required features: "java-time-YearMonth", "java-time-temporal-TemporalAdjuster"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth", feature = "java-time-temporal-TemporalAdjuster")))]
        pub fn with_TemporalAdjuster<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAdjuster>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "with\0", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [with](https://developer.android.com/reference/java/time/YearMonth.html#with(java.time.temporal.TemporalField,%20long))
        ///
        /// Required features: "java-time-YearMonth", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth", feature = "java-time-temporal-TemporalField")))]
        pub fn with_TemporalField_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalField;J)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "with\0", "(Ljava/time/temporal/TemporalField;J)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withYear](https://developer.android.com/reference/java/time/YearMonth.html#withYear(int))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn withYear<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "withYear", .descriptor == "(I)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "withYear\0", "(I)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withMonth](https://developer.android.com/reference/java/time/YearMonth.html#withMonth(int))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn withMonth<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "withMonth", .descriptor == "(I)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "withMonth\0", "(I)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/java/time/YearMonth.html#plus(java.time.temporal.TemporalAmount))
        ///
        /// Required features: "java-time-YearMonth", "java-time-temporal-TemporalAmount"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth", feature = "java-time-temporal-TemporalAmount")))]
        pub fn plus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "plus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "plus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/java/time/YearMonth.html#plus(long,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-YearMonth", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth", feature = "java-time-temporal-TemporalUnit")))]
        pub fn plus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "plus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "plus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plusYears](https://developer.android.com/reference/java/time/YearMonth.html#plusYears(long))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn plusYears<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "plusYears", .descriptor == "(J)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "plusYears\0", "(J)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plusMonths](https://developer.android.com/reference/java/time/YearMonth.html#plusMonths(long))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn plusMonths<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "plusMonths", .descriptor == "(J)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "plusMonths\0", "(J)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minus](https://developer.android.com/reference/java/time/YearMonth.html#minus(java.time.temporal.TemporalAmount))
        ///
        /// Required features: "java-time-YearMonth", "java-time-temporal-TemporalAmount"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth", feature = "java-time-temporal-TemporalAmount")))]
        pub fn minus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "minus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "minus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minus](https://developer.android.com/reference/java/time/YearMonth.html#minus(long,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-YearMonth", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth", feature = "java-time-temporal-TemporalUnit")))]
        pub fn minus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "minus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "minus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minusYears](https://developer.android.com/reference/java/time/YearMonth.html#minusYears(long))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn minusYears<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "minusYears", .descriptor == "(J)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "minusYears\0", "(J)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minusMonths](https://developer.android.com/reference/java/time/YearMonth.html#minusMonths(long))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn minusMonths<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::YearMonth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "minusMonths", .descriptor == "(J)Ljava/time/YearMonth;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "minusMonths\0", "(J)Ljava/time/YearMonth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/java/time/YearMonth.html#query(java.time.temporal.TemporalQuery))
        ///
        /// Required features: "java-lang-Object", "java-time-temporal-TemporalQuery"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-time-temporal-TemporalQuery")))]
        pub fn query<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalQuery>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "query", .descriptor == "(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "query\0", "(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adjustInto](https://developer.android.com/reference/java/time/YearMonth.html#adjustInto(java.time.temporal.Temporal))
        ///
        /// Required features: "java-time-temporal-Temporal"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal")))]
        pub fn adjustInto<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::Temporal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "adjustInto", .descriptor == "(Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "adjustInto\0", "(Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [until](https://developer.android.com/reference/java/time/YearMonth.html#until(java.time.temporal.Temporal,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        pub fn until<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::Temporal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "until", .descriptor == "(Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "until\0", "(Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/java/time/YearMonth.html#format(java.time.format.DateTimeFormatter))
        ///
        /// Required features: "java-lang-String", "java-time-format-DateTimeFormatter"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-format-DateTimeFormatter")))]
        pub fn format<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::DateTimeFormatter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "format", .descriptor == "(Ljava/time/format/DateTimeFormatter;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "format\0", "(Ljava/time/format/DateTimeFormatter;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [atDay](https://developer.android.com/reference/java/time/YearMonth.html#atDay(int))
        ///
        /// Required features: "java-time-LocalDate"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDate")))]
        pub fn atDay<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "atDay", .descriptor == "(I)Ljava/time/LocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "atDay\0", "(I)Ljava/time/LocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [atEndOfMonth](https://developer.android.com/reference/java/time/YearMonth.html#atEndOfMonth())
        ///
        /// Required features: "java-time-LocalDate"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDate")))]
        pub fn atEndOfMonth<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "atEndOfMonth", .descriptor == "()Ljava/time/LocalDate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "atEndOfMonth\0", "()Ljava/time/LocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/java/time/YearMonth.html#compareTo(java.time.YearMonth))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn compareTo_YearMonth<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::YearMonth>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/time/YearMonth;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "compareTo\0", "(Ljava/time/YearMonth;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAfter](https://developer.android.com/reference/java/time/YearMonth.html#isAfter(java.time.YearMonth))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn isAfter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::YearMonth>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "isAfter", .descriptor == "(Ljava/time/YearMonth;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "isAfter\0", "(Ljava/time/YearMonth;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBefore](https://developer.android.com/reference/java/time/YearMonth.html#isBefore(java.time.YearMonth))
        ///
        /// Required features: "java-time-YearMonth"
        #[cfg(any(feature = "all", all(feature = "java-time-YearMonth")))]
        pub fn isBefore<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::YearMonth>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "isBefore", .descriptor == "(Ljava/time/YearMonth;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "isBefore\0", "(Ljava/time/YearMonth;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/time/YearMonth.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/time/YearMonth.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/time/YearMonth.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/YearMonth", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [minus](https://developer.android.com/reference/java/time/YearMonth.html#minus(long,%20java.time.temporal.TemporalUnit))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        // pub fn minus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/YearMonth", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "minus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "minus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [minus](https://developer.android.com/reference/java/time/YearMonth.html#minus(java.time.temporal.TemporalAmount))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAmount"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAmount")))]
        // pub fn minus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/YearMonth", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "minus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "minus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [plus](https://developer.android.com/reference/java/time/YearMonth.html#plus(long,%20java.time.temporal.TemporalUnit))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        // pub fn plus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/YearMonth", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "plus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "plus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [plus](https://developer.android.com/reference/java/time/YearMonth.html#plus(java.time.temporal.TemporalAmount))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAmount"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAmount")))]
        // pub fn plus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/YearMonth", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "plus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "plus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [with](https://developer.android.com/reference/java/time/YearMonth.html#with(java.time.temporal.TemporalField,%20long))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalField"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalField")))]
        // pub fn with_TemporalField_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/YearMonth", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalField;J)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "with\0", "(Ljava/time/temporal/TemporalField;J)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [with](https://developer.android.com/reference/java/time/YearMonth.html#with(java.time.temporal.TemporalAdjuster))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAdjuster"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAdjuster")))]
        // pub fn with_TemporalAdjuster<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAdjuster>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/YearMonth", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "with\0", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/java/time/YearMonth.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/YearMonth", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/YearMonth\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
