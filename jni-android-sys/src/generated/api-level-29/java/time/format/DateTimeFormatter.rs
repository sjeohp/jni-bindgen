// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
__jni_bindgen! {
    /// public final class [DateTimeFormatter](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html)
    ///
    /// Required feature: java-time-format-DateTimeFormatter
    public final class DateTimeFormatter ("java/time/format/DateTimeFormatter") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [DateTimeFormatter](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#DateTimeFormatter())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/format/DateTimeFormatter", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [ofPattern](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ofPattern(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-time-format-DateTimeFormatter"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-format-DateTimeFormatter")))]
        pub fn ofPattern_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | STATIC, .name == "ofPattern", .descriptor == "(Ljava/lang/String;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/format/DateTimeFormatter\0", "ofPattern\0", "(Ljava/lang/String;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofPattern](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ofPattern(java.lang.String,%20java.util.Locale))
        ///
        /// Required features: "java-lang-String", "java-time-format-DateTimeFormatter", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-format-DateTimeFormatter", feature = "java-util-Locale")))]
        pub fn ofPattern_String_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | STATIC, .name == "ofPattern", .descriptor == "(Ljava/lang/String;Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/format/DateTimeFormatter\0", "ofPattern\0", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofLocalizedDate](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ofLocalizedDate(java.time.format.FormatStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-time-format-FormatStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-time-format-FormatStyle")))]
        pub fn ofLocalizedDate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::FormatStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | STATIC, .name == "ofLocalizedDate", .descriptor == "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/format/DateTimeFormatter\0", "ofLocalizedDate\0", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofLocalizedTime](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ofLocalizedTime(java.time.format.FormatStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-time-format-FormatStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-time-format-FormatStyle")))]
        pub fn ofLocalizedTime<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::FormatStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | STATIC, .name == "ofLocalizedTime", .descriptor == "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/format/DateTimeFormatter\0", "ofLocalizedTime\0", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofLocalizedDateTime](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ofLocalizedDateTime(java.time.format.FormatStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-time-format-FormatStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-time-format-FormatStyle")))]
        pub fn ofLocalizedDateTime_FormatStyle<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::FormatStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | STATIC, .name == "ofLocalizedDateTime", .descriptor == "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/format/DateTimeFormatter\0", "ofLocalizedDateTime\0", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofLocalizedDateTime](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ofLocalizedDateTime(java.time.format.FormatStyle,%20java.time.format.FormatStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-time-format-FormatStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-time-format-FormatStyle")))]
        pub fn ofLocalizedDateTime_FormatStyle_FormatStyle<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::FormatStyle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::FormatStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | STATIC, .name == "ofLocalizedDateTime", .descriptor == "(Ljava/time/format/FormatStyle;Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/format/DateTimeFormatter\0", "ofLocalizedDateTime\0", "(Ljava/time/format/FormatStyle;Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parsedExcessDays](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#parsedExcessDays())
        ///
        /// Required features: "java-time-temporal-TemporalQuery"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalQuery")))]
        pub fn parsedExcessDays<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::TemporalQuery>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | STATIC, .name == "parsedExcessDays", .descriptor == "()Ljava/time/temporal/TemporalQuery;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/format/DateTimeFormatter\0", "parsedExcessDays\0", "()Ljava/time/temporal/TemporalQuery;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parsedLeapSecond](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#parsedLeapSecond())
        ///
        /// Required features: "java-time-temporal-TemporalQuery"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalQuery")))]
        pub fn parsedLeapSecond<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::TemporalQuery>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | STATIC, .name == "parsedLeapSecond", .descriptor == "()Ljava/time/temporal/TemporalQuery;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/format/DateTimeFormatter\0", "parsedLeapSecond\0", "()Ljava/time/temporal/TemporalQuery;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocale](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#getLocale())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn getLocale<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "getLocale", .descriptor == "()Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "getLocale\0", "()Ljava/util/Locale;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withLocale](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#withLocale(java.util.Locale))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-util-Locale")))]
        pub fn withLocale<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "withLocale", .descriptor == "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "withLocale\0", "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDecimalStyle](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#getDecimalStyle())
        ///
        /// Required features: "java-time-format-DecimalStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DecimalStyle")))]
        pub fn getDecimalStyle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DecimalStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "getDecimalStyle", .descriptor == "()Ljava/time/format/DecimalStyle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "getDecimalStyle\0", "()Ljava/time/format/DecimalStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withDecimalStyle](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#withDecimalStyle(java.time.format.DecimalStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-time-format-DecimalStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-time-format-DecimalStyle")))]
        pub fn withDecimalStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::DecimalStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "withDecimalStyle", .descriptor == "(Ljava/time/format/DecimalStyle;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "withDecimalStyle\0", "(Ljava/time/format/DecimalStyle;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChronology](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#getChronology())
        ///
        /// Required features: "java-time-chrono-Chronology"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Chronology")))]
        pub fn getChronology<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::Chronology>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "getChronology", .descriptor == "()Ljava/time/chrono/Chronology;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "getChronology\0", "()Ljava/time/chrono/Chronology;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withChronology](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#withChronology(java.time.chrono.Chronology))
        ///
        /// Required features: "java-time-chrono-Chronology", "java-time-format-DateTimeFormatter"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Chronology", feature = "java-time-format-DateTimeFormatter")))]
        pub fn withChronology<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Chronology>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "withChronology", .descriptor == "(Ljava/time/chrono/Chronology;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "withChronology\0", "(Ljava/time/chrono/Chronology;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getZone](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#getZone())
        ///
        /// Required features: "java-time-ZoneId"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneId")))]
        pub fn getZone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "getZone", .descriptor == "()Ljava/time/ZoneId;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "getZone\0", "()Ljava/time/ZoneId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withZone](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#withZone(java.time.ZoneId))
        ///
        /// Required features: "java-time-ZoneId", "java-time-format-DateTimeFormatter"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneId", feature = "java-time-format-DateTimeFormatter")))]
        pub fn withZone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "withZone", .descriptor == "(Ljava/time/ZoneId;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "withZone\0", "(Ljava/time/ZoneId;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResolverStyle](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#getResolverStyle())
        ///
        /// Required features: "java-time-format-ResolverStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-ResolverStyle")))]
        pub fn getResolverStyle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::ResolverStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "getResolverStyle", .descriptor == "()Ljava/time/format/ResolverStyle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "getResolverStyle\0", "()Ljava/time/format/ResolverStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withResolverStyle](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#withResolverStyle(java.time.format.ResolverStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-time-format-ResolverStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-time-format-ResolverStyle")))]
        pub fn withResolverStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::ResolverStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "withResolverStyle", .descriptor == "(Ljava/time/format/ResolverStyle;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "withResolverStyle\0", "(Ljava/time/format/ResolverStyle;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResolverFields](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#getResolverFields())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getResolverFields<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "getResolverFields", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "getResolverFields\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withResolverFields](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#withResolverFields(java.time.temporal.TemporalField...))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-time-temporal-TemporalField")))]
        pub fn withResolverFields_TemporalField_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::time::temporal::TemporalField, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | VARARGS, .name == "withResolverFields", .descriptor == "([Ljava/time/temporal/TemporalField;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "withResolverFields\0", "([Ljava/time/temporal/TemporalField;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withResolverFields](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#withResolverFields(java.util.Set))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-util-Set")))]
        pub fn withResolverFields_Set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "withResolverFields", .descriptor == "(Ljava/util/Set;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "withResolverFields\0", "(Ljava/util/Set;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#format(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-lang-String", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn format<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "format", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "format\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [formatTo](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#formatTo(java.time.temporal.TemporalAccessor,%20java.lang.Appendable))
        ///
        /// Required features: "java-lang-Appendable", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Appendable", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn formatTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Appendable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "formatTo", .descriptor == "(Ljava/time/temporal/TemporalAccessor;Ljava/lang/Appendable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "formatTo\0", "(Ljava/time/temporal/TemporalAccessor;Ljava/lang/Appendable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#parse(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn parse_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::TemporalAccessor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "parse", .descriptor == "(Ljava/lang/CharSequence;)Ljava/time/temporal/TemporalAccessor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "parse\0", "(Ljava/lang/CharSequence;)Ljava/time/temporal/TemporalAccessor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#parse(java.lang.CharSequence,%20java.text.ParsePosition))
        ///
        /// Required features: "java-lang-CharSequence", "java-text-ParsePosition", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-text-ParsePosition", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn parse_CharSequence_ParsePosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::TemporalAccessor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "parse", .descriptor == "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "parse\0", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#parse(java.lang.CharSequence,%20java.time.temporal.TemporalQuery))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-Object", "java-time-temporal-TemporalQuery"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-Object", feature = "java-time-temporal-TemporalQuery")))]
        pub fn parse_CharSequence_TemporalQuery<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalQuery>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "parse", .descriptor == "(Ljava/lang/CharSequence;Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "parse\0", "(Ljava/lang/CharSequence;Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseBest](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#parseBest(java.lang.CharSequence,%20java.time.temporal.TemporalQuery...))
        ///
        /// Required features: "java-lang-CharSequence", "java-time-temporal-TemporalAccessor", "java-time-temporal-TemporalQuery"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-time-temporal-TemporalAccessor", feature = "java-time-temporal-TemporalQuery")))]
        pub fn parseBest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::time::temporal::TemporalQuery, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::TemporalAccessor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC | VARARGS, .name == "parseBest", .descriptor == "(Ljava/lang/CharSequence;[Ljava/time/temporal/TemporalQuery;)Ljava/time/temporal/TemporalAccessor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "parseBest\0", "(Ljava/lang/CharSequence;[Ljava/time/temporal/TemporalQuery;)Ljava/time/temporal/TemporalAccessor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseUnresolved](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#parseUnresolved(java.lang.CharSequence,%20java.text.ParsePosition))
        ///
        /// Required features: "java-lang-CharSequence", "java-text-ParsePosition", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-text-ParsePosition", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn parseUnresolved<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::TemporalAccessor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "parseUnresolved", .descriptor == "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "parseUnresolved\0", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toFormat](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#toFormat())
        ///
        /// Required features: "java-text-Format"
        #[cfg(any(feature = "all", all(feature = "java-text-Format")))]
        pub fn toFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::Format>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "toFormat", .descriptor == "()Ljava/text/Format;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "toFormat\0", "()Ljava/text/Format;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toFormat](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#toFormat(java.time.temporal.TemporalQuery))
        ///
        /// Required features: "java-text-Format", "java-time-temporal-TemporalQuery"
        #[cfg(any(feature = "all", all(feature = "java-text-Format", feature = "java-time-temporal-TemporalQuery")))]
        pub fn toFormat_TemporalQuery<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalQuery>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::Format>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "toFormat", .descriptor == "(Ljava/time/temporal/TemporalQuery;)Ljava/text/Format;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "toFormat\0", "(Ljava/time/temporal/TemporalQuery;)Ljava/text/Format;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatter", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatter\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [BASIC_ISO_DATE](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#BASIC_ISO_DATE)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn BASIC_ISO_DATE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "BASIC_ISO_DATE\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_DATE](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_DATE)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_DATE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_DATE\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_DATE_TIME](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_DATE_TIME)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_DATE_TIME<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_DATE_TIME\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_INSTANT](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_INSTANT)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_INSTANT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_INSTANT\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_LOCAL_DATE](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_LOCAL_DATE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_LOCAL_DATE\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_LOCAL_DATE_TIME](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE_TIME)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_LOCAL_DATE_TIME<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_LOCAL_DATE_TIME\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_LOCAL_TIME](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_LOCAL_TIME<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_LOCAL_TIME\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_OFFSET_DATE](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_OFFSET_DATE)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_OFFSET_DATE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_OFFSET_DATE\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_OFFSET_DATE_TIME](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_OFFSET_DATE_TIME)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_OFFSET_DATE_TIME<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_OFFSET_DATE_TIME\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_OFFSET_TIME](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_OFFSET_TIME)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_OFFSET_TIME<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_OFFSET_TIME\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_ORDINAL_DATE](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_ORDINAL_DATE)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_ORDINAL_DATE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_ORDINAL_DATE\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_TIME](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_TIME)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_TIME<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_TIME\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_WEEK_DATE](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_WEEK_DATE)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_WEEK_DATE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_WEEK_DATE\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ISO_ZONED_DATE_TIME](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#ISO_ZONED_DATE_TIME)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn ISO_ZONED_DATE_TIME<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "ISO_ZONED_DATE_TIME\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [RFC_1123_DATE_TIME](https://developer.android.com/reference/java/time/format/DateTimeFormatter.html#RFC_1123_DATE_TIME)
        ///
        /// Required feature: java-time-format-DateTimeFormatter
        #[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatter"))]
        pub fn RFC_1123_DATE_TIME<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/format/DateTimeFormatter\0", "RFC_1123_DATE_TIME\0", "Ljava/time/format/DateTimeFormatter;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
