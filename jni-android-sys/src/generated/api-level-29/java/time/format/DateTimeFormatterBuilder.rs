// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-format-DateTimeFormatterBuilder"))]
__jni_bindgen! {
    /// public final class [DateTimeFormatterBuilder](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html)
    ///
    /// Required feature: java-time-format-DateTimeFormatterBuilder
    public final class DateTimeFormatterBuilder ("java/time/format/DateTimeFormatterBuilder") extends crate::java::lang::Object {

        /// [DateTimeFormatterBuilder](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#DateTimeFormatterBuilder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalizedDateTimePattern](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#getLocalizedDateTimePattern(java.time.format.FormatStyle,%20java.time.format.FormatStyle,%20java.time.chrono.Chronology,%20java.util.Locale))
        ///
        /// Required features: "java-lang-String", "java-time-chrono-Chronology", "java-time-format-FormatStyle", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-chrono-Chronology", feature = "java-time-format-FormatStyle", feature = "java-util-Locale")))]
        pub fn getLocalizedDateTimePattern<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::FormatStyle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::FormatStyle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Chronology>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC | STATIC, .name == "getLocalizedDateTimePattern", .descriptor == "(Ljava/time/format/FormatStyle;Ljava/time/format/FormatStyle;Ljava/time/chrono/Chronology;Ljava/util/Locale;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/format/DateTimeFormatterBuilder\0", "getLocalizedDateTimePattern\0", "(Ljava/time/format/FormatStyle;Ljava/time/format/FormatStyle;Ljava/time/chrono/Chronology;Ljava/util/Locale;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseCaseSensitive](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#parseCaseSensitive())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn parseCaseSensitive<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "parseCaseSensitive", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "parseCaseSensitive\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseCaseInsensitive](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#parseCaseInsensitive())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn parseCaseInsensitive<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "parseCaseInsensitive", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "parseCaseInsensitive\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseStrict](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#parseStrict())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn parseStrict<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "parseStrict", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "parseStrict\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseLenient](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#parseLenient())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn parseLenient<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "parseLenient", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "parseLenient\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseDefaulting](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#parseDefaulting(java.time.temporal.TemporalField,%20long))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-temporal-TemporalField")))]
        pub fn parseDefaulting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "parseDefaulting", .descriptor == "(Ljava/time/temporal/TemporalField;J)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "parseDefaulting\0", "(Ljava/time/temporal/TemporalField;J)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendValue](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendValue(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-temporal-TemporalField")))]
        pub fn appendValue_TemporalField<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendValue", .descriptor == "(Ljava/time/temporal/TemporalField;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendValue\0", "(Ljava/time/temporal/TemporalField;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendValue](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendValue(java.time.temporal.TemporalField,%20int))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-temporal-TemporalField")))]
        pub fn appendValue_TemporalField_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendValue", .descriptor == "(Ljava/time/temporal/TemporalField;I)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendValue\0", "(Ljava/time/temporal/TemporalField;I)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendValue](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendValue(java.time.temporal.TemporalField,%20int,%20int,%20java.time.format.SignStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-format-SignStyle", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-format-SignStyle", feature = "java-time-temporal-TemporalField")))]
        pub fn appendValue_TemporalField_int_int_SignStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::SignStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendValue", .descriptor == "(Ljava/time/temporal/TemporalField;IILjava/time/format/SignStyle;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendValue\0", "(Ljava/time/temporal/TemporalField;IILjava/time/format/SignStyle;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendValueReduced](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendValueReduced(java.time.temporal.TemporalField,%20int,%20int,%20int))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-temporal-TemporalField")))]
        pub fn appendValueReduced_TemporalField_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendValueReduced", .descriptor == "(Ljava/time/temporal/TemporalField;III)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendValueReduced\0", "(Ljava/time/temporal/TemporalField;III)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendValueReduced](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendValueReduced(java.time.temporal.TemporalField,%20int,%20int,%20java.time.chrono.ChronoLocalDate))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate", "java-time-format-DateTimeFormatterBuilder", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate", feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-temporal-TemporalField")))]
        pub fn appendValueReduced_TemporalField_int_int_ChronoLocalDate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::ChronoLocalDate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendValueReduced", .descriptor == "(Ljava/time/temporal/TemporalField;IILjava/time/chrono/ChronoLocalDate;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendValueReduced\0", "(Ljava/time/temporal/TemporalField;IILjava/time/chrono/ChronoLocalDate;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendFraction](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendFraction(java.time.temporal.TemporalField,%20int,%20int,%20boolean))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-temporal-TemporalField")))]
        pub fn appendFraction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i32, arg2: i32, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendFraction", .descriptor == "(Ljava/time/temporal/TemporalField;IIZ)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendFraction\0", "(Ljava/time/temporal/TemporalField;IIZ)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendText](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendText(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-temporal-TemporalField")))]
        pub fn appendText_TemporalField<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendText", .descriptor == "(Ljava/time/temporal/TemporalField;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendText\0", "(Ljava/time/temporal/TemporalField;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendText](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendText(java.time.temporal.TemporalField,%20java.time.format.TextStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-format-TextStyle", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-format-TextStyle", feature = "java-time-temporal-TemporalField")))]
        pub fn appendText_TemporalField_TextStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::TextStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendText", .descriptor == "(Ljava/time/temporal/TemporalField;Ljava/time/format/TextStyle;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendText\0", "(Ljava/time/temporal/TemporalField;Ljava/time/format/TextStyle;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendText](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendText(java.time.temporal.TemporalField,%20java.util.Map))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-temporal-TemporalField", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-temporal-TemporalField", feature = "java-util-Map")))]
        pub fn appendText_TemporalField_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendText", .descriptor == "(Ljava/time/temporal/TemporalField;Ljava/util/Map;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendText\0", "(Ljava/time/temporal/TemporalField;Ljava/util/Map;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendInstant](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendInstant())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendInstant<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendInstant", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendInstant\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendInstant](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendInstant(int))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendInstant_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendInstant", .descriptor == "(I)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendInstant\0", "(I)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendOffsetId](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendOffsetId())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendOffsetId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendOffsetId", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendOffsetId\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendOffset](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendOffset(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendOffset<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendOffset", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendOffset\0", "(Ljava/lang/String;Ljava/lang/String;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendLocalizedOffset](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendLocalizedOffset(java.time.format.TextStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-format-TextStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-format-TextStyle")))]
        pub fn appendLocalizedOffset<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::TextStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendLocalizedOffset", .descriptor == "(Ljava/time/format/TextStyle;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendLocalizedOffset\0", "(Ljava/time/format/TextStyle;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendZoneId](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendZoneId())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendZoneId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendZoneId", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendZoneId\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendZoneRegionId](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendZoneRegionId())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendZoneRegionId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendZoneRegionId", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendZoneRegionId\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendZoneOrOffsetId](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendZoneOrOffsetId())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendZoneOrOffsetId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendZoneOrOffsetId", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendZoneOrOffsetId\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendZoneText](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendZoneText(java.time.format.TextStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-format-TextStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-format-TextStyle")))]
        pub fn appendZoneText_TextStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::TextStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendZoneText", .descriptor == "(Ljava/time/format/TextStyle;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendZoneText\0", "(Ljava/time/format/TextStyle;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendZoneText](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendZoneText(java.time.format.TextStyle,%20java.util.Set))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-format-TextStyle", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-format-TextStyle", feature = "java-util-Set")))]
        pub fn appendZoneText_TextStyle_Set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::TextStyle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendZoneText", .descriptor == "(Ljava/time/format/TextStyle;Ljava/util/Set;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendZoneText\0", "(Ljava/time/format/TextStyle;Ljava/util/Set;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendChronologyId](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendChronologyId())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendChronologyId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendChronologyId", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendChronologyId\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendChronologyText](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendChronologyText(java.time.format.TextStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-format-TextStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-format-TextStyle")))]
        pub fn appendChronologyText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::TextStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendChronologyText", .descriptor == "(Ljava/time/format/TextStyle;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendChronologyText\0", "(Ljava/time/format/TextStyle;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendLocalized](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendLocalized(java.time.format.FormatStyle,%20java.time.format.FormatStyle))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder", "java-time-format-FormatStyle"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder", feature = "java-time-format-FormatStyle")))]
        pub fn appendLocalized<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::FormatStyle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::FormatStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendLocalized", .descriptor == "(Ljava/time/format/FormatStyle;Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendLocalized\0", "(Ljava/time/format/FormatStyle;Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendLiteral](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendLiteral(char))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendLiteral_char<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendLiteral", .descriptor == "(C)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendLiteral\0", "(C)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendLiteral](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendLiteral(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendLiteral_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendLiteral", .descriptor == "(Ljava/lang/String;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendLiteral\0", "(Ljava/lang/String;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [append](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#append(java.time.format.DateTimeFormatter))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn append<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::DateTimeFormatter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "append", .descriptor == "(Ljava/time/format/DateTimeFormatter;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "append\0", "(Ljava/time/format/DateTimeFormatter;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendOptional](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendOptional(java.time.format.DateTimeFormatter))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendOptional<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::DateTimeFormatter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendOptional", .descriptor == "(Ljava/time/format/DateTimeFormatter;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendOptional\0", "(Ljava/time/format/DateTimeFormatter;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendPattern](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#appendPattern(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn appendPattern<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "appendPattern", .descriptor == "(Ljava/lang/String;)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "appendPattern\0", "(Ljava/lang/String;)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [padNext](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#padNext(int))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn padNext_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "padNext", .descriptor == "(I)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "padNext\0", "(I)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [padNext](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#padNext(int,%20char))
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn padNext_int_char<'env>(&'env self, arg0: i32, arg1: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "padNext", .descriptor == "(IC)Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "padNext\0", "(IC)Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optionalStart](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#optionalStart())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn optionalStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "optionalStart", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "optionalStart\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [optionalEnd](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#optionalEnd())
        ///
        /// Required features: "java-time-format-DateTimeFormatterBuilder"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatterBuilder")))]
        pub fn optionalEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatterBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "optionalEnd", .descriptor == "()Ljava/time/format/DateTimeFormatterBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "optionalEnd\0", "()Ljava/time/format/DateTimeFormatterBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toFormatter](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#toFormatter())
        ///
        /// Required features: "java-time-format-DateTimeFormatter"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter")))]
        pub fn toFormatter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "toFormatter", .descriptor == "()Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "toFormatter\0", "()Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toFormatter](https://developer.android.com/reference/java/time/format/DateTimeFormatterBuilder.html#toFormatter(java.util.Locale))
        ///
        /// Required features: "java-time-format-DateTimeFormatter", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-time-format-DateTimeFormatter", feature = "java-util-Locale")))]
        pub fn toFormatter_Locale<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::format::DateTimeFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/format/DateTimeFormatterBuilder", java.flags == PUBLIC, .name == "toFormatter", .descriptor == "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/format/DateTimeFormatterBuilder\0", "toFormatter\0", "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
