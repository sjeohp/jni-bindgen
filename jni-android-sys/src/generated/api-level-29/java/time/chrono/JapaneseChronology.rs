// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-chrono-JapaneseChronology"))]
__jni_bindgen! {
    /// public final class [JapaneseChronology](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html)
    ///
    /// Required feature: java-time-chrono-JapaneseChronology
    public final class JapaneseChronology ("java/time/chrono/JapaneseChronology") extends crate::java::time::chrono::AbstractChronology, implements crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [JapaneseChronology](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#JapaneseChronology())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseChronology>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getId](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#getId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "getId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "getId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCalendarType](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#getCalendarType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCalendarType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "getCalendarType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "getCalendarType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [date](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#date(java.time.chrono.Era,%20int,%20int,%20int))
        ///
        /// Required features: "java-time-chrono-Era", "java-time-chrono-JapaneseDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Era", feature = "java-time-chrono-JapaneseDate")))]
        pub fn date_Era_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Era>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "date", .descriptor == "(Ljava/time/chrono/Era;III)Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "date\0", "(Ljava/time/chrono/Era;III)Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [date](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#date(int,%20int,%20int))
        ///
        /// Required features: "java-time-chrono-JapaneseDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-JapaneseDate")))]
        pub fn date_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "date", .descriptor == "(III)Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "date\0", "(III)Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateYearDay](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateYearDay(java.time.chrono.Era,%20int,%20int))
        ///
        /// Required features: "java-time-chrono-Era", "java-time-chrono-JapaneseDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Era", feature = "java-time-chrono-JapaneseDate")))]
        pub fn dateYearDay_Era_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Era>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "dateYearDay", .descriptor == "(Ljava/time/chrono/Era;II)Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateYearDay\0", "(Ljava/time/chrono/Era;II)Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateYearDay](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateYearDay(int,%20int))
        ///
        /// Required features: "java-time-chrono-JapaneseDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-JapaneseDate")))]
        pub fn dateYearDay_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "dateYearDay", .descriptor == "(II)Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateYearDay\0", "(II)Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateEpochDay](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateEpochDay(long))
        ///
        /// Required features: "java-time-chrono-JapaneseDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-JapaneseDate")))]
        pub fn dateEpochDay_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "dateEpochDay", .descriptor == "(J)Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateEpochDay\0", "(J)Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateNow](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateNow())
        ///
        /// Required features: "java-time-chrono-JapaneseDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-JapaneseDate")))]
        pub fn dateNow<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "dateNow", .descriptor == "()Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateNow\0", "()Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateNow](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateNow(java.time.ZoneId))
        ///
        /// Required features: "java-time-ZoneId", "java-time-chrono-JapaneseDate"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneId", feature = "java-time-chrono-JapaneseDate")))]
        pub fn dateNow_ZoneId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "dateNow", .descriptor == "(Ljava/time/ZoneId;)Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateNow\0", "(Ljava/time/ZoneId;)Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateNow](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateNow(java.time.Clock))
        ///
        /// Required features: "java-time-Clock", "java-time-chrono-JapaneseDate"
        #[cfg(any(feature = "all", all(feature = "java-time-Clock", feature = "java-time-chrono-JapaneseDate")))]
        pub fn dateNow_Clock<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Clock>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "dateNow", .descriptor == "(Ljava/time/Clock;)Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateNow\0", "(Ljava/time/Clock;)Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [date](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#date(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-chrono-JapaneseDate", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-JapaneseDate", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn date_TemporalAccessor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "date", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "date\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [localDateTime](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#localDateTime(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDateTime", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDateTime", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn localDateTime<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "localDateTime", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoLocalDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "localDateTime\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoLocalDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [zonedDateTime](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#zonedDateTime(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn zonedDateTime_TemporalAccessor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "zonedDateTime", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "zonedDateTime\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [zonedDateTime](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#zonedDateTime(java.time.Instant,%20java.time.ZoneId))
        ///
        /// Required features: "java-time-Instant", "java-time-ZoneId", "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-ZoneId", feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn zonedDateTime_Instant_ZoneId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "zonedDateTime", .descriptor == "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "zonedDateTime\0", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLeapYear](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#isLeapYear(long))
        pub fn isLeapYear<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "isLeapYear", .descriptor == "(J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "isLeapYear\0", "(J)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prolepticYear](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#prolepticYear(java.time.chrono.Era,%20int))
        ///
        /// Required features: "java-time-chrono-Era"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Era")))]
        pub fn prolepticYear<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Era>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "prolepticYear", .descriptor == "(Ljava/time/chrono/Era;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "prolepticYear\0", "(Ljava/time/chrono/Era;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eraOf](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#eraOf(int))
        ///
        /// Required features: "java-time-chrono-JapaneseEra"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-JapaneseEra")))]
        pub fn eraOf_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseEra>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "eraOf", .descriptor == "(I)Ljava/time/chrono/JapaneseEra;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "eraOf\0", "(I)Ljava/time/chrono/JapaneseEra;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eras](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#eras())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn eras<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "eras", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "eras\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [range](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#range(java.time.temporal.ChronoField))
        ///
        /// Required features: "java-time-temporal-ChronoField", "java-time-temporal-ValueRange"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-ChronoField", feature = "java-time-temporal-ValueRange")))]
        pub fn range<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::ChronoField>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::ValueRange>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "range", .descriptor == "(Ljava/time/temporal/ChronoField;)Ljava/time/temporal/ValueRange;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "range\0", "(Ljava/time/temporal/ChronoField;)Ljava/time/temporal/ValueRange;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveDate](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#resolveDate(java.util.Map,%20java.time.format.ResolverStyle))
        ///
        /// Required features: "java-time-chrono-JapaneseDate", "java-time-format-ResolverStyle", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-JapaneseDate", feature = "java-time-format-ResolverStyle", feature = "java-util-Map")))]
        pub fn resolveDate_Map_ResolverStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::ResolverStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC, .name == "resolveDate", .descriptor == "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/JapaneseDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "resolveDate\0", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/JapaneseDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [resolveDate](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#resolveDate(java.util.Map,%20java.time.format.ResolverStyle))
        // ///
        // /// Required features: "java-time-chrono-ChronoLocalDate", "java-time-format-ResolverStyle", "java-util-Map"
        // #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate", feature = "java-time-format-ResolverStyle", feature = "java-util-Map")))]
        // pub fn resolveDate_Map_ResolverStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::ResolverStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "resolveDate", .descriptor == "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "resolveDate\0", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [eraOf](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#eraOf(int))
        // ///
        // /// Required features: "java-time-chrono-Era"
        // #[cfg(any(feature = "all", all(feature = "java-time-chrono-Era")))]
        // pub fn eraOf_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::Era>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "eraOf", .descriptor == "(I)Ljava/time/chrono/Era;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "eraOf\0", "(I)Ljava/time/chrono/Era;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [date](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#date(java.time.temporal.TemporalAccessor))
        // ///
        // /// Required features: "java-time-chrono-ChronoLocalDate", "java-time-temporal-TemporalAccessor"
        // #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate", feature = "java-time-temporal-TemporalAccessor")))]
        // pub fn date_TemporalAccessor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "date", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "date\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [dateNow](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateNow(java.time.Clock))
        // ///
        // /// Required features: "java-time-Clock", "java-time-chrono-ChronoLocalDate"
        // #[cfg(any(feature = "all", all(feature = "java-time-Clock", feature = "java-time-chrono-ChronoLocalDate")))]
        // pub fn dateNow_Clock<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Clock>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "dateNow", .descriptor == "(Ljava/time/Clock;)Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateNow\0", "(Ljava/time/Clock;)Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [dateNow](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateNow(java.time.ZoneId))
        // ///
        // /// Required features: "java-time-ZoneId", "java-time-chrono-ChronoLocalDate"
        // #[cfg(any(feature = "all", all(feature = "java-time-ZoneId", feature = "java-time-chrono-ChronoLocalDate")))]
        // pub fn dateNow_ZoneId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "dateNow", .descriptor == "(Ljava/time/ZoneId;)Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateNow\0", "(Ljava/time/ZoneId;)Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [dateNow](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateNow())
        // ///
        // /// Required features: "java-time-chrono-ChronoLocalDate"
        // #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate")))]
        // pub fn dateNow<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "dateNow", .descriptor == "()Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateNow\0", "()Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [dateEpochDay](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateEpochDay(long))
        // ///
        // /// Required features: "java-time-chrono-ChronoLocalDate"
        // #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate")))]
        // pub fn dateEpochDay_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "dateEpochDay", .descriptor == "(J)Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateEpochDay\0", "(J)Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [dateYearDay](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateYearDay(int,%20int))
        // ///
        // /// Required features: "java-time-chrono-ChronoLocalDate"
        // #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate")))]
        // pub fn dateYearDay_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "dateYearDay", .descriptor == "(II)Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateYearDay\0", "(II)Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [dateYearDay](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#dateYearDay(java.time.chrono.Era,%20int,%20int))
        // ///
        // /// Required features: "java-time-chrono-ChronoLocalDate", "java-time-chrono-Era"
        // #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate", feature = "java-time-chrono-Era")))]
        // pub fn dateYearDay_Era_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Era>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "dateYearDay", .descriptor == "(Ljava/time/chrono/Era;II)Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "dateYearDay\0", "(Ljava/time/chrono/Era;II)Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [date](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#date(int,%20int,%20int))
        // ///
        // /// Required features: "java-time-chrono-ChronoLocalDate"
        // #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate")))]
        // pub fn date_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "date", .descriptor == "(III)Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "date\0", "(III)Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [date](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#date(java.time.chrono.Era,%20int,%20int,%20int))
        // ///
        // /// Required features: "java-time-chrono-ChronoLocalDate", "java-time-chrono-Era"
        // #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate", feature = "java-time-chrono-Era")))]
        // pub fn date_Era_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Era>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/JapaneseChronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "date", .descriptor == "(Ljava/time/chrono/Era;III)Ljava/time/chrono/ChronoLocalDate;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/JapaneseChronology\0", "date\0", "(Ljava/time/chrono/Era;III)Ljava/time/chrono/ChronoLocalDate;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public static final [INSTANCE](https://developer.android.com/reference/java/time/chrono/JapaneseChronology.html#INSTANCE)
        ///
        /// Required feature: java-time-chrono-JapaneseChronology
        #[cfg(any(feature = "all", feature = "java-time-chrono-JapaneseChronology"))]
        pub fn INSTANCE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::JapaneseChronology>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/chrono/JapaneseChronology\0", "INSTANCE\0", "Ljava/time/chrono/JapaneseChronology;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
