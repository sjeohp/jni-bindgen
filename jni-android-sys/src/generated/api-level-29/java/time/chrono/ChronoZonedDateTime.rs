// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-chrono-ChronoZonedDateTime"))]
__jni_bindgen! {
    /// public interface [ChronoZonedDateTime](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html)
    ///
    /// Required feature: java-time-chrono-ChronoZonedDateTime
    public interface ChronoZonedDateTime ("java/time/chrono/ChronoZonedDateTime") extends crate::java::lang::Object, implements crate::java::time::temporal::Temporal, crate::java::lang::Comparable {

        /// [timeLineOrder](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#timeLineOrder())
        ///
        /// Required features: "java-util-Comparator"
        #[cfg(any(feature = "all", all(feature = "java-util-Comparator")))]
        pub fn timeLineOrder<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Comparator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | STATIC, .name == "timeLineOrder", .descriptor == "()Ljava/util/Comparator;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/chrono/ChronoZonedDateTime\0", "timeLineOrder\0", "()Ljava/util/Comparator;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [from](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#from(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn from<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | STATIC, .name == "from", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/chrono/ChronoZonedDateTime\0", "from\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [range](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#range(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField", "java-time-temporal-ValueRange"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField", feature = "java-time-temporal-ValueRange")))]
        pub fn range<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::ValueRange>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "range", .descriptor == "(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "range\0", "(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#get(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn get<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "get", .descriptor == "(Ljava/time/temporal/TemporalField;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "get\0", "(Ljava/time/temporal/TemporalField;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#getLong(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn getLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "getLong", .descriptor == "(Ljava/time/temporal/TemporalField;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "getLong\0", "(Ljava/time/temporal/TemporalField;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toLocalDate](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#toLocalDate())
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate")))]
        pub fn toLocalDate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "toLocalDate", .descriptor == "()Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "toLocalDate\0", "()Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toLocalTime](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#toLocalTime())
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn toLocalTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "toLocalTime", .descriptor == "()Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "toLocalTime\0", "()Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toLocalDateTime](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#toLocalDateTime())
        ///
        /// Required features: "java-time-chrono-ChronoLocalDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDateTime")))]
        pub fn toLocalDateTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "toLocalDateTime", .descriptor == "()Ljava/time/chrono/ChronoLocalDateTime;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "toLocalDateTime\0", "()Ljava/time/chrono/ChronoLocalDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChronology](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#getChronology())
        ///
        /// Required features: "java-time-chrono-Chronology"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Chronology")))]
        pub fn getChronology<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::Chronology>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "getChronology", .descriptor == "()Ljava/time/chrono/Chronology;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "getChronology\0", "()Ljava/time/chrono/Chronology;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffset](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#getOffset())
        ///
        /// Required features: "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset")))]
        pub fn getOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneOffset>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "getOffset", .descriptor == "()Ljava/time/ZoneOffset;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "getOffset\0", "()Ljava/time/ZoneOffset;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getZone](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#getZone())
        ///
        /// Required features: "java-time-ZoneId"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneId")))]
        pub fn getZone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "getZone", .descriptor == "()Ljava/time/ZoneId;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "getZone\0", "()Ljava/time/ZoneId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withEarlierOffsetAtOverlap](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#withEarlierOffsetAtOverlap())
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn withEarlierOffsetAtOverlap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "withEarlierOffsetAtOverlap", .descriptor == "()Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "withEarlierOffsetAtOverlap\0", "()Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withLaterOffsetAtOverlap](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#withLaterOffsetAtOverlap())
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn withLaterOffsetAtOverlap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "withLaterOffsetAtOverlap", .descriptor == "()Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "withLaterOffsetAtOverlap\0", "()Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withZoneSameLocal](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#withZoneSameLocal(java.time.ZoneId))
        ///
        /// Required features: "java-time-ZoneId", "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneId", feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn withZoneSameLocal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "withZoneSameLocal", .descriptor == "(Ljava/time/ZoneId;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "withZoneSameLocal\0", "(Ljava/time/ZoneId;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withZoneSameInstant](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#withZoneSameInstant(java.time.ZoneId))
        ///
        /// Required features: "java-time-ZoneId", "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneId", feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn withZoneSameInstant<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "withZoneSameInstant", .descriptor == "(Ljava/time/ZoneId;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "withZoneSameInstant\0", "(Ljava/time/ZoneId;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSupported](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#isSupported(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn isSupported_TemporalField<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "isSupported", .descriptor == "(Ljava/time/temporal/TemporalField;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "isSupported\0", "(Ljava/time/temporal/TemporalField;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSupported](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#isSupported(java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalUnit")))]
        pub fn isSupported_TemporalUnit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "isSupported", .descriptor == "(Ljava/time/temporal/TemporalUnit;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "isSupported\0", "(Ljava/time/temporal/TemporalUnit;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [with](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#with(java.time.temporal.TemporalAdjuster))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime", "java-time-temporal-TemporalAdjuster"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime", feature = "java-time-temporal-TemporalAdjuster")))]
        pub fn with_TemporalAdjuster<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAdjuster>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "with\0", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [with](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#with(java.time.temporal.TemporalField,%20long))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime", feature = "java-time-temporal-TemporalField")))]
        pub fn with_TemporalField_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalField;J)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "with\0", "(Ljava/time/temporal/TemporalField;J)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#plus(java.time.temporal.TemporalAmount))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime", "java-time-temporal-TemporalAmount"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime", feature = "java-time-temporal-TemporalAmount")))]
        pub fn plus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "plus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "plus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#plus(long,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime", feature = "java-time-temporal-TemporalUnit")))]
        pub fn plus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "plus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "plus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minus](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#minus(java.time.temporal.TemporalAmount))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime", "java-time-temporal-TemporalAmount"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime", feature = "java-time-temporal-TemporalAmount")))]
        pub fn minus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "minus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "minus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minus](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#minus(long,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime", feature = "java-time-temporal-TemporalUnit")))]
        pub fn minus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "minus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "minus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#query(java.time.temporal.TemporalQuery))
        ///
        /// Required features: "java-lang-Object", "java-time-temporal-TemporalQuery"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-time-temporal-TemporalQuery")))]
        pub fn query<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalQuery>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "query", .descriptor == "(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "query\0", "(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#format(java.time.format.DateTimeFormatter))
        ///
        /// Required features: "java-lang-String", "java-time-format-DateTimeFormatter"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-format-DateTimeFormatter")))]
        pub fn format<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::DateTimeFormatter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "format", .descriptor == "(Ljava/time/format/DateTimeFormatter;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "format\0", "(Ljava/time/format/DateTimeFormatter;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toInstant](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#toInstant())
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn toInstant<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "toInstant", .descriptor == "()Ljava/time/Instant;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "toInstant\0", "()Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toEpochSecond](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#toEpochSecond())
        pub fn toEpochSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "toEpochSecond", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "toEpochSecond\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#compareTo(java.time.chrono.ChronoZonedDateTime))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn compareTo_ChronoZonedDateTime<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::ChronoZonedDateTime>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/time/chrono/ChronoZonedDateTime;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "compareTo\0", "(Ljava/time/chrono/ChronoZonedDateTime;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBefore](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#isBefore(java.time.chrono.ChronoZonedDateTime))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn isBefore<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::ChronoZonedDateTime>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "isBefore", .descriptor == "(Ljava/time/chrono/ChronoZonedDateTime;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "isBefore\0", "(Ljava/time/chrono/ChronoZonedDateTime;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAfter](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#isAfter(java.time.chrono.ChronoZonedDateTime))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn isAfter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::ChronoZonedDateTime>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "isAfter", .descriptor == "(Ljava/time/chrono/ChronoZonedDateTime;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "isAfter\0", "(Ljava/time/chrono/ChronoZonedDateTime;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEqual](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#isEqual(java.time.chrono.ChronoZonedDateTime))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn isEqual<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::ChronoZonedDateTime>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC, .name == "isEqual", .descriptor == "(Ljava/time/chrono/ChronoZonedDateTime;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "isEqual\0", "(Ljava/time/chrono/ChronoZonedDateTime;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | ABSTRACT, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [minus](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#minus(long,%20java.time.temporal.TemporalUnit))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        // pub fn minus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "minus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "minus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [minus](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#minus(java.time.temporal.TemporalAmount))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAmount"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAmount")))]
        // pub fn minus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "minus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "minus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [plus](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#plus(long,%20java.time.temporal.TemporalUnit))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        // pub fn plus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "plus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "plus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [plus](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#plus(java.time.temporal.TemporalAmount))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAmount"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAmount")))]
        // pub fn plus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "plus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "plus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [with](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#with(java.time.temporal.TemporalField,%20long))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalField"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalField")))]
        // pub fn with_TemporalField_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalField;J)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "with\0", "(Ljava/time/temporal/TemporalField;J)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [with](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#with(java.time.temporal.TemporalAdjuster))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAdjuster"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAdjuster")))]
        // pub fn with_TemporalAdjuster<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAdjuster>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "with\0", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/java/time/chrono/ChronoZonedDateTime.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/ChronoZonedDateTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/ChronoZonedDateTime\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
