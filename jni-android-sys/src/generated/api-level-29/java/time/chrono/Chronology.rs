// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-chrono-Chronology"))]
__jni_bindgen! {
    /// public interface [Chronology](https://developer.android.com/reference/java/time/chrono/Chronology.html)
    ///
    /// Required feature: java-time-chrono-Chronology
    public interface Chronology ("java/time/chrono/Chronology") extends crate::java::lang::Object, implements crate::java::lang::Comparable {

        /// [from](https://developer.android.com/reference/java/time/chrono/Chronology.html#from(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-chrono-Chronology", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Chronology", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn from<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::Chronology>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | STATIC, .name == "from", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/Chronology;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/chrono/Chronology\0", "from\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/Chronology;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofLocale](https://developer.android.com/reference/java/time/chrono/Chronology.html#ofLocale(java.util.Locale))
        ///
        /// Required features: "java-time-chrono-Chronology", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Chronology", feature = "java-util-Locale")))]
        pub fn ofLocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::Chronology>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | STATIC, .name == "ofLocale", .descriptor == "(Ljava/util/Locale;)Ljava/time/chrono/Chronology;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/chrono/Chronology\0", "ofLocale\0", "(Ljava/util/Locale;)Ljava/time/chrono/Chronology;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/time/chrono/Chronology.html#of(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-time-chrono-Chronology"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-chrono-Chronology")))]
        pub fn of<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::Chronology>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/String;)Ljava/time/chrono/Chronology;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/chrono/Chronology\0", "of\0", "(Ljava/lang/String;)Ljava/time/chrono/Chronology;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAvailableChronologies](https://developer.android.com/reference/java/time/chrono/Chronology.html#getAvailableChronologies())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getAvailableChronologies<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | STATIC, .name == "getAvailableChronologies", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/chrono/Chronology\0", "getAvailableChronologies\0", "()Ljava/util/Set;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getId](https://developer.android.com/reference/java/time/chrono/Chronology.html#getId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "getId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "getId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCalendarType](https://developer.android.com/reference/java/time/chrono/Chronology.html#getCalendarType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCalendarType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "getCalendarType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "getCalendarType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [date](https://developer.android.com/reference/java/time/chrono/Chronology.html#date(java.time.chrono.Era,%20int,%20int,%20int))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate", "java-time-chrono-Era"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate", feature = "java-time-chrono-Era")))]
        pub fn date_Era_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Era>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "date", .descriptor == "(Ljava/time/chrono/Era;III)Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "date\0", "(Ljava/time/chrono/Era;III)Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [date](https://developer.android.com/reference/java/time/chrono/Chronology.html#date(int,%20int,%20int))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate")))]
        pub fn date_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "date", .descriptor == "(III)Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "date\0", "(III)Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateYearDay](https://developer.android.com/reference/java/time/chrono/Chronology.html#dateYearDay(java.time.chrono.Era,%20int,%20int))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate", "java-time-chrono-Era"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate", feature = "java-time-chrono-Era")))]
        pub fn dateYearDay_Era_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Era>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "dateYearDay", .descriptor == "(Ljava/time/chrono/Era;II)Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "dateYearDay\0", "(Ljava/time/chrono/Era;II)Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateYearDay](https://developer.android.com/reference/java/time/chrono/Chronology.html#dateYearDay(int,%20int))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate")))]
        pub fn dateYearDay_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "dateYearDay", .descriptor == "(II)Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "dateYearDay\0", "(II)Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateEpochDay](https://developer.android.com/reference/java/time/chrono/Chronology.html#dateEpochDay(long))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate")))]
        pub fn dateEpochDay<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "dateEpochDay", .descriptor == "(J)Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "dateEpochDay\0", "(J)Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateNow](https://developer.android.com/reference/java/time/chrono/Chronology.html#dateNow())
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate")))]
        pub fn dateNow<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "dateNow", .descriptor == "()Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "dateNow\0", "()Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateNow](https://developer.android.com/reference/java/time/chrono/Chronology.html#dateNow(java.time.ZoneId))
        ///
        /// Required features: "java-time-ZoneId", "java-time-chrono-ChronoLocalDate"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneId", feature = "java-time-chrono-ChronoLocalDate")))]
        pub fn dateNow_ZoneId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "dateNow", .descriptor == "(Ljava/time/ZoneId;)Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "dateNow\0", "(Ljava/time/ZoneId;)Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dateNow](https://developer.android.com/reference/java/time/chrono/Chronology.html#dateNow(java.time.Clock))
        ///
        /// Required features: "java-time-Clock", "java-time-chrono-ChronoLocalDate"
        #[cfg(any(feature = "all", all(feature = "java-time-Clock", feature = "java-time-chrono-ChronoLocalDate")))]
        pub fn dateNow_Clock<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Clock>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "dateNow", .descriptor == "(Ljava/time/Clock;)Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "dateNow\0", "(Ljava/time/Clock;)Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [date](https://developer.android.com/reference/java/time/chrono/Chronology.html#date(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn date_TemporalAccessor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "date", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "date\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [localDateTime](https://developer.android.com/reference/java/time/chrono/Chronology.html#localDateTime(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDateTime", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDateTime", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn localDateTime<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "localDateTime", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoLocalDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "localDateTime\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoLocalDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [zonedDateTime](https://developer.android.com/reference/java/time/chrono/Chronology.html#zonedDateTime(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-chrono-ChronoZonedDateTime", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoZonedDateTime", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn zonedDateTime_TemporalAccessor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "zonedDateTime", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "zonedDateTime\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [zonedDateTime](https://developer.android.com/reference/java/time/chrono/Chronology.html#zonedDateTime(java.time.Instant,%20java.time.ZoneId))
        ///
        /// Required features: "java-time-Instant", "java-time-ZoneId", "java-time-chrono-ChronoZonedDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-ZoneId", feature = "java-time-chrono-ChronoZonedDateTime")))]
        pub fn zonedDateTime_Instant_ZoneId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoZonedDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "zonedDateTime", .descriptor == "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/chrono/ChronoZonedDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "zonedDateTime\0", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/chrono/ChronoZonedDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLeapYear](https://developer.android.com/reference/java/time/chrono/Chronology.html#isLeapYear(long))
        pub fn isLeapYear<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "isLeapYear", .descriptor == "(J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "isLeapYear\0", "(J)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prolepticYear](https://developer.android.com/reference/java/time/chrono/Chronology.html#prolepticYear(java.time.chrono.Era,%20int))
        ///
        /// Required features: "java-time-chrono-Era"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Era")))]
        pub fn prolepticYear<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Era>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "prolepticYear", .descriptor == "(Ljava/time/chrono/Era;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "prolepticYear\0", "(Ljava/time/chrono/Era;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eraOf](https://developer.android.com/reference/java/time/chrono/Chronology.html#eraOf(int))
        ///
        /// Required features: "java-time-chrono-Era"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Era")))]
        pub fn eraOf<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::Era>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "eraOf", .descriptor == "(I)Ljava/time/chrono/Era;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "eraOf\0", "(I)Ljava/time/chrono/Era;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eras](https://developer.android.com/reference/java/time/chrono/Chronology.html#eras())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn eras<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "eras", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "eras\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [range](https://developer.android.com/reference/java/time/chrono/Chronology.html#range(java.time.temporal.ChronoField))
        ///
        /// Required features: "java-time-temporal-ChronoField", "java-time-temporal-ValueRange"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-ChronoField", feature = "java-time-temporal-ValueRange")))]
        pub fn range<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::ChronoField>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::ValueRange>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "range", .descriptor == "(Ljava/time/temporal/ChronoField;)Ljava/time/temporal/ValueRange;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "range\0", "(Ljava/time/temporal/ChronoField;)Ljava/time/temporal/ValueRange;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayName](https://developer.android.com/reference/java/time/chrono/Chronology.html#getDisplayName(java.time.format.TextStyle,%20java.util.Locale))
        ///
        /// Required features: "java-lang-String", "java-time-format-TextStyle", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-format-TextStyle", feature = "java-util-Locale")))]
        pub fn getDisplayName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::TextStyle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "getDisplayName", .descriptor == "(Ljava/time/format/TextStyle;Ljava/util/Locale;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "getDisplayName\0", "(Ljava/time/format/TextStyle;Ljava/util/Locale;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveDate](https://developer.android.com/reference/java/time/chrono/Chronology.html#resolveDate(java.util.Map,%20java.time.format.ResolverStyle))
        ///
        /// Required features: "java-time-chrono-ChronoLocalDate", "java-time-format-ResolverStyle", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoLocalDate", feature = "java-time-format-ResolverStyle", feature = "java-util-Map")))]
        pub fn resolveDate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::ResolverStyle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoLocalDate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "resolveDate", .descriptor == "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "resolveDate\0", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [period](https://developer.android.com/reference/java/time/chrono/Chronology.html#period(int,%20int,%20int))
        ///
        /// Required features: "java-time-chrono-ChronoPeriod"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-ChronoPeriod")))]
        pub fn period<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::chrono::ChronoPeriod>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC, .name == "period", .descriptor == "(III)Ljava/time/chrono/ChronoPeriod;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "period\0", "(III)Ljava/time/chrono/ChronoPeriod;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/java/time/chrono/Chronology.html#compareTo(java.time.chrono.Chronology))
        ///
        /// Required features: "java-time-chrono-Chronology"
        #[cfg(any(feature = "all", all(feature = "java-time-chrono-Chronology")))]
        pub fn compareTo_Chronology<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::chrono::Chronology>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "compareTo", .descriptor == "(Ljava/time/chrono/Chronology;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "compareTo\0", "(Ljava/time/chrono/Chronology;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/time/chrono/Chronology.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/time/chrono/Chronology.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/time/chrono/Chronology.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | ABSTRACT, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/java/time/chrono/Chronology.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/chrono/Chronology", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/chrono/Chronology\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
