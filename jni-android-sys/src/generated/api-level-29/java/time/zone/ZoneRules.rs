// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-zone-ZoneRules"))]
__jni_bindgen! {
    /// public final class [ZoneRules](https://developer.android.com/reference/java/time/zone/ZoneRules.html)
    ///
    /// Required feature: java-time-zone-ZoneRules
    public final class ZoneRules ("java/time/zone/ZoneRules") extends crate::java::lang::Object, implements crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [ZoneRules](https://developer.android.com/reference/java/time/zone/ZoneRules.html#ZoneRules(java.time.ZoneOffset))
        // ///
        // /// Required features: "java-time-ZoneOffset"
        // #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneRules>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/zone/ZoneRules", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/time/ZoneOffset;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "<init>\0", "(Ljava/time/ZoneOffset;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [of](https://developer.android.com/reference/java/time/zone/ZoneRules.html#of(java.time.ZoneOffset,%20java.time.ZoneOffset,%20java.util.List,%20java.util.List,%20java.util.List))
        ///
        /// Required features: "java-time-ZoneOffset", "java-time-zone-ZoneRules", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset", feature = "java-time-zone-ZoneRules", feature = "java-util-List")))]
        pub fn of_ZoneOffset_ZoneOffset_List_List_List<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneRules>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;Ljava/util/List;Ljava/util/List;Ljava/util/List;)Ljava/time/zone/ZoneRules;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/zone/ZoneRules\0", "of\0", "(Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;Ljava/util/List;Ljava/util/List;Ljava/util/List;)Ljava/time/zone/ZoneRules;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/time/zone/ZoneRules.html#of(java.time.ZoneOffset))
        ///
        /// Required features: "java-time-ZoneOffset", "java-time-zone-ZoneRules"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset", feature = "java-time-zone-ZoneRules")))]
        pub fn of_ZoneOffset<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneRules>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/time/ZoneOffset;)Ljava/time/zone/ZoneRules;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/zone/ZoneRules\0", "of\0", "(Ljava/time/ZoneOffset;)Ljava/time/zone/ZoneRules;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFixedOffset](https://developer.android.com/reference/java/time/zone/ZoneRules.html#isFixedOffset())
        pub fn isFixedOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "isFixedOffset", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "isFixedOffset\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffset](https://developer.android.com/reference/java/time/zone/ZoneRules.html#getOffset(java.time.Instant))
        ///
        /// Required features: "java-time-Instant", "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-ZoneOffset")))]
        pub fn getOffset_Instant<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneOffset>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "getOffset", .descriptor == "(Ljava/time/Instant;)Ljava/time/ZoneOffset;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "getOffset\0", "(Ljava/time/Instant;)Ljava/time/ZoneOffset;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffset](https://developer.android.com/reference/java/time/zone/ZoneRules.html#getOffset(java.time.LocalDateTime))
        ///
        /// Required features: "java-time-LocalDateTime", "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDateTime", feature = "java-time-ZoneOffset")))]
        pub fn getOffset_LocalDateTime<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalDateTime>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneOffset>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "getOffset", .descriptor == "(Ljava/time/LocalDateTime;)Ljava/time/ZoneOffset;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "getOffset\0", "(Ljava/time/LocalDateTime;)Ljava/time/ZoneOffset;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValidOffsets](https://developer.android.com/reference/java/time/zone/ZoneRules.html#getValidOffsets(java.time.LocalDateTime))
        ///
        /// Required features: "java-time-LocalDateTime", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDateTime", feature = "java-util-List")))]
        pub fn getValidOffsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalDateTime>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "getValidOffsets", .descriptor == "(Ljava/time/LocalDateTime;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "getValidOffsets\0", "(Ljava/time/LocalDateTime;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransition](https://developer.android.com/reference/java/time/zone/ZoneRules.html#getTransition(java.time.LocalDateTime))
        ///
        /// Required features: "java-time-LocalDateTime", "java-time-zone-ZoneOffsetTransition"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDateTime", feature = "java-time-zone-ZoneOffsetTransition")))]
        pub fn getTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalDateTime>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneOffsetTransition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "getTransition", .descriptor == "(Ljava/time/LocalDateTime;)Ljava/time/zone/ZoneOffsetTransition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "getTransition\0", "(Ljava/time/LocalDateTime;)Ljava/time/zone/ZoneOffsetTransition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStandardOffset](https://developer.android.com/reference/java/time/zone/ZoneRules.html#getStandardOffset(java.time.Instant))
        ///
        /// Required features: "java-time-Instant", "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-ZoneOffset")))]
        pub fn getStandardOffset<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneOffset>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "getStandardOffset", .descriptor == "(Ljava/time/Instant;)Ljava/time/ZoneOffset;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "getStandardOffset\0", "(Ljava/time/Instant;)Ljava/time/ZoneOffset;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDaylightSavings](https://developer.android.com/reference/java/time/zone/ZoneRules.html#getDaylightSavings(java.time.Instant))
        ///
        /// Required features: "java-time-Duration", "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Duration", feature = "java-time-Instant")))]
        pub fn getDaylightSavings<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Duration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "getDaylightSavings", .descriptor == "(Ljava/time/Instant;)Ljava/time/Duration;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "getDaylightSavings\0", "(Ljava/time/Instant;)Ljava/time/Duration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDaylightSavings](https://developer.android.com/reference/java/time/zone/ZoneRules.html#isDaylightSavings(java.time.Instant))
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn isDaylightSavings<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "isDaylightSavings", .descriptor == "(Ljava/time/Instant;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "isDaylightSavings\0", "(Ljava/time/Instant;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isValidOffset](https://developer.android.com/reference/java/time/zone/ZoneRules.html#isValidOffset(java.time.LocalDateTime,%20java.time.ZoneOffset))
        ///
        /// Required features: "java-time-LocalDateTime", "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDateTime", feature = "java-time-ZoneOffset")))]
        pub fn isValidOffset<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalDateTime>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "isValidOffset", .descriptor == "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "isValidOffset\0", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextTransition](https://developer.android.com/reference/java/time/zone/ZoneRules.html#nextTransition(java.time.Instant))
        ///
        /// Required features: "java-time-Instant", "java-time-zone-ZoneOffsetTransition"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-zone-ZoneOffsetTransition")))]
        pub fn nextTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneOffsetTransition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "nextTransition", .descriptor == "(Ljava/time/Instant;)Ljava/time/zone/ZoneOffsetTransition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "nextTransition\0", "(Ljava/time/Instant;)Ljava/time/zone/ZoneOffsetTransition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [previousTransition](https://developer.android.com/reference/java/time/zone/ZoneRules.html#previousTransition(java.time.Instant))
        ///
        /// Required features: "java-time-Instant", "java-time-zone-ZoneOffsetTransition"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant", feature = "java-time-zone-ZoneOffsetTransition")))]
        pub fn previousTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Instant>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneOffsetTransition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "previousTransition", .descriptor == "(Ljava/time/Instant;)Ljava/time/zone/ZoneOffsetTransition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "previousTransition\0", "(Ljava/time/Instant;)Ljava/time/zone/ZoneOffsetTransition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransitions](https://developer.android.com/reference/java/time/zone/ZoneRules.html#getTransitions())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getTransitions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "getTransitions", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "getTransitions\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransitionRules](https://developer.android.com/reference/java/time/zone/ZoneRules.html#getTransitionRules())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getTransitionRules<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "getTransitionRules", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "getTransitionRules\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/time/zone/ZoneRules.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/time/zone/ZoneRules.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/time/zone/ZoneRules.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneRules", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneRules\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
