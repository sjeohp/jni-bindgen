// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-zone-ZoneOffsetTransition"))]
__jni_bindgen! {
    /// public final class [ZoneOffsetTransition](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html)
    ///
    /// Required feature: java-time-zone-ZoneOffsetTransition
    public final class ZoneOffsetTransition ("java/time/zone/ZoneOffsetTransition") extends crate::java::lang::Object, implements crate::java::lang::Comparable, crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [ZoneOffsetTransition](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#ZoneOffsetTransition(java.time.LocalDateTime,%20java.time.ZoneOffset,%20java.time.ZoneOffset))
        // ///
        // /// Required features: "java-time-LocalDateTime", "java-time-ZoneOffset"
        // #[cfg(any(feature = "all", all(feature = "java-time-LocalDateTime", feature = "java-time-ZoneOffset")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalDateTime>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneOffsetTransition>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "<init>\0", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [of](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#of(java.time.LocalDateTime,%20java.time.ZoneOffset,%20java.time.ZoneOffset))
        ///
        /// Required features: "java-time-LocalDateTime", "java-time-ZoneOffset", "java-time-zone-ZoneOffsetTransition"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDateTime", feature = "java-time-ZoneOffset", feature = "java-time-zone-ZoneOffsetTransition")))]
        pub fn of<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalDateTime>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneOffsetTransition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;)Ljava/time/zone/ZoneOffsetTransition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/zone/ZoneOffsetTransition\0", "of\0", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;)Ljava/time/zone/ZoneOffsetTransition;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstant](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#getInstant())
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn getInstant<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "getInstant", .descriptor == "()Ljava/time/Instant;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "getInstant\0", "()Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toEpochSecond](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#toEpochSecond())
        pub fn toEpochSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "toEpochSecond", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "toEpochSecond\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDateTimeBefore](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#getDateTimeBefore())
        ///
        /// Required features: "java-time-LocalDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDateTime")))]
        pub fn getDateTimeBefore<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "getDateTimeBefore", .descriptor == "()Ljava/time/LocalDateTime;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "getDateTimeBefore\0", "()Ljava/time/LocalDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDateTimeAfter](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#getDateTimeAfter())
        ///
        /// Required features: "java-time-LocalDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDateTime")))]
        pub fn getDateTimeAfter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "getDateTimeAfter", .descriptor == "()Ljava/time/LocalDateTime;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "getDateTimeAfter\0", "()Ljava/time/LocalDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffsetBefore](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#getOffsetBefore())
        ///
        /// Required features: "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset")))]
        pub fn getOffsetBefore<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneOffset>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "getOffsetBefore", .descriptor == "()Ljava/time/ZoneOffset;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "getOffsetBefore\0", "()Ljava/time/ZoneOffset;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffsetAfter](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#getOffsetAfter())
        ///
        /// Required features: "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset")))]
        pub fn getOffsetAfter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneOffset>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "getOffsetAfter", .descriptor == "()Ljava/time/ZoneOffset;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "getOffsetAfter\0", "()Ljava/time/ZoneOffset;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDuration](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#getDuration())
        ///
        /// Required features: "java-time-Duration"
        #[cfg(any(feature = "all", all(feature = "java-time-Duration")))]
        pub fn getDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Duration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "getDuration", .descriptor == "()Ljava/time/Duration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "getDuration\0", "()Ljava/time/Duration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isGap](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#isGap())
        pub fn isGap<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "isGap", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "isGap\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOverlap](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#isOverlap())
        pub fn isOverlap<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "isOverlap", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "isOverlap\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isValidOffset](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#isValidOffset(java.time.ZoneOffset))
        ///
        /// Required features: "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset")))]
        pub fn isValidOffset<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "isValidOffset", .descriptor == "(Ljava/time/ZoneOffset;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "isValidOffset\0", "(Ljava/time/ZoneOffset;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#compareTo(java.time.zone.ZoneOffsetTransition))
        ///
        /// Required features: "java-time-zone-ZoneOffsetTransition"
        #[cfg(any(feature = "all", all(feature = "java-time-zone-ZoneOffsetTransition")))]
        pub fn compareTo_ZoneOffsetTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::zone::ZoneOffsetTransition>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/time/zone/ZoneOffsetTransition;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "compareTo\0", "(Ljava/time/zone/ZoneOffsetTransition;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransition.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/zone/ZoneOffsetTransition", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransition\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
