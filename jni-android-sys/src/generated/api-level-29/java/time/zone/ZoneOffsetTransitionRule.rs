// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-zone-ZoneOffsetTransitionRule"))]
__jni_bindgen! {
    /// public final class [ZoneOffsetTransitionRule](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html)
    ///
    /// Required feature: java-time-zone-ZoneOffsetTransitionRule
    public final class ZoneOffsetTransitionRule ("java/time/zone/ZoneOffsetTransitionRule") extends crate::java::lang::Object, implements crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [ZoneOffsetTransitionRule](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#ZoneOffsetTransitionRule(java.time.Month,%20int,%20java.time.DayOfWeek,%20java.time.LocalTime,%20boolean,%20java.time.zone.ZoneOffsetTransitionRule.TimeDefinition,%20java.time.ZoneOffset,%20java.time.ZoneOffset,%20java.time.ZoneOffset))
        // ///
        // /// Required features: "java-time-DayOfWeek", "java-time-LocalTime", "java-time-Month", "java-time-ZoneOffset", "java-time-zone-ZoneOffsetTransitionRule_TimeDefinition"
        // #[cfg(any(feature = "all", all(feature = "java-time-DayOfWeek", feature = "java-time-LocalTime", feature = "java-time-Month", feature = "java-time-ZoneOffset", feature = "java-time-zone-ZoneOffsetTransitionRule_TimeDefinition")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Month>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::DayOfWeek>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalTime>>, arg4: bool, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneOffsetTransitionRule>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/time/Month;ILjava/time/DayOfWeek;Ljava/time/LocalTime;ZLjava/time/zone/ZoneOffsetTransitionRule$TimeDefinition;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "<init>\0", "(Ljava/time/Month;ILjava/time/DayOfWeek;Ljava/time/LocalTime;ZLjava/time/zone/ZoneOffsetTransitionRule$TimeDefinition;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [of](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#of(java.time.Month,%20int,%20java.time.DayOfWeek,%20java.time.LocalTime,%20boolean,%20java.time.zone.ZoneOffsetTransitionRule.TimeDefinition,%20java.time.ZoneOffset,%20java.time.ZoneOffset,%20java.time.ZoneOffset))
        ///
        /// Required features: "java-time-DayOfWeek", "java-time-LocalTime", "java-time-Month", "java-time-ZoneOffset", "java-time-zone-ZoneOffsetTransitionRule", "java-time-zone-ZoneOffsetTransitionRule_TimeDefinition"
        #[cfg(any(feature = "all", all(feature = "java-time-DayOfWeek", feature = "java-time-LocalTime", feature = "java-time-Month", feature = "java-time-ZoneOffset", feature = "java-time-zone-ZoneOffsetTransitionRule", feature = "java-time-zone-ZoneOffsetTransitionRule_TimeDefinition")))]
        pub fn of<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Month>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::DayOfWeek>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalTime>>, arg4: bool, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneOffsetTransitionRule>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/time/Month;ILjava/time/DayOfWeek;Ljava/time/LocalTime;ZLjava/time/zone/ZoneOffsetTransitionRule$TimeDefinition;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;)Ljava/time/zone/ZoneOffsetTransitionRule;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/zone/ZoneOffsetTransitionRule\0", "of\0", "(Ljava/time/Month;ILjava/time/DayOfWeek;Ljava/time/LocalTime;ZLjava/time/zone/ZoneOffsetTransitionRule$TimeDefinition;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;)Ljava/time/zone/ZoneOffsetTransitionRule;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMonth](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#getMonth())
        ///
        /// Required features: "java-time-Month"
        #[cfg(any(feature = "all", all(feature = "java-time-Month")))]
        pub fn getMonth<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Month>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "getMonth", .descriptor == "()Ljava/time/Month;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "getMonth\0", "()Ljava/time/Month;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDayOfMonthIndicator](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#getDayOfMonthIndicator())
        pub fn getDayOfMonthIndicator<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "getDayOfMonthIndicator", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "getDayOfMonthIndicator\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDayOfWeek](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#getDayOfWeek())
        ///
        /// Required features: "java-time-DayOfWeek"
        #[cfg(any(feature = "all", all(feature = "java-time-DayOfWeek")))]
        pub fn getDayOfWeek<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::DayOfWeek>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "getDayOfWeek", .descriptor == "()Ljava/time/DayOfWeek;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "getDayOfWeek\0", "()Ljava/time/DayOfWeek;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalTime](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#getLocalTime())
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn getLocalTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "getLocalTime", .descriptor == "()Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "getLocalTime\0", "()Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMidnightEndOfDay](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#isMidnightEndOfDay())
        pub fn isMidnightEndOfDay<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "isMidnightEndOfDay", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "isMidnightEndOfDay\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeDefinition](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#getTimeDefinition())
        ///
        /// Required features: "java-time-zone-ZoneOffsetTransitionRule_TimeDefinition"
        #[cfg(any(feature = "all", all(feature = "java-time-zone-ZoneOffsetTransitionRule_TimeDefinition")))]
        pub fn getTimeDefinition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneOffsetTransitionRule_TimeDefinition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "getTimeDefinition", .descriptor == "()Ljava/time/zone/ZoneOffsetTransitionRule$TimeDefinition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "getTimeDefinition\0", "()Ljava/time/zone/ZoneOffsetTransitionRule$TimeDefinition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStandardOffset](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#getStandardOffset())
        ///
        /// Required features: "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset")))]
        pub fn getStandardOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneOffset>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "getStandardOffset", .descriptor == "()Ljava/time/ZoneOffset;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "getStandardOffset\0", "()Ljava/time/ZoneOffset;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffsetBefore](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#getOffsetBefore())
        ///
        /// Required features: "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset")))]
        pub fn getOffsetBefore<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneOffset>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "getOffsetBefore", .descriptor == "()Ljava/time/ZoneOffset;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "getOffsetBefore\0", "()Ljava/time/ZoneOffset;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffsetAfter](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#getOffsetAfter())
        ///
        /// Required features: "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-ZoneOffset")))]
        pub fn getOffsetAfter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::ZoneOffset>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "getOffsetAfter", .descriptor == "()Ljava/time/ZoneOffset;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "getOffsetAfter\0", "()Ljava/time/ZoneOffset;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createTransition](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#createTransition(int))
        ///
        /// Required features: "java-time-zone-ZoneOffsetTransition"
        #[cfg(any(feature = "all", all(feature = "java-time-zone-ZoneOffsetTransition")))]
        pub fn createTransition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::zone::ZoneOffsetTransition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "createTransition", .descriptor == "(I)Ljava/time/zone/ZoneOffsetTransition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "createTransition\0", "(I)Ljava/time/zone/ZoneOffsetTransition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/time/zone/ZoneOffsetTransitionRule.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/zone/ZoneOffsetTransitionRule", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/zone/ZoneOffsetTransitionRule\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
