// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-time-LocalTime"))]
__jni_bindgen! {
    /// public final class [LocalTime](https://developer.android.com/reference/java/time/LocalTime.html)
    ///
    /// Required feature: java-time-LocalTime
    public final class LocalTime ("java/time/LocalTime") extends crate::java::lang::Object, implements crate::java::time::temporal::Temporal, crate::java::time::temporal::TemporalAdjuster, crate::java::lang::Comparable, crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [LocalTime](https://developer.android.com/reference/java/time/LocalTime.html#LocalTime(int,%20int,%20int,%20int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::time::LocalTime>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/LocalTime", java.flags == (empty), .name == "<init>", .descriptor == "(IIII)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "<init>\0", "(IIII)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [now](https://developer.android.com/reference/java/time/LocalTime.html#now())
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn now<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "now", .descriptor == "()Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "now\0", "()Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [now](https://developer.android.com/reference/java/time/LocalTime.html#now(java.time.ZoneId))
        ///
        /// Required features: "java-time-LocalTime", "java-time-ZoneId"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime", feature = "java-time-ZoneId")))]
        pub fn now_ZoneId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "now", .descriptor == "(Ljava/time/ZoneId;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "now\0", "(Ljava/time/ZoneId;)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [now](https://developer.android.com/reference/java/time/LocalTime.html#now(java.time.Clock))
        ///
        /// Required features: "java-time-Clock", "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-Clock", feature = "java-time-LocalTime")))]
        pub fn now_Clock<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::Clock>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "now", .descriptor == "(Ljava/time/Clock;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "now\0", "(Ljava/time/Clock;)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/time/LocalTime.html#of(int,%20int))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn of_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(II)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "of\0", "(II)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/time/LocalTime.html#of(int,%20int,%20int))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn of_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(III)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "of\0", "(III)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/time/LocalTime.html#of(int,%20int,%20int,%20int))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn of_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(IIII)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "of\0", "(IIII)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofSecondOfDay](https://developer.android.com/reference/java/time/LocalTime.html#ofSecondOfDay(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn ofSecondOfDay<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "ofSecondOfDay", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "ofSecondOfDay\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofNanoOfDay](https://developer.android.com/reference/java/time/LocalTime.html#ofNanoOfDay(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn ofNanoOfDay<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "ofNanoOfDay", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "ofNanoOfDay\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [from](https://developer.android.com/reference/java/time/LocalTime.html#from(java.time.temporal.TemporalAccessor))
        ///
        /// Required features: "java-time-LocalTime", "java-time-temporal-TemporalAccessor"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime", feature = "java-time-temporal-TemporalAccessor")))]
        pub fn from<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAccessor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "from", .descriptor == "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "from\0", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/time/LocalTime.html#parse(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-time-LocalTime")))]
        pub fn parse_CharSequence<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "parse", .descriptor == "(Ljava/lang/CharSequence;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "parse\0", "(Ljava/lang/CharSequence;)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/time/LocalTime.html#parse(java.lang.CharSequence,%20java.time.format.DateTimeFormatter))
        ///
        /// Required features: "java-lang-CharSequence", "java-time-LocalTime", "java-time-format-DateTimeFormatter"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-time-LocalTime", feature = "java-time-format-DateTimeFormatter")))]
        pub fn parse_CharSequence_DateTimeFormatter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::DateTimeFormatter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC | STATIC, .name == "parse", .descriptor == "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/time/LocalTime\0", "parse\0", "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/LocalTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSupported](https://developer.android.com/reference/java/time/LocalTime.html#isSupported(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn isSupported_TemporalField<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "isSupported", .descriptor == "(Ljava/time/temporal/TemporalField;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "isSupported\0", "(Ljava/time/temporal/TemporalField;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSupported](https://developer.android.com/reference/java/time/LocalTime.html#isSupported(java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalUnit")))]
        pub fn isSupported_TemporalUnit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "isSupported", .descriptor == "(Ljava/time/temporal/TemporalUnit;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "isSupported\0", "(Ljava/time/temporal/TemporalUnit;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [range](https://developer.android.com/reference/java/time/LocalTime.html#range(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField", "java-time-temporal-ValueRange"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField", feature = "java-time-temporal-ValueRange")))]
        pub fn range<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::ValueRange>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "range", .descriptor == "(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "range\0", "(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/time/LocalTime.html#get(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn get<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "get", .descriptor == "(Ljava/time/temporal/TemporalField;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "get\0", "(Ljava/time/temporal/TemporalField;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/java/time/LocalTime.html#getLong(java.time.temporal.TemporalField))
        ///
        /// Required features: "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-TemporalField")))]
        pub fn getLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "getLong", .descriptor == "(Ljava/time/temporal/TemporalField;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "getLong\0", "(Ljava/time/temporal/TemporalField;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHour](https://developer.android.com/reference/java/time/LocalTime.html#getHour())
        pub fn getHour<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "getHour", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "getHour\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinute](https://developer.android.com/reference/java/time/LocalTime.html#getMinute())
        pub fn getMinute<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "getMinute", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "getMinute\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSecond](https://developer.android.com/reference/java/time/LocalTime.html#getSecond())
        pub fn getSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "getSecond", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "getSecond\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNano](https://developer.android.com/reference/java/time/LocalTime.html#getNano())
        pub fn getNano<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "getNano", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "getNano\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [with](https://developer.android.com/reference/java/time/LocalTime.html#with(java.time.temporal.TemporalAdjuster))
        ///
        /// Required features: "java-time-LocalTime", "java-time-temporal-TemporalAdjuster"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime", feature = "java-time-temporal-TemporalAdjuster")))]
        pub fn with_TemporalAdjuster<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAdjuster>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "with\0", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [with](https://developer.android.com/reference/java/time/LocalTime.html#with(java.time.temporal.TemporalField,%20long))
        ///
        /// Required features: "java-time-LocalTime", "java-time-temporal-TemporalField"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime", feature = "java-time-temporal-TemporalField")))]
        pub fn with_TemporalField_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalField;J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "with\0", "(Ljava/time/temporal/TemporalField;J)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withHour](https://developer.android.com/reference/java/time/LocalTime.html#withHour(int))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn withHour<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "withHour", .descriptor == "(I)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "withHour\0", "(I)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withMinute](https://developer.android.com/reference/java/time/LocalTime.html#withMinute(int))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn withMinute<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "withMinute", .descriptor == "(I)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "withMinute\0", "(I)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withSecond](https://developer.android.com/reference/java/time/LocalTime.html#withSecond(int))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn withSecond<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "withSecond", .descriptor == "(I)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "withSecond\0", "(I)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withNano](https://developer.android.com/reference/java/time/LocalTime.html#withNano(int))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn withNano<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "withNano", .descriptor == "(I)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "withNano\0", "(I)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [truncatedTo](https://developer.android.com/reference/java/time/LocalTime.html#truncatedTo(java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-LocalTime", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime", feature = "java-time-temporal-TemporalUnit")))]
        pub fn truncatedTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "truncatedTo", .descriptor == "(Ljava/time/temporal/TemporalUnit;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "truncatedTo\0", "(Ljava/time/temporal/TemporalUnit;)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/java/time/LocalTime.html#plus(java.time.temporal.TemporalAmount))
        ///
        /// Required features: "java-time-LocalTime", "java-time-temporal-TemporalAmount"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime", feature = "java-time-temporal-TemporalAmount")))]
        pub fn plus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "plus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "plus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/java/time/LocalTime.html#plus(long,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-LocalTime", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime", feature = "java-time-temporal-TemporalUnit")))]
        pub fn plus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "plus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "plus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plusHours](https://developer.android.com/reference/java/time/LocalTime.html#plusHours(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn plusHours<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "plusHours", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "plusHours\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plusMinutes](https://developer.android.com/reference/java/time/LocalTime.html#plusMinutes(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn plusMinutes<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "plusMinutes", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "plusMinutes\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plusSeconds](https://developer.android.com/reference/java/time/LocalTime.html#plusSeconds(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn plusSeconds<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "plusSeconds", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "plusSeconds\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plusNanos](https://developer.android.com/reference/java/time/LocalTime.html#plusNanos(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn plusNanos<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "plusNanos", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "plusNanos\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minus](https://developer.android.com/reference/java/time/LocalTime.html#minus(java.time.temporal.TemporalAmount))
        ///
        /// Required features: "java-time-LocalTime", "java-time-temporal-TemporalAmount"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime", feature = "java-time-temporal-TemporalAmount")))]
        pub fn minus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "minus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "minus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minus](https://developer.android.com/reference/java/time/LocalTime.html#minus(long,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-LocalTime", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime", feature = "java-time-temporal-TemporalUnit")))]
        pub fn minus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "minus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "minus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minusHours](https://developer.android.com/reference/java/time/LocalTime.html#minusHours(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn minusHours<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "minusHours", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "minusHours\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minusMinutes](https://developer.android.com/reference/java/time/LocalTime.html#minusMinutes(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn minusMinutes<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "minusMinutes", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "minusMinutes\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minusSeconds](https://developer.android.com/reference/java/time/LocalTime.html#minusSeconds(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn minusSeconds<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "minusSeconds", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "minusSeconds\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [minusNanos](https://developer.android.com/reference/java/time/LocalTime.html#minusNanos(long))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn minusNanos<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "minusNanos", .descriptor == "(J)Ljava/time/LocalTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "minusNanos\0", "(J)Ljava/time/LocalTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/java/time/LocalTime.html#query(java.time.temporal.TemporalQuery))
        ///
        /// Required features: "java-lang-Object", "java-time-temporal-TemporalQuery"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-time-temporal-TemporalQuery")))]
        pub fn query<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalQuery>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "query", .descriptor == "(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "query\0", "(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adjustInto](https://developer.android.com/reference/java/time/LocalTime.html#adjustInto(java.time.temporal.Temporal))
        ///
        /// Required features: "java-time-temporal-Temporal"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal")))]
        pub fn adjustInto<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::Temporal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "adjustInto", .descriptor == "(Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "adjustInto\0", "(Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [until](https://developer.android.com/reference/java/time/LocalTime.html#until(java.time.temporal.Temporal,%20java.time.temporal.TemporalUnit))
        ///
        /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        pub fn until<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::Temporal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "until", .descriptor == "(Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "until\0", "(Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/java/time/LocalTime.html#format(java.time.format.DateTimeFormatter))
        ///
        /// Required features: "java-lang-String", "java-time-format-DateTimeFormatter"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-time-format-DateTimeFormatter")))]
        pub fn format<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::format::DateTimeFormatter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "format", .descriptor == "(Ljava/time/format/DateTimeFormatter;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "format\0", "(Ljava/time/format/DateTimeFormatter;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [atDate](https://developer.android.com/reference/java/time/LocalTime.html#atDate(java.time.LocalDate))
        ///
        /// Required features: "java-time-LocalDate", "java-time-LocalDateTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalDate", feature = "java-time-LocalDateTime")))]
        pub fn atDate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalDate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalDateTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "atDate", .descriptor == "(Ljava/time/LocalDate;)Ljava/time/LocalDateTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "atDate\0", "(Ljava/time/LocalDate;)Ljava/time/LocalDateTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [atOffset](https://developer.android.com/reference/java/time/LocalTime.html#atOffset(java.time.ZoneOffset))
        ///
        /// Required features: "java-time-OffsetTime", "java-time-ZoneOffset"
        #[cfg(any(feature = "all", all(feature = "java-time-OffsetTime", feature = "java-time-ZoneOffset")))]
        pub fn atOffset<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::ZoneOffset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::OffsetTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "atOffset", .descriptor == "(Ljava/time/ZoneOffset;)Ljava/time/OffsetTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "atOffset\0", "(Ljava/time/ZoneOffset;)Ljava/time/OffsetTime;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toSecondOfDay](https://developer.android.com/reference/java/time/LocalTime.html#toSecondOfDay())
        pub fn toSecondOfDay<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "toSecondOfDay", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "toSecondOfDay\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toNanoOfDay](https://developer.android.com/reference/java/time/LocalTime.html#toNanoOfDay())
        pub fn toNanoOfDay<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "toNanoOfDay", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "toNanoOfDay\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/java/time/LocalTime.html#compareTo(java.time.LocalTime))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn compareTo_LocalTime<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalTime>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/time/LocalTime;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "compareTo\0", "(Ljava/time/LocalTime;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAfter](https://developer.android.com/reference/java/time/LocalTime.html#isAfter(java.time.LocalTime))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn isAfter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalTime>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "isAfter", .descriptor == "(Ljava/time/LocalTime;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "isAfter\0", "(Ljava/time/LocalTime;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBefore](https://developer.android.com/reference/java/time/LocalTime.html#isBefore(java.time.LocalTime))
        ///
        /// Required features: "java-time-LocalTime"
        #[cfg(any(feature = "all", all(feature = "java-time-LocalTime")))]
        pub fn isBefore<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::LocalTime>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "isBefore", .descriptor == "(Ljava/time/LocalTime;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "isBefore\0", "(Ljava/time/LocalTime;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/time/LocalTime.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/time/LocalTime.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/time/LocalTime.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/time/LocalTime", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [minus](https://developer.android.com/reference/java/time/LocalTime.html#minus(long,%20java.time.temporal.TemporalUnit))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        // pub fn minus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/LocalTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "minus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "minus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [minus](https://developer.android.com/reference/java/time/LocalTime.html#minus(java.time.temporal.TemporalAmount))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAmount"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAmount")))]
        // pub fn minus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/LocalTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "minus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "minus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [plus](https://developer.android.com/reference/java/time/LocalTime.html#plus(long,%20java.time.temporal.TemporalUnit))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalUnit"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalUnit")))]
        // pub fn plus_long_TemporalUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/LocalTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "plus", .descriptor == "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "plus\0", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [plus](https://developer.android.com/reference/java/time/LocalTime.html#plus(java.time.temporal.TemporalAmount))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAmount"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAmount")))]
        // pub fn plus_TemporalAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/LocalTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "plus", .descriptor == "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "plus\0", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [with](https://developer.android.com/reference/java/time/LocalTime.html#with(java.time.temporal.TemporalField,%20long))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalField"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalField")))]
        // pub fn with_TemporalField_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalField>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/LocalTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalField;J)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "with\0", "(Ljava/time/temporal/TemporalField;J)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [with](https://developer.android.com/reference/java/time/LocalTime.html#with(java.time.temporal.TemporalAdjuster))
        // ///
        // /// Required features: "java-time-temporal-Temporal", "java-time-temporal-TemporalAdjuster"
        // #[cfg(any(feature = "all", all(feature = "java-time-temporal-Temporal", feature = "java-time-temporal-TemporalAdjuster")))]
        // pub fn with_TemporalAdjuster<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::time::temporal::TemporalAdjuster>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::temporal::Temporal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/LocalTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "with", .descriptor == "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/temporal/Temporal;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "with\0", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/temporal/Temporal;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/java/time/LocalTime.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/time/LocalTime", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/time/LocalTime\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public static final [MAX](https://developer.android.com/reference/java/time/LocalTime.html#MAX)
        ///
        /// Required feature: java-time-LocalTime
        #[cfg(any(feature = "all", feature = "java-time-LocalTime"))]
        pub fn MAX<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/LocalTime\0", "MAX\0", "Ljava/time/LocalTime;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [MIDNIGHT](https://developer.android.com/reference/java/time/LocalTime.html#MIDNIGHT)
        ///
        /// Required feature: java-time-LocalTime
        #[cfg(any(feature = "all", feature = "java-time-LocalTime"))]
        pub fn MIDNIGHT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/LocalTime\0", "MIDNIGHT\0", "Ljava/time/LocalTime;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [MIN](https://developer.android.com/reference/java/time/LocalTime.html#MIN)
        ///
        /// Required feature: java-time-LocalTime
        #[cfg(any(feature = "all", feature = "java-time-LocalTime"))]
        pub fn MIN<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/LocalTime\0", "MIN\0", "Ljava/time/LocalTime;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [NOON](https://developer.android.com/reference/java/time/LocalTime.html#NOON)
        ///
        /// Required feature: java-time-LocalTime
        #[cfg(any(feature = "all", feature = "java-time-LocalTime"))]
        pub fn NOON<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::LocalTime>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/time/LocalTime\0", "NOON\0", "Ljava/time/LocalTime;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
