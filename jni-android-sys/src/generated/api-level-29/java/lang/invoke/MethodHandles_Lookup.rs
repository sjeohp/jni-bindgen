// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-invoke-MethodHandles_Lookup"))]
__jni_bindgen! {
    /// public final class [MethodHandles.Lookup](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html)
    ///
    /// Required feature: java-lang-invoke-MethodHandles_Lookup
    public final class MethodHandles_Lookup ("java/lang/invoke/MethodHandles$Lookup") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Lookup](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#Lookup(java.lang.Class))
        // ///
        // /// Required features: "java-lang-Class"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandles_Lookup>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/Class;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "<init>\0", "(Ljava/lang/Class;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [lookupClass](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#lookupClass())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn lookupClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "lookupClass", .descriptor == "()Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "lookupClass\0", "()Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lookupModes](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#lookupModes())
        pub fn lookupModes<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "lookupModes", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "lookupModes\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [in](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#in(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandles_Lookup"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandles_Lookup")))]
        pub fn r#in<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandles_Lookup>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "in", .descriptor == "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandles$Lookup;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "in\0", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandles$Lookup;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findStatic](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#findStatic(java.lang.Class,%20java.lang.String,%20java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn findStatic<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "findStatic", .descriptor == "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "findStatic\0", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findVirtual](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#findVirtual(java.lang.Class,%20java.lang.String,%20java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn findVirtual<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "findVirtual", .descriptor == "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "findVirtual\0", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findConstructor](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#findConstructor(java.lang.Class,%20java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn findConstructor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "findConstructor", .descriptor == "(Ljava/lang/Class;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "findConstructor\0", "(Ljava/lang/Class;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findSpecial](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#findSpecial(java.lang.Class,%20java.lang.String,%20java.lang.invoke.MethodType,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn findSpecial<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "findSpecial", .descriptor == "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "findSpecial\0", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findGetter](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#findGetter(java.lang.Class,%20java.lang.String,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-invoke-MethodHandle")))]
        pub fn findGetter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "findGetter", .descriptor == "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "findGetter\0", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findSetter](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#findSetter(java.lang.Class,%20java.lang.String,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-invoke-MethodHandle")))]
        pub fn findSetter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "findSetter", .descriptor == "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "findSetter\0", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findStaticGetter](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#findStaticGetter(java.lang.Class,%20java.lang.String,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-invoke-MethodHandle")))]
        pub fn findStaticGetter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "findStaticGetter", .descriptor == "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "findStaticGetter\0", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findStaticSetter](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#findStaticSetter(java.lang.Class,%20java.lang.String,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-invoke-MethodHandle")))]
        pub fn findStaticSetter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "findStaticSetter", .descriptor == "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "findStaticSetter\0", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bind](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#bind(java.lang.Object,%20java.lang.String,%20java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn bind<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "bind", .descriptor == "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "bind\0", "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unreflect](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#unreflect(java.lang.reflect.Method))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-reflect-Method"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-reflect-Method")))]
        pub fn unreflect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::reflect::Method>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "unreflect", .descriptor == "(Ljava/lang/reflect/Method;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "unreflect\0", "(Ljava/lang/reflect/Method;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unreflectSpecial](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#unreflectSpecial(java.lang.reflect.Method,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle", "java-lang-reflect-Method"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle", feature = "java-lang-reflect-Method")))]
        pub fn unreflectSpecial<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::reflect::Method>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "unreflectSpecial", .descriptor == "(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "unreflectSpecial\0", "(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unreflectConstructor](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#unreflectConstructor(java.lang.reflect.Constructor))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-reflect-Constructor"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-reflect-Constructor")))]
        pub fn unreflectConstructor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::reflect::Constructor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "unreflectConstructor", .descriptor == "(Ljava/lang/reflect/Constructor;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "unreflectConstructor\0", "(Ljava/lang/reflect/Constructor;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unreflectGetter](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#unreflectGetter(java.lang.reflect.Field))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-reflect-Field"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-reflect-Field")))]
        pub fn unreflectGetter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::reflect::Field>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "unreflectGetter", .descriptor == "(Ljava/lang/reflect/Field;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "unreflectGetter\0", "(Ljava/lang/reflect/Field;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unreflectSetter](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#unreflectSetter(java.lang.reflect.Field))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-reflect-Field"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-reflect-Field")))]
        pub fn unreflectSetter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::reflect::Field>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "unreflectSetter", .descriptor == "(Ljava/lang/reflect/Field;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "unreflectSetter\0", "(Ljava/lang/reflect/Field;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [revealDirect](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#revealDirect(java.lang.invoke.MethodHandle))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodHandleInfo"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodHandleInfo")))]
        pub fn revealDirect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandleInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles$Lookup", java.flags == PUBLIC, .name == "revealDirect", .descriptor == "(Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandleInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles$Lookup\0", "revealDirect\0", "(Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandleInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [PACKAGE](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#PACKAGE)
        pub const PACKAGE : i32 = 8;

        /// public static final [PRIVATE](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#PRIVATE)
        pub const PRIVATE : i32 = 2;

        /// public static final [PROTECTED](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#PROTECTED)
        pub const PROTECTED : i32 = 4;

        /// public static final [PUBLIC](https://developer.android.com/reference/java/lang/invoke/MethodHandles.Lookup.html#PUBLIC)
        pub const PUBLIC : i32 = 1;
    }
}
