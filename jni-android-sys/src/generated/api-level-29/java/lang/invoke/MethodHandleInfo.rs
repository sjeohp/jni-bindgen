// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-invoke-MethodHandleInfo"))]
__jni_bindgen! {
    /// public interface [MethodHandleInfo](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html)
    ///
    /// Required feature: java-lang-invoke-MethodHandleInfo
    public interface MethodHandleInfo ("java/lang/invoke/MethodHandleInfo") extends crate::java::lang::Object {

        /// [getReferenceKind](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#getReferenceKind())
        pub fn getReferenceKind<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | ABSTRACT, .name == "getReferenceKind", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandleInfo\0", "getReferenceKind\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaringClass](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#getDeclaringClass())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn getDeclaringClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | ABSTRACT, .name == "getDeclaringClass", .descriptor == "()Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandleInfo\0", "getDeclaringClass\0", "()Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | ABSTRACT, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandleInfo\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMethodType](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#getMethodType())
        ///
        /// Required features: "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        pub fn getMethodType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | ABSTRACT, .name == "getMethodType", .descriptor == "()Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandleInfo\0", "getMethodType\0", "()Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reflectAs](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#reflectAs(java.lang.Class,%20java.lang.invoke.MethodHandles.Lookup))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandles_Lookup", "java-lang-reflect-Member"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandles_Lookup", feature = "java-lang-reflect-Member")))]
        pub fn reflectAs<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandles_Lookup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Member>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | ABSTRACT, .name == "reflectAs", .descriptor == "(Ljava/lang/Class;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/reflect/Member;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandleInfo\0", "reflectAs\0", "(Ljava/lang/Class;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/reflect/Member;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getModifiers](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#getModifiers())
        pub fn getModifiers<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | ABSTRACT, .name == "getModifiers", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandleInfo\0", "getModifiers\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVarArgs](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#isVarArgs())
        pub fn isVarArgs<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC, .name == "isVarArgs", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandleInfo\0", "isVarArgs\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [referenceKindToString](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#referenceKindToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn referenceKindToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | STATIC, .name == "referenceKindToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandleInfo\0", "referenceKindToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#toString(int,%20java.lang.Class,%20java.lang.String,%20java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-invoke-MethodType")))]
        pub fn toString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | STATIC, .name == "toString", .descriptor == "(ILjava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandleInfo\0", "toString\0", "(ILjava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [refKindIsValid](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#refKindIsValid(int))
        #[deprecated] pub fn refKindIsValid<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | STATIC, .name == "refKindIsValid", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandleInfo\0", "refKindIsValid\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [refKindIsField](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#refKindIsField(int))
        #[deprecated] pub fn refKindIsField<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | STATIC, .name == "refKindIsField", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandleInfo\0", "refKindIsField\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [refKindName](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#refKindName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn refKindName<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandleInfo", java.flags == PUBLIC | STATIC, .name == "refKindName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandleInfo\0", "refKindName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [REF_getField](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#REF_getField)
        pub const REF_getField : i32 = 1;

        /// public static final [REF_getStatic](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#REF_getStatic)
        pub const REF_getStatic : i32 = 2;

        /// public static final [REF_invokeInterface](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#REF_invokeInterface)
        pub const REF_invokeInterface : i32 = 9;

        /// public static final [REF_invokeSpecial](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#REF_invokeSpecial)
        pub const REF_invokeSpecial : i32 = 7;

        /// public static final [REF_invokeStatic](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#REF_invokeStatic)
        pub const REF_invokeStatic : i32 = 6;

        /// public static final [REF_invokeVirtual](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#REF_invokeVirtual)
        pub const REF_invokeVirtual : i32 = 5;

        /// public static final [REF_newInvokeSpecial](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#REF_newInvokeSpecial)
        pub const REF_newInvokeSpecial : i32 = 8;

        /// public static final [REF_putField](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#REF_putField)
        pub const REF_putField : i32 = 3;

        /// public static final [REF_putStatic](https://developer.android.com/reference/java/lang/invoke/MethodHandleInfo.html#REF_putStatic)
        pub const REF_putStatic : i32 = 4;
    }
}
