// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-invoke-MethodType"))]
__jni_bindgen! {
    /// public final class [MethodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html)
    ///
    /// Required feature: java-lang-invoke-MethodType
    public final class MethodType ("java/lang/invoke/MethodType") extends crate::java::lang::Object, implements crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [MethodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#MethodType())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/invoke/MethodType", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [methodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#methodType(java.lang.Class,%20java.lang.Class%5B%5D))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType")))]
        pub fn methodType_Class_Class_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | STATIC, .name == "methodType", .descriptor == "(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodType\0", "methodType\0", "(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [methodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#methodType(java.lang.Class,%20java.util.List))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType", feature = "java-util-List")))]
        pub fn methodType_Class_List<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | STATIC, .name == "methodType", .descriptor == "(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodType\0", "methodType\0", "(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [methodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#methodType(java.lang.Class,%20java.lang.Class,%20java.lang.Class...))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType")))]
        pub fn methodType_Class_Class_Class_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | STATIC | VARARGS, .name == "methodType", .descriptor == "(Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodType\0", "methodType\0", "(Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [methodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#methodType(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType")))]
        pub fn methodType_Class<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | STATIC, .name == "methodType", .descriptor == "(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodType\0", "methodType\0", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [methodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#methodType(java.lang.Class,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType")))]
        pub fn methodType_Class_Class<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | STATIC, .name == "methodType", .descriptor == "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodType\0", "methodType\0", "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [methodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#methodType(java.lang.Class,%20java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType")))]
        pub fn methodType_Class_MethodType<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | STATIC, .name == "methodType", .descriptor == "(Ljava/lang/Class;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodType\0", "methodType\0", "(Ljava/lang/Class;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [genericMethodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#genericMethodType(int,%20boolean))
        ///
        /// Required features: "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        pub fn genericMethodType_int_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | STATIC, .name == "genericMethodType", .descriptor == "(IZ)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodType\0", "genericMethodType\0", "(IZ)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [genericMethodType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#genericMethodType(int))
        ///
        /// Required features: "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        pub fn genericMethodType_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | STATIC, .name == "genericMethodType", .descriptor == "(I)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodType\0", "genericMethodType\0", "(I)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [changeParameterType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#changeParameterType(int,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType")))]
        pub fn changeParameterType<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "changeParameterType", .descriptor == "(ILjava/lang/Class;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "changeParameterType\0", "(ILjava/lang/Class;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [insertParameterTypes](https://developer.android.com/reference/java/lang/invoke/MethodType.html#insertParameterTypes(int,%20java.lang.Class...))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType")))]
        pub fn insertParameterTypes_int_Class_array<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | VARARGS, .name == "insertParameterTypes", .descriptor == "(I[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "insertParameterTypes\0", "(I[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendParameterTypes](https://developer.android.com/reference/java/lang/invoke/MethodType.html#appendParameterTypes(java.lang.Class...))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType")))]
        pub fn appendParameterTypes_Class_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | VARARGS, .name == "appendParameterTypes", .descriptor == "([Ljava/lang/Class;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "appendParameterTypes\0", "([Ljava/lang/Class;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [insertParameterTypes](https://developer.android.com/reference/java/lang/invoke/MethodType.html#insertParameterTypes(int,%20java.util.List))
        ///
        /// Required features: "java-lang-invoke-MethodType", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType", feature = "java-util-List")))]
        pub fn insertParameterTypes_int_List<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "insertParameterTypes", .descriptor == "(ILjava/util/List;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "insertParameterTypes\0", "(ILjava/util/List;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendParameterTypes](https://developer.android.com/reference/java/lang/invoke/MethodType.html#appendParameterTypes(java.util.List))
        ///
        /// Required features: "java-lang-invoke-MethodType", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType", feature = "java-util-List")))]
        pub fn appendParameterTypes_List<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "appendParameterTypes", .descriptor == "(Ljava/util/List;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "appendParameterTypes\0", "(Ljava/util/List;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dropParameterTypes](https://developer.android.com/reference/java/lang/invoke/MethodType.html#dropParameterTypes(int,%20int))
        ///
        /// Required features: "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        pub fn dropParameterTypes<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "dropParameterTypes", .descriptor == "(II)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "dropParameterTypes\0", "(II)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [changeReturnType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#changeReturnType(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodType")))]
        pub fn changeReturnType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "changeReturnType", .descriptor == "(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "changeReturnType\0", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasPrimitives](https://developer.android.com/reference/java/lang/invoke/MethodType.html#hasPrimitives())
        pub fn hasPrimitives<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "hasPrimitives", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "hasPrimitives\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasWrappers](https://developer.android.com/reference/java/lang/invoke/MethodType.html#hasWrappers())
        pub fn hasWrappers<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "hasWrappers", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "hasWrappers\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [erase](https://developer.android.com/reference/java/lang/invoke/MethodType.html#erase())
        ///
        /// Required features: "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        pub fn erase<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "erase", .descriptor == "()Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "erase\0", "()Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generic](https://developer.android.com/reference/java/lang/invoke/MethodType.html#generic())
        ///
        /// Required features: "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        pub fn generic<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "generic", .descriptor == "()Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "generic\0", "()Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [wrap](https://developer.android.com/reference/java/lang/invoke/MethodType.html#wrap())
        ///
        /// Required features: "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        pub fn wrap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "wrap", .descriptor == "()Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "wrap\0", "()Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unwrap](https://developer.android.com/reference/java/lang/invoke/MethodType.html#unwrap())
        ///
        /// Required features: "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        pub fn unwrap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "unwrap", .descriptor == "()Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "unwrap\0", "()Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parameterType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#parameterType(int))
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn parameterType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "parameterType", .descriptor == "(I)Ljava/lang/Class;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "parameterType\0", "(I)Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parameterCount](https://developer.android.com/reference/java/lang/invoke/MethodType.html#parameterCount())
        pub fn parameterCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "parameterCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "parameterCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [returnType](https://developer.android.com/reference/java/lang/invoke/MethodType.html#returnType())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn returnType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "returnType", .descriptor == "()Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "returnType\0", "()Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parameterList](https://developer.android.com/reference/java/lang/invoke/MethodType.html#parameterList())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn parameterList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "parameterList", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "parameterList\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parameterArray](https://developer.android.com/reference/java/lang/invoke/MethodType.html#parameterArray())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn parameterArray<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "parameterArray", .descriptor == "()[Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "parameterArray\0", "()[Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/lang/invoke/MethodType.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/lang/invoke/MethodType.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/lang/invoke/MethodType.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromMethodDescriptorString](https://developer.android.com/reference/java/lang/invoke/MethodType.html#fromMethodDescriptorString(java.lang.String,%20java.lang.ClassLoader))
        ///
        /// Required features: "java-lang-ClassLoader", "java-lang-String", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader", feature = "java-lang-String", feature = "java-lang-invoke-MethodType")))]
        pub fn fromMethodDescriptorString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC | STATIC, .name == "fromMethodDescriptorString", .descriptor == "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodType\0", "fromMethodDescriptorString\0", "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toMethodDescriptorString](https://developer.android.com/reference/java/lang/invoke/MethodType.html#toMethodDescriptorString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toMethodDescriptorString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodType", java.flags == PUBLIC, .name == "toMethodDescriptorString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodType\0", "toMethodDescriptorString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
