// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-invoke-MethodHandle"))]
__jni_bindgen! {
    /// public class [MethodHandle](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html)
    ///
    /// Required feature: java-lang-invoke-MethodHandle
    public class MethodHandle ("java/lang/invoke/MethodHandle") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [MethodHandle](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#MethodHandle(long,%20int,%20java.lang.invoke.MethodType))
        // ///
        // /// Required features: "java-lang-invoke-MethodType"
        // #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/invoke/MethodHandle", java.flags == (empty), .name == "<init>", .descriptor == "(JILjava/lang/invoke/MethodType;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "<init>\0", "(JILjava/lang/invoke/MethodType;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [type](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#type())
        ///
        /// Required features: "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodType")))]
        pub fn r#type<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "type", .descriptor == "()Ljava/lang/invoke/MethodType;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "type\0", "()Ljava/lang/invoke/MethodType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeExact](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#invokeExact(java.lang.Object...))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn invokeExact<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC | FINAL | VARARGS | NATIVE, .name == "invokeExact", .descriptor == "([Ljava/lang/Object;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "invokeExact\0", "([Ljava/lang/Object;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invoke](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#invoke(java.lang.Object...))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn invoke<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC | FINAL | VARARGS | NATIVE, .name == "invoke", .descriptor == "([Ljava/lang/Object;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "invoke\0", "([Ljava/lang/Object;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeWithArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#invokeWithArguments(java.lang.Object...))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn invokeWithArguments_Object_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC | VARARGS, .name == "invokeWithArguments", .descriptor == "([Ljava/lang/Object;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "invokeWithArguments\0", "([Ljava/lang/Object;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeWithArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#invokeWithArguments(java.util.List))
        ///
        /// Required features: "java-lang-Object", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-List")))]
        pub fn invokeWithArguments_List<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "invokeWithArguments", .descriptor == "(Ljava/util/List;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "invokeWithArguments\0", "(Ljava/util/List;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asType](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#asType(java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn asType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "asType", .descriptor == "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "asType\0", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asSpreader](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#asSpreader(java.lang.Class,%20int))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle")))]
        pub fn asSpreader<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "asSpreader", .descriptor == "(Ljava/lang/Class;I)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "asSpreader\0", "(Ljava/lang/Class;I)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asCollector](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#asCollector(java.lang.Class,%20int))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle")))]
        pub fn asCollector<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "asCollector", .descriptor == "(Ljava/lang/Class;I)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "asCollector\0", "(Ljava/lang/Class;I)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asVarargsCollector](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#asVarargsCollector(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle")))]
        pub fn asVarargsCollector<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "asVarargsCollector", .descriptor == "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "asVarargsCollector\0", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVarargsCollector](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#isVarargsCollector())
        pub fn isVarargsCollector<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "isVarargsCollector", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "isVarargsCollector\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asFixedArity](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#asFixedArity())
        ///
        /// Required features: "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle")))]
        pub fn asFixedArity<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "asFixedArity", .descriptor == "()Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "asFixedArity\0", "()Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindTo](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#bindTo(java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-invoke-MethodHandle")))]
        pub fn bindTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "bindTo", .descriptor == "(Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "bindTo\0", "(Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/lang/invoke/MethodHandle.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandle", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandle\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
