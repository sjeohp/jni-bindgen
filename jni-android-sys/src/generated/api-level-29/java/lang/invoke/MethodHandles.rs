// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-invoke-MethodHandles"))]
__jni_bindgen! {
    /// public class [MethodHandles](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html)
    ///
    /// Required feature: java-lang-invoke-MethodHandles
    public class MethodHandles ("java/lang/invoke/MethodHandles") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [MethodHandles](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#MethodHandles())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandles>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/invoke/MethodHandles", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/invoke/MethodHandles\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [lookup](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#lookup())
        ///
        /// Required features: "java-lang-invoke-MethodHandles_Lookup"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandles_Lookup")))]
        pub fn lookup<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandles_Lookup>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "lookup", .descriptor == "()Ljava/lang/invoke/MethodHandles$Lookup;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "lookup\0", "()Ljava/lang/invoke/MethodHandles$Lookup;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [publicLookup](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#publicLookup())
        ///
        /// Required features: "java-lang-invoke-MethodHandles_Lookup"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandles_Lookup")))]
        pub fn publicLookup<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandles_Lookup>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "publicLookup", .descriptor == "()Ljava/lang/invoke/MethodHandles$Lookup;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "publicLookup\0", "()Ljava/lang/invoke/MethodHandles$Lookup;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reflectAs](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#reflectAs(java.lang.Class,%20java.lang.invoke.MethodHandle))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle", "java-lang-reflect-Member"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle", feature = "java-lang-reflect-Member")))]
        pub fn reflectAs<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Member>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "reflectAs", .descriptor == "(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;)Ljava/lang/reflect/Member;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "reflectAs\0", "(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;)Ljava/lang/reflect/Member;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [arrayElementGetter](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#arrayElementGetter(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle")))]
        pub fn arrayElementGetter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "arrayElementGetter", .descriptor == "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "arrayElementGetter\0", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [arrayElementSetter](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#arrayElementSetter(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle")))]
        pub fn arrayElementSetter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "arrayElementSetter", .descriptor == "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "arrayElementSetter\0", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spreadInvoker](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#spreadInvoker(java.lang.invoke.MethodType,%20int))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn spreadInvoker<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "spreadInvoker", .descriptor == "(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "spreadInvoker\0", "(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [exactInvoker](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#exactInvoker(java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn exactInvoker<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "exactInvoker", .descriptor == "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "exactInvoker\0", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invoker](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#invoker(java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn invoker<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "invoker", .descriptor == "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "invoker\0", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [explicitCastArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#explicitCastArguments(java.lang.invoke.MethodHandle,%20java.lang.invoke.MethodType))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn explicitCastArguments<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "explicitCastArguments", .descriptor == "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "explicitCastArguments\0", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permuteArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#permuteArguments(java.lang.invoke.MethodHandle,%20java.lang.invoke.MethodType,%20int...))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-lang-invoke-MethodType"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-lang-invoke-MethodType")))]
        pub fn permuteArguments<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodType>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC | VARARGS, .name == "permuteArguments", .descriptor == "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;[I)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "permuteArguments\0", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;[I)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [constant](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#constant(java.lang.Class,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Class", "java-lang-Object", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-Object", feature = "java-lang-invoke-MethodHandle")))]
        pub fn constant<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "constant", .descriptor == "(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "constant\0", "(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [identity](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#identity(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle")))]
        pub fn identity<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "identity", .descriptor == "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "identity\0", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [insertArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#insertArguments(java.lang.invoke.MethodHandle,%20int,%20java.lang.Object...))
        ///
        /// Required features: "java-lang-Object", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-invoke-MethodHandle")))]
        pub fn insertArguments<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC | VARARGS, .name == "insertArguments", .descriptor == "(Ljava/lang/invoke/MethodHandle;I[Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "insertArguments\0", "(Ljava/lang/invoke/MethodHandle;I[Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dropArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#dropArguments(java.lang.invoke.MethodHandle,%20int,%20java.util.List))
        ///
        /// Required features: "java-lang-invoke-MethodHandle", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle", feature = "java-util-List")))]
        pub fn dropArguments_MethodHandle_int_List<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "dropArguments", .descriptor == "(Ljava/lang/invoke/MethodHandle;ILjava/util/List;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "dropArguments\0", "(Ljava/lang/invoke/MethodHandle;ILjava/util/List;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dropArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#dropArguments(java.lang.invoke.MethodHandle,%20int,%20java.lang.Class...))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle")))]
        pub fn dropArguments_MethodHandle_int_Class_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC | VARARGS, .name == "dropArguments", .descriptor == "(Ljava/lang/invoke/MethodHandle;I[Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "dropArguments\0", "(Ljava/lang/invoke/MethodHandle;I[Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [filterArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#filterArguments(java.lang.invoke.MethodHandle,%20int,%20java.lang.invoke.MethodHandle...))
        ///
        /// Required features: "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle")))]
        pub fn filterArguments<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::invoke::MethodHandle, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC | VARARGS, .name == "filterArguments", .descriptor == "(Ljava/lang/invoke/MethodHandle;I[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "filterArguments\0", "(Ljava/lang/invoke/MethodHandle;I[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [collectArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#collectArguments(java.lang.invoke.MethodHandle,%20int,%20java.lang.invoke.MethodHandle))
        ///
        /// Required features: "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle")))]
        pub fn collectArguments<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "collectArguments", .descriptor == "(Ljava/lang/invoke/MethodHandle;ILjava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "collectArguments\0", "(Ljava/lang/invoke/MethodHandle;ILjava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [filterReturnValue](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#filterReturnValue(java.lang.invoke.MethodHandle,%20java.lang.invoke.MethodHandle))
        ///
        /// Required features: "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle")))]
        pub fn filterReturnValue<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "filterReturnValue", .descriptor == "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "filterReturnValue\0", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [foldArguments](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#foldArguments(java.lang.invoke.MethodHandle,%20java.lang.invoke.MethodHandle))
        ///
        /// Required features: "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle")))]
        pub fn foldArguments<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "foldArguments", .descriptor == "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "foldArguments\0", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [guardWithTest](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#guardWithTest(java.lang.invoke.MethodHandle,%20java.lang.invoke.MethodHandle,%20java.lang.invoke.MethodHandle))
        ///
        /// Required features: "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-invoke-MethodHandle")))]
        pub fn guardWithTest<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "guardWithTest", .descriptor == "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "guardWithTest\0", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [catchException](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#catchException(java.lang.invoke.MethodHandle,%20java.lang.Class,%20java.lang.invoke.MethodHandle))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle")))]
        pub fn catchException<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::invoke::MethodHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "catchException", .descriptor == "(Ljava/lang/invoke/MethodHandle;Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "catchException\0", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [throwException](https://developer.android.com/reference/java/lang/invoke/MethodHandles.html#throwException(java.lang.Class,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-invoke-MethodHandle"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-invoke-MethodHandle")))]
        pub fn throwException<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::invoke::MethodHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/invoke/MethodHandles", java.flags == PUBLIC | STATIC, .name == "throwException", .descriptor == "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/invoke/MethodHandles\0", "throwException\0", "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
