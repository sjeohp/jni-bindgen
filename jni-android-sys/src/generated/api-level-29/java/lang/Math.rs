// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-Math"))]
__jni_bindgen! {
    /// public final class [Math](https://developer.android.com/reference/java/lang/Math.html)
    ///
    /// Required feature: java-lang-Math
    public final class Math ("java/lang/Math") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Math](https://developer.android.com/reference/java/lang/Math.html#Math())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::Math>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/Math", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Math\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [sin](https://developer.android.com/reference/java/lang/Math.html#sin(double))
        pub fn sin<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "sin", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "sin\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cos](https://developer.android.com/reference/java/lang/Math.html#cos(double))
        pub fn cos<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "cos", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "cos\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tan](https://developer.android.com/reference/java/lang/Math.html#tan(double))
        pub fn tan<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "tan", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "tan\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asin](https://developer.android.com/reference/java/lang/Math.html#asin(double))
        pub fn asin<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "asin", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "asin\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acos](https://developer.android.com/reference/java/lang/Math.html#acos(double))
        pub fn acos<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "acos", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "acos\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [atan](https://developer.android.com/reference/java/lang/Math.html#atan(double))
        pub fn atan<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "atan", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "atan\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toRadians](https://developer.android.com/reference/java/lang/Math.html#toRadians(double))
        pub fn toRadians<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "toRadians", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "toRadians\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toDegrees](https://developer.android.com/reference/java/lang/Math.html#toDegrees(double))
        pub fn toDegrees<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "toDegrees", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "toDegrees\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [exp](https://developer.android.com/reference/java/lang/Math.html#exp(double))
        pub fn exp<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "exp", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "exp\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [log](https://developer.android.com/reference/java/lang/Math.html#log(double))
        pub fn log<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "log", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "log\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [log10](https://developer.android.com/reference/java/lang/Math.html#log10(double))
        pub fn log10<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "log10", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "log10\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sqrt](https://developer.android.com/reference/java/lang/Math.html#sqrt(double))
        pub fn sqrt<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "sqrt", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "sqrt\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cbrt](https://developer.android.com/reference/java/lang/Math.html#cbrt(double))
        pub fn cbrt<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "cbrt", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "cbrt\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [IEEEremainder](https://developer.android.com/reference/java/lang/Math.html#IEEEremainder(double,%20double))
        pub fn IEEEremainder<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "IEEEremainder", .descriptor == "(DD)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "IEEEremainder\0", "(DD)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ceil](https://developer.android.com/reference/java/lang/Math.html#ceil(double))
        pub fn ceil<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "ceil", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "ceil\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [floor](https://developer.android.com/reference/java/lang/Math.html#floor(double))
        pub fn floor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "floor", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "floor\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rint](https://developer.android.com/reference/java/lang/Math.html#rint(double))
        pub fn rint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "rint", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "rint\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [atan2](https://developer.android.com/reference/java/lang/Math.html#atan2(double,%20double))
        pub fn atan2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "atan2", .descriptor == "(DD)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "atan2\0", "(DD)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pow](https://developer.android.com/reference/java/lang/Math.html#pow(double,%20double))
        pub fn pow<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "pow", .descriptor == "(DD)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "pow\0", "(DD)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [round](https://developer.android.com/reference/java/lang/Math.html#round(float))
        pub fn round_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "round", .descriptor == "(F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "round\0", "(F)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [round](https://developer.android.com/reference/java/lang/Math.html#round(double))
        pub fn round_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "round", .descriptor == "(D)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "round\0", "(D)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [random](https://developer.android.com/reference/java/lang/Math.html#random())
        pub fn random<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "random", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "random\0", "()D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addExact](https://developer.android.com/reference/java/lang/Math.html#addExact(int,%20int))
        pub fn addExact_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "addExact", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "addExact\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addExact](https://developer.android.com/reference/java/lang/Math.html#addExact(long,%20long))
        pub fn addExact_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "addExact", .descriptor == "(JJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "addExact\0", "(JJ)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subtractExact](https://developer.android.com/reference/java/lang/Math.html#subtractExact(int,%20int))
        pub fn subtractExact_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "subtractExact", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "subtractExact\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subtractExact](https://developer.android.com/reference/java/lang/Math.html#subtractExact(long,%20long))
        pub fn subtractExact_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "subtractExact", .descriptor == "(JJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "subtractExact\0", "(JJ)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [multiplyExact](https://developer.android.com/reference/java/lang/Math.html#multiplyExact(int,%20int))
        pub fn multiplyExact_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "multiplyExact", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "multiplyExact\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [multiplyExact](https://developer.android.com/reference/java/lang/Math.html#multiplyExact(long,%20long))
        pub fn multiplyExact_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "multiplyExact", .descriptor == "(JJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "multiplyExact\0", "(JJ)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [incrementExact](https://developer.android.com/reference/java/lang/Math.html#incrementExact(int))
        pub fn incrementExact_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "incrementExact", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "incrementExact\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [incrementExact](https://developer.android.com/reference/java/lang/Math.html#incrementExact(long))
        pub fn incrementExact_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "incrementExact", .descriptor == "(J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "incrementExact\0", "(J)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [decrementExact](https://developer.android.com/reference/java/lang/Math.html#decrementExact(int))
        pub fn decrementExact_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "decrementExact", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "decrementExact\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [decrementExact](https://developer.android.com/reference/java/lang/Math.html#decrementExact(long))
        pub fn decrementExact_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "decrementExact", .descriptor == "(J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "decrementExact\0", "(J)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [negateExact](https://developer.android.com/reference/java/lang/Math.html#negateExact(int))
        pub fn negateExact_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "negateExact", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "negateExact\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [negateExact](https://developer.android.com/reference/java/lang/Math.html#negateExact(long))
        pub fn negateExact_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "negateExact", .descriptor == "(J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "negateExact\0", "(J)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toIntExact](https://developer.android.com/reference/java/lang/Math.html#toIntExact(long))
        pub fn toIntExact<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "toIntExact", .descriptor == "(J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "toIntExact\0", "(J)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [floorDiv](https://developer.android.com/reference/java/lang/Math.html#floorDiv(int,%20int))
        pub fn floorDiv_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "floorDiv", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "floorDiv\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [floorDiv](https://developer.android.com/reference/java/lang/Math.html#floorDiv(long,%20long))
        pub fn floorDiv_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "floorDiv", .descriptor == "(JJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "floorDiv\0", "(JJ)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [floorMod](https://developer.android.com/reference/java/lang/Math.html#floorMod(int,%20int))
        pub fn floorMod_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "floorMod", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "floorMod\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [floorMod](https://developer.android.com/reference/java/lang/Math.html#floorMod(long,%20long))
        pub fn floorMod_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "floorMod", .descriptor == "(JJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "floorMod\0", "(JJ)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [abs](https://developer.android.com/reference/java/lang/Math.html#abs(int))
        pub fn abs_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "abs", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "abs\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [abs](https://developer.android.com/reference/java/lang/Math.html#abs(long))
        pub fn abs_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "abs", .descriptor == "(J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "abs\0", "(J)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [abs](https://developer.android.com/reference/java/lang/Math.html#abs(float))
        pub fn abs_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "abs", .descriptor == "(F)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "abs\0", "(F)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [abs](https://developer.android.com/reference/java/lang/Math.html#abs(double))
        pub fn abs_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "abs", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "abs\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [max](https://developer.android.com/reference/java/lang/Math.html#max(int,%20int))
        pub fn max_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "max", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "max\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [max](https://developer.android.com/reference/java/lang/Math.html#max(long,%20long))
        pub fn max_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "max", .descriptor == "(JJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "max\0", "(JJ)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [max](https://developer.android.com/reference/java/lang/Math.html#max(float,%20float))
        pub fn max_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "max", .descriptor == "(FF)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "max\0", "(FF)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [max](https://developer.android.com/reference/java/lang/Math.html#max(double,%20double))
        pub fn max_double_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "max", .descriptor == "(DD)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "max\0", "(DD)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [min](https://developer.android.com/reference/java/lang/Math.html#min(int,%20int))
        pub fn min_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "min", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "min\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [min](https://developer.android.com/reference/java/lang/Math.html#min(long,%20long))
        pub fn min_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "min", .descriptor == "(JJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "min\0", "(JJ)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [min](https://developer.android.com/reference/java/lang/Math.html#min(float,%20float))
        pub fn min_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "min", .descriptor == "(FF)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "min\0", "(FF)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [min](https://developer.android.com/reference/java/lang/Math.html#min(double,%20double))
        pub fn min_double_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "min", .descriptor == "(DD)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "min\0", "(DD)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ulp](https://developer.android.com/reference/java/lang/Math.html#ulp(double))
        pub fn ulp_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "ulp", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "ulp\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ulp](https://developer.android.com/reference/java/lang/Math.html#ulp(float))
        pub fn ulp_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "ulp", .descriptor == "(F)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "ulp\0", "(F)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [signum](https://developer.android.com/reference/java/lang/Math.html#signum(double))
        pub fn signum_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "signum", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "signum\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [signum](https://developer.android.com/reference/java/lang/Math.html#signum(float))
        pub fn signum_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "signum", .descriptor == "(F)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "signum\0", "(F)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sinh](https://developer.android.com/reference/java/lang/Math.html#sinh(double))
        pub fn sinh<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "sinh", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "sinh\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cosh](https://developer.android.com/reference/java/lang/Math.html#cosh(double))
        pub fn cosh<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "cosh", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "cosh\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tanh](https://developer.android.com/reference/java/lang/Math.html#tanh(double))
        pub fn tanh<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "tanh", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "tanh\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hypot](https://developer.android.com/reference/java/lang/Math.html#hypot(double,%20double))
        pub fn hypot<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "hypot", .descriptor == "(DD)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "hypot\0", "(DD)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [expm1](https://developer.android.com/reference/java/lang/Math.html#expm1(double))
        pub fn expm1<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "expm1", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "expm1\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [log1p](https://developer.android.com/reference/java/lang/Math.html#log1p(double))
        pub fn log1p<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC | NATIVE, .name == "log1p", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "log1p\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copySign](https://developer.android.com/reference/java/lang/Math.html#copySign(double,%20double))
        pub fn copySign_double_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "copySign", .descriptor == "(DD)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "copySign\0", "(DD)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copySign](https://developer.android.com/reference/java/lang/Math.html#copySign(float,%20float))
        pub fn copySign_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "copySign", .descriptor == "(FF)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "copySign\0", "(FF)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExponent](https://developer.android.com/reference/java/lang/Math.html#getExponent(float))
        pub fn getExponent_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "getExponent", .descriptor == "(F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "getExponent\0", "(F)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExponent](https://developer.android.com/reference/java/lang/Math.html#getExponent(double))
        pub fn getExponent_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "getExponent", .descriptor == "(D)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "getExponent\0", "(D)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextAfter](https://developer.android.com/reference/java/lang/Math.html#nextAfter(double,%20double))
        pub fn nextAfter_double_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "nextAfter", .descriptor == "(DD)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "nextAfter\0", "(DD)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextAfter](https://developer.android.com/reference/java/lang/Math.html#nextAfter(float,%20double))
        pub fn nextAfter_float_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f64) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "nextAfter", .descriptor == "(FD)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "nextAfter\0", "(FD)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextUp](https://developer.android.com/reference/java/lang/Math.html#nextUp(double))
        pub fn nextUp_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "nextUp", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "nextUp\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextUp](https://developer.android.com/reference/java/lang/Math.html#nextUp(float))
        pub fn nextUp_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "nextUp", .descriptor == "(F)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "nextUp\0", "(F)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextDown](https://developer.android.com/reference/java/lang/Math.html#nextDown(double))
        pub fn nextDown_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "nextDown", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "nextDown\0", "(D)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextDown](https://developer.android.com/reference/java/lang/Math.html#nextDown(float))
        pub fn nextDown_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "nextDown", .descriptor == "(F)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "nextDown\0", "(F)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scalb](https://developer.android.com/reference/java/lang/Math.html#scalb(double,%20int))
        pub fn scalb_double_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: i32) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "scalb", .descriptor == "(DI)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "scalb\0", "(DI)D\0");
                __jni_env.call_static_double_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scalb](https://developer.android.com/reference/java/lang/Math.html#scalb(float,%20int))
        pub fn scalb_float_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Math", java.flags == PUBLIC | STATIC, .name == "scalb", .descriptor == "(FI)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Math\0", "scalb\0", "(FI)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [E](https://developer.android.com/reference/java/lang/Math.html#E)
        pub const E : f64 = 2.718281828459045f64;

        /// public static final [PI](https://developer.android.com/reference/java/lang/Math.html#PI)
        pub const PI : f64 = 3.141592653589793f64;
    }
}
