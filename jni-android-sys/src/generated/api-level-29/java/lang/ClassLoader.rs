// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-ClassLoader"))]
__jni_bindgen! {
    /// public class [ClassLoader](https://developer.android.com/reference/java/lang/ClassLoader.html)
    ///
    /// Required feature: java-lang-ClassLoader
    public class ClassLoader ("java/lang/ClassLoader") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ClassLoader](https://developer.android.com/reference/java/lang/ClassLoader.html#ClassLoader(java.lang.ClassLoader))
        // ///
        // /// Required features: "java-lang-ClassLoader"
        // #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::ClassLoader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljava/lang/ClassLoader;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "<init>\0", "(Ljava/lang/ClassLoader;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [ClassLoader](https://developer.android.com/reference/java/lang/ClassLoader.html#ClassLoader())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::ClassLoader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [loadClass](https://developer.android.com/reference/java/lang/ClassLoader.html#loadClass(java.lang.String))
        ///
        /// Required features: "java-lang-Class", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        pub fn loadClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "loadClass", .descriptor == "(Ljava/lang/String;)Ljava/lang/Class;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "loadClass\0", "(Ljava/lang/String;)Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [loadClass](https://developer.android.com/reference/java/lang/ClassLoader.html#loadClass(java.lang.String,%20boolean))
        // ///
        // /// Required features: "java-lang-Class", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        // fn loadClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "loadClass", .descriptor == "(Ljava/lang/String;Z)Ljava/lang/Class;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "loadClass\0", "(Ljava/lang/String;Z)Ljava/lang/Class;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [findClass](https://developer.android.com/reference/java/lang/ClassLoader.html#findClass(java.lang.String))
        // ///
        // /// Required features: "java-lang-Class", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        // fn findClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "findClass", .descriptor == "(Ljava/lang/String;)Ljava/lang/Class;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "findClass\0", "(Ljava/lang/String;)Ljava/lang/Class;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [defineClass](https://developer.android.com/reference/java/lang/ClassLoader.html#defineClass(byte%5B%5D,%20int,%20int))
        // ///
        // /// Required features: "java-lang-Class"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        // #[deprecated] fn defineClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED | FINAL, .name == "defineClass", .descriptor == "([BII)Ljava/lang/Class;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "defineClass\0", "([BII)Ljava/lang/Class;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [defineClass](https://developer.android.com/reference/java/lang/ClassLoader.html#defineClass(java.lang.String,%20byte%5B%5D,%20int,%20int))
        // ///
        // /// Required features: "java-lang-Class", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        // fn defineClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED | FINAL, .name == "defineClass", .descriptor == "(Ljava/lang/String;[BII)Ljava/lang/Class;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "defineClass\0", "(Ljava/lang/String;[BII)Ljava/lang/Class;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [defineClass](https://developer.android.com/reference/java/lang/ClassLoader.html#defineClass(java.lang.String,%20byte%5B%5D,%20int,%20int,%20java.security.ProtectionDomain))
        // ///
        // /// Required features: "java-lang-Class", "java-lang-String", "java-security-ProtectionDomain"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-security-ProtectionDomain")))]
        // fn defineClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::ProtectionDomain>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED | FINAL, .name == "defineClass", .descriptor == "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "defineClass\0", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [defineClass](https://developer.android.com/reference/java/lang/ClassLoader.html#defineClass(java.lang.String,%20java.nio.ByteBuffer,%20java.security.ProtectionDomain))
        // ///
        // /// Required features: "java-lang-Class", "java-lang-String", "java-nio-ByteBuffer", "java-security-ProtectionDomain"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-nio-ByteBuffer", feature = "java-security-ProtectionDomain")))]
        // fn defineClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::ProtectionDomain>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED | FINAL, .name == "defineClass", .descriptor == "(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "defineClass\0", "(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [resolveClass](https://developer.android.com/reference/java/lang/ClassLoader.html#resolveClass(java.lang.Class))
        // ///
        // /// Required features: "java-lang-Class"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        // fn resolveClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED | FINAL, .name == "resolveClass", .descriptor == "(Ljava/lang/Class;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "resolveClass\0", "(Ljava/lang/Class;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [findSystemClass](https://developer.android.com/reference/java/lang/ClassLoader.html#findSystemClass(java.lang.String))
        // ///
        // /// Required features: "java-lang-Class", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        // fn findSystemClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED | FINAL, .name == "findSystemClass", .descriptor == "(Ljava/lang/String;)Ljava/lang/Class;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "findSystemClass\0", "(Ljava/lang/String;)Ljava/lang/Class;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [findLoadedClass](https://developer.android.com/reference/java/lang/ClassLoader.html#findLoadedClass(java.lang.String))
        // ///
        // /// Required features: "java-lang-Class", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        // fn findLoadedClass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED | FINAL, .name == "findLoadedClass", .descriptor == "(Ljava/lang/String;)Ljava/lang/Class;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "findLoadedClass\0", "(Ljava/lang/String;)Ljava/lang/Class;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [setSigners](https://developer.android.com/reference/java/lang/ClassLoader.html#setSigners(java.lang.Class,%20java.lang.Object%5B%5D))
        // ///
        // /// Required features: "java-lang-Class", "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-Object")))]
        // fn setSigners<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED | FINAL, .name == "setSigners", .descriptor == "(Ljava/lang/Class;[Ljava/lang/Object;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "setSigners\0", "(Ljava/lang/Class;[Ljava/lang/Object;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getResource](https://developer.android.com/reference/java/lang/ClassLoader.html#getResource(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-net-URL"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        pub fn getResource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::URL>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "getResource", .descriptor == "(Ljava/lang/String;)Ljava/net/URL;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "getResource\0", "(Ljava/lang/String;)Ljava/net/URL;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResources](https://developer.android.com/reference/java/lang/ClassLoader.html#getResources(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-Enumeration"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Enumeration")))]
        pub fn getResources<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "getResources", .descriptor == "(Ljava/lang/String;)Ljava/util/Enumeration;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "getResources\0", "(Ljava/lang/String;)Ljava/util/Enumeration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [findResource](https://developer.android.com/reference/java/lang/ClassLoader.html#findResource(java.lang.String))
        // ///
        // /// Required features: "java-lang-String", "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        // fn findResource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::URL>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "findResource", .descriptor == "(Ljava/lang/String;)Ljava/net/URL;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "findResource\0", "(Ljava/lang/String;)Ljava/net/URL;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [findResources](https://developer.android.com/reference/java/lang/ClassLoader.html#findResources(java.lang.String))
        // ///
        // /// Required features: "java-lang-String", "java-util-Enumeration"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Enumeration")))]
        // fn findResources<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "findResources", .descriptor == "(Ljava/lang/String;)Ljava/util/Enumeration;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "findResources\0", "(Ljava/lang/String;)Ljava/util/Enumeration;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [registerAsParallelCapable](https://developer.android.com/reference/java/lang/ClassLoader.html#registerAsParallelCapable())
        // fn registerAsParallelCapable<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED | STATIC, .name == "registerAsParallelCapable", .descriptor == "()Z"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/ClassLoader\0", "registerAsParallelCapable\0", "()Z\0");
        //         __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getSystemResource](https://developer.android.com/reference/java/lang/ClassLoader.html#getSystemResource(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-net-URL"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        pub fn getSystemResource<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::URL>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC | STATIC, .name == "getSystemResource", .descriptor == "(Ljava/lang/String;)Ljava/net/URL;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/ClassLoader\0", "getSystemResource\0", "(Ljava/lang/String;)Ljava/net/URL;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemResources](https://developer.android.com/reference/java/lang/ClassLoader.html#getSystemResources(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-Enumeration"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Enumeration")))]
        pub fn getSystemResources<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC | STATIC, .name == "getSystemResources", .descriptor == "(Ljava/lang/String;)Ljava/util/Enumeration;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/ClassLoader\0", "getSystemResources\0", "(Ljava/lang/String;)Ljava/util/Enumeration;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourceAsStream](https://developer.android.com/reference/java/lang/ClassLoader.html#getResourceAsStream(java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn getResourceAsStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "getResourceAsStream", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "getResourceAsStream\0", "(Ljava/lang/String;)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemResourceAsStream](https://developer.android.com/reference/java/lang/ClassLoader.html#getSystemResourceAsStream(java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn getSystemResourceAsStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC | STATIC, .name == "getSystemResourceAsStream", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/ClassLoader\0", "getSystemResourceAsStream\0", "(Ljava/lang/String;)Ljava/io/InputStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParent](https://developer.android.com/reference/java/lang/ClassLoader.html#getParent())
        ///
        /// Required features: "java-lang-ClassLoader"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader")))]
        pub fn getParent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ClassLoader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC | FINAL, .name == "getParent", .descriptor == "()Ljava/lang/ClassLoader;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "getParent\0", "()Ljava/lang/ClassLoader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemClassLoader](https://developer.android.com/reference/java/lang/ClassLoader.html#getSystemClassLoader())
        ///
        /// Required features: "java-lang-ClassLoader"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader")))]
        pub fn getSystemClassLoader<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ClassLoader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC | STATIC, .name == "getSystemClassLoader", .descriptor == "()Ljava/lang/ClassLoader;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/ClassLoader\0", "getSystemClassLoader\0", "()Ljava/lang/ClassLoader;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [definePackage](https://developer.android.com/reference/java/lang/ClassLoader.html#definePackage(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.net.URL))
        // ///
        // /// Required features: "java-lang-Package", "java-lang-String", "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Package", feature = "java-lang-String", feature = "java-net-URL")))]
        // fn definePackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Package>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "definePackage", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "definePackage\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getPackage](https://developer.android.com/reference/java/lang/ClassLoader.html#getPackage(java.lang.String))
        // ///
        // /// Required features: "java-lang-Package", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Package", feature = "java-lang-String")))]
        // fn getPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Package>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "getPackage", .descriptor == "(Ljava/lang/String;)Ljava/lang/Package;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "getPackage\0", "(Ljava/lang/String;)Ljava/lang/Package;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getPackages](https://developer.android.com/reference/java/lang/ClassLoader.html#getPackages())
        // ///
        // /// Required features: "java-lang-Package"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Package")))]
        // fn getPackages<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Package, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "getPackages", .descriptor == "()[Ljava/lang/Package;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "getPackages\0", "()[Ljava/lang/Package;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [findLibrary](https://developer.android.com/reference/java/lang/ClassLoader.html#findLibrary(java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn findLibrary<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/ClassLoader", java.flags == PROTECTED, .name == "findLibrary", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "findLibrary\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setDefaultAssertionStatus](https://developer.android.com/reference/java/lang/ClassLoader.html#setDefaultAssertionStatus(boolean))
        pub fn setDefaultAssertionStatus<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "setDefaultAssertionStatus", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "setDefaultAssertionStatus\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPackageAssertionStatus](https://developer.android.com/reference/java/lang/ClassLoader.html#setPackageAssertionStatus(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setPackageAssertionStatus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "setPackageAssertionStatus", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "setPackageAssertionStatus\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClassAssertionStatus](https://developer.android.com/reference/java/lang/ClassLoader.html#setClassAssertionStatus(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setClassAssertionStatus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "setClassAssertionStatus", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "setClassAssertionStatus\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearAssertionStatus](https://developer.android.com/reference/java/lang/ClassLoader.html#clearAssertionStatus())
        pub fn clearAssertionStatus<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ClassLoader", java.flags == PUBLIC, .name == "clearAssertionStatus", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ClassLoader\0", "clearAssertionStatus\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
