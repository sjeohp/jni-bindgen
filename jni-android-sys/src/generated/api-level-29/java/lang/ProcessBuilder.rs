// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-ProcessBuilder"))]
__jni_bindgen! {
    /// public final class [ProcessBuilder](https://developer.android.com/reference/java/lang/ProcessBuilder.html)
    ///
    /// Required feature: java-lang-ProcessBuilder
    public final class ProcessBuilder ("java/lang/ProcessBuilder") extends crate::java::lang::Object {

        /// [ProcessBuilder](https://developer.android.com/reference/java/lang/ProcessBuilder.html#ProcessBuilder(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn new_List<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "<init>\0", "(Ljava/util/List;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ProcessBuilder](https://developer.android.com/reference/java/lang/ProcessBuilder.html#ProcessBuilder(java.lang.String...))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC | VARARGS, .name == "<init>", .descriptor == "([Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "<init>\0", "([Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [command](https://developer.android.com/reference/java/lang/ProcessBuilder.html#command(java.util.List))
        ///
        /// Required features: "java-lang-ProcessBuilder", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder", feature = "java-util-List")))]
        pub fn command_List<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "command", .descriptor == "(Ljava/util/List;)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "command\0", "(Ljava/util/List;)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [command](https://developer.android.com/reference/java/lang/ProcessBuilder.html#command(java.lang.String...))
        ///
        /// Required features: "java-lang-ProcessBuilder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder", feature = "java-lang-String")))]
        pub fn command_String_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC | VARARGS, .name == "command", .descriptor == "([Ljava/lang/String;)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "command\0", "([Ljava/lang/String;)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [command](https://developer.android.com/reference/java/lang/ProcessBuilder.html#command())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn command<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "command", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "command\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [environment](https://developer.android.com/reference/java/lang/ProcessBuilder.html#environment())
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn environment<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "environment", .descriptor == "()Ljava/util/Map;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "environment\0", "()Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [directory](https://developer.android.com/reference/java/lang/ProcessBuilder.html#directory())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn directory<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "directory", .descriptor == "()Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "directory\0", "()Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [directory](https://developer.android.com/reference/java/lang/ProcessBuilder.html#directory(java.io.File))
        ///
        /// Required features: "java-io-File", "java-lang-ProcessBuilder"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-ProcessBuilder")))]
        pub fn directory_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "directory", .descriptor == "(Ljava/io/File;)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "directory\0", "(Ljava/io/File;)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectInput](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectInput(java.lang.ProcessBuilder.Redirect))
        ///
        /// Required features: "java-lang-ProcessBuilder", "java-lang-ProcessBuilder_Redirect"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder", feature = "java-lang-ProcessBuilder_Redirect")))]
        pub fn redirectInput_Redirect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ProcessBuilder_Redirect>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectInput", .descriptor == "(Ljava/lang/ProcessBuilder$Redirect;)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectInput\0", "(Ljava/lang/ProcessBuilder$Redirect;)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectOutput](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectOutput(java.lang.ProcessBuilder.Redirect))
        ///
        /// Required features: "java-lang-ProcessBuilder", "java-lang-ProcessBuilder_Redirect"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder", feature = "java-lang-ProcessBuilder_Redirect")))]
        pub fn redirectOutput_Redirect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ProcessBuilder_Redirect>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectOutput", .descriptor == "(Ljava/lang/ProcessBuilder$Redirect;)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectOutput\0", "(Ljava/lang/ProcessBuilder$Redirect;)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectError](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectError(java.lang.ProcessBuilder.Redirect))
        ///
        /// Required features: "java-lang-ProcessBuilder", "java-lang-ProcessBuilder_Redirect"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder", feature = "java-lang-ProcessBuilder_Redirect")))]
        pub fn redirectError_Redirect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ProcessBuilder_Redirect>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectError", .descriptor == "(Ljava/lang/ProcessBuilder$Redirect;)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectError\0", "(Ljava/lang/ProcessBuilder$Redirect;)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectInput](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectInput(java.io.File))
        ///
        /// Required features: "java-io-File", "java-lang-ProcessBuilder"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-ProcessBuilder")))]
        pub fn redirectInput_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectInput", .descriptor == "(Ljava/io/File;)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectInput\0", "(Ljava/io/File;)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectOutput](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectOutput(java.io.File))
        ///
        /// Required features: "java-io-File", "java-lang-ProcessBuilder"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-ProcessBuilder")))]
        pub fn redirectOutput_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectOutput", .descriptor == "(Ljava/io/File;)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectOutput\0", "(Ljava/io/File;)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectError](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectError(java.io.File))
        ///
        /// Required features: "java-io-File", "java-lang-ProcessBuilder"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-ProcessBuilder")))]
        pub fn redirectError_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectError", .descriptor == "(Ljava/io/File;)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectError\0", "(Ljava/io/File;)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectInput](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectInput())
        ///
        /// Required features: "java-lang-ProcessBuilder_Redirect"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder_Redirect")))]
        pub fn redirectInput<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder_Redirect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectInput", .descriptor == "()Ljava/lang/ProcessBuilder$Redirect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectInput\0", "()Ljava/lang/ProcessBuilder$Redirect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectOutput](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectOutput())
        ///
        /// Required features: "java-lang-ProcessBuilder_Redirect"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder_Redirect")))]
        pub fn redirectOutput<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder_Redirect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectOutput", .descriptor == "()Ljava/lang/ProcessBuilder$Redirect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectOutput\0", "()Ljava/lang/ProcessBuilder$Redirect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectError](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectError())
        ///
        /// Required features: "java-lang-ProcessBuilder_Redirect"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder_Redirect")))]
        pub fn redirectError<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder_Redirect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectError", .descriptor == "()Ljava/lang/ProcessBuilder$Redirect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectError\0", "()Ljava/lang/ProcessBuilder$Redirect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [inheritIO](https://developer.android.com/reference/java/lang/ProcessBuilder.html#inheritIO())
        ///
        /// Required features: "java-lang-ProcessBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder")))]
        pub fn inheritIO<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "inheritIO", .descriptor == "()Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "inheritIO\0", "()Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectErrorStream](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectErrorStream())
        pub fn redirectErrorStream<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectErrorStream", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectErrorStream\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [redirectErrorStream](https://developer.android.com/reference/java/lang/ProcessBuilder.html#redirectErrorStream(boolean))
        ///
        /// Required features: "java-lang-ProcessBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-ProcessBuilder")))]
        pub fn redirectErrorStream_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ProcessBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "redirectErrorStream", .descriptor == "(Z)Ljava/lang/ProcessBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "redirectErrorStream\0", "(Z)Ljava/lang/ProcessBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/java/lang/ProcessBuilder.html#start())
        ///
        /// Required features: "java-lang-Process"
        #[cfg(any(feature = "all", all(feature = "java-lang-Process")))]
        pub fn start<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Process>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ProcessBuilder", java.flags == PUBLIC, .name == "start", .descriptor == "()Ljava/lang/Process;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ProcessBuilder\0", "start\0", "()Ljava/lang/Process;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
