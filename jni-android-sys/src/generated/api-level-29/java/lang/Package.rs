// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-Package"))]
__jni_bindgen! {
    /// public class [Package](https://developer.android.com/reference/java/lang/Package.html)
    ///
    /// Required feature: java-lang-Package
    public class Package ("java/lang/Package") extends crate::java::lang::Object, implements crate::java::lang::reflect::AnnotatedElement {

        // // Not emitting: Non-public method
        // /// [Package](https://developer.android.com/reference/java/lang/Package.html#Package(java.lang.String,%20java.util.jar.Manifest,%20java.net.URL,%20java.lang.ClassLoader))
        // ///
        // /// Required features: "java-lang-ClassLoader", "java-lang-String", "java-net-URL", "java-util-jar-Manifest"
        // #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader", feature = "java-lang-String", feature = "java-net-URL", feature = "java-util-jar-Manifest")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::jar::Manifest>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::Package>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/Package", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;Ljava/lang/ClassLoader;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "<init>\0", "(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;Ljava/lang/ClassLoader;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getName](https://developer.android.com/reference/java/lang/Package.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpecificationTitle](https://developer.android.com/reference/java/lang/Package.html#getSpecificationTitle())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSpecificationTitle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getSpecificationTitle", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getSpecificationTitle\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpecificationVersion](https://developer.android.com/reference/java/lang/Package.html#getSpecificationVersion())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSpecificationVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getSpecificationVersion", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getSpecificationVersion\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpecificationVendor](https://developer.android.com/reference/java/lang/Package.html#getSpecificationVendor())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSpecificationVendor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getSpecificationVendor", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getSpecificationVendor\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImplementationTitle](https://developer.android.com/reference/java/lang/Package.html#getImplementationTitle())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getImplementationTitle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getImplementationTitle", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getImplementationTitle\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImplementationVersion](https://developer.android.com/reference/java/lang/Package.html#getImplementationVersion())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getImplementationVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getImplementationVersion", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getImplementationVersion\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImplementationVendor](https://developer.android.com/reference/java/lang/Package.html#getImplementationVendor())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getImplementationVendor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getImplementationVendor", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getImplementationVendor\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSealed](https://developer.android.com/reference/java/lang/Package.html#isSealed())
        pub fn isSealed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "isSealed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "isSealed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSealed](https://developer.android.com/reference/java/lang/Package.html#isSealed(java.net.URL))
        ///
        /// Required features: "java-net-URL"
        #[cfg(any(feature = "all", all(feature = "java-net-URL")))]
        pub fn isSealed_URL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "isSealed", .descriptor == "(Ljava/net/URL;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "isSealed\0", "(Ljava/net/URL;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCompatibleWith](https://developer.android.com/reference/java/lang/Package.html#isCompatibleWith(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isCompatibleWith<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "isCompatibleWith", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "isCompatibleWith\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackage](https://developer.android.com/reference/java/lang/Package.html#getPackage(java.lang.String))
        ///
        /// Required features: "java-lang-Package", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Package", feature = "java-lang-String")))]
        pub fn getPackage<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Package>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC | STATIC, .name == "getPackage", .descriptor == "(Ljava/lang/String;)Ljava/lang/Package;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Package\0", "getPackage\0", "(Ljava/lang/String;)Ljava/lang/Package;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackages](https://developer.android.com/reference/java/lang/Package.html#getPackages())
        ///
        /// Required features: "java-lang-Package"
        #[cfg(any(feature = "all", all(feature = "java-lang-Package")))]
        pub fn getPackages<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Package, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC | STATIC, .name == "getPackages", .descriptor == "()[Ljava/lang/Package;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Package\0", "getPackages\0", "()[Ljava/lang/Package;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/lang/Package.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/lang/Package.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnnotation](https://developer.android.com/reference/java/lang/Package.html#getAnnotation(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getAnnotation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::annotation::Annotation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getAnnotation", .descriptor == "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getAnnotation\0", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAnnotationPresent](https://developer.android.com/reference/java/lang/Package.html#isAnnotationPresent(java.lang.Class))
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn isAnnotationPresent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "isAnnotationPresent", .descriptor == "(Ljava/lang/Class;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "isAnnotationPresent\0", "(Ljava/lang/Class;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnnotationsByType](https://developer.android.com/reference/java/lang/Package.html#getAnnotationsByType(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getAnnotationsByType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getAnnotationsByType", .descriptor == "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getAnnotationsByType\0", "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnnotations](https://developer.android.com/reference/java/lang/Package.html#getAnnotations())
        ///
        /// Required features: "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-annotation-Annotation")))]
        pub fn getAnnotations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getAnnotations", .descriptor == "()[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getAnnotations\0", "()[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredAnnotation](https://developer.android.com/reference/java/lang/Package.html#getDeclaredAnnotation(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getDeclaredAnnotation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::annotation::Annotation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getDeclaredAnnotation", .descriptor == "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getDeclaredAnnotation\0", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredAnnotationsByType](https://developer.android.com/reference/java/lang/Package.html#getDeclaredAnnotationsByType(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getDeclaredAnnotationsByType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getDeclaredAnnotationsByType", .descriptor == "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getDeclaredAnnotationsByType\0", "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredAnnotations](https://developer.android.com/reference/java/lang/Package.html#getDeclaredAnnotations())
        ///
        /// Required features: "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-annotation-Annotation")))]
        pub fn getDeclaredAnnotations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Package", java.flags == PUBLIC, .name == "getDeclaredAnnotations", .descriptor == "()[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Package\0", "getDeclaredAnnotations\0", "()[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
