// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-annotation-AnnotationTypeMismatchException"))]
__jni_bindgen! {
    /// public class [AnnotationTypeMismatchException](https://developer.android.com/reference/java/lang/annotation/AnnotationTypeMismatchException.html)
    ///
    /// Required feature: java-lang-annotation-AnnotationTypeMismatchException
    public class AnnotationTypeMismatchException ("java/lang/annotation/AnnotationTypeMismatchException") extends crate::java::lang::RuntimeException {

        /// [AnnotationTypeMismatchException](https://developer.android.com/reference/java/lang/annotation/AnnotationTypeMismatchException.html#AnnotationTypeMismatchException(java.lang.reflect.Method,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-lang-reflect-Method"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-lang-reflect-Method")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::reflect::Method>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::annotation::AnnotationTypeMismatchException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/annotation/AnnotationTypeMismatchException", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/reflect/Method;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/annotation/AnnotationTypeMismatchException\0", "<init>\0", "(Ljava/lang/reflect/Method;Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [element](https://developer.android.com/reference/java/lang/annotation/AnnotationTypeMismatchException.html#element())
        ///
        /// Required features: "java-lang-reflect-Method"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Method")))]
        pub fn element<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Method>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/annotation/AnnotationTypeMismatchException", java.flags == PUBLIC, .name == "element", .descriptor == "()Ljava/lang/reflect/Method;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/annotation/AnnotationTypeMismatchException\0", "element\0", "()Ljava/lang/reflect/Method;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [foundType](https://developer.android.com/reference/java/lang/annotation/AnnotationTypeMismatchException.html#foundType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn foundType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/annotation/AnnotationTypeMismatchException", java.flags == PUBLIC, .name == "foundType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/annotation/AnnotationTypeMismatchException\0", "foundType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
