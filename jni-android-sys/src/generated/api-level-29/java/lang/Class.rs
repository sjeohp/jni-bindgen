// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-Class"))]
__jni_bindgen! {
    /// public final class [Class](https://developer.android.com/reference/java/lang/Class.html)
    ///
    /// Required feature: java-lang-Class
    public final class Class ("java/lang/Class") extends crate::java::lang::Object, implements crate::java::io::Serializable, crate::java::lang::reflect::GenericDeclaration, crate::java::lang::reflect::Type, crate::java::lang::reflect::AnnotatedElement {

        // // Not emitting: Non-public method
        // /// [Class](https://developer.android.com/reference/java/lang/Class.html#Class())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::Class>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/Class", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [toString](https://developer.android.com/reference/java/lang/Class.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toGenericString](https://developer.android.com/reference/java/lang/Class.html#toGenericString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toGenericString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "toGenericString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "toGenericString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forName](https://developer.android.com/reference/java/lang/Class.html#forName(java.lang.String))
        ///
        /// Required features: "java-lang-Class", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        pub fn forName_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | STATIC, .name == "forName", .descriptor == "(Ljava/lang/String;)Ljava/lang/Class;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Class\0", "forName\0", "(Ljava/lang/String;)Ljava/lang/Class;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forName](https://developer.android.com/reference/java/lang/Class.html#forName(java.lang.String,%20boolean,%20java.lang.ClassLoader))
        ///
        /// Required features: "java-lang-Class", "java-lang-ClassLoader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-ClassLoader", feature = "java-lang-String")))]
        pub fn forName_String_boolean_ClassLoader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | STATIC, .name == "forName", .descriptor == "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Class\0", "forName\0", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/java/lang/Class.html#newInstance())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn newInstance<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "newInstance", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "newInstance\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInstance](https://developer.android.com/reference/java/lang/Class.html#isInstance(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn isInstance<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isInstance", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isInstance\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAssignableFrom](https://developer.android.com/reference/java/lang/Class.html#isAssignableFrom(java.lang.Class))
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn isAssignableFrom<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isAssignableFrom", .descriptor == "(Ljava/lang/Class;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isAssignableFrom\0", "(Ljava/lang/Class;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInterface](https://developer.android.com/reference/java/lang/Class.html#isInterface())
        pub fn isInterface<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isInterface", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isInterface\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isArray](https://developer.android.com/reference/java/lang/Class.html#isArray())
        pub fn isArray<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isArray", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isArray\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPrimitive](https://developer.android.com/reference/java/lang/Class.html#isPrimitive())
        pub fn isPrimitive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isPrimitive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isPrimitive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAnnotation](https://developer.android.com/reference/java/lang/Class.html#isAnnotation())
        pub fn isAnnotation<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isAnnotation", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isAnnotation\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSynthetic](https://developer.android.com/reference/java/lang/Class.html#isSynthetic())
        pub fn isSynthetic<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isSynthetic", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isSynthetic\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/java/lang/Class.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClassLoader](https://developer.android.com/reference/java/lang/Class.html#getClassLoader())
        ///
        /// Required features: "java-lang-ClassLoader"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader")))]
        pub fn getClassLoader<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ClassLoader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getClassLoader", .descriptor == "()Ljava/lang/ClassLoader;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getClassLoader\0", "()Ljava/lang/ClassLoader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTypeParameters](https://developer.android.com/reference/java/lang/Class.html#getTypeParameters())
        ///
        /// Required features: "java-lang-reflect-TypeVariable"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-TypeVariable")))]
        pub fn getTypeParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::reflect::TypeVariable, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | SYNCRONIZED, .name == "getTypeParameters", .descriptor == "()[Ljava/lang/reflect/TypeVariable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getTypeParameters\0", "()[Ljava/lang/reflect/TypeVariable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSuperclass](https://developer.android.com/reference/java/lang/Class.html#getSuperclass())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn getSuperclass<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getSuperclass", .descriptor == "()Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getSuperclass\0", "()Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGenericSuperclass](https://developer.android.com/reference/java/lang/Class.html#getGenericSuperclass())
        ///
        /// Required features: "java-lang-reflect-Type"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Type")))]
        pub fn getGenericSuperclass<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Type>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getGenericSuperclass", .descriptor == "()Ljava/lang/reflect/Type;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getGenericSuperclass\0", "()Ljava/lang/reflect/Type;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackage](https://developer.android.com/reference/java/lang/Class.html#getPackage())
        ///
        /// Required features: "java-lang-Package"
        #[cfg(any(feature = "all", all(feature = "java-lang-Package")))]
        pub fn getPackage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Package>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getPackage", .descriptor == "()Ljava/lang/Package;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getPackage\0", "()Ljava/lang/Package;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInterfaces](https://developer.android.com/reference/java/lang/Class.html#getInterfaces())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn getInterfaces<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getInterfaces", .descriptor == "()[Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getInterfaces\0", "()[Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGenericInterfaces](https://developer.android.com/reference/java/lang/Class.html#getGenericInterfaces())
        ///
        /// Required features: "java-lang-reflect-Type"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Type")))]
        pub fn getGenericInterfaces<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::reflect::Type, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getGenericInterfaces", .descriptor == "()[Ljava/lang/reflect/Type;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getGenericInterfaces\0", "()[Ljava/lang/reflect/Type;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComponentType](https://developer.android.com/reference/java/lang/Class.html#getComponentType())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn getComponentType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getComponentType", .descriptor == "()Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getComponentType\0", "()Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getModifiers](https://developer.android.com/reference/java/lang/Class.html#getModifiers())
        pub fn getModifiers<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getModifiers", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getModifiers\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSigners](https://developer.android.com/reference/java/lang/Class.html#getSigners())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getSigners<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getSigners", .descriptor == "()[Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getSigners\0", "()[Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEnclosingMethod](https://developer.android.com/reference/java/lang/Class.html#getEnclosingMethod())
        ///
        /// Required features: "java-lang-reflect-Method"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Method")))]
        pub fn getEnclosingMethod<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Method>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getEnclosingMethod", .descriptor == "()Ljava/lang/reflect/Method;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getEnclosingMethod\0", "()Ljava/lang/reflect/Method;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEnclosingConstructor](https://developer.android.com/reference/java/lang/Class.html#getEnclosingConstructor())
        ///
        /// Required features: "java-lang-reflect-Constructor"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Constructor")))]
        pub fn getEnclosingConstructor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Constructor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getEnclosingConstructor", .descriptor == "()Ljava/lang/reflect/Constructor;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getEnclosingConstructor\0", "()Ljava/lang/reflect/Constructor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaringClass](https://developer.android.com/reference/java/lang/Class.html#getDeclaringClass())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn getDeclaringClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getDeclaringClass", .descriptor == "()Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaringClass\0", "()Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEnclosingClass](https://developer.android.com/reference/java/lang/Class.html#getEnclosingClass())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn getEnclosingClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getEnclosingClass", .descriptor == "()Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getEnclosingClass\0", "()Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimpleName](https://developer.android.com/reference/java/lang/Class.html#getSimpleName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSimpleName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getSimpleName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getSimpleName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTypeName](https://developer.android.com/reference/java/lang/Class.html#getTypeName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getTypeName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getTypeName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getTypeName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCanonicalName](https://developer.android.com/reference/java/lang/Class.html#getCanonicalName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCanonicalName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getCanonicalName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getCanonicalName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAnonymousClass](https://developer.android.com/reference/java/lang/Class.html#isAnonymousClass())
        pub fn isAnonymousClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "isAnonymousClass", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isAnonymousClass\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLocalClass](https://developer.android.com/reference/java/lang/Class.html#isLocalClass())
        pub fn isLocalClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isLocalClass", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isLocalClass\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMemberClass](https://developer.android.com/reference/java/lang/Class.html#isMemberClass())
        pub fn isMemberClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isMemberClass", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isMemberClass\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClasses](https://developer.android.com/reference/java/lang/Class.html#getClasses())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn getClasses<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getClasses", .descriptor == "()[Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getClasses\0", "()[Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFields](https://developer.android.com/reference/java/lang/Class.html#getFields())
        ///
        /// Required features: "java-lang-reflect-Field"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Field")))]
        pub fn getFields<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::reflect::Field, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getFields", .descriptor == "()[Ljava/lang/reflect/Field;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getFields\0", "()[Ljava/lang/reflect/Field;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMethods](https://developer.android.com/reference/java/lang/Class.html#getMethods())
        ///
        /// Required features: "java-lang-reflect-Method"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Method")))]
        pub fn getMethods<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::reflect::Method, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getMethods", .descriptor == "()[Ljava/lang/reflect/Method;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getMethods\0", "()[Ljava/lang/reflect/Method;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConstructors](https://developer.android.com/reference/java/lang/Class.html#getConstructors())
        ///
        /// Required features: "java-lang-reflect-Constructor"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Constructor")))]
        pub fn getConstructors<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::reflect::Constructor, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getConstructors", .descriptor == "()[Ljava/lang/reflect/Constructor;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getConstructors\0", "()[Ljava/lang/reflect/Constructor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getField](https://developer.android.com/reference/java/lang/Class.html#getField(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-lang-reflect-Field"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-lang-reflect-Field")))]
        pub fn getField<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Field>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getField", .descriptor == "(Ljava/lang/String;)Ljava/lang/reflect/Field;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getField\0", "(Ljava/lang/String;)Ljava/lang/reflect/Field;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMethod](https://developer.android.com/reference/java/lang/Class.html#getMethod(java.lang.String,%20java.lang.Class...))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-reflect-Method"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-reflect-Method")))]
        pub fn getMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Method>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | VARARGS, .name == "getMethod", .descriptor == "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getMethod\0", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConstructor](https://developer.android.com/reference/java/lang/Class.html#getConstructor(java.lang.Class...))
        ///
        /// Required features: "java-lang-Class", "java-lang-reflect-Constructor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-reflect-Constructor")))]
        pub fn getConstructor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Constructor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | VARARGS, .name == "getConstructor", .descriptor == "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getConstructor\0", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredClasses](https://developer.android.com/reference/java/lang/Class.html#getDeclaredClasses())
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn getDeclaredClasses<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getDeclaredClasses", .descriptor == "()[Ljava/lang/Class;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaredClasses\0", "()[Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredFields](https://developer.android.com/reference/java/lang/Class.html#getDeclaredFields())
        ///
        /// Required features: "java-lang-reflect-Field"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Field")))]
        pub fn getDeclaredFields<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::reflect::Field, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getDeclaredFields", .descriptor == "()[Ljava/lang/reflect/Field;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaredFields\0", "()[Ljava/lang/reflect/Field;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredMethods](https://developer.android.com/reference/java/lang/Class.html#getDeclaredMethods())
        ///
        /// Required features: "java-lang-reflect-Method"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Method")))]
        pub fn getDeclaredMethods<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::reflect::Method, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getDeclaredMethods", .descriptor == "()[Ljava/lang/reflect/Method;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaredMethods\0", "()[Ljava/lang/reflect/Method;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredConstructors](https://developer.android.com/reference/java/lang/Class.html#getDeclaredConstructors())
        ///
        /// Required features: "java-lang-reflect-Constructor"
        #[cfg(any(feature = "all", all(feature = "java-lang-reflect-Constructor")))]
        pub fn getDeclaredConstructors<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::reflect::Constructor, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getDeclaredConstructors", .descriptor == "()[Ljava/lang/reflect/Constructor;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaredConstructors\0", "()[Ljava/lang/reflect/Constructor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredField](https://developer.android.com/reference/java/lang/Class.html#getDeclaredField(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-lang-reflect-Field"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-lang-reflect-Field")))]
        pub fn getDeclaredField<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Field>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getDeclaredField", .descriptor == "(Ljava/lang/String;)Ljava/lang/reflect/Field;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaredField\0", "(Ljava/lang/String;)Ljava/lang/reflect/Field;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredMethod](https://developer.android.com/reference/java/lang/Class.html#getDeclaredMethod(java.lang.String,%20java.lang.Class...))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-lang-reflect-Method"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-lang-reflect-Method")))]
        pub fn getDeclaredMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Method>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | VARARGS, .name == "getDeclaredMethod", .descriptor == "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaredMethod\0", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredConstructor](https://developer.android.com/reference/java/lang/Class.html#getDeclaredConstructor(java.lang.Class...))
        ///
        /// Required features: "java-lang-Class", "java-lang-reflect-Constructor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-reflect-Constructor")))]
        pub fn getDeclaredConstructor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Class, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::reflect::Constructor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | VARARGS, .name == "getDeclaredConstructor", .descriptor == "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaredConstructor\0", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourceAsStream](https://developer.android.com/reference/java/lang/Class.html#getResourceAsStream(java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn getResourceAsStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getResourceAsStream", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getResourceAsStream\0", "(Ljava/lang/String;)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResource](https://developer.android.com/reference/java/lang/Class.html#getResource(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-net-URL"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        pub fn getResource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::URL>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getResource", .descriptor == "(Ljava/lang/String;)Ljava/net/URL;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getResource\0", "(Ljava/lang/String;)Ljava/net/URL;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProtectionDomain](https://developer.android.com/reference/java/lang/Class.html#getProtectionDomain())
        ///
        /// Required features: "java-security-ProtectionDomain"
        #[cfg(any(feature = "all", all(feature = "java-security-ProtectionDomain")))]
        pub fn getProtectionDomain<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::ProtectionDomain>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getProtectionDomain", .descriptor == "()Ljava/security/ProtectionDomain;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getProtectionDomain\0", "()Ljava/security/ProtectionDomain;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [desiredAssertionStatus](https://developer.android.com/reference/java/lang/Class.html#desiredAssertionStatus())
        pub fn desiredAssertionStatus<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "desiredAssertionStatus", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "desiredAssertionStatus\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnum](https://developer.android.com/reference/java/lang/Class.html#isEnum())
        pub fn isEnum<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isEnum", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isEnum\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEnumConstants](https://developer.android.com/reference/java/lang/Class.html#getEnumConstants())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getEnumConstants<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getEnumConstants", .descriptor == "()[Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getEnumConstants\0", "()[Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cast](https://developer.android.com/reference/java/lang/Class.html#cast(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn cast<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "cast", .descriptor == "(Ljava/lang/Object;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "cast\0", "(Ljava/lang/Object;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asSubclass](https://developer.android.com/reference/java/lang/Class.html#asSubclass(java.lang.Class))
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn asSubclass<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "asSubclass", .descriptor == "(Ljava/lang/Class;)Ljava/lang/Class;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "asSubclass\0", "(Ljava/lang/Class;)Ljava/lang/Class;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnnotation](https://developer.android.com/reference/java/lang/Class.html#getAnnotation(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getAnnotation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::annotation::Annotation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getAnnotation", .descriptor == "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getAnnotation\0", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAnnotationPresent](https://developer.android.com/reference/java/lang/Class.html#isAnnotationPresent(java.lang.Class))
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn isAnnotationPresent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "isAnnotationPresent", .descriptor == "(Ljava/lang/Class;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "isAnnotationPresent\0", "(Ljava/lang/Class;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnnotationsByType](https://developer.android.com/reference/java/lang/Class.html#getAnnotationsByType(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getAnnotationsByType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getAnnotationsByType", .descriptor == "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getAnnotationsByType\0", "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnnotations](https://developer.android.com/reference/java/lang/Class.html#getAnnotations())
        ///
        /// Required features: "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-annotation-Annotation")))]
        pub fn getAnnotations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC, .name == "getAnnotations", .descriptor == "()[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getAnnotations\0", "()[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredAnnotation](https://developer.android.com/reference/java/lang/Class.html#getDeclaredAnnotation(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getDeclaredAnnotation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::annotation::Annotation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getDeclaredAnnotation", .descriptor == "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaredAnnotation\0", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredAnnotations](https://developer.android.com/reference/java/lang/Class.html#getDeclaredAnnotations())
        ///
        /// Required features: "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-annotation-Annotation")))]
        pub fn getDeclaredAnnotations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Class", java.flags == PUBLIC | NATIVE, .name == "getDeclaredAnnotations", .descriptor == "()[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Class\0", "getDeclaredAnnotations\0", "()[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
