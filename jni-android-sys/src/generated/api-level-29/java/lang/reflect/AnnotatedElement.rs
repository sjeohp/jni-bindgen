// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-reflect-AnnotatedElement"))]
__jni_bindgen! {
    /// public interface [AnnotatedElement](https://developer.android.com/reference/java/lang/reflect/AnnotatedElement.html)
    ///
    /// Required feature: java-lang-reflect-AnnotatedElement
    public interface AnnotatedElement ("java/lang/reflect/AnnotatedElement") extends crate::java::lang::Object {

        /// [isAnnotationPresent](https://developer.android.com/reference/java/lang/reflect/AnnotatedElement.html#isAnnotationPresent(java.lang.Class))
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn isAnnotationPresent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/reflect/AnnotatedElement", java.flags == PUBLIC, .name == "isAnnotationPresent", .descriptor == "(Ljava/lang/Class;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/reflect/AnnotatedElement\0", "isAnnotationPresent\0", "(Ljava/lang/Class;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnnotation](https://developer.android.com/reference/java/lang/reflect/AnnotatedElement.html#getAnnotation(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getAnnotation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::annotation::Annotation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/reflect/AnnotatedElement", java.flags == PUBLIC | ABSTRACT, .name == "getAnnotation", .descriptor == "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/reflect/AnnotatedElement\0", "getAnnotation\0", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnnotations](https://developer.android.com/reference/java/lang/reflect/AnnotatedElement.html#getAnnotations())
        ///
        /// Required features: "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-annotation-Annotation")))]
        pub fn getAnnotations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/reflect/AnnotatedElement", java.flags == PUBLIC | ABSTRACT, .name == "getAnnotations", .descriptor == "()[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/reflect/AnnotatedElement\0", "getAnnotations\0", "()[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnnotationsByType](https://developer.android.com/reference/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getAnnotationsByType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/reflect/AnnotatedElement", java.flags == PUBLIC, .name == "getAnnotationsByType", .descriptor == "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/reflect/AnnotatedElement\0", "getAnnotationsByType\0", "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredAnnotation](https://developer.android.com/reference/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotation(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getDeclaredAnnotation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::annotation::Annotation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/reflect/AnnotatedElement", java.flags == PUBLIC, .name == "getDeclaredAnnotation", .descriptor == "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/reflect/AnnotatedElement\0", "getDeclaredAnnotation\0", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredAnnotationsByType](https://developer.android.com/reference/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotationsByType(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-annotation-Annotation")))]
        pub fn getDeclaredAnnotationsByType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/reflect/AnnotatedElement", java.flags == PUBLIC, .name == "getDeclaredAnnotationsByType", .descriptor == "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/reflect/AnnotatedElement\0", "getDeclaredAnnotationsByType\0", "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeclaredAnnotations](https://developer.android.com/reference/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations())
        ///
        /// Required features: "java-lang-annotation-Annotation"
        #[cfg(any(feature = "all", all(feature = "java-lang-annotation-Annotation")))]
        pub fn getDeclaredAnnotations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::annotation::Annotation, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/reflect/AnnotatedElement", java.flags == PUBLIC | ABSTRACT, .name == "getDeclaredAnnotations", .descriptor == "()[Ljava/lang/annotation/Annotation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/reflect/AnnotatedElement\0", "getDeclaredAnnotations\0", "()[Ljava/lang/annotation/Annotation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
