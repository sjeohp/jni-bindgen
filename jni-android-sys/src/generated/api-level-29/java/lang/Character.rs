// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-Character"))]
__jni_bindgen! {
    /// public final class [Character](https://developer.android.com/reference/java/lang/Character.html)
    ///
    /// Required feature: java-lang-Character
    public final class Character ("java/lang/Character") extends crate::java::lang::Object, implements crate::java::io::Serializable, crate::java::lang::Comparable {

        /// [Character](https://developer.android.com/reference/java/lang/Character.html#Character(char))
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::Character>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC, .name == "<init>", .descriptor == "(C)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Character\0", "<init>\0", "(C)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/java/lang/Character.html#valueOf(char))
        ///
        /// Required features: "java-lang-Character"
        #[cfg(any(feature = "all", all(feature = "java-lang-Character")))]
        pub fn valueOf<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Character>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(C)Ljava/lang/Character;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "valueOf\0", "(C)Ljava/lang/Character;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [charValue](https://developer.android.com/reference/java/lang/Character.html#charValue())
        pub fn charValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC, .name == "charValue", .descriptor == "()C"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Character\0", "charValue\0", "()C\0");
                __jni_env.call_char_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/lang/Character.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Character\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/lang/Character.html#hashCode(char))
        pub fn hashCode_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "hashCode", .descriptor == "(C)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "hashCode\0", "(C)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/lang/Character.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Character\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/lang/Character.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Character\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/lang/Character.html#toString(char))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toString", .descriptor == "(C)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toString\0", "(C)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isValidCodePoint](https://developer.android.com/reference/java/lang/Character.html#isValidCodePoint(int))
        pub fn isValidCodePoint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isValidCodePoint", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isValidCodePoint\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBmpCodePoint](https://developer.android.com/reference/java/lang/Character.html#isBmpCodePoint(int))
        pub fn isBmpCodePoint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isBmpCodePoint", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isBmpCodePoint\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSupplementaryCodePoint](https://developer.android.com/reference/java/lang/Character.html#isSupplementaryCodePoint(int))
        pub fn isSupplementaryCodePoint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isSupplementaryCodePoint", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isSupplementaryCodePoint\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHighSurrogate](https://developer.android.com/reference/java/lang/Character.html#isHighSurrogate(char))
        pub fn isHighSurrogate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isHighSurrogate", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isHighSurrogate\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLowSurrogate](https://developer.android.com/reference/java/lang/Character.html#isLowSurrogate(char))
        pub fn isLowSurrogate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isLowSurrogate", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isLowSurrogate\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSurrogate](https://developer.android.com/reference/java/lang/Character.html#isSurrogate(char))
        pub fn isSurrogate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isSurrogate", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isSurrogate\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSurrogatePair](https://developer.android.com/reference/java/lang/Character.html#isSurrogatePair(char,%20char))
        pub fn isSurrogatePair<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar, arg1: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isSurrogatePair", .descriptor == "(CC)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isSurrogatePair\0", "(CC)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [charCount](https://developer.android.com/reference/java/lang/Character.html#charCount(int))
        pub fn charCount<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "charCount", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "charCount\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toCodePoint](https://developer.android.com/reference/java/lang/Character.html#toCodePoint(char,%20char))
        pub fn toCodePoint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar, arg1: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toCodePoint", .descriptor == "(CC)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toCodePoint\0", "(CC)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [codePointAt](https://developer.android.com/reference/java/lang/Character.html#codePointAt(java.lang.CharSequence,%20int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn codePointAt_CharSequence_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "codePointAt", .descriptor == "(Ljava/lang/CharSequence;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "codePointAt\0", "(Ljava/lang/CharSequence;I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [codePointAt](https://developer.android.com/reference/java/lang/Character.html#codePointAt(char%5B%5D,%20int))
        pub fn codePointAt_char_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "codePointAt", .descriptor == "([CI)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "codePointAt\0", "([CI)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [codePointAt](https://developer.android.com/reference/java/lang/Character.html#codePointAt(char%5B%5D,%20int,%20int))
        pub fn codePointAt_char_array_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "codePointAt", .descriptor == "([CII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "codePointAt\0", "([CII)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [codePointBefore](https://developer.android.com/reference/java/lang/Character.html#codePointBefore(java.lang.CharSequence,%20int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn codePointBefore_CharSequence_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "codePointBefore", .descriptor == "(Ljava/lang/CharSequence;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "codePointBefore\0", "(Ljava/lang/CharSequence;I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [codePointBefore](https://developer.android.com/reference/java/lang/Character.html#codePointBefore(char%5B%5D,%20int))
        pub fn codePointBefore_char_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "codePointBefore", .descriptor == "([CI)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "codePointBefore\0", "([CI)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [codePointBefore](https://developer.android.com/reference/java/lang/Character.html#codePointBefore(char%5B%5D,%20int,%20int))
        pub fn codePointBefore_char_array_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "codePointBefore", .descriptor == "([CII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "codePointBefore\0", "([CII)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [highSurrogate](https://developer.android.com/reference/java/lang/Character.html#highSurrogate(int))
        pub fn highSurrogate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "highSurrogate", .descriptor == "(I)C"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "highSurrogate\0", "(I)C\0");
                __jni_env.call_static_char_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lowSurrogate](https://developer.android.com/reference/java/lang/Character.html#lowSurrogate(int))
        pub fn lowSurrogate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "lowSurrogate", .descriptor == "(I)C"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "lowSurrogate\0", "(I)C\0");
                __jni_env.call_static_char_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toChars](https://developer.android.com/reference/java/lang/Character.html#toChars(int,%20char%5B%5D,%20int))
        pub fn toChars_int_char_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toChars", .descriptor == "(I[CI)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toChars\0", "(I[CI)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toChars](https://developer.android.com/reference/java/lang/Character.html#toChars(int))
        pub fn toChars_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::CharArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toChars", .descriptor == "(I)[C"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toChars\0", "(I)[C\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [codePointCount](https://developer.android.com/reference/java/lang/Character.html#codePointCount(java.lang.CharSequence,%20int,%20int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn codePointCount_CharSequence_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "codePointCount", .descriptor == "(Ljava/lang/CharSequence;II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "codePointCount\0", "(Ljava/lang/CharSequence;II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [codePointCount](https://developer.android.com/reference/java/lang/Character.html#codePointCount(char%5B%5D,%20int,%20int))
        pub fn codePointCount_char_array_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "codePointCount", .descriptor == "([CII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "codePointCount\0", "([CII)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [offsetByCodePoints](https://developer.android.com/reference/java/lang/Character.html#offsetByCodePoints(java.lang.CharSequence,%20int,%20int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn offsetByCodePoints_CharSequence_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "offsetByCodePoints", .descriptor == "(Ljava/lang/CharSequence;II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "offsetByCodePoints\0", "(Ljava/lang/CharSequence;II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [offsetByCodePoints](https://developer.android.com/reference/java/lang/Character.html#offsetByCodePoints(char%5B%5D,%20int,%20int,%20int,%20int))
        pub fn offsetByCodePoints_char_array_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "offsetByCodePoints", .descriptor == "([CIIII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "offsetByCodePoints\0", "([CIIII)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLowerCase](https://developer.android.com/reference/java/lang/Character.html#isLowerCase(char))
        pub fn isLowerCase_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isLowerCase", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isLowerCase\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLowerCase](https://developer.android.com/reference/java/lang/Character.html#isLowerCase(int))
        pub fn isLowerCase_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isLowerCase", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isLowerCase\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUpperCase](https://developer.android.com/reference/java/lang/Character.html#isUpperCase(char))
        pub fn isUpperCase_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isUpperCase", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isUpperCase\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUpperCase](https://developer.android.com/reference/java/lang/Character.html#isUpperCase(int))
        pub fn isUpperCase_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isUpperCase", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isUpperCase\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTitleCase](https://developer.android.com/reference/java/lang/Character.html#isTitleCase(char))
        pub fn isTitleCase_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isTitleCase", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isTitleCase\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTitleCase](https://developer.android.com/reference/java/lang/Character.html#isTitleCase(int))
        pub fn isTitleCase_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isTitleCase", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isTitleCase\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDigit](https://developer.android.com/reference/java/lang/Character.html#isDigit(char))
        pub fn isDigit_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isDigit", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isDigit\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDigit](https://developer.android.com/reference/java/lang/Character.html#isDigit(int))
        pub fn isDigit_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isDigit", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isDigit\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDefined](https://developer.android.com/reference/java/lang/Character.html#isDefined(char))
        pub fn isDefined_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isDefined", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isDefined\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDefined](https://developer.android.com/reference/java/lang/Character.html#isDefined(int))
        pub fn isDefined_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isDefined", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isDefined\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLetter](https://developer.android.com/reference/java/lang/Character.html#isLetter(char))
        pub fn isLetter_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isLetter", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isLetter\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLetter](https://developer.android.com/reference/java/lang/Character.html#isLetter(int))
        pub fn isLetter_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isLetter", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isLetter\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLetterOrDigit](https://developer.android.com/reference/java/lang/Character.html#isLetterOrDigit(char))
        pub fn isLetterOrDigit_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isLetterOrDigit", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isLetterOrDigit\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLetterOrDigit](https://developer.android.com/reference/java/lang/Character.html#isLetterOrDigit(int))
        pub fn isLetterOrDigit_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isLetterOrDigit", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isLetterOrDigit\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isJavaLetter](https://developer.android.com/reference/java/lang/Character.html#isJavaLetter(char))
        #[deprecated] pub fn isJavaLetter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isJavaLetter", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isJavaLetter\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isJavaLetterOrDigit](https://developer.android.com/reference/java/lang/Character.html#isJavaLetterOrDigit(char))
        #[deprecated] pub fn isJavaLetterOrDigit<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isJavaLetterOrDigit", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isJavaLetterOrDigit\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAlphabetic](https://developer.android.com/reference/java/lang/Character.html#isAlphabetic(int))
        pub fn isAlphabetic<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isAlphabetic", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isAlphabetic\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isIdeographic](https://developer.android.com/reference/java/lang/Character.html#isIdeographic(int))
        pub fn isIdeographic<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isIdeographic", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isIdeographic\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isJavaIdentifierStart](https://developer.android.com/reference/java/lang/Character.html#isJavaIdentifierStart(char))
        pub fn isJavaIdentifierStart_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isJavaIdentifierStart", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isJavaIdentifierStart\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isJavaIdentifierStart](https://developer.android.com/reference/java/lang/Character.html#isJavaIdentifierStart(int))
        pub fn isJavaIdentifierStart_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isJavaIdentifierStart", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isJavaIdentifierStart\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isJavaIdentifierPart](https://developer.android.com/reference/java/lang/Character.html#isJavaIdentifierPart(char))
        pub fn isJavaIdentifierPart_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isJavaIdentifierPart", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isJavaIdentifierPart\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isJavaIdentifierPart](https://developer.android.com/reference/java/lang/Character.html#isJavaIdentifierPart(int))
        pub fn isJavaIdentifierPart_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isJavaIdentifierPart", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isJavaIdentifierPart\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUnicodeIdentifierStart](https://developer.android.com/reference/java/lang/Character.html#isUnicodeIdentifierStart(char))
        pub fn isUnicodeIdentifierStart_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isUnicodeIdentifierStart", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isUnicodeIdentifierStart\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUnicodeIdentifierStart](https://developer.android.com/reference/java/lang/Character.html#isUnicodeIdentifierStart(int))
        pub fn isUnicodeIdentifierStart_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isUnicodeIdentifierStart", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isUnicodeIdentifierStart\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUnicodeIdentifierPart](https://developer.android.com/reference/java/lang/Character.html#isUnicodeIdentifierPart(char))
        pub fn isUnicodeIdentifierPart_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isUnicodeIdentifierPart", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isUnicodeIdentifierPart\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUnicodeIdentifierPart](https://developer.android.com/reference/java/lang/Character.html#isUnicodeIdentifierPart(int))
        pub fn isUnicodeIdentifierPart_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isUnicodeIdentifierPart", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isUnicodeIdentifierPart\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isIdentifierIgnorable](https://developer.android.com/reference/java/lang/Character.html#isIdentifierIgnorable(char))
        pub fn isIdentifierIgnorable_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isIdentifierIgnorable", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isIdentifierIgnorable\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isIdentifierIgnorable](https://developer.android.com/reference/java/lang/Character.html#isIdentifierIgnorable(int))
        pub fn isIdentifierIgnorable_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isIdentifierIgnorable", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isIdentifierIgnorable\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toLowerCase](https://developer.android.com/reference/java/lang/Character.html#toLowerCase(char))
        pub fn toLowerCase_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toLowerCase", .descriptor == "(C)C"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toLowerCase\0", "(C)C\0");
                __jni_env.call_static_char_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toLowerCase](https://developer.android.com/reference/java/lang/Character.html#toLowerCase(int))
        pub fn toLowerCase_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toLowerCase", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toLowerCase\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toUpperCase](https://developer.android.com/reference/java/lang/Character.html#toUpperCase(char))
        pub fn toUpperCase_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toUpperCase", .descriptor == "(C)C"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toUpperCase\0", "(C)C\0");
                __jni_env.call_static_char_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toUpperCase](https://developer.android.com/reference/java/lang/Character.html#toUpperCase(int))
        pub fn toUpperCase_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toUpperCase", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toUpperCase\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toTitleCase](https://developer.android.com/reference/java/lang/Character.html#toTitleCase(char))
        pub fn toTitleCase_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toTitleCase", .descriptor == "(C)C"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toTitleCase\0", "(C)C\0");
                __jni_env.call_static_char_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toTitleCase](https://developer.android.com/reference/java/lang/Character.html#toTitleCase(int))
        pub fn toTitleCase_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "toTitleCase", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "toTitleCase\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [digit](https://developer.android.com/reference/java/lang/Character.html#digit(char,%20int))
        pub fn digit_char_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "digit", .descriptor == "(CI)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "digit\0", "(CI)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [digit](https://developer.android.com/reference/java/lang/Character.html#digit(int,%20int))
        pub fn digit_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "digit", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "digit\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumericValue](https://developer.android.com/reference/java/lang/Character.html#getNumericValue(char))
        pub fn getNumericValue_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "getNumericValue", .descriptor == "(C)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "getNumericValue\0", "(C)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumericValue](https://developer.android.com/reference/java/lang/Character.html#getNumericValue(int))
        pub fn getNumericValue_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "getNumericValue", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "getNumericValue\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSpace](https://developer.android.com/reference/java/lang/Character.html#isSpace(char))
        #[deprecated] pub fn isSpace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isSpace", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isSpace\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSpaceChar](https://developer.android.com/reference/java/lang/Character.html#isSpaceChar(char))
        pub fn isSpaceChar_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isSpaceChar", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isSpaceChar\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSpaceChar](https://developer.android.com/reference/java/lang/Character.html#isSpaceChar(int))
        pub fn isSpaceChar_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isSpaceChar", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isSpaceChar\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWhitespace](https://developer.android.com/reference/java/lang/Character.html#isWhitespace(char))
        pub fn isWhitespace_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isWhitespace", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isWhitespace\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWhitespace](https://developer.android.com/reference/java/lang/Character.html#isWhitespace(int))
        pub fn isWhitespace_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isWhitespace", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isWhitespace\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isISOControl](https://developer.android.com/reference/java/lang/Character.html#isISOControl(char))
        pub fn isISOControl_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isISOControl", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isISOControl\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isISOControl](https://developer.android.com/reference/java/lang/Character.html#isISOControl(int))
        pub fn isISOControl_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isISOControl", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isISOControl\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/java/lang/Character.html#getType(char))
        pub fn getType_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "getType", .descriptor == "(C)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "getType\0", "(C)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/java/lang/Character.html#getType(int))
        pub fn getType_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "getType", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "getType\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forDigit](https://developer.android.com/reference/java/lang/Character.html#forDigit(int,%20int))
        pub fn forDigit<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "forDigit", .descriptor == "(II)C"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "forDigit\0", "(II)C\0");
                __jni_env.call_static_char_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDirectionality](https://developer.android.com/reference/java/lang/Character.html#getDirectionality(char))
        pub fn getDirectionality_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<i8, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "getDirectionality", .descriptor == "(C)B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "getDirectionality\0", "(C)B\0");
                __jni_env.call_static_byte_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDirectionality](https://developer.android.com/reference/java/lang/Character.html#getDirectionality(int))
        pub fn getDirectionality_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i8, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "getDirectionality", .descriptor == "(I)B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "getDirectionality\0", "(I)B\0");
                __jni_env.call_static_byte_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMirrored](https://developer.android.com/reference/java/lang/Character.html#isMirrored(char))
        pub fn isMirrored_char<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isMirrored", .descriptor == "(C)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isMirrored\0", "(C)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMirrored](https://developer.android.com/reference/java/lang/Character.html#isMirrored(int))
        pub fn isMirrored_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "isMirrored", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "isMirrored\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/java/lang/Character.html#compareTo(java.lang.Character))
        ///
        /// Required features: "java-lang-Character"
        #[cfg(any(feature = "all", all(feature = "java-lang-Character")))]
        pub fn compareTo_Character<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Character>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/lang/Character;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Character\0", "compareTo\0", "(Ljava/lang/Character;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compare](https://developer.android.com/reference/java/lang/Character.html#compare(char,%20char))
        pub fn compare<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar, arg1: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "compare", .descriptor == "(CC)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "compare\0", "(CC)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reverseBytes](https://developer.android.com/reference/java/lang/Character.html#reverseBytes(char))
        pub fn reverseBytes<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "reverseBytes", .descriptor == "(C)C"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "reverseBytes\0", "(C)C\0");
                __jni_env.call_static_char_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/java/lang/Character.html#getName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Character", java.flags == PUBLIC | STATIC, .name == "getName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/lang/Character\0", "getName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/java/lang/Character.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/lang/Character", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Character\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [BYTES](https://developer.android.com/reference/java/lang/Character.html#BYTES)
        pub const BYTES : i32 = 2;

        /// public static final [COMBINING_SPACING_MARK](https://developer.android.com/reference/java/lang/Character.html#COMBINING_SPACING_MARK)
        pub const COMBINING_SPACING_MARK : i8 = 8;

        /// public static final [CONNECTOR_PUNCTUATION](https://developer.android.com/reference/java/lang/Character.html#CONNECTOR_PUNCTUATION)
        pub const CONNECTOR_PUNCTUATION : i8 = 23;

        /// public static final [CONTROL](https://developer.android.com/reference/java/lang/Character.html#CONTROL)
        pub const CONTROL : i8 = 15;

        /// public static final [CURRENCY_SYMBOL](https://developer.android.com/reference/java/lang/Character.html#CURRENCY_SYMBOL)
        pub const CURRENCY_SYMBOL : i8 = 26;

        /// public static final [DASH_PUNCTUATION](https://developer.android.com/reference/java/lang/Character.html#DASH_PUNCTUATION)
        pub const DASH_PUNCTUATION : i8 = 20;

        /// public static final [DECIMAL_DIGIT_NUMBER](https://developer.android.com/reference/java/lang/Character.html#DECIMAL_DIGIT_NUMBER)
        pub const DECIMAL_DIGIT_NUMBER : i8 = 9;

        /// public static final [DIRECTIONALITY_ARABIC_NUMBER](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_ARABIC_NUMBER)
        pub const DIRECTIONALITY_ARABIC_NUMBER : i8 = 6;

        /// public static final [DIRECTIONALITY_BOUNDARY_NEUTRAL](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_BOUNDARY_NEUTRAL)
        pub const DIRECTIONALITY_BOUNDARY_NEUTRAL : i8 = 9;

        /// public static final [DIRECTIONALITY_COMMON_NUMBER_SEPARATOR](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR)
        pub const DIRECTIONALITY_COMMON_NUMBER_SEPARATOR : i8 = 7;

        /// public static final [DIRECTIONALITY_EUROPEAN_NUMBER](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER)
        pub const DIRECTIONALITY_EUROPEAN_NUMBER : i8 = 3;

        /// public static final [DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR)
        pub const DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR : i8 = 4;

        /// public static final [DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR)
        pub const DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR : i8 = 5;

        /// public static final [DIRECTIONALITY_LEFT_TO_RIGHT](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT)
        pub const DIRECTIONALITY_LEFT_TO_RIGHT : i8 = 0;

        /// public static final [DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING)
        pub const DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING : i8 = 14;

        /// public static final [DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE)
        pub const DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE : i8 = 15;

        /// public static final [DIRECTIONALITY_NONSPACING_MARK](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_NONSPACING_MARK)
        pub const DIRECTIONALITY_NONSPACING_MARK : i8 = 8;

        /// public static final [DIRECTIONALITY_OTHER_NEUTRALS](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_OTHER_NEUTRALS)
        pub const DIRECTIONALITY_OTHER_NEUTRALS : i8 = 13;

        /// public static final [DIRECTIONALITY_PARAGRAPH_SEPARATOR](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_PARAGRAPH_SEPARATOR)
        pub const DIRECTIONALITY_PARAGRAPH_SEPARATOR : i8 = 10;

        /// public static final [DIRECTIONALITY_POP_DIRECTIONAL_FORMAT](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT)
        pub const DIRECTIONALITY_POP_DIRECTIONAL_FORMAT : i8 = 18;

        /// public static final [DIRECTIONALITY_RIGHT_TO_LEFT](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT)
        pub const DIRECTIONALITY_RIGHT_TO_LEFT : i8 = 1;

        /// public static final [DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC)
        pub const DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC : i8 = 2;

        /// public static final [DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING)
        pub const DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING : i8 = 16;

        /// public static final [DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE)
        pub const DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE : i8 = 17;

        /// public static final [DIRECTIONALITY_SEGMENT_SEPARATOR](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_SEGMENT_SEPARATOR)
        pub const DIRECTIONALITY_SEGMENT_SEPARATOR : i8 = 11;

        /// public static final [DIRECTIONALITY_UNDEFINED](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_UNDEFINED)
        pub const DIRECTIONALITY_UNDEFINED : i8 = -1;

        /// public static final [DIRECTIONALITY_WHITESPACE](https://developer.android.com/reference/java/lang/Character.html#DIRECTIONALITY_WHITESPACE)
        pub const DIRECTIONALITY_WHITESPACE : i8 = 12;

        /// public static final [ENCLOSING_MARK](https://developer.android.com/reference/java/lang/Character.html#ENCLOSING_MARK)
        pub const ENCLOSING_MARK : i8 = 7;

        /// public static final [END_PUNCTUATION](https://developer.android.com/reference/java/lang/Character.html#END_PUNCTUATION)
        pub const END_PUNCTUATION : i8 = 22;

        /// public static final [FINAL_QUOTE_PUNCTUATION](https://developer.android.com/reference/java/lang/Character.html#FINAL_QUOTE_PUNCTUATION)
        pub const FINAL_QUOTE_PUNCTUATION : i8 = 30;

        /// public static final [FORMAT](https://developer.android.com/reference/java/lang/Character.html#FORMAT)
        pub const FORMAT : i8 = 16;

        /// public static final [INITIAL_QUOTE_PUNCTUATION](https://developer.android.com/reference/java/lang/Character.html#INITIAL_QUOTE_PUNCTUATION)
        pub const INITIAL_QUOTE_PUNCTUATION : i8 = 29;

        /// public static final [LETTER_NUMBER](https://developer.android.com/reference/java/lang/Character.html#LETTER_NUMBER)
        pub const LETTER_NUMBER : i8 = 10;

        /// public static final [LINE_SEPARATOR](https://developer.android.com/reference/java/lang/Character.html#LINE_SEPARATOR)
        pub const LINE_SEPARATOR : i8 = 13;

        /// public static final [LOWERCASE_LETTER](https://developer.android.com/reference/java/lang/Character.html#LOWERCASE_LETTER)
        pub const LOWERCASE_LETTER : i8 = 2;

        /// public static final [MATH_SYMBOL](https://developer.android.com/reference/java/lang/Character.html#MATH_SYMBOL)
        pub const MATH_SYMBOL : i8 = 25;

        /// public static final [MAX_CODE_POINT](https://developer.android.com/reference/java/lang/Character.html#MAX_CODE_POINT)
        pub const MAX_CODE_POINT : i32 = 1114111;

        /// public static final [MAX_HIGH_SURROGATE](https://developer.android.com/reference/java/lang/Character.html#MAX_HIGH_SURROGATE)
        pub const MAX_HIGH_SURROGATE : __jni_bindgen::jchar = __jni_bindgen::jchar(56319);

        /// public static final [MAX_LOW_SURROGATE](https://developer.android.com/reference/java/lang/Character.html#MAX_LOW_SURROGATE)
        pub const MAX_LOW_SURROGATE : __jni_bindgen::jchar = __jni_bindgen::jchar(57343);

        /// public static final [MAX_RADIX](https://developer.android.com/reference/java/lang/Character.html#MAX_RADIX)
        pub const MAX_RADIX : i32 = 36;

        /// public static final [MAX_SURROGATE](https://developer.android.com/reference/java/lang/Character.html#MAX_SURROGATE)
        pub const MAX_SURROGATE : __jni_bindgen::jchar = __jni_bindgen::jchar(57343);

        /// public static final [MAX_VALUE](https://developer.android.com/reference/java/lang/Character.html#MAX_VALUE)
        pub const MAX_VALUE : __jni_bindgen::jchar = __jni_bindgen::jchar(65535);

        /// public static final [MIN_CODE_POINT](https://developer.android.com/reference/java/lang/Character.html#MIN_CODE_POINT)
        pub const MIN_CODE_POINT : i32 = 0;

        /// public static final [MIN_HIGH_SURROGATE](https://developer.android.com/reference/java/lang/Character.html#MIN_HIGH_SURROGATE)
        pub const MIN_HIGH_SURROGATE : __jni_bindgen::jchar = __jni_bindgen::jchar(55296);

        /// public static final [MIN_LOW_SURROGATE](https://developer.android.com/reference/java/lang/Character.html#MIN_LOW_SURROGATE)
        pub const MIN_LOW_SURROGATE : __jni_bindgen::jchar = __jni_bindgen::jchar(56320);

        /// public static final [MIN_RADIX](https://developer.android.com/reference/java/lang/Character.html#MIN_RADIX)
        pub const MIN_RADIX : i32 = 2;

        /// public static final [MIN_SUPPLEMENTARY_CODE_POINT](https://developer.android.com/reference/java/lang/Character.html#MIN_SUPPLEMENTARY_CODE_POINT)
        pub const MIN_SUPPLEMENTARY_CODE_POINT : i32 = 65536;

        /// public static final [MIN_SURROGATE](https://developer.android.com/reference/java/lang/Character.html#MIN_SURROGATE)
        pub const MIN_SURROGATE : __jni_bindgen::jchar = __jni_bindgen::jchar(55296);

        /// public static final [MIN_VALUE](https://developer.android.com/reference/java/lang/Character.html#MIN_VALUE)
        pub const MIN_VALUE : __jni_bindgen::jchar = __jni_bindgen::jchar(0);

        /// public static final [MODIFIER_LETTER](https://developer.android.com/reference/java/lang/Character.html#MODIFIER_LETTER)
        pub const MODIFIER_LETTER : i8 = 4;

        /// public static final [MODIFIER_SYMBOL](https://developer.android.com/reference/java/lang/Character.html#MODIFIER_SYMBOL)
        pub const MODIFIER_SYMBOL : i8 = 27;

        /// public static final [NON_SPACING_MARK](https://developer.android.com/reference/java/lang/Character.html#NON_SPACING_MARK)
        pub const NON_SPACING_MARK : i8 = 6;

        /// public static final [OTHER_LETTER](https://developer.android.com/reference/java/lang/Character.html#OTHER_LETTER)
        pub const OTHER_LETTER : i8 = 5;

        /// public static final [OTHER_NUMBER](https://developer.android.com/reference/java/lang/Character.html#OTHER_NUMBER)
        pub const OTHER_NUMBER : i8 = 11;

        /// public static final [OTHER_PUNCTUATION](https://developer.android.com/reference/java/lang/Character.html#OTHER_PUNCTUATION)
        pub const OTHER_PUNCTUATION : i8 = 24;

        /// public static final [OTHER_SYMBOL](https://developer.android.com/reference/java/lang/Character.html#OTHER_SYMBOL)
        pub const OTHER_SYMBOL : i8 = 28;

        /// public static final [PARAGRAPH_SEPARATOR](https://developer.android.com/reference/java/lang/Character.html#PARAGRAPH_SEPARATOR)
        pub const PARAGRAPH_SEPARATOR : i8 = 14;

        /// public static final [PRIVATE_USE](https://developer.android.com/reference/java/lang/Character.html#PRIVATE_USE)
        pub const PRIVATE_USE : i8 = 18;

        /// public static final [SIZE](https://developer.android.com/reference/java/lang/Character.html#SIZE)
        pub const SIZE : i32 = 16;

        /// public static final [SPACE_SEPARATOR](https://developer.android.com/reference/java/lang/Character.html#SPACE_SEPARATOR)
        pub const SPACE_SEPARATOR : i8 = 12;

        /// public static final [START_PUNCTUATION](https://developer.android.com/reference/java/lang/Character.html#START_PUNCTUATION)
        pub const START_PUNCTUATION : i8 = 21;

        /// public static final [SURROGATE](https://developer.android.com/reference/java/lang/Character.html#SURROGATE)
        pub const SURROGATE : i8 = 19;

        /// public static final [TITLECASE_LETTER](https://developer.android.com/reference/java/lang/Character.html#TITLECASE_LETTER)
        pub const TITLECASE_LETTER : i8 = 3;

        /// **get** public static final [TYPE](https://developer.android.com/reference/java/lang/Character.html#TYPE)
        ///
        /// Required feature: java-lang-Class
        #[cfg(any(feature = "all", feature = "java-lang-Class"))]
        pub fn TYPE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Class>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/lang/Character\0", "TYPE\0", "Ljava/lang/Class;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [UNASSIGNED](https://developer.android.com/reference/java/lang/Character.html#UNASSIGNED)
        pub const UNASSIGNED : i8 = 0;

        /// public static final [UPPERCASE_LETTER](https://developer.android.com/reference/java/lang/Character.html#UPPERCASE_LETTER)
        pub const UPPERCASE_LETTER : i8 = 1;
    }
}
