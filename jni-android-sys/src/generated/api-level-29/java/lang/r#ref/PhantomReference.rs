// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-ref-PhantomReference"))]
__jni_bindgen! {
    /// public class [PhantomReference](https://developer.android.com/reference/java/lang/ref/PhantomReference.html)
    ///
    /// Required feature: java-lang-ref-PhantomReference
    public class PhantomReference ("java/lang/ref/PhantomReference") extends crate::java::lang::r#ref::Reference {

        /// [PhantomReference](https://developer.android.com/reference/java/lang/ref/PhantomReference.html#PhantomReference(java.lang.Object,%20java.lang.ref.ReferenceQueue))
        ///
        /// Required features: "java-lang-Object", "java-lang-ref-ReferenceQueue"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-ref-ReferenceQueue")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::r#ref::ReferenceQueue>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::lang::r#ref::PhantomReference>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ref/PhantomReference", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ref/PhantomReference\0", "<init>\0", "(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/lang/ref/PhantomReference.html#get())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn get<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/ref/PhantomReference", java.flags == PUBLIC, .name == "get", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/ref/PhantomReference\0", "get\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
