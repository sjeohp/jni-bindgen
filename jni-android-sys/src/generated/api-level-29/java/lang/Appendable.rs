// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-lang-Appendable"))]
__jni_bindgen! {
    /// public interface [Appendable](https://developer.android.com/reference/java/lang/Appendable.html)
    ///
    /// Required feature: java-lang-Appendable
    public interface Appendable ("java/lang/Appendable") extends crate::java::lang::Object {

        /// [append](https://developer.android.com/reference/java/lang/Appendable.html#append(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-Appendable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-Appendable", feature = "java-lang-CharSequence")))]
        pub fn append_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Appendable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Appendable", java.flags == PUBLIC | ABSTRACT, .name == "append", .descriptor == "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Appendable\0", "append\0", "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [append](https://developer.android.com/reference/java/lang/Appendable.html#append(java.lang.CharSequence,%20int,%20int))
        ///
        /// Required features: "java-lang-Appendable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-Appendable", feature = "java-lang-CharSequence")))]
        pub fn append_CharSequence_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Appendable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Appendable", java.flags == PUBLIC | ABSTRACT, .name == "append", .descriptor == "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Appendable\0", "append\0", "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [append](https://developer.android.com/reference/java/lang/Appendable.html#append(char))
        ///
        /// Required features: "java-lang-Appendable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Appendable")))]
        pub fn append_char<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Appendable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/lang/Appendable", java.flags == PUBLIC | ABSTRACT, .name == "append", .descriptor == "(C)Ljava/lang/Appendable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/lang/Appendable\0", "append\0", "(C)Ljava/lang/Appendable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
