// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-io-FileDescriptor"))]
__jni_bindgen! {
    /// public final class [FileDescriptor](https://developer.android.com/reference/java/io/FileDescriptor.html)
    ///
    /// Required feature: java-io-FileDescriptor
    public final class FileDescriptor ("java/io/FileDescriptor") extends crate::java::lang::Object {

        /// [FileDescriptor](https://developer.android.com/reference/java/io/FileDescriptor.html#FileDescriptor())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::io::FileDescriptor>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/FileDescriptor", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/FileDescriptor\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valid](https://developer.android.com/reference/java/io/FileDescriptor.html#valid())
        pub fn valid<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/FileDescriptor", java.flags == PUBLIC, .name == "valid", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/FileDescriptor\0", "valid\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sync](https://developer.android.com/reference/java/io/FileDescriptor.html#sync())
        pub fn sync<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/FileDescriptor", java.flags == PUBLIC | NATIVE, .name == "sync", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/FileDescriptor\0", "sync\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [err](https://developer.android.com/reference/java/io/FileDescriptor.html#err)
        ///
        /// Required feature: java-io-FileDescriptor
        #[cfg(any(feature = "all", feature = "java-io-FileDescriptor"))]
        pub fn err<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::FileDescriptor>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/io/FileDescriptor\0", "err\0", "Ljava/io/FileDescriptor;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [in](https://developer.android.com/reference/java/io/FileDescriptor.html#in)
        ///
        /// Required feature: java-io-FileDescriptor
        #[cfg(any(feature = "all", feature = "java-io-FileDescriptor"))]
        pub fn r#in<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::FileDescriptor>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/io/FileDescriptor\0", "in\0", "Ljava/io/FileDescriptor;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [out](https://developer.android.com/reference/java/io/FileDescriptor.html#out)
        ///
        /// Required feature: java-io-FileDescriptor
        #[cfg(any(feature = "all", feature = "java-io-FileDescriptor"))]
        pub fn out<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::FileDescriptor>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/io/FileDescriptor\0", "out\0", "Ljava/io/FileDescriptor;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
