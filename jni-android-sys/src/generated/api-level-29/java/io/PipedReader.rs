// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-io-PipedReader"))]
__jni_bindgen! {
    /// public class [PipedReader](https://developer.android.com/reference/java/io/PipedReader.html)
    ///
    /// Required feature: java-io-PipedReader
    public class PipedReader ("java/io/PipedReader") extends crate::java::io::Reader {

        /// [PipedReader](https://developer.android.com/reference/java/io/PipedReader.html#PipedReader(java.io.PipedWriter))
        ///
        /// Required features: "java-io-PipedWriter"
        #[cfg(any(feature = "all", all(feature = "java-io-PipedWriter")))]
        pub fn new_PipedWriter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PipedWriter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::io::PipedReader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/PipedReader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/PipedWriter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/PipedReader\0", "<init>\0", "(Ljava/io/PipedWriter;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [PipedReader](https://developer.android.com/reference/java/io/PipedReader.html#PipedReader(java.io.PipedWriter,%20int))
        ///
        /// Required features: "java-io-PipedWriter"
        #[cfg(any(feature = "all", all(feature = "java-io-PipedWriter")))]
        pub fn new_PipedWriter_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PipedWriter>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::io::PipedReader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/PipedReader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/PipedWriter;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/PipedReader\0", "<init>\0", "(Ljava/io/PipedWriter;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [PipedReader](https://developer.android.com/reference/java/io/PipedReader.html#PipedReader())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::io::PipedReader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/PipedReader", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/PipedReader\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [PipedReader](https://developer.android.com/reference/java/io/PipedReader.html#PipedReader(int))
        pub fn new_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::io::PipedReader>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/PipedReader", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/PipedReader\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connect](https://developer.android.com/reference/java/io/PipedReader.html#connect(java.io.PipedWriter))
        ///
        /// Required features: "java-io-PipedWriter"
        #[cfg(any(feature = "all", all(feature = "java-io-PipedWriter")))]
        pub fn connect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PipedWriter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/PipedReader", java.flags == PUBLIC, .name == "connect", .descriptor == "(Ljava/io/PipedWriter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/PipedReader\0", "connect\0", "(Ljava/io/PipedWriter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/io/PipedReader.html#read())
        pub fn read<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/PipedReader", java.flags == PUBLIC | SYNCRONIZED, .name == "read", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/PipedReader\0", "read\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/io/PipedReader.html#read(char%5B%5D,%20int,%20int))
        pub fn read_char_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/PipedReader", java.flags == PUBLIC | SYNCRONIZED, .name == "read", .descriptor == "([CII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/PipedReader\0", "read\0", "([CII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ready](https://developer.android.com/reference/java/io/PipedReader.html#ready())
        pub fn ready<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/PipedReader", java.flags == PUBLIC | SYNCRONIZED, .name == "ready", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/PipedReader\0", "ready\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/java/io/PipedReader.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/PipedReader", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/PipedReader\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
