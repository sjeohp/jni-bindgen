// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-io-StreamTokenizer"))]
__jni_bindgen! {
    /// public class [StreamTokenizer](https://developer.android.com/reference/java/io/StreamTokenizer.html)
    ///
    /// Required feature: java-io-StreamTokenizer
    public class StreamTokenizer ("java/io/StreamTokenizer") extends crate::java::lang::Object {

        /// [StreamTokenizer](https://developer.android.com/reference/java/io/StreamTokenizer.html#StreamTokenizer(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        #[deprecated] pub fn new_InputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::io::StreamTokenizer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "<init>\0", "(Ljava/io/InputStream;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [StreamTokenizer](https://developer.android.com/reference/java/io/StreamTokenizer.html#StreamTokenizer(java.io.Reader))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn new_Reader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::io::StreamTokenizer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "<init>\0", "(Ljava/io/Reader;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resetSyntax](https://developer.android.com/reference/java/io/StreamTokenizer.html#resetSyntax())
        pub fn resetSyntax<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "resetSyntax", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "resetSyntax\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [wordChars](https://developer.android.com/reference/java/io/StreamTokenizer.html#wordChars(int,%20int))
        pub fn wordChars<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "wordChars", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "wordChars\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [whitespaceChars](https://developer.android.com/reference/java/io/StreamTokenizer.html#whitespaceChars(int,%20int))
        pub fn whitespaceChars<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "whitespaceChars", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "whitespaceChars\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ordinaryChars](https://developer.android.com/reference/java/io/StreamTokenizer.html#ordinaryChars(int,%20int))
        pub fn ordinaryChars<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "ordinaryChars", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "ordinaryChars\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ordinaryChar](https://developer.android.com/reference/java/io/StreamTokenizer.html#ordinaryChar(int))
        pub fn ordinaryChar<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "ordinaryChar", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "ordinaryChar\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [commentChar](https://developer.android.com/reference/java/io/StreamTokenizer.html#commentChar(int))
        pub fn commentChar<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "commentChar", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "commentChar\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [quoteChar](https://developer.android.com/reference/java/io/StreamTokenizer.html#quoteChar(int))
        pub fn quoteChar<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "quoteChar", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "quoteChar\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseNumbers](https://developer.android.com/reference/java/io/StreamTokenizer.html#parseNumbers())
        pub fn parseNumbers<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "parseNumbers", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "parseNumbers\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eolIsSignificant](https://developer.android.com/reference/java/io/StreamTokenizer.html#eolIsSignificant(boolean))
        pub fn eolIsSignificant<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "eolIsSignificant", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "eolIsSignificant\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [slashStarComments](https://developer.android.com/reference/java/io/StreamTokenizer.html#slashStarComments(boolean))
        pub fn slashStarComments<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "slashStarComments", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "slashStarComments\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [slashSlashComments](https://developer.android.com/reference/java/io/StreamTokenizer.html#slashSlashComments(boolean))
        pub fn slashSlashComments<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "slashSlashComments", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "slashSlashComments\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lowerCaseMode](https://developer.android.com/reference/java/io/StreamTokenizer.html#lowerCaseMode(boolean))
        pub fn lowerCaseMode<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "lowerCaseMode", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "lowerCaseMode\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextToken](https://developer.android.com/reference/java/io/StreamTokenizer.html#nextToken())
        pub fn nextToken<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "nextToken", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "nextToken\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pushBack](https://developer.android.com/reference/java/io/StreamTokenizer.html#pushBack())
        pub fn pushBack<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "pushBack", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "pushBack\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lineno](https://developer.android.com/reference/java/io/StreamTokenizer.html#lineno())
        pub fn lineno<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "lineno", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "lineno\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/io/StreamTokenizer.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/StreamTokenizer", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/StreamTokenizer\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [TT_EOF](https://developer.android.com/reference/java/io/StreamTokenizer.html#TT_EOF)
        pub const TT_EOF : i32 = -1;

        /// public static final [TT_EOL](https://developer.android.com/reference/java/io/StreamTokenizer.html#TT_EOL)
        pub const TT_EOL : i32 = 10;

        /// public static final [TT_NUMBER](https://developer.android.com/reference/java/io/StreamTokenizer.html#TT_NUMBER)
        pub const TT_NUMBER : i32 = -2;

        /// public static final [TT_WORD](https://developer.android.com/reference/java/io/StreamTokenizer.html#TT_WORD)
        pub const TT_WORD : i32 = -3;

        /// **get** public [nval](https://developer.android.com/reference/java/io/StreamTokenizer.html#nval)
        pub fn nval<'env>(&'env self) -> f64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("java/io/StreamTokenizer\0", "nval\0", "D\0");
                env.get_double_field(class, field)
            }
        }

        /// **set** public [nval](https://developer.android.com/reference/java/io/StreamTokenizer.html#nval)
        pub fn set_nval<'env>(&'env self, value: f64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("java/io/StreamTokenizer\0", "nval\0", "D\0");
                env.set_double_field(class, field, value)
            }
        }

        /// **get** public [sval](https://developer.android.com/reference/java/io/StreamTokenizer.html#sval)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn sval<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("java/io/StreamTokenizer\0", "sval\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [sval](https://developer.android.com/reference/java/io/StreamTokenizer.html#sval)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_sval<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("java/io/StreamTokenizer\0", "sval\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [ttype](https://developer.android.com/reference/java/io/StreamTokenizer.html#ttype)
        pub fn ttype<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("java/io/StreamTokenizer\0", "ttype\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [ttype](https://developer.android.com/reference/java/io/StreamTokenizer.html#ttype)
        pub fn set_ttype<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("java/io/StreamTokenizer\0", "ttype\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
