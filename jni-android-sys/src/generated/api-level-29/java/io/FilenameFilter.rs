// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-io-FilenameFilter"))]
__jni_bindgen! {
    /// public interface [FilenameFilter](https://developer.android.com/reference/java/io/FilenameFilter.html)
    ///
    /// Required feature: java-io-FilenameFilter
    public interface FilenameFilter ("java/io/FilenameFilter") extends crate::java::lang::Object {

        /// [accept](https://developer.android.com/reference/java/io/FilenameFilter.html#accept(java.io.File,%20java.lang.String))
        ///
        /// Required features: "java-io-File", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-String")))]
        pub fn accept<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/io/FilenameFilter", java.flags == PUBLIC | ABSTRACT, .name == "accept", .descriptor == "(Ljava/io/File;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/io/FilenameFilter\0", "accept\0", "(Ljava/io/File;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
