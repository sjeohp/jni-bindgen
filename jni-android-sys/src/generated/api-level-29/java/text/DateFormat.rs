// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-text-DateFormat"))]
__jni_bindgen! {
    /// public class [DateFormat](https://developer.android.com/reference/java/text/DateFormat.html)
    ///
    /// Required feature: java-text-DateFormat
    public class DateFormat ("java/text/DateFormat") extends crate::java::text::Format {

        // // Not emitting: Non-public method
        // /// [DateFormat](https://developer.android.com/reference/java/text/DateFormat.html#DateFormat())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::text::DateFormat>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/text/DateFormat", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [format](https://developer.android.com/reference/java/text/DateFormat.html#format(java.lang.Object,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "java-lang-Object", "java-lang-StringBuffer", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-StringBuffer", feature = "java-text-FieldPosition")))]
        pub fn format_Object_StringBuffer_FieldPosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | FINAL, .name == "format", .descriptor == "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "format\0", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/java/text/DateFormat.html#format(java.util.Date,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "java-lang-StringBuffer", "java-text-FieldPosition", "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-lang-StringBuffer", feature = "java-text-FieldPosition", feature = "java-util-Date")))]
        pub fn format_Date_StringBuffer_FieldPosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Date>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | ABSTRACT, .name == "format", .descriptor == "(Ljava/util/Date;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "format\0", "(Ljava/util/Date;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/java/text/DateFormat.html#format(java.util.Date))
        ///
        /// Required features: "java-lang-String", "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Date")))]
        pub fn format_Date<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Date>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | FINAL, .name == "format", .descriptor == "(Ljava/util/Date;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "format\0", "(Ljava/util/Date;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/text/DateFormat.html#parse(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Date")))]
        pub fn parse_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "parse", .descriptor == "(Ljava/lang/String;)Ljava/util/Date;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "parse\0", "(Ljava/lang/String;)Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/java/text/DateFormat.html#parse(java.lang.String,%20java.text.ParsePosition))
        ///
        /// Required features: "java-lang-String", "java-text-ParsePosition", "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-text-ParsePosition", feature = "java-util-Date")))]
        pub fn parse_String_ParsePosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | ABSTRACT, .name == "parse", .descriptor == "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "parse\0", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseObject](https://developer.android.com/reference/java/text/DateFormat.html#parseObject(java.lang.String,%20java.text.ParsePosition))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-text-ParsePosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-text-ParsePosition")))]
        pub fn parseObject<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "parseObject", .descriptor == "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "parseObject\0", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeInstance](https://developer.android.com/reference/java/text/DateFormat.html#getTimeInstance())
        ///
        /// Required features: "java-text-DateFormat"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat")))]
        pub fn getTimeInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getTimeInstance", .descriptor == "()Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getTimeInstance\0", "()Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeInstance](https://developer.android.com/reference/java/text/DateFormat.html#getTimeInstance(int))
        ///
        /// Required features: "java-text-DateFormat"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat")))]
        pub fn getTimeInstance_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getTimeInstance", .descriptor == "(I)Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getTimeInstance\0", "(I)Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeInstance](https://developer.android.com/reference/java/text/DateFormat.html#getTimeInstance(int,%20java.util.Locale))
        ///
        /// Required features: "java-text-DateFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat", feature = "java-util-Locale")))]
        pub fn getTimeInstance_int_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getTimeInstance", .descriptor == "(ILjava/util/Locale;)Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getTimeInstance\0", "(ILjava/util/Locale;)Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDateInstance](https://developer.android.com/reference/java/text/DateFormat.html#getDateInstance())
        ///
        /// Required features: "java-text-DateFormat"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat")))]
        pub fn getDateInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getDateInstance", .descriptor == "()Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getDateInstance\0", "()Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDateInstance](https://developer.android.com/reference/java/text/DateFormat.html#getDateInstance(int))
        ///
        /// Required features: "java-text-DateFormat"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat")))]
        pub fn getDateInstance_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getDateInstance", .descriptor == "(I)Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getDateInstance\0", "(I)Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDateInstance](https://developer.android.com/reference/java/text/DateFormat.html#getDateInstance(int,%20java.util.Locale))
        ///
        /// Required features: "java-text-DateFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat", feature = "java-util-Locale")))]
        pub fn getDateInstance_int_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getDateInstance", .descriptor == "(ILjava/util/Locale;)Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getDateInstance\0", "(ILjava/util/Locale;)Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDateTimeInstance](https://developer.android.com/reference/java/text/DateFormat.html#getDateTimeInstance())
        ///
        /// Required features: "java-text-DateFormat"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat")))]
        pub fn getDateTimeInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getDateTimeInstance", .descriptor == "()Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getDateTimeInstance\0", "()Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDateTimeInstance](https://developer.android.com/reference/java/text/DateFormat.html#getDateTimeInstance(int,%20int))
        ///
        /// Required features: "java-text-DateFormat"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat")))]
        pub fn getDateTimeInstance_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getDateTimeInstance", .descriptor == "(II)Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getDateTimeInstance\0", "(II)Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDateTimeInstance](https://developer.android.com/reference/java/text/DateFormat.html#getDateTimeInstance(int,%20int,%20java.util.Locale))
        ///
        /// Required features: "java-text-DateFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat", feature = "java-util-Locale")))]
        pub fn getDateTimeInstance_int_int_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getDateTimeInstance", .descriptor == "(IILjava/util/Locale;)Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getDateTimeInstance\0", "(IILjava/util/Locale;)Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/java/text/DateFormat.html#getInstance())
        ///
        /// Required features: "java-text-DateFormat"
        #[cfg(any(feature = "all", all(feature = "java-text-DateFormat")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::DateFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getInstance", .descriptor == "()Ljava/text/DateFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getInstance\0", "()Ljava/text/DateFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAvailableLocales](https://developer.android.com/reference/java/text/DateFormat.html#getAvailableLocales())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn getAvailableLocales<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::util::Locale, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC | STATIC, .name == "getAvailableLocales", .descriptor == "()[Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/text/DateFormat\0", "getAvailableLocales\0", "()[Ljava/util/Locale;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCalendar](https://developer.android.com/reference/java/text/DateFormat.html#setCalendar(java.util.Calendar))
        ///
        /// Required features: "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-util-Calendar")))]
        pub fn setCalendar<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Calendar>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "setCalendar", .descriptor == "(Ljava/util/Calendar;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "setCalendar\0", "(Ljava/util/Calendar;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCalendar](https://developer.android.com/reference/java/text/DateFormat.html#getCalendar())
        ///
        /// Required features: "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-util-Calendar")))]
        pub fn getCalendar<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Calendar>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "getCalendar", .descriptor == "()Ljava/util/Calendar;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "getCalendar\0", "()Ljava/util/Calendar;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNumberFormat](https://developer.android.com/reference/java/text/DateFormat.html#setNumberFormat(java.text.NumberFormat))
        ///
        /// Required features: "java-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "java-text-NumberFormat")))]
        pub fn setNumberFormat<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::NumberFormat>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "setNumberFormat", .descriptor == "(Ljava/text/NumberFormat;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "setNumberFormat\0", "(Ljava/text/NumberFormat;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumberFormat](https://developer.android.com/reference/java/text/DateFormat.html#getNumberFormat())
        ///
        /// Required features: "java-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "java-text-NumberFormat")))]
        pub fn getNumberFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "getNumberFormat", .descriptor == "()Ljava/text/NumberFormat;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "getNumberFormat\0", "()Ljava/text/NumberFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTimeZone](https://developer.android.com/reference/java/text/DateFormat.html#setTimeZone(java.util.TimeZone))
        ///
        /// Required features: "java-util-TimeZone"
        #[cfg(any(feature = "all", all(feature = "java-util-TimeZone")))]
        pub fn setTimeZone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::TimeZone>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "setTimeZone", .descriptor == "(Ljava/util/TimeZone;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "setTimeZone\0", "(Ljava/util/TimeZone;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeZone](https://developer.android.com/reference/java/text/DateFormat.html#getTimeZone())
        ///
        /// Required features: "java-util-TimeZone"
        #[cfg(any(feature = "all", all(feature = "java-util-TimeZone")))]
        pub fn getTimeZone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::TimeZone>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "getTimeZone", .descriptor == "()Ljava/util/TimeZone;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "getTimeZone\0", "()Ljava/util/TimeZone;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLenient](https://developer.android.com/reference/java/text/DateFormat.html#setLenient(boolean))
        pub fn setLenient<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "setLenient", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "setLenient\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLenient](https://developer.android.com/reference/java/text/DateFormat.html#isLenient())
        pub fn isLenient<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "isLenient", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "isLenient\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/text/DateFormat.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/text/DateFormat.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/java/text/DateFormat.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/DateFormat", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/DateFormat\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [AM_PM_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#AM_PM_FIELD)
        pub const AM_PM_FIELD : i32 = 14;

        /// public static final [DATE_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#DATE_FIELD)
        pub const DATE_FIELD : i32 = 3;

        /// public static final [DAY_OF_WEEK_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#DAY_OF_WEEK_FIELD)
        pub const DAY_OF_WEEK_FIELD : i32 = 9;

        /// public static final [DAY_OF_WEEK_IN_MONTH_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#DAY_OF_WEEK_IN_MONTH_FIELD)
        pub const DAY_OF_WEEK_IN_MONTH_FIELD : i32 = 11;

        /// public static final [DAY_OF_YEAR_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#DAY_OF_YEAR_FIELD)
        pub const DAY_OF_YEAR_FIELD : i32 = 10;

        /// public static final [DEFAULT](https://developer.android.com/reference/java/text/DateFormat.html#DEFAULT)
        pub const DEFAULT : i32 = 2;

        /// public static final [ERA_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#ERA_FIELD)
        pub const ERA_FIELD : i32 = 0;

        /// public static final [FULL](https://developer.android.com/reference/java/text/DateFormat.html#FULL)
        pub const FULL : i32 = 0;

        /// public static final [HOUR0_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#HOUR0_FIELD)
        pub const HOUR0_FIELD : i32 = 16;

        /// public static final [HOUR1_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#HOUR1_FIELD)
        pub const HOUR1_FIELD : i32 = 15;

        /// public static final [HOUR_OF_DAY0_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#HOUR_OF_DAY0_FIELD)
        pub const HOUR_OF_DAY0_FIELD : i32 = 5;

        /// public static final [HOUR_OF_DAY1_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#HOUR_OF_DAY1_FIELD)
        pub const HOUR_OF_DAY1_FIELD : i32 = 4;

        /// public static final [LONG](https://developer.android.com/reference/java/text/DateFormat.html#LONG)
        pub const LONG : i32 = 1;

        /// public static final [MEDIUM](https://developer.android.com/reference/java/text/DateFormat.html#MEDIUM)
        pub const MEDIUM : i32 = 2;

        /// public static final [MILLISECOND_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#MILLISECOND_FIELD)
        pub const MILLISECOND_FIELD : i32 = 8;

        /// public static final [MINUTE_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#MINUTE_FIELD)
        pub const MINUTE_FIELD : i32 = 6;

        /// public static final [MONTH_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#MONTH_FIELD)
        pub const MONTH_FIELD : i32 = 2;

        /// public static final [SECOND_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#SECOND_FIELD)
        pub const SECOND_FIELD : i32 = 7;

        /// public static final [SHORT](https://developer.android.com/reference/java/text/DateFormat.html#SHORT)
        pub const SHORT : i32 = 3;

        /// public static final [TIMEZONE_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#TIMEZONE_FIELD)
        pub const TIMEZONE_FIELD : i32 = 17;

        /// public static final [WEEK_OF_MONTH_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#WEEK_OF_MONTH_FIELD)
        pub const WEEK_OF_MONTH_FIELD : i32 = 13;

        /// public static final [WEEK_OF_YEAR_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#WEEK_OF_YEAR_FIELD)
        pub const WEEK_OF_YEAR_FIELD : i32 = 12;

        /// public static final [YEAR_FIELD](https://developer.android.com/reference/java/text/DateFormat.html#YEAR_FIELD)
        pub const YEAR_FIELD : i32 = 1;

        // // Not emitting: Non-public field
        // /// **get** protected [calendar](https://developer.android.com/reference/java/text/DateFormat.html#calendar)
        // ///
        // /// Required feature: java-util-Calendar
        // #[cfg(any(feature = "all", feature = "java-util-Calendar"))]
        // pub fn calendar<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Calendar>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/text/DateFormat\0", "calendar\0", "Ljava/util/Calendar;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [calendar](https://developer.android.com/reference/java/text/DateFormat.html#calendar)
        // ///
        // /// Required feature: java-util-Calendar
        // #[cfg(any(feature = "all", feature = "java-util-Calendar"))]
        // pub fn set_calendar<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::Calendar>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/text/DateFormat\0", "calendar\0", "Ljava/util/Calendar;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [numberFormat](https://developer.android.com/reference/java/text/DateFormat.html#numberFormat)
        // ///
        // /// Required feature: java-text-NumberFormat
        // #[cfg(any(feature = "all", feature = "java-text-NumberFormat"))]
        // pub fn numberFormat<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::NumberFormat>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/text/DateFormat\0", "numberFormat\0", "Ljava/text/NumberFormat;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [numberFormat](https://developer.android.com/reference/java/text/DateFormat.html#numberFormat)
        // ///
        // /// Required feature: java-text-NumberFormat
        // #[cfg(any(feature = "all", feature = "java-text-NumberFormat"))]
        // pub fn set_numberFormat<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::text::NumberFormat>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/text/DateFormat\0", "numberFormat\0", "Ljava/text/NumberFormat;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }
    }
}
