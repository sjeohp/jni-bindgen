// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-text-AttributedString"))]
__jni_bindgen! {
    /// public class [AttributedString](https://developer.android.com/reference/java/text/AttributedString.html)
    ///
    /// Required feature: java-text-AttributedString
    public class AttributedString ("java/text/AttributedString") extends crate::java::lang::Object {

        /// [AttributedString](https://developer.android.com/reference/java/text/AttributedString.html#AttributedString(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::text::AttributedString>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [AttributedString](https://developer.android.com/reference/java/text/AttributedString.html#AttributedString(java.lang.String,%20java.util.Map))
        ///
        /// Required features: "java-lang-String", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Map")))]
        pub fn new_String_Map<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::text::AttributedString>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/util/Map;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "<init>\0", "(Ljava/lang/String;Ljava/util/Map;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [AttributedString](https://developer.android.com/reference/java/text/AttributedString.html#AttributedString(java.text.AttributedCharacterIterator))
        ///
        /// Required features: "java-text-AttributedCharacterIterator"
        #[cfg(any(feature = "all", all(feature = "java-text-AttributedCharacterIterator")))]
        pub fn new_AttributedCharacterIterator<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::AttributedCharacterIterator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::text::AttributedString>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/text/AttributedCharacterIterator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "<init>\0", "(Ljava/text/AttributedCharacterIterator;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [AttributedString](https://developer.android.com/reference/java/text/AttributedString.html#AttributedString(java.text.AttributedCharacterIterator,%20int,%20int))
        ///
        /// Required features: "java-text-AttributedCharacterIterator"
        #[cfg(any(feature = "all", all(feature = "java-text-AttributedCharacterIterator")))]
        pub fn new_AttributedCharacterIterator_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::AttributedCharacterIterator>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::text::AttributedString>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/text/AttributedCharacterIterator;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "<init>\0", "(Ljava/text/AttributedCharacterIterator;II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [AttributedString](https://developer.android.com/reference/java/text/AttributedString.html#AttributedString(java.text.AttributedCharacterIterator,%20int,%20int,%20java.text.AttributedCharacterIterator.Attribute%5B%5D))
        ///
        /// Required features: "java-text-AttributedCharacterIterator", "java-text-AttributedCharacterIterator_Attribute"
        #[cfg(any(feature = "all", all(feature = "java-text-AttributedCharacterIterator", feature = "java-text-AttributedCharacterIterator_Attribute")))]
        pub fn new_AttributedCharacterIterator_int_int_Attribute_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::AttributedCharacterIterator>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::text::AttributedCharacterIterator_Attribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::text::AttributedString>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/text/AttributedCharacterIterator;II[Ljava/text/AttributedCharacterIterator$Attribute;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "<init>\0", "(Ljava/text/AttributedCharacterIterator;II[Ljava/text/AttributedCharacterIterator$Attribute;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAttribute](https://developer.android.com/reference/java/text/AttributedString.html#addAttribute(java.text.AttributedCharacterIterator.Attribute,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-text-AttributedCharacterIterator_Attribute"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-text-AttributedCharacterIterator_Attribute")))]
        pub fn addAttribute_Attribute_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::AttributedCharacterIterator_Attribute>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "addAttribute", .descriptor == "(Ljava/text/AttributedCharacterIterator$Attribute;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "addAttribute\0", "(Ljava/text/AttributedCharacterIterator$Attribute;Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAttribute](https://developer.android.com/reference/java/text/AttributedString.html#addAttribute(java.text.AttributedCharacterIterator.Attribute,%20java.lang.Object,%20int,%20int))
        ///
        /// Required features: "java-lang-Object", "java-text-AttributedCharacterIterator_Attribute"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-text-AttributedCharacterIterator_Attribute")))]
        pub fn addAttribute_Attribute_Object_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::AttributedCharacterIterator_Attribute>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "addAttribute", .descriptor == "(Ljava/text/AttributedCharacterIterator$Attribute;Ljava/lang/Object;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "addAttribute\0", "(Ljava/text/AttributedCharacterIterator$Attribute;Ljava/lang/Object;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAttributes](https://developer.android.com/reference/java/text/AttributedString.html#addAttributes(java.util.Map,%20int,%20int))
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn addAttributes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "addAttributes", .descriptor == "(Ljava/util/Map;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "addAttributes\0", "(Ljava/util/Map;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIterator](https://developer.android.com/reference/java/text/AttributedString.html#getIterator())
        ///
        /// Required features: "java-text-AttributedCharacterIterator"
        #[cfg(any(feature = "all", all(feature = "java-text-AttributedCharacterIterator")))]
        pub fn getIterator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::AttributedCharacterIterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "getIterator", .descriptor == "()Ljava/text/AttributedCharacterIterator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "getIterator\0", "()Ljava/text/AttributedCharacterIterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIterator](https://developer.android.com/reference/java/text/AttributedString.html#getIterator(java.text.AttributedCharacterIterator.Attribute%5B%5D))
        ///
        /// Required features: "java-text-AttributedCharacterIterator", "java-text-AttributedCharacterIterator_Attribute"
        #[cfg(any(feature = "all", all(feature = "java-text-AttributedCharacterIterator", feature = "java-text-AttributedCharacterIterator_Attribute")))]
        pub fn getIterator_Attribute_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::text::AttributedCharacterIterator_Attribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::AttributedCharacterIterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "getIterator", .descriptor == "([Ljava/text/AttributedCharacterIterator$Attribute;)Ljava/text/AttributedCharacterIterator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "getIterator\0", "([Ljava/text/AttributedCharacterIterator$Attribute;)Ljava/text/AttributedCharacterIterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIterator](https://developer.android.com/reference/java/text/AttributedString.html#getIterator(java.text.AttributedCharacterIterator.Attribute%5B%5D,%20int,%20int))
        ///
        /// Required features: "java-text-AttributedCharacterIterator", "java-text-AttributedCharacterIterator_Attribute"
        #[cfg(any(feature = "all", all(feature = "java-text-AttributedCharacterIterator", feature = "java-text-AttributedCharacterIterator_Attribute")))]
        pub fn getIterator_Attribute_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::text::AttributedCharacterIterator_Attribute, crate::java::lang::Throwable>>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::text::AttributedCharacterIterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedString", java.flags == PUBLIC, .name == "getIterator", .descriptor == "([Ljava/text/AttributedCharacterIterator$Attribute;II)Ljava/text/AttributedCharacterIterator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedString\0", "getIterator\0", "([Ljava/text/AttributedCharacterIterator$Attribute;II)Ljava/text/AttributedCharacterIterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
