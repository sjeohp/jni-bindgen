// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-text-AttributedCharacterIterator"))]
__jni_bindgen! {
    /// public interface [AttributedCharacterIterator](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html)
    ///
    /// Required feature: java-text-AttributedCharacterIterator
    public interface AttributedCharacterIterator ("java/text/AttributedCharacterIterator") extends crate::java::lang::Object, implements crate::java::text::CharacterIterator {

        /// [getRunStart](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html#getRunStart())
        pub fn getRunStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedCharacterIterator", java.flags == PUBLIC | ABSTRACT, .name == "getRunStart", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedCharacterIterator\0", "getRunStart\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunStart](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html#getRunStart(java.text.AttributedCharacterIterator.Attribute))
        ///
        /// Required features: "java-text-AttributedCharacterIterator_Attribute"
        #[cfg(any(feature = "all", all(feature = "java-text-AttributedCharacterIterator_Attribute")))]
        pub fn getRunStart_Attribute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::AttributedCharacterIterator_Attribute>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedCharacterIterator", java.flags == PUBLIC | ABSTRACT, .name == "getRunStart", .descriptor == "(Ljava/text/AttributedCharacterIterator$Attribute;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedCharacterIterator\0", "getRunStart\0", "(Ljava/text/AttributedCharacterIterator$Attribute;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunStart](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html#getRunStart(java.util.Set))
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getRunStart_Set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedCharacterIterator", java.flags == PUBLIC | ABSTRACT, .name == "getRunStart", .descriptor == "(Ljava/util/Set;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedCharacterIterator\0", "getRunStart\0", "(Ljava/util/Set;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunLimit](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html#getRunLimit())
        pub fn getRunLimit<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedCharacterIterator", java.flags == PUBLIC | ABSTRACT, .name == "getRunLimit", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedCharacterIterator\0", "getRunLimit\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunLimit](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html#getRunLimit(java.text.AttributedCharacterIterator.Attribute))
        ///
        /// Required features: "java-text-AttributedCharacterIterator_Attribute"
        #[cfg(any(feature = "all", all(feature = "java-text-AttributedCharacterIterator_Attribute")))]
        pub fn getRunLimit_Attribute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::AttributedCharacterIterator_Attribute>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedCharacterIterator", java.flags == PUBLIC | ABSTRACT, .name == "getRunLimit", .descriptor == "(Ljava/text/AttributedCharacterIterator$Attribute;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedCharacterIterator\0", "getRunLimit\0", "(Ljava/text/AttributedCharacterIterator$Attribute;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunLimit](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html#getRunLimit(java.util.Set))
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getRunLimit_Set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedCharacterIterator", java.flags == PUBLIC | ABSTRACT, .name == "getRunLimit", .descriptor == "(Ljava/util/Set;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedCharacterIterator\0", "getRunLimit\0", "(Ljava/util/Set;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributes](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html#getAttributes())
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn getAttributes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedCharacterIterator", java.flags == PUBLIC | ABSTRACT, .name == "getAttributes", .descriptor == "()Ljava/util/Map;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedCharacterIterator\0", "getAttributes\0", "()Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttribute](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html#getAttribute(java.text.AttributedCharacterIterator.Attribute))
        ///
        /// Required features: "java-lang-Object", "java-text-AttributedCharacterIterator_Attribute"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-text-AttributedCharacterIterator_Attribute")))]
        pub fn getAttribute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::AttributedCharacterIterator_Attribute>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedCharacterIterator", java.flags == PUBLIC | ABSTRACT, .name == "getAttribute", .descriptor == "(Ljava/text/AttributedCharacterIterator$Attribute;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedCharacterIterator\0", "getAttribute\0", "(Ljava/text/AttributedCharacterIterator$Attribute;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllAttributeKeys](https://developer.android.com/reference/java/text/AttributedCharacterIterator.html#getAllAttributeKeys())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getAllAttributeKeys<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/text/AttributedCharacterIterator", java.flags == PUBLIC | ABSTRACT, .name == "getAllAttributeKeys", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/text/AttributedCharacterIterator\0", "getAllAttributeKeys\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
