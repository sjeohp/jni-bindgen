// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-net-URLStreamHandler"))]
__jni_bindgen! {
    /// public class [URLStreamHandler](https://developer.android.com/reference/java/net/URLStreamHandler.html)
    ///
    /// Required feature: java-net-URLStreamHandler
    public class URLStreamHandler ("java/net/URLStreamHandler") extends crate::java::lang::Object {

        /// [URLStreamHandler](https://developer.android.com/reference/java/net/URLStreamHandler.html#URLStreamHandler())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::net::URLStreamHandler>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/URLStreamHandler", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [openConnection](https://developer.android.com/reference/java/net/URLStreamHandler.html#openConnection(java.net.URL))
        // ///
        // /// Required features: "java-net-URL", "java-net-URLConnection"
        // #[cfg(any(feature = "all", all(feature = "java-net-URL", feature = "java-net-URLConnection")))]
        // fn openConnection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::URLConnection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED | ABSTRACT, .name == "openConnection", .descriptor == "(Ljava/net/URL;)Ljava/net/URLConnection;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "openConnection\0", "(Ljava/net/URL;)Ljava/net/URLConnection;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [openConnection](https://developer.android.com/reference/java/net/URLStreamHandler.html#openConnection(java.net.URL,%20java.net.Proxy))
        // ///
        // /// Required features: "java-net-Proxy", "java-net-URL", "java-net-URLConnection"
        // #[cfg(any(feature = "all", all(feature = "java-net-Proxy", feature = "java-net-URL", feature = "java-net-URLConnection")))]
        // fn openConnection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Proxy>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::URLConnection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "openConnection", .descriptor == "(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/URLConnection;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "openConnection\0", "(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/URLConnection;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [parseURL](https://developer.android.com/reference/java/net/URLStreamHandler.html#parseURL(java.net.URL,%20java.lang.String,%20int,%20int))
        // ///
        // /// Required features: "java-lang-String", "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        // fn parseURL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "parseURL", .descriptor == "(Ljava/net/URL;Ljava/lang/String;II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "parseURL\0", "(Ljava/net/URL;Ljava/lang/String;II)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getDefaultPort](https://developer.android.com/reference/java/net/URLStreamHandler.html#getDefaultPort())
        // fn getDefaultPort<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "getDefaultPort", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "getDefaultPort\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [equals](https://developer.android.com/reference/java/net/URLStreamHandler.html#equals(java.net.URL,%20java.net.URL))
        // ///
        // /// Required features: "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-net-URL")))]
        // fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "equals", .descriptor == "(Ljava/net/URL;Ljava/net/URL;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "equals\0", "(Ljava/net/URL;Ljava/net/URL;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [hashCode](https://developer.android.com/reference/java/net/URLStreamHandler.html#hashCode(java.net.URL))
        // ///
        // /// Required features: "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-net-URL")))]
        // fn hashCode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "hashCode", .descriptor == "(Ljava/net/URL;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "hashCode\0", "(Ljava/net/URL;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [sameFile](https://developer.android.com/reference/java/net/URLStreamHandler.html#sameFile(java.net.URL,%20java.net.URL))
        // ///
        // /// Required features: "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-net-URL")))]
        // fn sameFile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "sameFile", .descriptor == "(Ljava/net/URL;Ljava/net/URL;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "sameFile\0", "(Ljava/net/URL;Ljava/net/URL;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getHostAddress](https://developer.android.com/reference/java/net/URLStreamHandler.html#getHostAddress(java.net.URL))
        // ///
        // /// Required features: "java-net-InetAddress", "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-net-InetAddress", feature = "java-net-URL")))]
        // fn getHostAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::InetAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED | SYNCRONIZED, .name == "getHostAddress", .descriptor == "(Ljava/net/URL;)Ljava/net/InetAddress;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "getHostAddress\0", "(Ljava/net/URL;)Ljava/net/InetAddress;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [hostsEqual](https://developer.android.com/reference/java/net/URLStreamHandler.html#hostsEqual(java.net.URL,%20java.net.URL))
        // ///
        // /// Required features: "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-net-URL")))]
        // fn hostsEqual<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "hostsEqual", .descriptor == "(Ljava/net/URL;Ljava/net/URL;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "hostsEqual\0", "(Ljava/net/URL;Ljava/net/URL;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [toExternalForm](https://developer.android.com/reference/java/net/URLStreamHandler.html#toExternalForm(java.net.URL))
        // ///
        // /// Required features: "java-lang-String", "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        // fn toExternalForm<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "toExternalForm", .descriptor == "(Ljava/net/URL;)Ljava/lang/String;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "toExternalForm\0", "(Ljava/net/URL;)Ljava/lang/String;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [setURL](https://developer.android.com/reference/java/net/URLStreamHandler.html#setURL(java.net.URL,%20java.lang.String,%20java.lang.String,%20int,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String))
        // ///
        // /// Required features: "java-lang-String", "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        // fn setURL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "setURL", .descriptor == "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "setURL\0", "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [setURL](https://developer.android.com/reference/java/net/URLStreamHandler.html#setURL(java.net.URL,%20java.lang.String,%20java.lang.String,%20int,%20java.lang.String,%20java.lang.String))
        // ///
        // /// Required features: "java-lang-String", "java-net-URL"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        // #[deprecated] fn setURL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URL>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/URLStreamHandler", java.flags == PROTECTED, .name == "setURL", .descriptor == "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/URLStreamHandler\0", "setURL\0", "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
