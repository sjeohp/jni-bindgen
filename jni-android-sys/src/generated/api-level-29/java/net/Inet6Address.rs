// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-net-Inet6Address"))]
__jni_bindgen! {
    /// public final class [Inet6Address](https://developer.android.com/reference/java/net/Inet6Address.html)
    ///
    /// Required feature: java-net-Inet6Address
    public final class Inet6Address ("java/net/Inet6Address") extends crate::java::net::InetAddress {

        // // Not emitting: Non-public method
        // /// [Inet6Address](https://developer.android.com/reference/java/net/Inet6Address.html#Inet6Address())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::net::Inet6Address>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/net/Inet6Address", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getByAddress](https://developer.android.com/reference/java/net/Inet6Address.html#getByAddress(java.lang.String,%20byte%5B%5D,%20java.net.NetworkInterface))
        ///
        /// Required features: "java-lang-String", "java-net-Inet6Address", "java-net-NetworkInterface"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-Inet6Address", feature = "java-net-NetworkInterface")))]
        pub fn getByAddress_String_byte_array_NetworkInterface<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::NetworkInterface>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Inet6Address>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC | STATIC, .name == "getByAddress", .descriptor == "(Ljava/lang/String;[BLjava/net/NetworkInterface;)Ljava/net/Inet6Address;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/net/Inet6Address\0", "getByAddress\0", "(Ljava/lang/String;[BLjava/net/NetworkInterface;)Ljava/net/Inet6Address;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getByAddress](https://developer.android.com/reference/java/net/Inet6Address.html#getByAddress(java.lang.String,%20byte%5B%5D,%20int))
        ///
        /// Required features: "java-lang-String", "java-net-Inet6Address"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-Inet6Address")))]
        pub fn getByAddress_String_byte_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::Inet6Address>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC | STATIC, .name == "getByAddress", .descriptor == "(Ljava/lang/String;[BI)Ljava/net/Inet6Address;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/net/Inet6Address\0", "getByAddress\0", "(Ljava/lang/String;[BI)Ljava/net/Inet6Address;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMulticastAddress](https://developer.android.com/reference/java/net/Inet6Address.html#isMulticastAddress())
        pub fn isMulticastAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isMulticastAddress", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isMulticastAddress\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAnyLocalAddress](https://developer.android.com/reference/java/net/Inet6Address.html#isAnyLocalAddress())
        pub fn isAnyLocalAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isAnyLocalAddress", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isAnyLocalAddress\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLoopbackAddress](https://developer.android.com/reference/java/net/Inet6Address.html#isLoopbackAddress())
        pub fn isLoopbackAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isLoopbackAddress", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isLoopbackAddress\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLinkLocalAddress](https://developer.android.com/reference/java/net/Inet6Address.html#isLinkLocalAddress())
        pub fn isLinkLocalAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isLinkLocalAddress", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isLinkLocalAddress\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSiteLocalAddress](https://developer.android.com/reference/java/net/Inet6Address.html#isSiteLocalAddress())
        pub fn isSiteLocalAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isSiteLocalAddress", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isSiteLocalAddress\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMCGlobal](https://developer.android.com/reference/java/net/Inet6Address.html#isMCGlobal())
        pub fn isMCGlobal<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isMCGlobal", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isMCGlobal\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMCNodeLocal](https://developer.android.com/reference/java/net/Inet6Address.html#isMCNodeLocal())
        pub fn isMCNodeLocal<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isMCNodeLocal", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isMCNodeLocal\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMCLinkLocal](https://developer.android.com/reference/java/net/Inet6Address.html#isMCLinkLocal())
        pub fn isMCLinkLocal<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isMCLinkLocal", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isMCLinkLocal\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMCSiteLocal](https://developer.android.com/reference/java/net/Inet6Address.html#isMCSiteLocal())
        pub fn isMCSiteLocal<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isMCSiteLocal", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isMCSiteLocal\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMCOrgLocal](https://developer.android.com/reference/java/net/Inet6Address.html#isMCOrgLocal())
        pub fn isMCOrgLocal<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isMCOrgLocal", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isMCOrgLocal\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAddress](https://developer.android.com/reference/java/net/Inet6Address.html#getAddress())
        pub fn getAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "getAddress", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "getAddress\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScopeId](https://developer.android.com/reference/java/net/Inet6Address.html#getScopeId())
        pub fn getScopeId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "getScopeId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "getScopeId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScopedInterface](https://developer.android.com/reference/java/net/Inet6Address.html#getScopedInterface())
        ///
        /// Required features: "java-net-NetworkInterface"
        #[cfg(any(feature = "all", all(feature = "java-net-NetworkInterface")))]
        pub fn getScopedInterface<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::NetworkInterface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "getScopedInterface", .descriptor == "()Ljava/net/NetworkInterface;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "getScopedInterface\0", "()Ljava/net/NetworkInterface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHostAddress](https://developer.android.com/reference/java/net/Inet6Address.html#getHostAddress())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getHostAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "getHostAddress", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "getHostAddress\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/net/Inet6Address.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/net/Inet6Address.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isIPv4CompatibleAddress](https://developer.android.com/reference/java/net/Inet6Address.html#isIPv4CompatibleAddress())
        pub fn isIPv4CompatibleAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/Inet6Address", java.flags == PUBLIC, .name == "isIPv4CompatibleAddress", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/Inet6Address\0", "isIPv4CompatibleAddress\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
