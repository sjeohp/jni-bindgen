// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-net-CookieStore"))]
__jni_bindgen! {
    /// public interface [CookieStore](https://developer.android.com/reference/java/net/CookieStore.html)
    ///
    /// Required feature: java-net-CookieStore
    public interface CookieStore ("java/net/CookieStore") extends crate::java::lang::Object {

        /// [add](https://developer.android.com/reference/java/net/CookieStore.html#add(java.net.URI,%20java.net.HttpCookie))
        ///
        /// Required features: "java-net-HttpCookie", "java-net-URI"
        #[cfg(any(feature = "all", all(feature = "java-net-HttpCookie", feature = "java-net-URI")))]
        pub fn add<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::HttpCookie>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieStore", java.flags == PUBLIC | ABSTRACT, .name == "add", .descriptor == "(Ljava/net/URI;Ljava/net/HttpCookie;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/CookieStore\0", "add\0", "(Ljava/net/URI;Ljava/net/HttpCookie;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/net/CookieStore.html#get(java.net.URI))
        ///
        /// Required features: "java-net-URI", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-net-URI", feature = "java-util-List")))]
        pub fn get<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieStore", java.flags == PUBLIC | ABSTRACT, .name == "get", .descriptor == "(Ljava/net/URI;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/CookieStore\0", "get\0", "(Ljava/net/URI;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCookies](https://developer.android.com/reference/java/net/CookieStore.html#getCookies())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getCookies<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieStore", java.flags == PUBLIC | ABSTRACT, .name == "getCookies", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/CookieStore\0", "getCookies\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getURIs](https://developer.android.com/reference/java/net/CookieStore.html#getURIs())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getURIs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieStore", java.flags == PUBLIC | ABSTRACT, .name == "getURIs", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/CookieStore\0", "getURIs\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [remove](https://developer.android.com/reference/java/net/CookieStore.html#remove(java.net.URI,%20java.net.HttpCookie))
        ///
        /// Required features: "java-net-HttpCookie", "java-net-URI"
        #[cfg(any(feature = "all", all(feature = "java-net-HttpCookie", feature = "java-net-URI")))]
        pub fn remove<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::HttpCookie>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieStore", java.flags == PUBLIC | ABSTRACT, .name == "remove", .descriptor == "(Ljava/net/URI;Ljava/net/HttpCookie;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/CookieStore\0", "remove\0", "(Ljava/net/URI;Ljava/net/HttpCookie;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAll](https://developer.android.com/reference/java/net/CookieStore.html#removeAll())
        pub fn removeAll<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieStore", java.flags == PUBLIC | ABSTRACT, .name == "removeAll", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/CookieStore\0", "removeAll\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
