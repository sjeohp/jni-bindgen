// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-net-CookieHandler"))]
__jni_bindgen! {
    /// public class [CookieHandler](https://developer.android.com/reference/java/net/CookieHandler.html)
    ///
    /// Required feature: java-net-CookieHandler
    public class CookieHandler ("java/net/CookieHandler") extends crate::java::lang::Object {

        /// [CookieHandler](https://developer.android.com/reference/java/net/CookieHandler.html#CookieHandler())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::net::CookieHandler>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieHandler", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/CookieHandler\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefault](https://developer.android.com/reference/java/net/CookieHandler.html#getDefault())
        ///
        /// Required features: "java-net-CookieHandler"
        #[cfg(any(feature = "all", all(feature = "java-net-CookieHandler")))]
        pub fn getDefault<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::CookieHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieHandler", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "getDefault", .descriptor == "()Ljava/net/CookieHandler;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/net/CookieHandler\0", "getDefault\0", "()Ljava/net/CookieHandler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDefault](https://developer.android.com/reference/java/net/CookieHandler.html#setDefault(java.net.CookieHandler))
        ///
        /// Required features: "java-net-CookieHandler"
        #[cfg(any(feature = "all", all(feature = "java-net-CookieHandler")))]
        pub fn setDefault<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::CookieHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieHandler", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "setDefault", .descriptor == "(Ljava/net/CookieHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/net/CookieHandler\0", "setDefault\0", "(Ljava/net/CookieHandler;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/net/CookieHandler.html#get(java.net.URI,%20java.util.Map))
        ///
        /// Required features: "java-net-URI", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-net-URI", feature = "java-util-Map")))]
        pub fn get<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieHandler", java.flags == PUBLIC | ABSTRACT, .name == "get", .descriptor == "(Ljava/net/URI;Ljava/util/Map;)Ljava/util/Map;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/CookieHandler\0", "get\0", "(Ljava/net/URI;Ljava/util/Map;)Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [put](https://developer.android.com/reference/java/net/CookieHandler.html#put(java.net.URI,%20java.util.Map))
        ///
        /// Required features: "java-net-URI", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-net-URI", feature = "java-util-Map")))]
        pub fn put<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/CookieHandler", java.flags == PUBLIC | ABSTRACT, .name == "put", .descriptor == "(Ljava/net/URI;Ljava/util/Map;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/CookieHandler\0", "put\0", "(Ljava/net/URI;Ljava/util/Map;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
