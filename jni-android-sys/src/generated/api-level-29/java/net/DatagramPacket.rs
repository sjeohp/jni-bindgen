// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-net-DatagramPacket"))]
__jni_bindgen! {
    /// public final class [DatagramPacket](https://developer.android.com/reference/java/net/DatagramPacket.html)
    ///
    /// Required feature: java-net-DatagramPacket
    public final class DatagramPacket ("java/net/DatagramPacket") extends crate::java::lang::Object {

        /// [DatagramPacket](https://developer.android.com/reference/java/net/DatagramPacket.html#DatagramPacket(byte%5B%5D,%20int,%20int))
        pub fn new_byte_array_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::net::DatagramPacket>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "<init>\0", "([BII)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatagramPacket](https://developer.android.com/reference/java/net/DatagramPacket.html#DatagramPacket(byte%5B%5D,%20int))
        pub fn new_byte_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::net::DatagramPacket>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "<init>\0", "([BI)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatagramPacket](https://developer.android.com/reference/java/net/DatagramPacket.html#DatagramPacket(byte%5B%5D,%20int,%20int,%20java.net.InetAddress,%20int))
        ///
        /// Required features: "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress")))]
        pub fn new_byte_array_int_int_InetAddress_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::net::DatagramPacket>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BIILjava/net/InetAddress;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "<init>\0", "([BIILjava/net/InetAddress;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatagramPacket](https://developer.android.com/reference/java/net/DatagramPacket.html#DatagramPacket(byte%5B%5D,%20int,%20int,%20java.net.SocketAddress))
        ///
        /// Required features: "java-net-SocketAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress")))]
        pub fn new_byte_array_int_int_SocketAddress<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::net::DatagramPacket>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BIILjava/net/SocketAddress;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "<init>\0", "([BIILjava/net/SocketAddress;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatagramPacket](https://developer.android.com/reference/java/net/DatagramPacket.html#DatagramPacket(byte%5B%5D,%20int,%20java.net.InetAddress,%20int))
        ///
        /// Required features: "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress")))]
        pub fn new_byte_array_int_InetAddress_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::net::DatagramPacket>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BILjava/net/InetAddress;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "<init>\0", "([BILjava/net/InetAddress;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatagramPacket](https://developer.android.com/reference/java/net/DatagramPacket.html#DatagramPacket(byte%5B%5D,%20int,%20java.net.SocketAddress))
        ///
        /// Required features: "java-net-SocketAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress")))]
        pub fn new_byte_array_int_SocketAddress<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::net::DatagramPacket>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC, .name == "<init>", .descriptor == "([BILjava/net/SocketAddress;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "<init>\0", "([BILjava/net/SocketAddress;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAddress](https://developer.android.com/reference/java/net/DatagramPacket.html#getAddress())
        ///
        /// Required features: "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress")))]
        pub fn getAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::InetAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "getAddress", .descriptor == "()Ljava/net/InetAddress;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "getAddress\0", "()Ljava/net/InetAddress;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPort](https://developer.android.com/reference/java/net/DatagramPacket.html#getPort())
        pub fn getPort<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "getPort", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "getPort\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getData](https://developer.android.com/reference/java/net/DatagramPacket.html#getData())
        pub fn getData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "getData", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "getData\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffset](https://developer.android.com/reference/java/net/DatagramPacket.html#getOffset())
        pub fn getOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "getOffset", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "getOffset\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLength](https://developer.android.com/reference/java/net/DatagramPacket.html#getLength())
        pub fn getLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "getLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "getLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setData](https://developer.android.com/reference/java/net/DatagramPacket.html#setData(byte%5B%5D,%20int,%20int))
        pub fn setData_byte_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "setData", .descriptor == "([BII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "setData\0", "([BII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAddress](https://developer.android.com/reference/java/net/DatagramPacket.html#setAddress(java.net.InetAddress))
        ///
        /// Required features: "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress")))]
        pub fn setAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "setAddress", .descriptor == "(Ljava/net/InetAddress;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "setAddress\0", "(Ljava/net/InetAddress;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPort](https://developer.android.com/reference/java/net/DatagramPacket.html#setPort(int))
        pub fn setPort<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "setPort", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "setPort\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSocketAddress](https://developer.android.com/reference/java/net/DatagramPacket.html#setSocketAddress(java.net.SocketAddress))
        ///
        /// Required features: "java-net-SocketAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress")))]
        pub fn setSocketAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketAddress>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "setSocketAddress", .descriptor == "(Ljava/net/SocketAddress;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "setSocketAddress\0", "(Ljava/net/SocketAddress;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSocketAddress](https://developer.android.com/reference/java/net/DatagramPacket.html#getSocketAddress())
        ///
        /// Required features: "java-net-SocketAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress")))]
        pub fn getSocketAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::SocketAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "getSocketAddress", .descriptor == "()Ljava/net/SocketAddress;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "getSocketAddress\0", "()Ljava/net/SocketAddress;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setData](https://developer.android.com/reference/java/net/DatagramPacket.html#setData(byte%5B%5D))
        pub fn setData_byte_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "setData", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "setData\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLength](https://developer.android.com/reference/java/net/DatagramPacket.html#setLength(int))
        pub fn setLength<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/net/DatagramPacket", java.flags == PUBLIC | SYNCRONIZED, .name == "setLength", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/net/DatagramPacket\0", "setLength\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
