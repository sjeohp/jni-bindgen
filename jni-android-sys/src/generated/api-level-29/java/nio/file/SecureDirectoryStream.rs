// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-file-SecureDirectoryStream"))]
__jni_bindgen! {
    /// public interface [SecureDirectoryStream](https://developer.android.com/reference/java/nio/file/SecureDirectoryStream.html)
    ///
    /// Required feature: java-nio-file-SecureDirectoryStream
    public interface SecureDirectoryStream ("java/nio/file/SecureDirectoryStream") extends crate::java::lang::Object, implements crate::java::nio::file::DirectoryStream {

        /// [newDirectoryStream](https://developer.android.com/reference/java/nio/file/SecureDirectoryStream.html#newDirectoryStream(java.lang.Object,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-Object", "java-nio-file-LinkOption", "java-nio-file-SecureDirectoryStream"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-file-LinkOption", feature = "java-nio-file-SecureDirectoryStream")))]
        pub fn newDirectoryStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::SecureDirectoryStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/SecureDirectoryStream", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "newDirectoryStream", .descriptor == "(Ljava/lang/Object;[Ljava/nio/file/LinkOption;)Ljava/nio/file/SecureDirectoryStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/SecureDirectoryStream\0", "newDirectoryStream\0", "(Ljava/lang/Object;[Ljava/nio/file/LinkOption;)Ljava/nio/file/SecureDirectoryStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newByteChannel](https://developer.android.com/reference/java/nio/file/SecureDirectoryStream.html#newByteChannel(java.lang.Object,%20java.util.Set,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-lang-Object", "java-nio-channels-SeekableByteChannel", "java-nio-file-attribute-FileAttribute", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-channels-SeekableByteChannel", feature = "java-nio-file-attribute-FileAttribute", feature = "java-util-Set")))]
        pub fn newByteChannel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SeekableByteChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/SecureDirectoryStream", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "newByteChannel", .descriptor == "(Ljava/lang/Object;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/SecureDirectoryStream\0", "newByteChannel\0", "(Ljava/lang/Object;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteFile](https://developer.android.com/reference/java/nio/file/SecureDirectoryStream.html#deleteFile(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn deleteFile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/SecureDirectoryStream", java.flags == PUBLIC | ABSTRACT, .name == "deleteFile", .descriptor == "(Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/SecureDirectoryStream\0", "deleteFile\0", "(Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteDirectory](https://developer.android.com/reference/java/nio/file/SecureDirectoryStream.html#deleteDirectory(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn deleteDirectory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/SecureDirectoryStream", java.flags == PUBLIC | ABSTRACT, .name == "deleteDirectory", .descriptor == "(Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/SecureDirectoryStream\0", "deleteDirectory\0", "(Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [move](https://developer.android.com/reference/java/nio/file/SecureDirectoryStream.html#move(java.lang.Object,%20java.nio.file.SecureDirectoryStream,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-nio-file-SecureDirectoryStream"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-file-SecureDirectoryStream")))]
        pub fn r#move<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::SecureDirectoryStream>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/SecureDirectoryStream", java.flags == PUBLIC | ABSTRACT, .name == "move", .descriptor == "(Ljava/lang/Object;Ljava/nio/file/SecureDirectoryStream;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/SecureDirectoryStream\0", "move\0", "(Ljava/lang/Object;Ljava/nio/file/SecureDirectoryStream;Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileAttributeView](https://developer.android.com/reference/java/nio/file/SecureDirectoryStream.html#getFileAttributeView(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-nio-file-attribute-FileAttributeView"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-nio-file-attribute-FileAttributeView")))]
        pub fn getFileAttributeView_Class<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::FileAttributeView>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/SecureDirectoryStream", java.flags == PUBLIC | ABSTRACT, .name == "getFileAttributeView", .descriptor == "(Ljava/lang/Class;)Ljava/nio/file/attribute/FileAttributeView;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/SecureDirectoryStream\0", "getFileAttributeView\0", "(Ljava/lang/Class;)Ljava/nio/file/attribute/FileAttributeView;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileAttributeView](https://developer.android.com/reference/java/nio/file/SecureDirectoryStream.html#getFileAttributeView(java.lang.Object,%20java.lang.Class,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-Class", "java-lang-Object", "java-nio-file-LinkOption", "java-nio-file-attribute-FileAttributeView"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-Object", feature = "java-nio-file-LinkOption", feature = "java-nio-file-attribute-FileAttributeView")))]
        pub fn getFileAttributeView_Object_Class_LinkOption_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::FileAttributeView>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/SecureDirectoryStream", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "getFileAttributeView", .descriptor == "(Ljava/lang/Object;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/SecureDirectoryStream\0", "getFileAttributeView\0", "(Ljava/lang/Object;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
