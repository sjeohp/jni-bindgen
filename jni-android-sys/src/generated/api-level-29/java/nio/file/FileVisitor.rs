// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-file-FileVisitor"))]
__jni_bindgen! {
    /// public interface [FileVisitor](https://developer.android.com/reference/java/nio/file/FileVisitor.html)
    ///
    /// Required feature: java-nio-file-FileVisitor
    public interface FileVisitor ("java/nio/file/FileVisitor") extends crate::java::lang::Object {

        /// [preVisitDirectory](https://developer.android.com/reference/java/nio/file/FileVisitor.html#preVisitDirectory(java.lang.Object,%20java.nio.file.attribute.BasicFileAttributes))
        ///
        /// Required features: "java-lang-Object", "java-nio-file-FileVisitResult", "java-nio-file-attribute-BasicFileAttributes"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-file-FileVisitResult", feature = "java-nio-file-attribute-BasicFileAttributes")))]
        pub fn preVisitDirectory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::attribute::BasicFileAttributes>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileVisitResult>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/FileVisitor", java.flags == PUBLIC | ABSTRACT, .name == "preVisitDirectory", .descriptor == "(Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/FileVisitor\0", "preVisitDirectory\0", "(Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [visitFile](https://developer.android.com/reference/java/nio/file/FileVisitor.html#visitFile(java.lang.Object,%20java.nio.file.attribute.BasicFileAttributes))
        ///
        /// Required features: "java-lang-Object", "java-nio-file-FileVisitResult", "java-nio-file-attribute-BasicFileAttributes"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-file-FileVisitResult", feature = "java-nio-file-attribute-BasicFileAttributes")))]
        pub fn visitFile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::attribute::BasicFileAttributes>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileVisitResult>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/FileVisitor", java.flags == PUBLIC | ABSTRACT, .name == "visitFile", .descriptor == "(Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/FileVisitor\0", "visitFile\0", "(Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [visitFileFailed](https://developer.android.com/reference/java/nio/file/FileVisitor.html#visitFileFailed(java.lang.Object,%20java.io.IOException))
        ///
        /// Required features: "java-io-IOException", "java-lang-Object", "java-nio-file-FileVisitResult"
        #[cfg(any(feature = "all", all(feature = "java-io-IOException", feature = "java-lang-Object", feature = "java-nio-file-FileVisitResult")))]
        pub fn visitFileFailed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::IOException>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileVisitResult>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/FileVisitor", java.flags == PUBLIC | ABSTRACT, .name == "visitFileFailed", .descriptor == "(Ljava/lang/Object;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/FileVisitor\0", "visitFileFailed\0", "(Ljava/lang/Object;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [postVisitDirectory](https://developer.android.com/reference/java/nio/file/FileVisitor.html#postVisitDirectory(java.lang.Object,%20java.io.IOException))
        ///
        /// Required features: "java-io-IOException", "java-lang-Object", "java-nio-file-FileVisitResult"
        #[cfg(any(feature = "all", all(feature = "java-io-IOException", feature = "java-lang-Object", feature = "java-nio-file-FileVisitResult")))]
        pub fn postVisitDirectory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::IOException>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileVisitResult>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/FileVisitor", java.flags == PUBLIC | ABSTRACT, .name == "postVisitDirectory", .descriptor == "(Ljava/lang/Object;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/FileVisitor\0", "postVisitDirectory\0", "(Ljava/lang/Object;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
