// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-file-spi-FileSystemProvider"))]
__jni_bindgen! {
    /// public class [FileSystemProvider](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html)
    ///
    /// Required feature: java-nio-file-spi-FileSystemProvider
    public class FileSystemProvider ("java/nio/file/spi/FileSystemProvider") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [FileSystemProvider](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#FileSystemProvider())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::file::spi::FileSystemProvider>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [installedProviders](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#installedProviders())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn installedProviders<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | STATIC, .name == "installedProviders", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/spi/FileSystemProvider\0", "installedProviders\0", "()Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScheme](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#getScheme())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getScheme<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | ABSTRACT, .name == "getScheme", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "getScheme\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newFileSystem](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#newFileSystem(java.net.URI,%20java.util.Map))
        ///
        /// Required features: "java-net-URI", "java-nio-file-FileSystem", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-net-URI", feature = "java-nio-file-FileSystem", feature = "java-util-Map")))]
        pub fn newFileSystem_URI_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileSystem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | ABSTRACT, .name == "newFileSystem", .descriptor == "(Ljava/net/URI;Ljava/util/Map;)Ljava/nio/file/FileSystem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "newFileSystem\0", "(Ljava/net/URI;Ljava/util/Map;)Ljava/nio/file/FileSystem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileSystem](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#getFileSystem(java.net.URI))
        ///
        /// Required features: "java-net-URI", "java-nio-file-FileSystem"
        #[cfg(any(feature = "all", all(feature = "java-net-URI", feature = "java-nio-file-FileSystem")))]
        pub fn getFileSystem<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileSystem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | ABSTRACT, .name == "getFileSystem", .descriptor == "(Ljava/net/URI;)Ljava/nio/file/FileSystem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "getFileSystem\0", "(Ljava/net/URI;)Ljava/nio/file/FileSystem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPath](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#getPath(java.net.URI))
        ///
        /// Required features: "java-net-URI", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-net-URI", feature = "java-nio-file-Path")))]
        pub fn getPath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | ABSTRACT, .name == "getPath", .descriptor == "(Ljava/net/URI;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "getPath\0", "(Ljava/net/URI;)Ljava/nio/file/Path;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newFileSystem](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#newFileSystem(java.nio.file.Path,%20java.util.Map))
        ///
        /// Required features: "java-nio-file-FileSystem", "java-nio-file-Path", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-FileSystem", feature = "java-nio-file-Path", feature = "java-util-Map")))]
        pub fn newFileSystem_Path_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileSystem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC, .name == "newFileSystem", .descriptor == "(Ljava/nio/file/Path;Ljava/util/Map;)Ljava/nio/file/FileSystem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "newFileSystem\0", "(Ljava/nio/file/Path;Ljava/util/Map;)Ljava/nio/file/FileSystem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInputStream](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#newInputStream(java.nio.file.Path,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-io-InputStream", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn newInputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS, .name == "newInputStream", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "newInputStream\0", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newOutputStream](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#newOutputStream(java.nio.file.Path,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-io-OutputStream", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn newOutputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::OutputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS, .name == "newOutputStream", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "newOutputStream\0", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newFileChannel](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#newFileChannel(java.nio.file.Path,%20java.util.Set,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-channels-FileChannel", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileChannel", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute", feature = "java-util-Set")))]
        pub fn newFileChannel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS, .name == "newFileChannel", .descriptor == "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/FileChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "newFileChannel\0", "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/FileChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newAsynchronousFileChannel](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#newAsynchronousFileChannel(java.nio.file.Path,%20java.util.Set,%20java.util.concurrent.ExecutorService,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-channels-AsynchronousFileChannel", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute", "java-util-Set", "java-util-concurrent-ExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-AsynchronousFileChannel", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute", feature = "java-util-Set", feature = "java-util-concurrent-ExecutorService")))]
        pub fn newAsynchronousFileChannel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ExecutorService>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousFileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS, .name == "newAsynchronousFileChannel", .descriptor == "(Ljava/nio/file/Path;Ljava/util/Set;Ljava/util/concurrent/ExecutorService;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/AsynchronousFileChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "newAsynchronousFileChannel\0", "(Ljava/nio/file/Path;Ljava/util/Set;Ljava/util/concurrent/ExecutorService;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/AsynchronousFileChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newByteChannel](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#newByteChannel(java.nio.file.Path,%20java.util.Set,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-channels-SeekableByteChannel", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-SeekableByteChannel", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute", feature = "java-util-Set")))]
        pub fn newByteChannel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SeekableByteChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "newByteChannel", .descriptor == "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "newByteChannel\0", "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newDirectoryStream](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#newDirectoryStream(java.nio.file.Path,%20java.nio.file.DirectoryStream.Filter))
        ///
        /// Required features: "java-nio-file-DirectoryStream", "java-nio-file-DirectoryStream_Filter", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-DirectoryStream", feature = "java-nio-file-DirectoryStream_Filter", feature = "java-nio-file-Path")))]
        pub fn newDirectoryStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::DirectoryStream_Filter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::DirectoryStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | ABSTRACT, .name == "newDirectoryStream", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/DirectoryStream$Filter;)Ljava/nio/file/DirectoryStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "newDirectoryStream\0", "(Ljava/nio/file/Path;Ljava/nio/file/DirectoryStream$Filter;)Ljava/nio/file/DirectoryStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createDirectory](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#createDirectory(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createDirectory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "createDirectory", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "createDirectory\0", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSymbolicLink](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#createSymbolicLink(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createSymbolicLink<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS, .name == "createSymbolicLink", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "createSymbolicLink\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createLink](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#createLink(java.nio.file.Path,%20java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn createLink<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC, .name == "createLink", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "createLink\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [delete](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#delete(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn delete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | ABSTRACT, .name == "delete", .descriptor == "(Ljava/nio/file/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "delete\0", "(Ljava/nio/file/Path;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteIfExists](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#deleteIfExists(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn deleteIfExists<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC, .name == "deleteIfExists", .descriptor == "(Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "deleteIfExists\0", "(Ljava/nio/file/Path;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readSymbolicLink](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#readSymbolicLink(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn readSymbolicLink<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC, .name == "readSymbolicLink", .descriptor == "(Ljava/nio/file/Path;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "readSymbolicLink\0", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copy](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#copy(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.CopyOption...))
        ///
        /// Required features: "java-nio-file-CopyOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-CopyOption", feature = "java-nio-file-Path")))]
        pub fn copy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::CopyOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "copy", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "copy\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [move](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#move(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.CopyOption...))
        ///
        /// Required features: "java-nio-file-CopyOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-CopyOption", feature = "java-nio-file-Path")))]
        pub fn r#move<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::CopyOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "move", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "move\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSameFile](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#isSameFile(java.nio.file.Path,%20java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn isSameFile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | ABSTRACT, .name == "isSameFile", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "isSameFile\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHidden](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#isHidden(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn isHidden<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | ABSTRACT, .name == "isHidden", .descriptor == "(Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "isHidden\0", "(Ljava/nio/file/Path;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileStore](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#getFileStore(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-FileStore", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-FileStore", feature = "java-nio-file-Path")))]
        pub fn getFileStore<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileStore>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | ABSTRACT, .name == "getFileStore", .descriptor == "(Ljava/nio/file/Path;)Ljava/nio/file/FileStore;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "getFileStore\0", "(Ljava/nio/file/Path;)Ljava/nio/file/FileStore;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkAccess](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#checkAccess(java.nio.file.Path,%20java.nio.file.AccessMode...))
        ///
        /// Required features: "java-nio-file-AccessMode", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-AccessMode", feature = "java-nio-file-Path")))]
        pub fn checkAccess<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::AccessMode, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "checkAccess", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/AccessMode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "checkAccess\0", "(Ljava/nio/file/Path;[Ljava/nio/file/AccessMode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileAttributeView](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#getFileAttributeView(java.nio.file.Path,%20java.lang.Class,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-Class", "java-nio-file-LinkOption", "java-nio-file-Path", "java-nio-file-attribute-FileAttributeView"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttributeView")))]
        pub fn getFileAttributeView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::FileAttributeView>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "getFileAttributeView", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "getFileAttributeView\0", "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readAttributes](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#readAttributes(java.nio.file.Path,%20java.lang.Class,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-Class", "java-nio-file-LinkOption", "java-nio-file-Path", "java-nio-file-attribute-BasicFileAttributes"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-BasicFileAttributes")))]
        pub fn readAttributes_Path_Class_LinkOption_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::BasicFileAttributes>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "readAttributes", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "readAttributes\0", "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readAttributes](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#readAttributes(java.nio.file.Path,%20java.lang.String,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-String", "java-nio-file-LinkOption", "java-nio-file-Path", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path", feature = "java-util-Map")))]
        pub fn readAttributes_Path_String_LinkOption_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "readAttributes", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/util/Map;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "readAttributes\0", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAttribute](https://developer.android.com/reference/java/nio/file/spi/FileSystemProvider.html#setAttribute(java.nio.file.Path,%20java.lang.String,%20java.lang.Object,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-nio-file-LinkOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path")))]
        pub fn setAttribute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/spi/FileSystemProvider", java.flags == PUBLIC | VARARGS | ABSTRACT, .name == "setAttribute", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/Object;[Ljava/nio/file/LinkOption;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/spi/FileSystemProvider\0", "setAttribute\0", "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/Object;[Ljava/nio/file/LinkOption;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
