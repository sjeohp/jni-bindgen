// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-file-Files"))]
__jni_bindgen! {
    /// public final class [Files](https://developer.android.com/reference/java/nio/file/Files.html)
    ///
    /// Required feature: java-nio-file-Files
    public final class Files ("java/nio/file/Files") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Files](https://developer.android.com/reference/java/nio/file/Files.html#Files())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::file::Files>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/file/Files", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/Files\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newInputStream](https://developer.android.com/reference/java/nio/file/Files.html#newInputStream(java.nio.file.Path,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-io-InputStream", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn newInputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "newInputStream", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newInputStream\0", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newOutputStream](https://developer.android.com/reference/java/nio/file/Files.html#newOutputStream(java.nio.file.Path,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-io-OutputStream", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn newOutputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::OutputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "newOutputStream", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newOutputStream\0", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newByteChannel](https://developer.android.com/reference/java/nio/file/Files.html#newByteChannel(java.nio.file.Path,%20java.util.Set,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-channels-SeekableByteChannel", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-SeekableByteChannel", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute", feature = "java-util-Set")))]
        pub fn newByteChannel_Path_Set_FileAttribute_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SeekableByteChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "newByteChannel", .descriptor == "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newByteChannel\0", "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newByteChannel](https://developer.android.com/reference/java/nio/file/Files.html#newByteChannel(java.nio.file.Path,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-nio-channels-SeekableByteChannel", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-SeekableByteChannel", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn newByteChannel_Path_OpenOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SeekableByteChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "newByteChannel", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newByteChannel\0", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newDirectoryStream](https://developer.android.com/reference/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-DirectoryStream", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-DirectoryStream", feature = "java-nio-file-Path")))]
        pub fn newDirectoryStream_Path<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::DirectoryStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "newDirectoryStream", .descriptor == "(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newDirectoryStream\0", "(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newDirectoryStream](https://developer.android.com/reference/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-nio-file-DirectoryStream", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-file-DirectoryStream", feature = "java-nio-file-Path")))]
        pub fn newDirectoryStream_Path_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::DirectoryStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "newDirectoryStream", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/String;)Ljava/nio/file/DirectoryStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newDirectoryStream\0", "(Ljava/nio/file/Path;Ljava/lang/String;)Ljava/nio/file/DirectoryStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newDirectoryStream](https://developer.android.com/reference/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path,%20java.nio.file.DirectoryStream.Filter))
        ///
        /// Required features: "java-nio-file-DirectoryStream", "java-nio-file-DirectoryStream_Filter", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-DirectoryStream", feature = "java-nio-file-DirectoryStream_Filter", feature = "java-nio-file-Path")))]
        pub fn newDirectoryStream_Path_Filter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::DirectoryStream_Filter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::DirectoryStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "newDirectoryStream", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/DirectoryStream$Filter;)Ljava/nio/file/DirectoryStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newDirectoryStream\0", "(Ljava/nio/file/Path;Ljava/nio/file/DirectoryStream$Filter;)Ljava/nio/file/DirectoryStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createFile](https://developer.android.com/reference/java/nio/file/Files.html#createFile(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createFile<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "createFile", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "createFile\0", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createDirectory](https://developer.android.com/reference/java/nio/file/Files.html#createDirectory(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createDirectory<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "createDirectory", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "createDirectory\0", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createDirectories](https://developer.android.com/reference/java/nio/file/Files.html#createDirectories(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createDirectories<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "createDirectories", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "createDirectories\0", "(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createTempFile](https://developer.android.com/reference/java/nio/file/Files.html#createTempFile(java.nio.file.Path,%20java.lang.String,%20java.lang.String,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-lang-String", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createTempFile_Path_String_String_FileAttribute_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "createTempFile", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "createTempFile\0", "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createTempFile](https://developer.android.com/reference/java/nio/file/Files.html#createTempFile(java.lang.String,%20java.lang.String,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-lang-String", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createTempFile_String_String_FileAttribute_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "createTempFile", .descriptor == "(Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "createTempFile\0", "(Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createTempDirectory](https://developer.android.com/reference/java/nio/file/Files.html#createTempDirectory(java.nio.file.Path,%20java.lang.String,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-lang-String", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createTempDirectory_Path_String_FileAttribute_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "createTempDirectory", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "createTempDirectory\0", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createTempDirectory](https://developer.android.com/reference/java/nio/file/Files.html#createTempDirectory(java.lang.String,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-lang-String", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createTempDirectory_String_FileAttribute_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "createTempDirectory", .descriptor == "(Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "createTempDirectory\0", "(Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSymbolicLink](https://developer.android.com/reference/java/nio/file/Files.html#createSymbolicLink(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-file-Path", "java-nio-file-attribute-FileAttribute"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute")))]
        pub fn createSymbolicLink<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "createSymbolicLink", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "createSymbolicLink\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createLink](https://developer.android.com/reference/java/nio/file/Files.html#createLink(java.nio.file.Path,%20java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn createLink<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "createLink", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "createLink\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [delete](https://developer.android.com/reference/java/nio/file/Files.html#delete(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn delete<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "delete", .descriptor == "(Ljava/nio/file/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "delete\0", "(Ljava/nio/file/Path;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteIfExists](https://developer.android.com/reference/java/nio/file/Files.html#deleteIfExists(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn deleteIfExists<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "deleteIfExists", .descriptor == "(Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "deleteIfExists\0", "(Ljava/nio/file/Path;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copy](https://developer.android.com/reference/java/nio/file/Files.html#copy(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.CopyOption...))
        ///
        /// Required features: "java-nio-file-CopyOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-CopyOption", feature = "java-nio-file-Path")))]
        pub fn copy_Path_Path_CopyOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::CopyOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "copy", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "copy\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [move](https://developer.android.com/reference/java/nio/file/Files.html#move(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.CopyOption...))
        ///
        /// Required features: "java-nio-file-CopyOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-CopyOption", feature = "java-nio-file-Path")))]
        pub fn r#move<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::CopyOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "move", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "move\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readSymbolicLink](https://developer.android.com/reference/java/nio/file/Files.html#readSymbolicLink(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn readSymbolicLink<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "readSymbolicLink", .descriptor == "(Ljava/nio/file/Path;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "readSymbolicLink\0", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileStore](https://developer.android.com/reference/java/nio/file/Files.html#getFileStore(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-FileStore", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-FileStore", feature = "java-nio-file-Path")))]
        pub fn getFileStore<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileStore>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "getFileStore", .descriptor == "(Ljava/nio/file/Path;)Ljava/nio/file/FileStore;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "getFileStore\0", "(Ljava/nio/file/Path;)Ljava/nio/file/FileStore;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSameFile](https://developer.android.com/reference/java/nio/file/Files.html#isSameFile(java.nio.file.Path,%20java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn isSameFile<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "isSameFile", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "isSameFile\0", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHidden](https://developer.android.com/reference/java/nio/file/Files.html#isHidden(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn isHidden<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "isHidden", .descriptor == "(Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "isHidden\0", "(Ljava/nio/file/Path;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [probeContentType](https://developer.android.com/reference/java/nio/file/Files.html#probeContentType(java.nio.file.Path))
        ///
        /// Required features: "java-lang-String", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-file-Path")))]
        pub fn probeContentType<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "probeContentType", .descriptor == "(Ljava/nio/file/Path;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "probeContentType\0", "(Ljava/nio/file/Path;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileAttributeView](https://developer.android.com/reference/java/nio/file/Files.html#getFileAttributeView(java.nio.file.Path,%20java.lang.Class,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-Class", "java-nio-file-LinkOption", "java-nio-file-Path", "java-nio-file-attribute-FileAttributeView"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttributeView")))]
        pub fn getFileAttributeView<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::FileAttributeView>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "getFileAttributeView", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "getFileAttributeView\0", "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readAttributes](https://developer.android.com/reference/java/nio/file/Files.html#readAttributes(java.nio.file.Path,%20java.lang.Class,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-Class", "java-nio-file-LinkOption", "java-nio-file-Path", "java-nio-file-attribute-BasicFileAttributes"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-BasicFileAttributes")))]
        pub fn readAttributes_Path_Class_LinkOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::BasicFileAttributes>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "readAttributes", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "readAttributes\0", "(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAttribute](https://developer.android.com/reference/java/nio/file/Files.html#setAttribute(java.nio.file.Path,%20java.lang.String,%20java.lang.Object,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-nio-file-LinkOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path")))]
        pub fn setAttribute<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "setAttribute", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/Object;[Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "setAttribute\0", "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/Object;[Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttribute](https://developer.android.com/reference/java/nio/file/Files.html#getAttribute(java.nio.file.Path,%20java.lang.String,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-nio-file-LinkOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path")))]
        pub fn getAttribute<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "getAttribute", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "getAttribute\0", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readAttributes](https://developer.android.com/reference/java/nio/file/Files.html#readAttributes(java.nio.file.Path,%20java.lang.String,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-lang-String", "java-nio-file-LinkOption", "java-nio-file-Path", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path", feature = "java-util-Map")))]
        pub fn readAttributes_Path_String_LinkOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "readAttributes", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/util/Map;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "readAttributes\0", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/util/Map;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPosixFilePermissions](https://developer.android.com/reference/java/nio/file/Files.html#getPosixFilePermissions(java.nio.file.Path,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-nio-file-LinkOption", "java-nio-file-Path", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path", feature = "java-util-Set")))]
        pub fn getPosixFilePermissions<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "getPosixFilePermissions", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "getPosixFilePermissions\0", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/util/Set;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPosixFilePermissions](https://developer.android.com/reference/java/nio/file/Files.html#setPosixFilePermissions(java.nio.file.Path,%20java.util.Set))
        ///
        /// Required features: "java-nio-file-Path", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-util-Set")))]
        pub fn setPosixFilePermissions<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "setPosixFilePermissions", .descriptor == "(Ljava/nio/file/Path;Ljava/util/Set;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "setPosixFilePermissions\0", "(Ljava/nio/file/Path;Ljava/util/Set;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOwner](https://developer.android.com/reference/java/nio/file/Files.html#getOwner(java.nio.file.Path,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-nio-file-LinkOption", "java-nio-file-Path", "java-nio-file-attribute-UserPrincipal"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-UserPrincipal")))]
        pub fn getOwner<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::UserPrincipal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "getOwner", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "getOwner\0", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOwner](https://developer.android.com/reference/java/nio/file/Files.html#setOwner(java.nio.file.Path,%20java.nio.file.attribute.UserPrincipal))
        ///
        /// Required features: "java-nio-file-Path", "java-nio-file-attribute-UserPrincipal"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-nio-file-attribute-UserPrincipal")))]
        pub fn setOwner<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::attribute::UserPrincipal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "setOwner", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/attribute/UserPrincipal;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "setOwner\0", "(Ljava/nio/file/Path;Ljava/nio/file/attribute/UserPrincipal;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSymbolicLink](https://developer.android.com/reference/java/nio/file/Files.html#isSymbolicLink(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn isSymbolicLink<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "isSymbolicLink", .descriptor == "(Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "isSymbolicLink\0", "(Ljava/nio/file/Path;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDirectory](https://developer.android.com/reference/java/nio/file/Files.html#isDirectory(java.nio.file.Path,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-nio-file-LinkOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path")))]
        pub fn isDirectory<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "isDirectory", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "isDirectory\0", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRegularFile](https://developer.android.com/reference/java/nio/file/Files.html#isRegularFile(java.nio.file.Path,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-nio-file-LinkOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path")))]
        pub fn isRegularFile<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "isRegularFile", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "isRegularFile\0", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLastModifiedTime](https://developer.android.com/reference/java/nio/file/Files.html#getLastModifiedTime(java.nio.file.Path,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-nio-file-LinkOption", "java-nio-file-Path", "java-nio-file-attribute-FileTime"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileTime")))]
        pub fn getLastModifiedTime<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::FileTime>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "getLastModifiedTime", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileTime;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "getLastModifiedTime\0", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileTime;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLastModifiedTime](https://developer.android.com/reference/java/nio/file/Files.html#setLastModifiedTime(java.nio.file.Path,%20java.nio.file.attribute.FileTime))
        ///
        /// Required features: "java-nio-file-Path", "java-nio-file-attribute-FileTime"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileTime")))]
        pub fn setLastModifiedTime<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::attribute::FileTime>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "setLastModifiedTime", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/attribute/FileTime;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "setLastModifiedTime\0", "(Ljava/nio/file/Path;Ljava/nio/file/attribute/FileTime;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [size](https://developer.android.com/reference/java/nio/file/Files.html#size(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn size<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "size", .descriptor == "(Ljava/nio/file/Path;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "size\0", "(Ljava/nio/file/Path;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [exists](https://developer.android.com/reference/java/nio/file/Files.html#exists(java.nio.file.Path,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-nio-file-LinkOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path")))]
        pub fn exists<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "exists", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "exists\0", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notExists](https://developer.android.com/reference/java/nio/file/Files.html#notExists(java.nio.file.Path,%20java.nio.file.LinkOption...))
        ///
        /// Required features: "java-nio-file-LinkOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-LinkOption", feature = "java-nio-file-Path")))]
        pub fn notExists<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::LinkOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "notExists", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "notExists\0", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isReadable](https://developer.android.com/reference/java/nio/file/Files.html#isReadable(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn isReadable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "isReadable", .descriptor == "(Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "isReadable\0", "(Ljava/nio/file/Path;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWritable](https://developer.android.com/reference/java/nio/file/Files.html#isWritable(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn isWritable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "isWritable", .descriptor == "(Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "isWritable\0", "(Ljava/nio/file/Path;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isExecutable](https://developer.android.com/reference/java/nio/file/Files.html#isExecutable(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn isExecutable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "isExecutable", .descriptor == "(Ljava/nio/file/Path;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "isExecutable\0", "(Ljava/nio/file/Path;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [walkFileTree](https://developer.android.com/reference/java/nio/file/Files.html#walkFileTree(java.nio.file.Path,%20java.util.Set,%20int,%20java.nio.file.FileVisitor))
        ///
        /// Required features: "java-nio-file-FileVisitor", "java-nio-file-Path", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-FileVisitor", feature = "java-nio-file-Path", feature = "java-util-Set")))]
        pub fn walkFileTree_Path_Set_int_FileVisitor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::FileVisitor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "walkFileTree", .descriptor == "(Ljava/nio/file/Path;Ljava/util/Set;ILjava/nio/file/FileVisitor;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "walkFileTree\0", "(Ljava/nio/file/Path;Ljava/util/Set;ILjava/nio/file/FileVisitor;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [walkFileTree](https://developer.android.com/reference/java/nio/file/Files.html#walkFileTree(java.nio.file.Path,%20java.nio.file.FileVisitor))
        ///
        /// Required features: "java-nio-file-FileVisitor", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-FileVisitor", feature = "java-nio-file-Path")))]
        pub fn walkFileTree_Path_FileVisitor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::FileVisitor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "walkFileTree", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/file/FileVisitor;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "walkFileTree\0", "(Ljava/nio/file/Path;Ljava/nio/file/FileVisitor;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newBufferedReader](https://developer.android.com/reference/java/nio/file/Files.html#newBufferedReader(java.nio.file.Path,%20java.nio.charset.Charset))
        ///
        /// Required features: "java-io-BufferedReader", "java-nio-charset-Charset", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-BufferedReader", feature = "java-nio-charset-Charset", feature = "java-nio-file-Path")))]
        pub fn newBufferedReader_Path_Charset<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::charset::Charset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::BufferedReader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "newBufferedReader", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/io/BufferedReader;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newBufferedReader\0", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/io/BufferedReader;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newBufferedReader](https://developer.android.com/reference/java/nio/file/Files.html#newBufferedReader(java.nio.file.Path))
        ///
        /// Required features: "java-io-BufferedReader", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-BufferedReader", feature = "java-nio-file-Path")))]
        pub fn newBufferedReader_Path<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::BufferedReader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "newBufferedReader", .descriptor == "(Ljava/nio/file/Path;)Ljava/io/BufferedReader;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newBufferedReader\0", "(Ljava/nio/file/Path;)Ljava/io/BufferedReader;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newBufferedWriter](https://developer.android.com/reference/java/nio/file/Files.html#newBufferedWriter(java.nio.file.Path,%20java.nio.charset.Charset,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-io-BufferedWriter", "java-nio-charset-Charset", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-BufferedWriter", feature = "java-nio-charset-Charset", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn newBufferedWriter_Path_Charset_OpenOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::charset::Charset>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::BufferedWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "newBufferedWriter", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newBufferedWriter\0", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newBufferedWriter](https://developer.android.com/reference/java/nio/file/Files.html#newBufferedWriter(java.nio.file.Path,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-io-BufferedWriter", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-BufferedWriter", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn newBufferedWriter_Path_OpenOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::BufferedWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "newBufferedWriter", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "newBufferedWriter\0", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copy](https://developer.android.com/reference/java/nio/file/Files.html#copy(java.io.InputStream,%20java.nio.file.Path,%20java.nio.file.CopyOption...))
        ///
        /// Required features: "java-io-InputStream", "java-nio-file-CopyOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-nio-file-CopyOption", feature = "java-nio-file-Path")))]
        pub fn copy_InputStream_Path_CopyOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::CopyOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "copy", .descriptor == "(Ljava/io/InputStream;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "copy\0", "(Ljava/io/InputStream;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copy](https://developer.android.com/reference/java/nio/file/Files.html#copy(java.nio.file.Path,%20java.io.OutputStream))
        ///
        /// Required features: "java-io-OutputStream", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream", feature = "java-nio-file-Path")))]
        pub fn copy_Path_OutputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "copy", .descriptor == "(Ljava/nio/file/Path;Ljava/io/OutputStream;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "copy\0", "(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readAllBytes](https://developer.android.com/reference/java/nio/file/Files.html#readAllBytes(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path")))]
        pub fn readAllBytes<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "readAllBytes", .descriptor == "(Ljava/nio/file/Path;)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "readAllBytes\0", "(Ljava/nio/file/Path;)[B\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readAllLines](https://developer.android.com/reference/java/nio/file/Files.html#readAllLines(java.nio.file.Path,%20java.nio.charset.Charset))
        ///
        /// Required features: "java-nio-charset-Charset", "java-nio-file-Path", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-nio-charset-Charset", feature = "java-nio-file-Path", feature = "java-util-List")))]
        pub fn readAllLines_Path_Charset<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::charset::Charset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "readAllLines", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "readAllLines\0", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readAllLines](https://developer.android.com/reference/java/nio/file/Files.html#readAllLines(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-util-List")))]
        pub fn readAllLines_Path<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "readAllLines", .descriptor == "(Ljava/nio/file/Path;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "readAllLines\0", "(Ljava/nio/file/Path;)Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/file/Files.html#write(java.nio.file.Path,%20byte%5B%5D,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn write_Path_byte_array_OpenOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "write", .descriptor == "(Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "write\0", "(Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/file/Files.html#write(java.nio.file.Path,%20java.lang.Iterable,%20java.nio.charset.Charset,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-lang-Iterable", "java-nio-charset-Charset", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-lang-Iterable", feature = "java-nio-charset-Charset", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn write_Path_Iterable_Charset_OpenOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::charset::Charset>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "write", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/Iterable;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "write\0", "(Ljava/nio/file/Path;Ljava/lang/Iterable;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/file/Files.html#write(java.nio.file.Path,%20java.lang.Iterable,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-lang-Iterable", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-lang-Iterable", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn write_Path_Iterable_OpenOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "write", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/Iterable;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "write\0", "(Ljava/nio/file/Path;Ljava/lang/Iterable;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [list](https://developer.android.com/reference/java/nio/file/Files.html#list(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-util-stream-Stream")))]
        pub fn list<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "list", .descriptor == "(Ljava/nio/file/Path;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "list\0", "(Ljava/nio/file/Path;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [walk](https://developer.android.com/reference/java/nio/file/Files.html#walk(java.nio.file.Path,%20int,%20java.nio.file.FileVisitOption...))
        ///
        /// Required features: "java-nio-file-FileVisitOption", "java-nio-file-Path", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-FileVisitOption", feature = "java-nio-file-Path", feature = "java-util-stream-Stream")))]
        pub fn walk_Path_int_FileVisitOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::FileVisitOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "walk", .descriptor == "(Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "walk\0", "(Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [walk](https://developer.android.com/reference/java/nio/file/Files.html#walk(java.nio.file.Path,%20java.nio.file.FileVisitOption...))
        ///
        /// Required features: "java-nio-file-FileVisitOption", "java-nio-file-Path", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-FileVisitOption", feature = "java-nio-file-Path", feature = "java-util-stream-Stream")))]
        pub fn walk_Path_FileVisitOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::FileVisitOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "walk", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "walk\0", "(Ljava/nio/file/Path;[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [find](https://developer.android.com/reference/java/nio/file/Files.html#find(java.nio.file.Path,%20int,%20java.util.function.BiPredicate,%20java.nio.file.FileVisitOption...))
        ///
        /// Required features: "java-nio-file-FileVisitOption", "java-nio-file-Path", "java-util-function-BiPredicate", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-FileVisitOption", feature = "java-nio-file-Path", feature = "java-util-function-BiPredicate", feature = "java-util-stream-Stream")))]
        pub fn find<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiPredicate>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::FileVisitOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC | VARARGS, .name == "find", .descriptor == "(Ljava/nio/file/Path;ILjava/util/function/BiPredicate;[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "find\0", "(Ljava/nio/file/Path;ILjava/util/function/BiPredicate;[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lines](https://developer.android.com/reference/java/nio/file/Files.html#lines(java.nio.file.Path,%20java.nio.charset.Charset))
        ///
        /// Required features: "java-nio-charset-Charset", "java-nio-file-Path", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-nio-charset-Charset", feature = "java-nio-file-Path", feature = "java-util-stream-Stream")))]
        pub fn lines_Path_Charset<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::charset::Charset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "lines", .descriptor == "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "lines\0", "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lines](https://developer.android.com/reference/java/nio/file/Files.html#lines(java.nio.file.Path))
        ///
        /// Required features: "java-nio-file-Path", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-Path", feature = "java-util-stream-Stream")))]
        pub fn lines_Path<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/Files", java.flags == PUBLIC | STATIC, .name == "lines", .descriptor == "(Ljava/nio/file/Path;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/Files\0", "lines\0", "(Ljava/nio/file/Path;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
