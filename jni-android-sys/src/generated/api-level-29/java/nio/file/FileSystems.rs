// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-file-FileSystems"))]
__jni_bindgen! {
    /// public final class [FileSystems](https://developer.android.com/reference/java/nio/file/FileSystems.html)
    ///
    /// Required feature: java-nio-file-FileSystems
    public final class FileSystems ("java/nio/file/FileSystems") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [FileSystems](https://developer.android.com/reference/java/nio/file/FileSystems.html#FileSystems())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::file::FileSystems>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/file/FileSystems", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/FileSystems\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDefault](https://developer.android.com/reference/java/nio/file/FileSystems.html#getDefault())
        ///
        /// Required features: "java-nio-file-FileSystem"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-FileSystem")))]
        pub fn getDefault<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileSystem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/FileSystems", java.flags == PUBLIC | STATIC, .name == "getDefault", .descriptor == "()Ljava/nio/file/FileSystem;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/FileSystems\0", "getDefault\0", "()Ljava/nio/file/FileSystem;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileSystem](https://developer.android.com/reference/java/nio/file/FileSystems.html#getFileSystem(java.net.URI))
        ///
        /// Required features: "java-net-URI", "java-nio-file-FileSystem"
        #[cfg(any(feature = "all", all(feature = "java-net-URI", feature = "java-nio-file-FileSystem")))]
        pub fn getFileSystem<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileSystem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/FileSystems", java.flags == PUBLIC | STATIC, .name == "getFileSystem", .descriptor == "(Ljava/net/URI;)Ljava/nio/file/FileSystem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/FileSystems\0", "getFileSystem\0", "(Ljava/net/URI;)Ljava/nio/file/FileSystem;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newFileSystem](https://developer.android.com/reference/java/nio/file/FileSystems.html#newFileSystem(java.net.URI,%20java.util.Map))
        ///
        /// Required features: "java-net-URI", "java-nio-file-FileSystem", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-net-URI", feature = "java-nio-file-FileSystem", feature = "java-util-Map")))]
        pub fn newFileSystem_URI_Map<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileSystem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/FileSystems", java.flags == PUBLIC | STATIC, .name == "newFileSystem", .descriptor == "(Ljava/net/URI;Ljava/util/Map;)Ljava/nio/file/FileSystem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/FileSystems\0", "newFileSystem\0", "(Ljava/net/URI;Ljava/util/Map;)Ljava/nio/file/FileSystem;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newFileSystem](https://developer.android.com/reference/java/nio/file/FileSystems.html#newFileSystem(java.net.URI,%20java.util.Map,%20java.lang.ClassLoader))
        ///
        /// Required features: "java-lang-ClassLoader", "java-net-URI", "java-nio-file-FileSystem", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader", feature = "java-net-URI", feature = "java-nio-file-FileSystem", feature = "java-util-Map")))]
        pub fn newFileSystem_URI_Map_ClassLoader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::URI>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileSystem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/FileSystems", java.flags == PUBLIC | STATIC, .name == "newFileSystem", .descriptor == "(Ljava/net/URI;Ljava/util/Map;Ljava/lang/ClassLoader;)Ljava/nio/file/FileSystem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/FileSystems\0", "newFileSystem\0", "(Ljava/net/URI;Ljava/util/Map;Ljava/lang/ClassLoader;)Ljava/nio/file/FileSystem;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newFileSystem](https://developer.android.com/reference/java/nio/file/FileSystems.html#newFileSystem(java.nio.file.Path,%20java.lang.ClassLoader))
        ///
        /// Required features: "java-lang-ClassLoader", "java-nio-file-FileSystem", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader", feature = "java-nio-file-FileSystem", feature = "java-nio-file-Path")))]
        pub fn newFileSystem_Path_ClassLoader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::FileSystem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/FileSystems", java.flags == PUBLIC | STATIC, .name == "newFileSystem", .descriptor == "(Ljava/nio/file/Path;Ljava/lang/ClassLoader;)Ljava/nio/file/FileSystem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/FileSystems\0", "newFileSystem\0", "(Ljava/nio/file/Path;Ljava/lang/ClassLoader;)Ljava/nio/file/FileSystem;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
