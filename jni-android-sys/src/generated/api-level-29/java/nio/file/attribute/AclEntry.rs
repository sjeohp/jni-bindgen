// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-file-attribute-AclEntry"))]
__jni_bindgen! {
    /// public final class [AclEntry](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html)
    ///
    /// Required feature: java-nio-file-attribute-AclEntry
    public final class AclEntry ("java/nio/file/attribute/AclEntry") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AclEntry](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#AclEntry(java.nio.file.attribute.AclEntryType,%20java.nio.file.attribute.UserPrincipal,%20java.util.Set,%20java.util.Set))
        // ///
        // /// Required features: "java-nio-file-attribute-AclEntryType", "java-nio-file-attribute-UserPrincipal", "java-util-Set"
        // #[cfg(any(feature = "all", all(feature = "java-nio-file-attribute-AclEntryType", feature = "java-nio-file-attribute-UserPrincipal", feature = "java-util-Set")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::attribute::AclEntryType>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::attribute::UserPrincipal>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::AclEntry>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/file/attribute/AclEntry", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/nio/file/attribute/AclEntryType;Ljava/nio/file/attribute/UserPrincipal;Ljava/util/Set;Ljava/util/Set;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/attribute/AclEntry\0", "<init>\0", "(Ljava/nio/file/attribute/AclEntryType;Ljava/nio/file/attribute/UserPrincipal;Ljava/util/Set;Ljava/util/Set;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newBuilder](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#newBuilder())
        ///
        /// Required features: "java-nio-file-attribute-AclEntry_Builder"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-attribute-AclEntry_Builder")))]
        pub fn newBuilder<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::AclEntry_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/attribute/AclEntry", java.flags == PUBLIC | STATIC, .name == "newBuilder", .descriptor == "()Ljava/nio/file/attribute/AclEntry$Builder;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/attribute/AclEntry\0", "newBuilder\0", "()Ljava/nio/file/attribute/AclEntry$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newBuilder](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#newBuilder(java.nio.file.attribute.AclEntry))
        ///
        /// Required features: "java-nio-file-attribute-AclEntry", "java-nio-file-attribute-AclEntry_Builder"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-attribute-AclEntry", feature = "java-nio-file-attribute-AclEntry_Builder")))]
        pub fn newBuilder_AclEntry<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::attribute::AclEntry>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::AclEntry_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/attribute/AclEntry", java.flags == PUBLIC | STATIC, .name == "newBuilder", .descriptor == "(Ljava/nio/file/attribute/AclEntry;)Ljava/nio/file/attribute/AclEntry$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/file/attribute/AclEntry\0", "newBuilder\0", "(Ljava/nio/file/attribute/AclEntry;)Ljava/nio/file/attribute/AclEntry$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [type](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#type())
        ///
        /// Required features: "java-nio-file-attribute-AclEntryType"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-attribute-AclEntryType")))]
        pub fn r#type<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::AclEntryType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/attribute/AclEntry", java.flags == PUBLIC, .name == "type", .descriptor == "()Ljava/nio/file/attribute/AclEntryType;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/attribute/AclEntry\0", "type\0", "()Ljava/nio/file/attribute/AclEntryType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [principal](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#principal())
        ///
        /// Required features: "java-nio-file-attribute-UserPrincipal"
        #[cfg(any(feature = "all", all(feature = "java-nio-file-attribute-UserPrincipal")))]
        pub fn principal<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::file::attribute::UserPrincipal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/attribute/AclEntry", java.flags == PUBLIC, .name == "principal", .descriptor == "()Ljava/nio/file/attribute/UserPrincipal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/attribute/AclEntry\0", "principal\0", "()Ljava/nio/file/attribute/UserPrincipal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permissions](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#permissions())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn permissions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/attribute/AclEntry", java.flags == PUBLIC, .name == "permissions", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/attribute/AclEntry\0", "permissions\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flags](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#flags())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn flags<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/attribute/AclEntry", java.flags == PUBLIC, .name == "flags", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/attribute/AclEntry\0", "flags\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/attribute/AclEntry", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/attribute/AclEntry\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/attribute/AclEntry", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/attribute/AclEntry\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/nio/file/attribute/AclEntry.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/file/attribute/AclEntry", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/file/attribute/AclEntry\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
