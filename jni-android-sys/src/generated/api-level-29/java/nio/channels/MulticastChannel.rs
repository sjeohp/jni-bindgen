// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-MulticastChannel"))]
__jni_bindgen! {
    /// public interface [MulticastChannel](https://developer.android.com/reference/java/nio/channels/MulticastChannel.html)
    ///
    /// Required feature: java-nio-channels-MulticastChannel
    public interface MulticastChannel ("java/nio/channels/MulticastChannel") extends crate::java::lang::Object, implements crate::java::nio::channels::NetworkChannel {

        /// [close](https://developer.android.com/reference/java/nio/channels/MulticastChannel.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/MulticastChannel", java.flags == PUBLIC | ABSTRACT, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/MulticastChannel\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [join](https://developer.android.com/reference/java/nio/channels/MulticastChannel.html#join(java.net.InetAddress,%20java.net.NetworkInterface))
        ///
        /// Required features: "java-net-InetAddress", "java-net-NetworkInterface", "java-nio-channels-MembershipKey"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress", feature = "java-net-NetworkInterface", feature = "java-nio-channels-MembershipKey")))]
        pub fn join_InetAddress_NetworkInterface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::NetworkInterface>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::MembershipKey>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/MulticastChannel", java.flags == PUBLIC | ABSTRACT, .name == "join", .descriptor == "(Ljava/net/InetAddress;Ljava/net/NetworkInterface;)Ljava/nio/channels/MembershipKey;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/MulticastChannel\0", "join\0", "(Ljava/net/InetAddress;Ljava/net/NetworkInterface;)Ljava/nio/channels/MembershipKey;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [join](https://developer.android.com/reference/java/nio/channels/MulticastChannel.html#join(java.net.InetAddress,%20java.net.NetworkInterface,%20java.net.InetAddress))
        ///
        /// Required features: "java-net-InetAddress", "java-net-NetworkInterface", "java-nio-channels-MembershipKey"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress", feature = "java-net-NetworkInterface", feature = "java-nio-channels-MembershipKey")))]
        pub fn join_InetAddress_NetworkInterface_InetAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::NetworkInterface>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::MembershipKey>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/MulticastChannel", java.flags == PUBLIC | ABSTRACT, .name == "join", .descriptor == "(Ljava/net/InetAddress;Ljava/net/NetworkInterface;Ljava/net/InetAddress;)Ljava/nio/channels/MembershipKey;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/MulticastChannel\0", "join\0", "(Ljava/net/InetAddress;Ljava/net/NetworkInterface;Ljava/net/InetAddress;)Ljava/nio/channels/MembershipKey;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
