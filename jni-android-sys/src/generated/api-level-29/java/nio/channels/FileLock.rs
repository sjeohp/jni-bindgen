// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-FileLock"))]
__jni_bindgen! {
    /// public class [FileLock](https://developer.android.com/reference/java/nio/channels/FileLock.html)
    ///
    /// Required feature: java-nio-channels-FileLock
    public class FileLock ("java/nio/channels/FileLock") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        // // Not emitting: Non-public method
        // /// [FileLock](https://developer.android.com/reference/java/nio/channels/FileLock.html#FileLock(java.nio.channels.FileChannel,%20long,%20long,%20boolean))
        // ///
        // /// Required features: "java-nio-channels-FileChannel"
        // #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileChannel")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::FileChannel>>, arg1: i64, arg2: i64, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::channels::FileLock>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/FileLock", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljava/nio/channels/FileChannel;JJZ)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "<init>\0", "(Ljava/nio/channels/FileChannel;JJZ)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [FileLock](https://developer.android.com/reference/java/nio/channels/FileLock.html#FileLock(java.nio.channels.AsynchronousFileChannel,%20long,%20long,%20boolean))
        // ///
        // /// Required features: "java-nio-channels-AsynchronousFileChannel"
        // #[cfg(any(feature = "all", all(feature = "java-nio-channels-AsynchronousFileChannel")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::AsynchronousFileChannel>>, arg1: i64, arg2: i64, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::channels::FileLock>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/FileLock", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljava/nio/channels/AsynchronousFileChannel;JJZ)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "<init>\0", "(Ljava/nio/channels/AsynchronousFileChannel;JJZ)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [channel](https://developer.android.com/reference/java/nio/channels/FileLock.html#channel())
        ///
        /// Required features: "java-nio-channels-FileChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileChannel")))]
        pub fn channel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC | FINAL, .name == "channel", .descriptor == "()Ljava/nio/channels/FileChannel;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "channel\0", "()Ljava/nio/channels/FileChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acquiredBy](https://developer.android.com/reference/java/nio/channels/FileLock.html#acquiredBy())
        ///
        /// Required features: "java-nio-channels-Channel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-Channel")))]
        pub fn acquiredBy<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::Channel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC, .name == "acquiredBy", .descriptor == "()Ljava/nio/channels/Channel;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "acquiredBy\0", "()Ljava/nio/channels/Channel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [position](https://developer.android.com/reference/java/nio/channels/FileLock.html#position())
        pub fn position<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC | FINAL, .name == "position", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "position\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [size](https://developer.android.com/reference/java/nio/channels/FileLock.html#size())
        pub fn size<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC | FINAL, .name == "size", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "size\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isShared](https://developer.android.com/reference/java/nio/channels/FileLock.html#isShared())
        pub fn isShared<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC | FINAL, .name == "isShared", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "isShared\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [overlaps](https://developer.android.com/reference/java/nio/channels/FileLock.html#overlaps(long,%20long))
        pub fn overlaps<'env>(&'env self, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC | FINAL, .name == "overlaps", .descriptor == "(JJ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "overlaps\0", "(JJ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isValid](https://developer.android.com/reference/java/nio/channels/FileLock.html#isValid())
        pub fn isValid<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC | ABSTRACT, .name == "isValid", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "isValid\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [release](https://developer.android.com/reference/java/nio/channels/FileLock.html#release())
        pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC | ABSTRACT, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/java/nio/channels/FileLock.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC | FINAL, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/nio/channels/FileLock.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileLock", java.flags == PUBLIC | FINAL, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileLock\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
