// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-GatheringByteChannel"))]
__jni_bindgen! {
    /// public interface [GatheringByteChannel](https://developer.android.com/reference/java/nio/channels/GatheringByteChannel.html)
    ///
    /// Required feature: java-nio-channels-GatheringByteChannel
    public interface GatheringByteChannel ("java/nio/channels/GatheringByteChannel") extends crate::java::lang::Object, implements crate::java::nio::channels::WritableByteChannel {

        /// [write](https://developer.android.com/reference/java/nio/channels/GatheringByteChannel.html#write(java.nio.ByteBuffer%5B%5D,%20int,%20int))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn write_ByteBuffer_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/GatheringByteChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "([Ljava/nio/ByteBuffer;II)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/GatheringByteChannel\0", "write\0", "([Ljava/nio/ByteBuffer;II)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/GatheringByteChannel.html#write(java.nio.ByteBuffer%5B%5D))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn write_ByteBuffer_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/GatheringByteChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "([Ljava/nio/ByteBuffer;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/GatheringByteChannel\0", "write\0", "([Ljava/nio/ByteBuffer;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
