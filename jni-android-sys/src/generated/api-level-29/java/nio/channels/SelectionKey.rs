// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-SelectionKey"))]
__jni_bindgen! {
    /// public class [SelectionKey](https://developer.android.com/reference/java/nio/channels/SelectionKey.html)
    ///
    /// Required feature: java-nio-channels-SelectionKey
    public class SelectionKey ("java/nio/channels/SelectionKey") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SelectionKey](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#SelectionKey())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::channels::SelectionKey>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/SelectionKey", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [channel](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#channel())
        ///
        /// Required features: "java-nio-channels-SelectableChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-SelectableChannel")))]
        pub fn channel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SelectableChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | ABSTRACT, .name == "channel", .descriptor == "()Ljava/nio/channels/SelectableChannel;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "channel\0", "()Ljava/nio/channels/SelectableChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [selector](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#selector())
        ///
        /// Required features: "java-nio-channels-Selector"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-Selector")))]
        pub fn selector<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::Selector>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | ABSTRACT, .name == "selector", .descriptor == "()Ljava/nio/channels/Selector;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "selector\0", "()Ljava/nio/channels/Selector;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isValid](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#isValid())
        pub fn isValid<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | ABSTRACT, .name == "isValid", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "isValid\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancel](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#cancel())
        pub fn cancel<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | ABSTRACT, .name == "cancel", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "cancel\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [interestOps](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#interestOps())
        pub fn interestOps<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | ABSTRACT, .name == "interestOps", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "interestOps\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [interestOps](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#interestOps(int))
        ///
        /// Required features: "java-nio-channels-SelectionKey"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-SelectionKey")))]
        pub fn interestOps_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SelectionKey>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | ABSTRACT, .name == "interestOps", .descriptor == "(I)Ljava/nio/channels/SelectionKey;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "interestOps\0", "(I)Ljava/nio/channels/SelectionKey;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readyOps](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#readyOps())
        pub fn readyOps<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | ABSTRACT, .name == "readyOps", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "readyOps\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isReadable](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#isReadable())
        pub fn isReadable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | FINAL, .name == "isReadable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "isReadable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWritable](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#isWritable())
        pub fn isWritable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | FINAL, .name == "isWritable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "isWritable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isConnectable](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#isConnectable())
        pub fn isConnectable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | FINAL, .name == "isConnectable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "isConnectable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAcceptable](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#isAcceptable())
        pub fn isAcceptable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | FINAL, .name == "isAcceptable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "isAcceptable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [attach](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#attach(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn attach<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | FINAL, .name == "attach", .descriptor == "(Ljava/lang/Object;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "attach\0", "(Ljava/lang/Object;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [attachment](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#attachment())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn attachment<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/SelectionKey", java.flags == PUBLIC | FINAL, .name == "attachment", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/SelectionKey\0", "attachment\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [OP_ACCEPT](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#OP_ACCEPT)
        pub const OP_ACCEPT : i32 = 16;

        /// public static final [OP_CONNECT](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#OP_CONNECT)
        pub const OP_CONNECT : i32 = 8;

        /// public static final [OP_READ](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#OP_READ)
        pub const OP_READ : i32 = 1;

        /// public static final [OP_WRITE](https://developer.android.com/reference/java/nio/channels/SelectionKey.html#OP_WRITE)
        pub const OP_WRITE : i32 = 4;
    }
}
