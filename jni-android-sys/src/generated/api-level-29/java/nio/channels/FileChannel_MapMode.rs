// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-FileChannel_MapMode"))]
__jni_bindgen! {
    /// public class [FileChannel.MapMode](https://developer.android.com/reference/java/nio/channels/FileChannel.MapMode.html)
    ///
    /// Required feature: java-nio-channels-FileChannel_MapMode
    public class FileChannel_MapMode ("java/nio/channels/FileChannel$MapMode") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [MapMode](https://developer.android.com/reference/java/nio/channels/FileChannel.MapMode.html#MapMode(java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel_MapMode>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/FileChannel$MapMode", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel$MapMode\0", "<init>\0", "(Ljava/lang/String;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [toString](https://developer.android.com/reference/java/nio/channels/FileChannel.MapMode.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel$MapMode", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel$MapMode\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [PRIVATE](https://developer.android.com/reference/java/nio/channels/FileChannel.MapMode.html#PRIVATE)
        ///
        /// Required feature: java-nio-channels-FileChannel_MapMode
        #[cfg(any(feature = "all", feature = "java-nio-channels-FileChannel_MapMode"))]
        pub fn PRIVATE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel_MapMode>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/nio/channels/FileChannel$MapMode\0", "PRIVATE\0", "Ljava/nio/channels/FileChannel$MapMode;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [READ_ONLY](https://developer.android.com/reference/java/nio/channels/FileChannel.MapMode.html#READ_ONLY)
        ///
        /// Required feature: java-nio-channels-FileChannel_MapMode
        #[cfg(any(feature = "all", feature = "java-nio-channels-FileChannel_MapMode"))]
        pub fn READ_ONLY<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel_MapMode>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/nio/channels/FileChannel$MapMode\0", "READ_ONLY\0", "Ljava/nio/channels/FileChannel$MapMode;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [READ_WRITE](https://developer.android.com/reference/java/nio/channels/FileChannel.MapMode.html#READ_WRITE)
        ///
        /// Required feature: java-nio-channels-FileChannel_MapMode
        #[cfg(any(feature = "all", feature = "java-nio-channels-FileChannel_MapMode"))]
        pub fn READ_WRITE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel_MapMode>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/nio/channels/FileChannel$MapMode\0", "READ_WRITE\0", "Ljava/nio/channels/FileChannel$MapMode;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
