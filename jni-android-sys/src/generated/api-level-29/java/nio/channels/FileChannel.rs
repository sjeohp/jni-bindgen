// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-FileChannel"))]
__jni_bindgen! {
    /// public class [FileChannel](https://developer.android.com/reference/java/nio/channels/FileChannel.html)
    ///
    /// Required feature: java-nio-channels-FileChannel
    public class FileChannel ("java/nio/channels/FileChannel") extends crate::java::nio::channels::spi::AbstractInterruptibleChannel, implements crate::java::nio::channels::SeekableByteChannel, crate::java::nio::channels::GatheringByteChannel, crate::java::nio::channels::ScatteringByteChannel {

        // // Not emitting: Non-public method
        // /// [FileChannel](https://developer.android.com/reference/java/nio/channels/FileChannel.html#FileChannel())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/FileChannel", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [open](https://developer.android.com/reference/java/nio/channels/FileChannel.html#open(java.nio.file.Path,%20java.util.Set,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-channels-FileChannel", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileChannel", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute", feature = "java-util-Set")))]
        pub fn open_Path_Set_FileAttribute_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | STATIC | VARARGS, .name == "open", .descriptor == "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/FileChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/channels/FileChannel\0", "open\0", "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/FileChannel;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/java/nio/channels/FileChannel.html#open(java.nio.file.Path,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-nio-channels-FileChannel", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileChannel", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn open_Path_OpenOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | STATIC | VARARGS, .name == "open", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/channels/FileChannel\0", "open\0", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/FileChannel.html#read(java.nio.ByteBuffer))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn read_ByteBuffer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "read", .descriptor == "(Ljava/nio/ByteBuffer;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "read\0", "(Ljava/nio/ByteBuffer;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/FileChannel.html#read(java.nio.ByteBuffer%5B%5D,%20int,%20int))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn read_ByteBuffer_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "read", .descriptor == "([Ljava/nio/ByteBuffer;II)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "read\0", "([Ljava/nio/ByteBuffer;II)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/FileChannel.html#read(java.nio.ByteBuffer%5B%5D))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn read_ByteBuffer_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | FINAL, .name == "read", .descriptor == "([Ljava/nio/ByteBuffer;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "read\0", "([Ljava/nio/ByteBuffer;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/FileChannel.html#write(java.nio.ByteBuffer))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn write_ByteBuffer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "(Ljava/nio/ByteBuffer;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "write\0", "(Ljava/nio/ByteBuffer;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/FileChannel.html#write(java.nio.ByteBuffer%5B%5D,%20int,%20int))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn write_ByteBuffer_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "([Ljava/nio/ByteBuffer;II)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "write\0", "([Ljava/nio/ByteBuffer;II)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/FileChannel.html#write(java.nio.ByteBuffer%5B%5D))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn write_ByteBuffer_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | FINAL, .name == "write", .descriptor == "([Ljava/nio/ByteBuffer;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "write\0", "([Ljava/nio/ByteBuffer;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [position](https://developer.android.com/reference/java/nio/channels/FileChannel.html#position())
        pub fn position<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "position", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "position\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [position](https://developer.android.com/reference/java/nio/channels/FileChannel.html#position(long))
        ///
        /// Required features: "java-nio-channels-FileChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileChannel")))]
        pub fn position_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "position", .descriptor == "(J)Ljava/nio/channels/FileChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "position\0", "(J)Ljava/nio/channels/FileChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [size](https://developer.android.com/reference/java/nio/channels/FileChannel.html#size())
        pub fn size<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "size", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "size\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [truncate](https://developer.android.com/reference/java/nio/channels/FileChannel.html#truncate(long))
        ///
        /// Required features: "java-nio-channels-FileChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileChannel")))]
        pub fn truncate_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "truncate", .descriptor == "(J)Ljava/nio/channels/FileChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "truncate\0", "(J)Ljava/nio/channels/FileChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [force](https://developer.android.com/reference/java/nio/channels/FileChannel.html#force(boolean))
        pub fn force<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "force", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "force\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transferTo](https://developer.android.com/reference/java/nio/channels/FileChannel.html#transferTo(long,%20long,%20java.nio.channels.WritableByteChannel))
        ///
        /// Required features: "java-nio-channels-WritableByteChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-WritableByteChannel")))]
        pub fn transferTo<'env>(&'env self, arg0: i64, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::WritableByteChannel>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "transferTo", .descriptor == "(JJLjava/nio/channels/WritableByteChannel;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "transferTo\0", "(JJLjava/nio/channels/WritableByteChannel;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transferFrom](https://developer.android.com/reference/java/nio/channels/FileChannel.html#transferFrom(java.nio.channels.ReadableByteChannel,%20long,%20long))
        ///
        /// Required features: "java-nio-channels-ReadableByteChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-ReadableByteChannel")))]
        pub fn transferFrom<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::ReadableByteChannel>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "transferFrom", .descriptor == "(Ljava/nio/channels/ReadableByteChannel;JJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "transferFrom\0", "(Ljava/nio/channels/ReadableByteChannel;JJ)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/FileChannel.html#read(java.nio.ByteBuffer,%20long))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn read_ByteBuffer_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "read", .descriptor == "(Ljava/nio/ByteBuffer;J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "read\0", "(Ljava/nio/ByteBuffer;J)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/FileChannel.html#write(java.nio.ByteBuffer,%20long))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn write_ByteBuffer_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "(Ljava/nio/ByteBuffer;J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "write\0", "(Ljava/nio/ByteBuffer;J)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [map](https://developer.android.com/reference/java/nio/channels/FileChannel.html#map(java.nio.channels.FileChannel.MapMode,%20long,%20long))
        ///
        /// Required features: "java-nio-MappedByteBuffer", "java-nio-channels-FileChannel_MapMode"
        #[cfg(any(feature = "all", all(feature = "java-nio-MappedByteBuffer", feature = "java-nio-channels-FileChannel_MapMode")))]
        pub fn map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::FileChannel_MapMode>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::MappedByteBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "map", .descriptor == "(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "map\0", "(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lock](https://developer.android.com/reference/java/nio/channels/FileChannel.html#lock(long,%20long,%20boolean))
        ///
        /// Required features: "java-nio-channels-FileLock"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileLock")))]
        pub fn lock_long_long_boolean<'env>(&'env self, arg0: i64, arg1: i64, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "lock", .descriptor == "(JJZ)Ljava/nio/channels/FileLock;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "lock\0", "(JJZ)Ljava/nio/channels/FileLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lock](https://developer.android.com/reference/java/nio/channels/FileChannel.html#lock())
        ///
        /// Required features: "java-nio-channels-FileLock"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileLock")))]
        pub fn lock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | FINAL, .name == "lock", .descriptor == "()Ljava/nio/channels/FileLock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "lock\0", "()Ljava/nio/channels/FileLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryLock](https://developer.android.com/reference/java/nio/channels/FileChannel.html#tryLock(long,%20long,%20boolean))
        ///
        /// Required features: "java-nio-channels-FileLock"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileLock")))]
        pub fn tryLock_long_long_boolean<'env>(&'env self, arg0: i64, arg1: i64, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | ABSTRACT, .name == "tryLock", .descriptor == "(JJZ)Ljava/nio/channels/FileLock;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "tryLock\0", "(JJZ)Ljava/nio/channels/FileLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryLock](https://developer.android.com/reference/java/nio/channels/FileChannel.html#tryLock())
        ///
        /// Required features: "java-nio-channels-FileLock"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileLock")))]
        pub fn tryLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | FINAL, .name == "tryLock", .descriptor == "()Ljava/nio/channels/FileLock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "tryLock\0", "()Ljava/nio/channels/FileLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [truncate](https://developer.android.com/reference/java/nio/channels/FileChannel.html#truncate(long))
        // ///
        // /// Required features: "java-nio-channels-SeekableByteChannel"
        // #[cfg(any(feature = "all", all(feature = "java-nio-channels-SeekableByteChannel")))]
        // pub fn truncate_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SeekableByteChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "truncate", .descriptor == "(J)Ljava/nio/channels/SeekableByteChannel;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "truncate\0", "(J)Ljava/nio/channels/SeekableByteChannel;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [position](https://developer.android.com/reference/java/nio/channels/FileChannel.html#position(long))
        // ///
        // /// Required features: "java-nio-channels-SeekableByteChannel"
        // #[cfg(any(feature = "all", all(feature = "java-nio-channels-SeekableByteChannel")))]
        // pub fn position_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SeekableByteChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/FileChannel", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "position", .descriptor == "(J)Ljava/nio/channels/SeekableByteChannel;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/FileChannel\0", "position\0", "(J)Ljava/nio/channels/SeekableByteChannel;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
