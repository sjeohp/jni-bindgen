// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-AsynchronousFileChannel"))]
__jni_bindgen! {
    /// public class [AsynchronousFileChannel](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html)
    ///
    /// Required feature: java-nio-channels-AsynchronousFileChannel
    public class AsynchronousFileChannel ("java/nio/channels/AsynchronousFileChannel") extends crate::java::lang::Object, implements crate::java::nio::channels::AsynchronousChannel {

        // // Not emitting: Non-public method
        // /// [AsynchronousFileChannel](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#AsynchronousFileChannel())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousFileChannel>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [open](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#open(java.nio.file.Path,%20java.util.Set,%20java.util.concurrent.ExecutorService,%20java.nio.file.attribute.FileAttribute...))
        ///
        /// Required features: "java-nio-channels-AsynchronousFileChannel", "java-nio-file-Path", "java-nio-file-attribute-FileAttribute", "java-util-Set", "java-util-concurrent-ExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-AsynchronousFileChannel", feature = "java-nio-file-Path", feature = "java-nio-file-attribute-FileAttribute", feature = "java-util-Set", feature = "java-util-concurrent-ExecutorService")))]
        pub fn open_Path_Set_ExecutorService_FileAttribute_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ExecutorService>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::attribute::FileAttribute, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousFileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | STATIC | VARARGS, .name == "open", .descriptor == "(Ljava/nio/file/Path;Ljava/util/Set;Ljava/util/concurrent/ExecutorService;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/AsynchronousFileChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/channels/AsynchronousFileChannel\0", "open\0", "(Ljava/nio/file/Path;Ljava/util/Set;Ljava/util/concurrent/ExecutorService;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/AsynchronousFileChannel;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#open(java.nio.file.Path,%20java.nio.file.OpenOption...))
        ///
        /// Required features: "java-nio-channels-AsynchronousFileChannel", "java-nio-file-OpenOption", "java-nio-file-Path"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-AsynchronousFileChannel", feature = "java-nio-file-OpenOption", feature = "java-nio-file-Path")))]
        pub fn open_Path_OpenOption_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::file::Path>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::file::OpenOption, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousFileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | STATIC | VARARGS, .name == "open", .descriptor == "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/AsynchronousFileChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/channels/AsynchronousFileChannel\0", "open\0", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/AsynchronousFileChannel;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [size](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#size())
        pub fn size<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "size", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "size\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [truncate](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#truncate(long))
        ///
        /// Required features: "java-nio-channels-AsynchronousFileChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-AsynchronousFileChannel")))]
        pub fn truncate<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousFileChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "truncate", .descriptor == "(J)Ljava/nio/channels/AsynchronousFileChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "truncate\0", "(J)Ljava/nio/channels/AsynchronousFileChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [force](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#force(boolean))
        pub fn force<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "force", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "force\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lock](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#lock(long,%20long,%20boolean,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-channels-CompletionHandler"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-channels-CompletionHandler")))]
        pub fn lock_long_long_boolean_Object_CompletionHandler<'env>(&'env self, arg0: i64, arg1: i64, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "lock", .descriptor == "(JJZLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "lock\0", "(JJZLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lock](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#lock(java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-channels-CompletionHandler"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-channels-CompletionHandler")))]
        pub fn lock_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | FINAL, .name == "lock", .descriptor == "(Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "lock\0", "(Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lock](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#lock(long,%20long,%20boolean))
        ///
        /// Required features: "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Future")))]
        pub fn lock_long_long_boolean<'env>(&'env self, arg0: i64, arg1: i64, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "lock", .descriptor == "(JJZ)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "lock\0", "(JJZ)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lock](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#lock())
        ///
        /// Required features: "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Future")))]
        pub fn lock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | FINAL, .name == "lock", .descriptor == "()Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "lock\0", "()Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryLock](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#tryLock(long,%20long,%20boolean))
        ///
        /// Required features: "java-nio-channels-FileLock"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileLock")))]
        pub fn tryLock_long_long_boolean<'env>(&'env self, arg0: i64, arg1: i64, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "tryLock", .descriptor == "(JJZ)Ljava/nio/channels/FileLock;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "tryLock\0", "(JJZ)Ljava/nio/channels/FileLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryLock](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#tryLock())
        ///
        /// Required features: "java-nio-channels-FileLock"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-FileLock")))]
        pub fn tryLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::FileLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | FINAL, .name == "tryLock", .descriptor == "()Ljava/nio/channels/FileLock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "tryLock\0", "()Ljava/nio/channels/FileLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#read(java.nio.ByteBuffer,%20long,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-ByteBuffer", "java-nio-channels-CompletionHandler"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-ByteBuffer", feature = "java-nio-channels-CompletionHandler")))]
        pub fn read_ByteBuffer_long_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "read", .descriptor == "(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "read\0", "(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#read(java.nio.ByteBuffer,%20long))
        ///
        /// Required features: "java-nio-ByteBuffer", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer", feature = "java-util-concurrent-Future")))]
        pub fn read_ByteBuffer_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "read", .descriptor == "(Ljava/nio/ByteBuffer;J)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "read\0", "(Ljava/nio/ByteBuffer;J)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#write(java.nio.ByteBuffer,%20long,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-ByteBuffer", "java-nio-channels-CompletionHandler"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-ByteBuffer", feature = "java-nio-channels-CompletionHandler")))]
        pub fn write_ByteBuffer_long_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "write\0", "(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/AsynchronousFileChannel.html#write(java.nio.ByteBuffer,%20long))
        ///
        /// Required features: "java-nio-ByteBuffer", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer", feature = "java-util-concurrent-Future")))]
        pub fn write_ByteBuffer_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousFileChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "(Ljava/nio/ByteBuffer;J)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousFileChannel\0", "write\0", "(Ljava/nio/ByteBuffer;J)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
