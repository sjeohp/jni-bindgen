// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-AsynchronousSocketChannel"))]
__jni_bindgen! {
    /// public class [AsynchronousSocketChannel](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html)
    ///
    /// Required feature: java-nio-channels-AsynchronousSocketChannel
    public class AsynchronousSocketChannel ("java/nio/channels/AsynchronousSocketChannel") extends crate::java::lang::Object, implements crate::java::nio::channels::AsynchronousByteChannel, crate::java::nio::channels::NetworkChannel {

        // // Not emitting: Non-public method
        // /// [AsynchronousSocketChannel](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#AsynchronousSocketChannel(java.nio.channels.spi.AsynchronousChannelProvider))
        // ///
        // /// Required features: "java-nio-channels-spi-AsynchronousChannelProvider"
        // #[cfg(any(feature = "all", all(feature = "java-nio-channels-spi-AsynchronousChannelProvider")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::spi::AsynchronousChannelProvider>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousSocketChannel>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljava/nio/channels/spi/AsynchronousChannelProvider;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "<init>\0", "(Ljava/nio/channels/spi/AsynchronousChannelProvider;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [provider](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#provider())
        ///
        /// Required features: "java-nio-channels-spi-AsynchronousChannelProvider"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-spi-AsynchronousChannelProvider")))]
        pub fn provider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::spi::AsynchronousChannelProvider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | FINAL, .name == "provider", .descriptor == "()Ljava/nio/channels/spi/AsynchronousChannelProvider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "provider\0", "()Ljava/nio/channels/spi/AsynchronousChannelProvider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#open(java.nio.channels.AsynchronousChannelGroup))
        ///
        /// Required features: "java-nio-channels-AsynchronousChannelGroup", "java-nio-channels-AsynchronousSocketChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-AsynchronousChannelGroup", feature = "java-nio-channels-AsynchronousSocketChannel")))]
        pub fn open_AsynchronousChannelGroup<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::AsynchronousChannelGroup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousSocketChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | STATIC, .name == "open", .descriptor == "(Ljava/nio/channels/AsynchronousChannelGroup;)Ljava/nio/channels/AsynchronousSocketChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/channels/AsynchronousSocketChannel\0", "open\0", "(Ljava/nio/channels/AsynchronousChannelGroup;)Ljava/nio/channels/AsynchronousSocketChannel;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#open())
        ///
        /// Required features: "java-nio-channels-AsynchronousSocketChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-AsynchronousSocketChannel")))]
        pub fn open<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousSocketChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | STATIC, .name == "open", .descriptor == "()Ljava/nio/channels/AsynchronousSocketChannel;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/channels/AsynchronousSocketChannel\0", "open\0", "()Ljava/nio/channels/AsynchronousSocketChannel;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bind](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#bind(java.net.SocketAddress))
        ///
        /// Required features: "java-net-SocketAddress", "java-nio-channels-AsynchronousSocketChannel"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress", feature = "java-nio-channels-AsynchronousSocketChannel")))]
        pub fn bind_SocketAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousSocketChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "bind", .descriptor == "(Ljava/net/SocketAddress;)Ljava/nio/channels/AsynchronousSocketChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "bind\0", "(Ljava/net/SocketAddress;)Ljava/nio/channels/AsynchronousSocketChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOption](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#setOption(java.net.SocketOption,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-net-SocketOption", "java-nio-channels-AsynchronousSocketChannel"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-net-SocketOption", feature = "java-nio-channels-AsynchronousSocketChannel")))]
        pub fn setOption_SocketOption_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketOption>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousSocketChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "setOption", .descriptor == "(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/AsynchronousSocketChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "setOption\0", "(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/AsynchronousSocketChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shutdownInput](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#shutdownInput())
        ///
        /// Required features: "java-nio-channels-AsynchronousSocketChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-AsynchronousSocketChannel")))]
        pub fn shutdownInput<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousSocketChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "shutdownInput", .descriptor == "()Ljava/nio/channels/AsynchronousSocketChannel;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "shutdownInput\0", "()Ljava/nio/channels/AsynchronousSocketChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shutdownOutput](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#shutdownOutput())
        ///
        /// Required features: "java-nio-channels-AsynchronousSocketChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-AsynchronousSocketChannel")))]
        pub fn shutdownOutput<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::AsynchronousSocketChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "shutdownOutput", .descriptor == "()Ljava/nio/channels/AsynchronousSocketChannel;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "shutdownOutput\0", "()Ljava/nio/channels/AsynchronousSocketChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRemoteAddress](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#getRemoteAddress())
        ///
        /// Required features: "java-net-SocketAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress")))]
        pub fn getRemoteAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::SocketAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "getRemoteAddress", .descriptor == "()Ljava/net/SocketAddress;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "getRemoteAddress\0", "()Ljava/net/SocketAddress;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connect](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#connect(java.net.SocketAddress,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-net-SocketAddress", "java-nio-channels-CompletionHandler"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-net-SocketAddress", feature = "java-nio-channels-CompletionHandler")))]
        pub fn connect_SocketAddress_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketAddress>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "connect", .descriptor == "(Ljava/net/SocketAddress;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "connect\0", "(Ljava/net/SocketAddress;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connect](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#connect(java.net.SocketAddress))
        ///
        /// Required features: "java-net-SocketAddress", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress", feature = "java-util-concurrent-Future")))]
        pub fn connect_SocketAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "connect", .descriptor == "(Ljava/net/SocketAddress;)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "connect\0", "(Ljava/net/SocketAddress;)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#read(java.nio.ByteBuffer,%20long,%20java.util.concurrent.TimeUnit,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-ByteBuffer", "java-nio-channels-CompletionHandler", "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-ByteBuffer", feature = "java-nio-channels-CompletionHandler", feature = "java-util-concurrent-TimeUnit")))]
        pub fn read_ByteBuffer_long_TimeUnit_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "read", .descriptor == "(Ljava/nio/ByteBuffer;JLjava/util/concurrent/TimeUnit;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "read\0", "(Ljava/nio/ByteBuffer;JLjava/util/concurrent/TimeUnit;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#read(java.nio.ByteBuffer,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-ByteBuffer", "java-nio-channels-CompletionHandler"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-ByteBuffer", feature = "java-nio-channels-CompletionHandler")))]
        pub fn read_ByteBuffer_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | FINAL, .name == "read", .descriptor == "(Ljava/nio/ByteBuffer;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "read\0", "(Ljava/nio/ByteBuffer;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#read(java.nio.ByteBuffer))
        ///
        /// Required features: "java-nio-ByteBuffer", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer", feature = "java-util-concurrent-Future")))]
        pub fn read_ByteBuffer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "read", .descriptor == "(Ljava/nio/ByteBuffer;)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "read\0", "(Ljava/nio/ByteBuffer;)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#read(java.nio.ByteBuffer%5B%5D,%20int,%20int,%20long,%20java.util.concurrent.TimeUnit,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-ByteBuffer", "java-nio-channels-CompletionHandler", "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-ByteBuffer", feature = "java-nio-channels-CompletionHandler", feature = "java-util-concurrent-TimeUnit")))]
        pub fn read_ByteBuffer_array_int_int_long_TimeUnit_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>, arg1: i32, arg2: i32, arg3: i64, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "read", .descriptor == "([Ljava/nio/ByteBuffer;IIJLjava/util/concurrent/TimeUnit;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "read\0", "([Ljava/nio/ByteBuffer;IIJLjava/util/concurrent/TimeUnit;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#write(java.nio.ByteBuffer,%20long,%20java.util.concurrent.TimeUnit,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-ByteBuffer", "java-nio-channels-CompletionHandler", "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-ByteBuffer", feature = "java-nio-channels-CompletionHandler", feature = "java-util-concurrent-TimeUnit")))]
        pub fn write_ByteBuffer_long_TimeUnit_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "(Ljava/nio/ByteBuffer;JLjava/util/concurrent/TimeUnit;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "write\0", "(Ljava/nio/ByteBuffer;JLjava/util/concurrent/TimeUnit;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#write(java.nio.ByteBuffer,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-ByteBuffer", "java-nio-channels-CompletionHandler"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-ByteBuffer", feature = "java-nio-channels-CompletionHandler")))]
        pub fn write_ByteBuffer_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | FINAL, .name == "write", .descriptor == "(Ljava/nio/ByteBuffer;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "write\0", "(Ljava/nio/ByteBuffer;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#write(java.nio.ByteBuffer))
        ///
        /// Required features: "java-nio-ByteBuffer", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer", feature = "java-util-concurrent-Future")))]
        pub fn write_ByteBuffer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "(Ljava/nio/ByteBuffer;)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "write\0", "(Ljava/nio/ByteBuffer;)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#write(java.nio.ByteBuffer%5B%5D,%20int,%20int,%20long,%20java.util.concurrent.TimeUnit,%20java.lang.Object,%20java.nio.channels.CompletionHandler))
        ///
        /// Required features: "java-lang-Object", "java-nio-ByteBuffer", "java-nio-channels-CompletionHandler", "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-ByteBuffer", feature = "java-nio-channels-CompletionHandler", feature = "java-util-concurrent-TimeUnit")))]
        pub fn write_ByteBuffer_array_int_int_long_TimeUnit_Object_CompletionHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>, arg1: i32, arg2: i32, arg3: i64, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::CompletionHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "write", .descriptor == "([Ljava/nio/ByteBuffer;IIJLjava/util/concurrent/TimeUnit;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "write\0", "([Ljava/nio/ByteBuffer;IIJLjava/util/concurrent/TimeUnit;Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalAddress](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#getLocalAddress())
        ///
        /// Required features: "java-net-SocketAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress")))]
        pub fn getLocalAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::SocketAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | ABSTRACT, .name == "getLocalAddress", .descriptor == "()Ljava/net/SocketAddress;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "getLocalAddress\0", "()Ljava/net/SocketAddress;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [setOption](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#setOption(java.net.SocketOption,%20java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object", "java-net-SocketOption", "java-nio-channels-NetworkChannel"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-net-SocketOption", feature = "java-nio-channels-NetworkChannel")))]
        // pub fn setOption_SocketOption_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketOption>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::NetworkChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "setOption", .descriptor == "(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/NetworkChannel;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "setOption\0", "(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/NetworkChannel;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [bind](https://developer.android.com/reference/java/nio/channels/AsynchronousSocketChannel.html#bind(java.net.SocketAddress))
        // ///
        // /// Required features: "java-net-SocketAddress", "java-nio-channels-NetworkChannel"
        // #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress", feature = "java-nio-channels-NetworkChannel")))]
        // pub fn bind_SocketAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::NetworkChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/AsynchronousSocketChannel", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "bind", .descriptor == "(Ljava/net/SocketAddress;)Ljava/nio/channels/NetworkChannel;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/AsynchronousSocketChannel\0", "bind\0", "(Ljava/net/SocketAddress;)Ljava/nio/channels/NetworkChannel;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
