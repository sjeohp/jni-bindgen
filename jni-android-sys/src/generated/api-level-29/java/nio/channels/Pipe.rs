// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-Pipe"))]
__jni_bindgen! {
    /// public class [Pipe](https://developer.android.com/reference/java/nio/channels/Pipe.html)
    ///
    /// Required feature: java-nio-channels-Pipe
    public class Pipe ("java/nio/channels/Pipe") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Pipe](https://developer.android.com/reference/java/nio/channels/Pipe.html#Pipe())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::channels::Pipe>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/Pipe", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/Pipe\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [source](https://developer.android.com/reference/java/nio/channels/Pipe.html#source())
        ///
        /// Required features: "java-nio-channels-Pipe_SourceChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-Pipe_SourceChannel")))]
        pub fn source<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::Pipe_SourceChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/Pipe", java.flags == PUBLIC | ABSTRACT, .name == "source", .descriptor == "()Ljava/nio/channels/Pipe$SourceChannel;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/Pipe\0", "source\0", "()Ljava/nio/channels/Pipe$SourceChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sink](https://developer.android.com/reference/java/nio/channels/Pipe.html#sink())
        ///
        /// Required features: "java-nio-channels-Pipe_SinkChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-Pipe_SinkChannel")))]
        pub fn sink<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::Pipe_SinkChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/Pipe", java.flags == PUBLIC | ABSTRACT, .name == "sink", .descriptor == "()Ljava/nio/channels/Pipe$SinkChannel;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/Pipe\0", "sink\0", "()Ljava/nio/channels/Pipe$SinkChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/java/nio/channels/Pipe.html#open())
        ///
        /// Required features: "java-nio-channels-Pipe"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-Pipe")))]
        pub fn open<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::Pipe>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/Pipe", java.flags == PUBLIC | STATIC, .name == "open", .descriptor == "()Ljava/nio/channels/Pipe;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/nio/channels/Pipe\0", "open\0", "()Ljava/nio/channels/Pipe;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
