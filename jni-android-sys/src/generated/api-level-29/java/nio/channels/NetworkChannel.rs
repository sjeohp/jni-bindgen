// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-NetworkChannel"))]
__jni_bindgen! {
    /// public interface [NetworkChannel](https://developer.android.com/reference/java/nio/channels/NetworkChannel.html)
    ///
    /// Required feature: java-nio-channels-NetworkChannel
    public interface NetworkChannel ("java/nio/channels/NetworkChannel") extends crate::java::lang::Object, implements crate::java::nio::channels::Channel {

        /// [bind](https://developer.android.com/reference/java/nio/channels/NetworkChannel.html#bind(java.net.SocketAddress))
        ///
        /// Required features: "java-net-SocketAddress", "java-nio-channels-NetworkChannel"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress", feature = "java-nio-channels-NetworkChannel")))]
        pub fn bind<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::NetworkChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/NetworkChannel", java.flags == PUBLIC | ABSTRACT, .name == "bind", .descriptor == "(Ljava/net/SocketAddress;)Ljava/nio/channels/NetworkChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/NetworkChannel\0", "bind\0", "(Ljava/net/SocketAddress;)Ljava/nio/channels/NetworkChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalAddress](https://developer.android.com/reference/java/nio/channels/NetworkChannel.html#getLocalAddress())
        ///
        /// Required features: "java-net-SocketAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-SocketAddress")))]
        pub fn getLocalAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::SocketAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/NetworkChannel", java.flags == PUBLIC | ABSTRACT, .name == "getLocalAddress", .descriptor == "()Ljava/net/SocketAddress;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/NetworkChannel\0", "getLocalAddress\0", "()Ljava/net/SocketAddress;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOption](https://developer.android.com/reference/java/nio/channels/NetworkChannel.html#setOption(java.net.SocketOption,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-net-SocketOption", "java-nio-channels-NetworkChannel"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-net-SocketOption", feature = "java-nio-channels-NetworkChannel")))]
        pub fn setOption<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketOption>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::NetworkChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/NetworkChannel", java.flags == PUBLIC | ABSTRACT, .name == "setOption", .descriptor == "(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/NetworkChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/NetworkChannel\0", "setOption\0", "(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/NetworkChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOption](https://developer.android.com/reference/java/nio/channels/NetworkChannel.html#getOption(java.net.SocketOption))
        ///
        /// Required features: "java-lang-Object", "java-net-SocketOption"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-net-SocketOption")))]
        pub fn getOption<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::SocketOption>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/NetworkChannel", java.flags == PUBLIC | ABSTRACT, .name == "getOption", .descriptor == "(Ljava/net/SocketOption;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/NetworkChannel\0", "getOption\0", "(Ljava/net/SocketOption;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [supportedOptions](https://developer.android.com/reference/java/nio/channels/NetworkChannel.html#supportedOptions())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn supportedOptions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/NetworkChannel", java.flags == PUBLIC | ABSTRACT, .name == "supportedOptions", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/NetworkChannel\0", "supportedOptions\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
