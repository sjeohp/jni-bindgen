// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-nio-channels-spi-AbstractSelectableChannel"))]
__jni_bindgen! {
    /// public class [AbstractSelectableChannel](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html)
    ///
    /// Required feature: java-nio-channels-spi-AbstractSelectableChannel
    public class AbstractSelectableChannel ("java/nio/channels/spi/AbstractSelectableChannel") extends crate::java::nio::channels::SelectableChannel {

        // // Not emitting: Non-public method
        // /// [AbstractSelectableChannel](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#AbstractSelectableChannel(java.nio.channels.spi.SelectorProvider))
        // ///
        // /// Required features: "java-nio-channels-spi-SelectorProvider"
        // #[cfg(any(feature = "all", all(feature = "java-nio-channels-spi-SelectorProvider")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::spi::SelectorProvider>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::nio::channels::spi::AbstractSelectableChannel>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljava/nio/channels/spi/SelectorProvider;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "<init>\0", "(Ljava/nio/channels/spi/SelectorProvider;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [provider](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#provider())
        ///
        /// Required features: "java-nio-channels-spi-SelectorProvider"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-spi-SelectorProvider")))]
        pub fn provider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::spi::SelectorProvider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PUBLIC | FINAL, .name == "provider", .descriptor == "()Ljava/nio/channels/spi/SelectorProvider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "provider\0", "()Ljava/nio/channels/spi/SelectorProvider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRegistered](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#isRegistered())
        pub fn isRegistered<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PUBLIC | FINAL, .name == "isRegistered", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "isRegistered\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [keyFor](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#keyFor(java.nio.channels.Selector))
        ///
        /// Required features: "java-nio-channels-SelectionKey", "java-nio-channels-Selector"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-SelectionKey", feature = "java-nio-channels-Selector")))]
        pub fn keyFor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::Selector>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SelectionKey>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PUBLIC | FINAL, .name == "keyFor", .descriptor == "(Ljava/nio/channels/Selector;)Ljava/nio/channels/SelectionKey;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "keyFor\0", "(Ljava/nio/channels/Selector;)Ljava/nio/channels/SelectionKey;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [register](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#register(java.nio.channels.Selector,%20int,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-nio-channels-SelectionKey", "java-nio-channels-Selector"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-nio-channels-SelectionKey", feature = "java-nio-channels-Selector")))]
        pub fn register<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::channels::Selector>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SelectionKey>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PUBLIC | FINAL, .name == "register", .descriptor == "(Ljava/nio/channels/Selector;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "register\0", "(Ljava/nio/channels/Selector;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [implCloseChannel](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#implCloseChannel())
        // fn implCloseChannel<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PROTECTED | FINAL, .name == "implCloseChannel", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "implCloseChannel\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [implCloseSelectableChannel](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#implCloseSelectableChannel())
        // fn implCloseSelectableChannel<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PROTECTED | ABSTRACT, .name == "implCloseSelectableChannel", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "implCloseSelectableChannel\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isBlocking](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#isBlocking())
        pub fn isBlocking<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PUBLIC | FINAL, .name == "isBlocking", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "isBlocking\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [blockingLock](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#blockingLock())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn blockingLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PUBLIC | FINAL, .name == "blockingLock", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "blockingLock\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [configureBlocking](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#configureBlocking(boolean))
        ///
        /// Required features: "java-nio-channels-SelectableChannel"
        #[cfg(any(feature = "all", all(feature = "java-nio-channels-SelectableChannel")))]
        pub fn configureBlocking<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::channels::SelectableChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PUBLIC | FINAL, .name == "configureBlocking", .descriptor == "(Z)Ljava/nio/channels/SelectableChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "configureBlocking\0", "(Z)Ljava/nio/channels/SelectableChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [implConfigureBlocking](https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html#implConfigureBlocking(boolean))
        // fn implConfigureBlocking<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/nio/channels/spi/AbstractSelectableChannel", java.flags == PROTECTED | ABSTRACT, .name == "implConfigureBlocking", .descriptor == "(Z)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/nio/channels/spi/AbstractSelectableChannel\0", "implConfigureBlocking\0", "(Z)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
