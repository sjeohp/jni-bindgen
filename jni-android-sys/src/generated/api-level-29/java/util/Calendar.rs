// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-Calendar"))]
__jni_bindgen! {
    /// public class [Calendar](https://developer.android.com/reference/java/util/Calendar.html)
    ///
    /// Required feature: java-util-Calendar
    public class Calendar ("java/util/Calendar") extends crate::java::lang::Object, implements crate::java::io::Serializable, crate::java::lang::Cloneable, crate::java::lang::Comparable {

        // // Not emitting: Non-public method
        // /// [Calendar](https://developer.android.com/reference/java/util/Calendar.html#Calendar())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::Calendar>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/Calendar", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [Calendar](https://developer.android.com/reference/java/util/Calendar.html#Calendar(java.util.TimeZone,%20java.util.Locale))
        // ///
        // /// Required features: "java-util-Locale", "java-util-TimeZone"
        // #[cfg(any(feature = "all", all(feature = "java-util-Locale", feature = "java-util-TimeZone")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::TimeZone>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::Calendar>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/Calendar", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljava/util/TimeZone;Ljava/util/Locale;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "<init>\0", "(Ljava/util/TimeZone;Ljava/util/Locale;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/java/util/Calendar.html#getInstance())
        ///
        /// Required features: "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-util-Calendar")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Calendar>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "()Ljava/util/Calendar;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Calendar\0", "getInstance\0", "()Ljava/util/Calendar;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/java/util/Calendar.html#getInstance(java.util.TimeZone))
        ///
        /// Required features: "java-util-Calendar", "java-util-TimeZone"
        #[cfg(any(feature = "all", all(feature = "java-util-Calendar", feature = "java-util-TimeZone")))]
        pub fn getInstance_TimeZone<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::TimeZone>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Calendar>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/util/TimeZone;)Ljava/util/Calendar;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Calendar\0", "getInstance\0", "(Ljava/util/TimeZone;)Ljava/util/Calendar;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/java/util/Calendar.html#getInstance(java.util.Locale))
        ///
        /// Required features: "java-util-Calendar", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Calendar", feature = "java-util-Locale")))]
        pub fn getInstance_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Calendar>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/util/Locale;)Ljava/util/Calendar;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Calendar\0", "getInstance\0", "(Ljava/util/Locale;)Ljava/util/Calendar;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/java/util/Calendar.html#getInstance(java.util.TimeZone,%20java.util.Locale))
        ///
        /// Required features: "java-util-Calendar", "java-util-Locale", "java-util-TimeZone"
        #[cfg(any(feature = "all", all(feature = "java-util-Calendar", feature = "java-util-Locale", feature = "java-util-TimeZone")))]
        pub fn getInstance_TimeZone_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::TimeZone>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Calendar>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Calendar\0", "getInstance\0", "(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAvailableLocales](https://developer.android.com/reference/java/util/Calendar.html#getAvailableLocales())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn getAvailableLocales<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::util::Locale, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "getAvailableLocales", .descriptor == "()[Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Calendar\0", "getAvailableLocales\0", "()[Ljava/util/Locale;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [computeTime](https://developer.android.com/reference/java/util/Calendar.html#computeTime())
        // fn computeTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/Calendar", java.flags == PROTECTED | ABSTRACT, .name == "computeTime", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "computeTime\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [computeFields](https://developer.android.com/reference/java/util/Calendar.html#computeFields())
        // fn computeFields<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/Calendar", java.flags == PROTECTED | ABSTRACT, .name == "computeFields", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "computeFields\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getTime](https://developer.android.com/reference/java/util/Calendar.html#getTime())
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn getTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | FINAL, .name == "getTime", .descriptor == "()Ljava/util/Date;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getTime\0", "()Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTime](https://developer.android.com/reference/java/util/Calendar.html#setTime(java.util.Date))
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn setTime<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Date>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | FINAL, .name == "setTime", .descriptor == "(Ljava/util/Date;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "setTime\0", "(Ljava/util/Date;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeInMillis](https://developer.android.com/reference/java/util/Calendar.html#getTimeInMillis())
        pub fn getTimeInMillis<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getTimeInMillis", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getTimeInMillis\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTimeInMillis](https://developer.android.com/reference/java/util/Calendar.html#setTimeInMillis(long))
        pub fn setTimeInMillis<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "setTimeInMillis", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "setTimeInMillis\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/util/Calendar.html#get(int))
        pub fn get<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "get", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "get\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [internalGet](https://developer.android.com/reference/java/util/Calendar.html#internalGet(int))
        // fn internalGet<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/Calendar", java.flags == PROTECTED | FINAL, .name == "internalGet", .descriptor == "(I)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "internalGet\0", "(I)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [set](https://developer.android.com/reference/java/util/Calendar.html#set(int,%20int))
        pub fn set_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "set", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "set\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/java/util/Calendar.html#set(int,%20int,%20int))
        pub fn set_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | FINAL, .name == "set", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "set\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/java/util/Calendar.html#set(int,%20int,%20int,%20int,%20int))
        pub fn set_int_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | FINAL, .name == "set", .descriptor == "(IIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "set\0", "(IIIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/java/util/Calendar.html#set(int,%20int,%20int,%20int,%20int,%20int))
        pub fn set_int_int_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | FINAL, .name == "set", .descriptor == "(IIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "set\0", "(IIIIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/java/util/Calendar.html#clear())
        pub fn clear<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | FINAL, .name == "clear", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "clear\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/java/util/Calendar.html#clear(int))
        pub fn clear_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | FINAL, .name == "clear", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "clear\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSet](https://developer.android.com/reference/java/util/Calendar.html#isSet(int))
        pub fn isSet<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | FINAL, .name == "isSet", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "isSet\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayName](https://developer.android.com/reference/java/util/Calendar.html#getDisplayName(int,%20int,%20java.util.Locale))
        ///
        /// Required features: "java-lang-String", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Locale")))]
        pub fn getDisplayName<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getDisplayName", .descriptor == "(IILjava/util/Locale;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getDisplayName\0", "(IILjava/util/Locale;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayNames](https://developer.android.com/reference/java/util/Calendar.html#getDisplayNames(int,%20int,%20java.util.Locale))
        ///
        /// Required features: "java-util-Locale", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale", feature = "java-util-Map")))]
        pub fn getDisplayNames<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getDisplayNames", .descriptor == "(IILjava/util/Locale;)Ljava/util/Map;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getDisplayNames\0", "(IILjava/util/Locale;)Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [complete](https://developer.android.com/reference/java/util/Calendar.html#complete())
        // fn complete<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/Calendar", java.flags == PROTECTED, .name == "complete", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "complete\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getAvailableCalendarTypes](https://developer.android.com/reference/java/util/Calendar.html#getAvailableCalendarTypes())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getAvailableCalendarTypes<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | STATIC, .name == "getAvailableCalendarTypes", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Calendar\0", "getAvailableCalendarTypes\0", "()Ljava/util/Set;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCalendarType](https://developer.android.com/reference/java/util/Calendar.html#getCalendarType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCalendarType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getCalendarType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getCalendarType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/util/Calendar.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/util/Calendar.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [before](https://developer.android.com/reference/java/util/Calendar.html#before(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn before<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "before", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "before\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [after](https://developer.android.com/reference/java/util/Calendar.html#after(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn after<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "after", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "after\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/java/util/Calendar.html#compareTo(java.util.Calendar))
        ///
        /// Required features: "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-util-Calendar")))]
        pub fn compareTo_Calendar<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Calendar>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/util/Calendar;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "compareTo\0", "(Ljava/util/Calendar;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/java/util/Calendar.html#add(int,%20int))
        pub fn add<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | ABSTRACT, .name == "add", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "add\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [roll](https://developer.android.com/reference/java/util/Calendar.html#roll(int,%20boolean))
        pub fn roll_int_boolean<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | ABSTRACT, .name == "roll", .descriptor == "(IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "roll\0", "(IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [roll](https://developer.android.com/reference/java/util/Calendar.html#roll(int,%20int))
        pub fn roll_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "roll", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "roll\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTimeZone](https://developer.android.com/reference/java/util/Calendar.html#setTimeZone(java.util.TimeZone))
        ///
        /// Required features: "java-util-TimeZone"
        #[cfg(any(feature = "all", all(feature = "java-util-TimeZone")))]
        pub fn setTimeZone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::TimeZone>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "setTimeZone", .descriptor == "(Ljava/util/TimeZone;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "setTimeZone\0", "(Ljava/util/TimeZone;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeZone](https://developer.android.com/reference/java/util/Calendar.html#getTimeZone())
        ///
        /// Required features: "java-util-TimeZone"
        #[cfg(any(feature = "all", all(feature = "java-util-TimeZone")))]
        pub fn getTimeZone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::TimeZone>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getTimeZone", .descriptor == "()Ljava/util/TimeZone;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getTimeZone\0", "()Ljava/util/TimeZone;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLenient](https://developer.android.com/reference/java/util/Calendar.html#setLenient(boolean))
        pub fn setLenient<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "setLenient", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "setLenient\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLenient](https://developer.android.com/reference/java/util/Calendar.html#isLenient())
        pub fn isLenient<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "isLenient", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "isLenient\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFirstDayOfWeek](https://developer.android.com/reference/java/util/Calendar.html#setFirstDayOfWeek(int))
        pub fn setFirstDayOfWeek<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "setFirstDayOfWeek", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "setFirstDayOfWeek\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFirstDayOfWeek](https://developer.android.com/reference/java/util/Calendar.html#getFirstDayOfWeek())
        pub fn getFirstDayOfWeek<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getFirstDayOfWeek", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getFirstDayOfWeek\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinimalDaysInFirstWeek](https://developer.android.com/reference/java/util/Calendar.html#setMinimalDaysInFirstWeek(int))
        pub fn setMinimalDaysInFirstWeek<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "setMinimalDaysInFirstWeek", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "setMinimalDaysInFirstWeek\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinimalDaysInFirstWeek](https://developer.android.com/reference/java/util/Calendar.html#getMinimalDaysInFirstWeek())
        pub fn getMinimalDaysInFirstWeek<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getMinimalDaysInFirstWeek", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getMinimalDaysInFirstWeek\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWeekDateSupported](https://developer.android.com/reference/java/util/Calendar.html#isWeekDateSupported())
        pub fn isWeekDateSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "isWeekDateSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "isWeekDateSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWeekYear](https://developer.android.com/reference/java/util/Calendar.html#getWeekYear())
        pub fn getWeekYear<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getWeekYear", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getWeekYear\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWeekDate](https://developer.android.com/reference/java/util/Calendar.html#setWeekDate(int,%20int,%20int))
        pub fn setWeekDate<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "setWeekDate", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "setWeekDate\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWeeksInWeekYear](https://developer.android.com/reference/java/util/Calendar.html#getWeeksInWeekYear())
        pub fn getWeeksInWeekYear<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getWeeksInWeekYear", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getWeeksInWeekYear\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinimum](https://developer.android.com/reference/java/util/Calendar.html#getMinimum(int))
        pub fn getMinimum<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | ABSTRACT, .name == "getMinimum", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getMinimum\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaximum](https://developer.android.com/reference/java/util/Calendar.html#getMaximum(int))
        pub fn getMaximum<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | ABSTRACT, .name == "getMaximum", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getMaximum\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGreatestMinimum](https://developer.android.com/reference/java/util/Calendar.html#getGreatestMinimum(int))
        pub fn getGreatestMinimum<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | ABSTRACT, .name == "getGreatestMinimum", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getGreatestMinimum\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLeastMaximum](https://developer.android.com/reference/java/util/Calendar.html#getLeastMaximum(int))
        pub fn getLeastMaximum<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | ABSTRACT, .name == "getLeastMaximum", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getLeastMaximum\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActualMinimum](https://developer.android.com/reference/java/util/Calendar.html#getActualMinimum(int))
        pub fn getActualMinimum<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getActualMinimum", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getActualMinimum\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActualMaximum](https://developer.android.com/reference/java/util/Calendar.html#getActualMaximum(int))
        pub fn getActualMaximum<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "getActualMaximum", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "getActualMaximum\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/java/util/Calendar.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/util/Calendar.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toInstant](https://developer.android.com/reference/java/util/Calendar.html#toInstant())
        ///
        /// Required features: "java-time-Instant"
        #[cfg(any(feature = "all", all(feature = "java-time-Instant")))]
        pub fn toInstant<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::time::Instant>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Calendar", java.flags == PUBLIC | FINAL, .name == "toInstant", .descriptor == "()Ljava/time/Instant;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "toInstant\0", "()Ljava/time/Instant;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/java/util/Calendar.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/Calendar", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Calendar\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [ALL_STYLES](https://developer.android.com/reference/java/util/Calendar.html#ALL_STYLES)
        pub const ALL_STYLES : i32 = 0;

        /// public static final [AM](https://developer.android.com/reference/java/util/Calendar.html#AM)
        pub const AM : i32 = 0;

        /// public static final [AM_PM](https://developer.android.com/reference/java/util/Calendar.html#AM_PM)
        pub const AM_PM : i32 = 9;

        /// public static final [APRIL](https://developer.android.com/reference/java/util/Calendar.html#APRIL)
        pub const APRIL : i32 = 3;

        /// public static final [AUGUST](https://developer.android.com/reference/java/util/Calendar.html#AUGUST)
        pub const AUGUST : i32 = 7;

        /// public static final [DATE](https://developer.android.com/reference/java/util/Calendar.html#DATE)
        pub const DATE : i32 = 5;

        /// public static final [DAY_OF_MONTH](https://developer.android.com/reference/java/util/Calendar.html#DAY_OF_MONTH)
        pub const DAY_OF_MONTH : i32 = 5;

        /// public static final [DAY_OF_WEEK](https://developer.android.com/reference/java/util/Calendar.html#DAY_OF_WEEK)
        pub const DAY_OF_WEEK : i32 = 7;

        /// public static final [DAY_OF_WEEK_IN_MONTH](https://developer.android.com/reference/java/util/Calendar.html#DAY_OF_WEEK_IN_MONTH)
        pub const DAY_OF_WEEK_IN_MONTH : i32 = 8;

        /// public static final [DAY_OF_YEAR](https://developer.android.com/reference/java/util/Calendar.html#DAY_OF_YEAR)
        pub const DAY_OF_YEAR : i32 = 6;

        /// public static final [DECEMBER](https://developer.android.com/reference/java/util/Calendar.html#DECEMBER)
        pub const DECEMBER : i32 = 11;

        /// public static final [DST_OFFSET](https://developer.android.com/reference/java/util/Calendar.html#DST_OFFSET)
        pub const DST_OFFSET : i32 = 16;

        /// public static final [ERA](https://developer.android.com/reference/java/util/Calendar.html#ERA)
        pub const ERA : i32 = 0;

        /// public static final [FEBRUARY](https://developer.android.com/reference/java/util/Calendar.html#FEBRUARY)
        pub const FEBRUARY : i32 = 1;

        /// public static final [FIELD_COUNT](https://developer.android.com/reference/java/util/Calendar.html#FIELD_COUNT)
        pub const FIELD_COUNT : i32 = 17;

        /// public static final [FRIDAY](https://developer.android.com/reference/java/util/Calendar.html#FRIDAY)
        pub const FRIDAY : i32 = 6;

        /// public static final [HOUR](https://developer.android.com/reference/java/util/Calendar.html#HOUR)
        pub const HOUR : i32 = 10;

        /// public static final [HOUR_OF_DAY](https://developer.android.com/reference/java/util/Calendar.html#HOUR_OF_DAY)
        pub const HOUR_OF_DAY : i32 = 11;

        /// public static final [JANUARY](https://developer.android.com/reference/java/util/Calendar.html#JANUARY)
        pub const JANUARY : i32 = 0;

        /// public static final [JULY](https://developer.android.com/reference/java/util/Calendar.html#JULY)
        pub const JULY : i32 = 6;

        /// public static final [JUNE](https://developer.android.com/reference/java/util/Calendar.html#JUNE)
        pub const JUNE : i32 = 5;

        /// public static final [LONG](https://developer.android.com/reference/java/util/Calendar.html#LONG)
        pub const LONG : i32 = 2;

        /// public static final [LONG_FORMAT](https://developer.android.com/reference/java/util/Calendar.html#LONG_FORMAT)
        pub const LONG_FORMAT : i32 = 2;

        /// public static final [LONG_STANDALONE](https://developer.android.com/reference/java/util/Calendar.html#LONG_STANDALONE)
        pub const LONG_STANDALONE : i32 = 32770;

        /// public static final [MARCH](https://developer.android.com/reference/java/util/Calendar.html#MARCH)
        pub const MARCH : i32 = 2;

        /// public static final [MAY](https://developer.android.com/reference/java/util/Calendar.html#MAY)
        pub const MAY : i32 = 4;

        /// public static final [MILLISECOND](https://developer.android.com/reference/java/util/Calendar.html#MILLISECOND)
        pub const MILLISECOND : i32 = 14;

        /// public static final [MINUTE](https://developer.android.com/reference/java/util/Calendar.html#MINUTE)
        pub const MINUTE : i32 = 12;

        /// public static final [MONDAY](https://developer.android.com/reference/java/util/Calendar.html#MONDAY)
        pub const MONDAY : i32 = 2;

        /// public static final [MONTH](https://developer.android.com/reference/java/util/Calendar.html#MONTH)
        pub const MONTH : i32 = 2;

        /// public static final [NARROW_FORMAT](https://developer.android.com/reference/java/util/Calendar.html#NARROW_FORMAT)
        pub const NARROW_FORMAT : i32 = 4;

        /// public static final [NARROW_STANDALONE](https://developer.android.com/reference/java/util/Calendar.html#NARROW_STANDALONE)
        pub const NARROW_STANDALONE : i32 = 32772;

        /// public static final [NOVEMBER](https://developer.android.com/reference/java/util/Calendar.html#NOVEMBER)
        pub const NOVEMBER : i32 = 10;

        /// public static final [OCTOBER](https://developer.android.com/reference/java/util/Calendar.html#OCTOBER)
        pub const OCTOBER : i32 = 9;

        /// public static final [PM](https://developer.android.com/reference/java/util/Calendar.html#PM)
        pub const PM : i32 = 1;

        /// public static final [SATURDAY](https://developer.android.com/reference/java/util/Calendar.html#SATURDAY)
        pub const SATURDAY : i32 = 7;

        /// public static final [SECOND](https://developer.android.com/reference/java/util/Calendar.html#SECOND)
        pub const SECOND : i32 = 13;

        /// public static final [SEPTEMBER](https://developer.android.com/reference/java/util/Calendar.html#SEPTEMBER)
        pub const SEPTEMBER : i32 = 8;

        /// public static final [SHORT](https://developer.android.com/reference/java/util/Calendar.html#SHORT)
        pub const SHORT : i32 = 1;

        /// public static final [SHORT_FORMAT](https://developer.android.com/reference/java/util/Calendar.html#SHORT_FORMAT)
        pub const SHORT_FORMAT : i32 = 1;

        /// public static final [SHORT_STANDALONE](https://developer.android.com/reference/java/util/Calendar.html#SHORT_STANDALONE)
        pub const SHORT_STANDALONE : i32 = 32769;

        /// public static final [SUNDAY](https://developer.android.com/reference/java/util/Calendar.html#SUNDAY)
        pub const SUNDAY : i32 = 1;

        /// public static final [THURSDAY](https://developer.android.com/reference/java/util/Calendar.html#THURSDAY)
        pub const THURSDAY : i32 = 5;

        /// public static final [TUESDAY](https://developer.android.com/reference/java/util/Calendar.html#TUESDAY)
        pub const TUESDAY : i32 = 3;

        /// public static final [UNDECIMBER](https://developer.android.com/reference/java/util/Calendar.html#UNDECIMBER)
        pub const UNDECIMBER : i32 = 12;

        /// public static final [WEDNESDAY](https://developer.android.com/reference/java/util/Calendar.html#WEDNESDAY)
        pub const WEDNESDAY : i32 = 4;

        /// public static final [WEEK_OF_MONTH](https://developer.android.com/reference/java/util/Calendar.html#WEEK_OF_MONTH)
        pub const WEEK_OF_MONTH : i32 = 4;

        /// public static final [WEEK_OF_YEAR](https://developer.android.com/reference/java/util/Calendar.html#WEEK_OF_YEAR)
        pub const WEEK_OF_YEAR : i32 = 3;

        /// public static final [YEAR](https://developer.android.com/reference/java/util/Calendar.html#YEAR)
        pub const YEAR : i32 = 1;

        /// public static final [ZONE_OFFSET](https://developer.android.com/reference/java/util/Calendar.html#ZONE_OFFSET)
        pub const ZONE_OFFSET : i32 = 15;

        // // Not emitting: Non-public field
        // /// **get** protected [areFieldsSet](https://developer.android.com/reference/java/util/Calendar.html#areFieldsSet)
        // pub fn areFieldsSet<'env>(&'env self) -> bool {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "areFieldsSet\0", "Z\0");
        //         env.get_boolean_field(class, field)
        //     }
        // }

        // /// **set** protected [areFieldsSet](https://developer.android.com/reference/java/util/Calendar.html#areFieldsSet)
        // pub fn set_areFieldsSet<'env>(&'env self, value: bool) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "areFieldsSet\0", "Z\0");
        //         env.set_boolean_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [fields](https://developer.android.com/reference/java/util/Calendar.html#fields)
        // pub fn fields<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "fields\0", "[I\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [fields](https://developer.android.com/reference/java/util/Calendar.html#fields)
        // pub fn set_fields<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::IntArray>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "fields\0", "[I\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [isSet](https://developer.android.com/reference/java/util/Calendar.html#isSet)
        // pub fn isSet<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::BooleanArray>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "isSet\0", "[Z\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [isSet](https://developer.android.com/reference/java/util/Calendar.html#isSet)
        // pub fn set_isSet<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::BooleanArray>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "isSet\0", "[Z\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [isTimeSet](https://developer.android.com/reference/java/util/Calendar.html#isTimeSet)
        // pub fn isTimeSet<'env>(&'env self) -> bool {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "isTimeSet\0", "Z\0");
        //         env.get_boolean_field(class, field)
        //     }
        // }

        // /// **set** protected [isTimeSet](https://developer.android.com/reference/java/util/Calendar.html#isTimeSet)
        // pub fn set_isTimeSet<'env>(&'env self, value: bool) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "isTimeSet\0", "Z\0");
        //         env.set_boolean_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [time](https://developer.android.com/reference/java/util/Calendar.html#time)
        // pub fn time<'env>(&'env self) -> i64 {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "time\0", "J\0");
        //         env.get_long_field(class, field)
        //     }
        // }

        // /// **set** protected [time](https://developer.android.com/reference/java/util/Calendar.html#time)
        // pub fn set_time<'env>(&'env self, value: i64) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/Calendar\0", "time\0", "J\0");
        //         env.set_long_field(class, field, value)
        //     }
        // }
    }
}
