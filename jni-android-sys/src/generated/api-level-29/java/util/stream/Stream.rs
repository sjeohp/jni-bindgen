// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-stream-Stream"))]
__jni_bindgen! {
    /// public interface [Stream](https://developer.android.com/reference/java/util/stream/Stream.html)
    ///
    /// Required feature: java-util-stream-Stream
    public interface Stream ("java/util/stream/Stream") extends crate::java::lang::Object, implements crate::java::util::stream::BaseStream {

        /// [filter](https://developer.android.com/reference/java/util/stream/Stream.html#filter(java.util.function.Predicate))
        ///
        /// Required features: "java-util-function-Predicate", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Predicate", feature = "java-util-stream-Stream")))]
        pub fn filter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Predicate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "filter", .descriptor == "(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "filter\0", "(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [map](https://developer.android.com/reference/java/util/stream/Stream.html#map(java.util.function.Function))
        ///
        /// Required features: "java-util-function-Function", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Function", feature = "java-util-stream-Stream")))]
        pub fn map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "map", .descriptor == "(Ljava/util/function/Function;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "map\0", "(Ljava/util/function/Function;)Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mapToInt](https://developer.android.com/reference/java/util/stream/Stream.html#mapToInt(java.util.function.ToIntFunction))
        ///
        /// Required features: "java-util-function-ToIntFunction", "java-util-stream-IntStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-ToIntFunction", feature = "java-util-stream-IntStream")))]
        pub fn mapToInt<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::ToIntFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::IntStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "mapToInt", .descriptor == "(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "mapToInt\0", "(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mapToLong](https://developer.android.com/reference/java/util/stream/Stream.html#mapToLong(java.util.function.ToLongFunction))
        ///
        /// Required features: "java-util-function-ToLongFunction", "java-util-stream-LongStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-ToLongFunction", feature = "java-util-stream-LongStream")))]
        pub fn mapToLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::ToLongFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::LongStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "mapToLong", .descriptor == "(Ljava/util/function/ToLongFunction;)Ljava/util/stream/LongStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "mapToLong\0", "(Ljava/util/function/ToLongFunction;)Ljava/util/stream/LongStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mapToDouble](https://developer.android.com/reference/java/util/stream/Stream.html#mapToDouble(java.util.function.ToDoubleFunction))
        ///
        /// Required features: "java-util-function-ToDoubleFunction", "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-ToDoubleFunction", feature = "java-util-stream-DoubleStream")))]
        pub fn mapToDouble<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::ToDoubleFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "mapToDouble", .descriptor == "(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "mapToDouble\0", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flatMap](https://developer.android.com/reference/java/util/stream/Stream.html#flatMap(java.util.function.Function))
        ///
        /// Required features: "java-util-function-Function", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Function", feature = "java-util-stream-Stream")))]
        pub fn flatMap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "flatMap", .descriptor == "(Ljava/util/function/Function;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "flatMap\0", "(Ljava/util/function/Function;)Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flatMapToInt](https://developer.android.com/reference/java/util/stream/Stream.html#flatMapToInt(java.util.function.Function))
        ///
        /// Required features: "java-util-function-Function", "java-util-stream-IntStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Function", feature = "java-util-stream-IntStream")))]
        pub fn flatMapToInt<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::IntStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "flatMapToInt", .descriptor == "(Ljava/util/function/Function;)Ljava/util/stream/IntStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "flatMapToInt\0", "(Ljava/util/function/Function;)Ljava/util/stream/IntStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flatMapToLong](https://developer.android.com/reference/java/util/stream/Stream.html#flatMapToLong(java.util.function.Function))
        ///
        /// Required features: "java-util-function-Function", "java-util-stream-LongStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Function", feature = "java-util-stream-LongStream")))]
        pub fn flatMapToLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::LongStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "flatMapToLong", .descriptor == "(Ljava/util/function/Function;)Ljava/util/stream/LongStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "flatMapToLong\0", "(Ljava/util/function/Function;)Ljava/util/stream/LongStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flatMapToDouble](https://developer.android.com/reference/java/util/stream/Stream.html#flatMapToDouble(java.util.function.Function))
        ///
        /// Required features: "java-util-function-Function", "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Function", feature = "java-util-stream-DoubleStream")))]
        pub fn flatMapToDouble<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "flatMapToDouble", .descriptor == "(Ljava/util/function/Function;)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "flatMapToDouble\0", "(Ljava/util/function/Function;)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [distinct](https://developer.android.com/reference/java/util/stream/Stream.html#distinct())
        ///
        /// Required features: "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-Stream")))]
        pub fn distinct<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "distinct", .descriptor == "()Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "distinct\0", "()Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sorted](https://developer.android.com/reference/java/util/stream/Stream.html#sorted())
        ///
        /// Required features: "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-Stream")))]
        pub fn sorted<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "sorted", .descriptor == "()Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "sorted\0", "()Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sorted](https://developer.android.com/reference/java/util/stream/Stream.html#sorted(java.util.Comparator))
        ///
        /// Required features: "java-util-Comparator", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-Comparator", feature = "java-util-stream-Stream")))]
        pub fn sorted_Comparator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Comparator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "sorted", .descriptor == "(Ljava/util/Comparator;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "sorted\0", "(Ljava/util/Comparator;)Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [peek](https://developer.android.com/reference/java/util/stream/Stream.html#peek(java.util.function.Consumer))
        ///
        /// Required features: "java-util-function-Consumer", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Consumer", feature = "java-util-stream-Stream")))]
        pub fn peek<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "peek", .descriptor == "(Ljava/util/function/Consumer;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "peek\0", "(Ljava/util/function/Consumer;)Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [limit](https://developer.android.com/reference/java/util/stream/Stream.html#limit(long))
        ///
        /// Required features: "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-Stream")))]
        pub fn limit<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "limit", .descriptor == "(J)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "limit\0", "(J)Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [skip](https://developer.android.com/reference/java/util/stream/Stream.html#skip(long))
        ///
        /// Required features: "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-Stream")))]
        pub fn skip<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "skip", .descriptor == "(J)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "skip\0", "(J)Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forEach](https://developer.android.com/reference/java/util/stream/Stream.html#forEach(java.util.function.Consumer))
        ///
        /// Required features: "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Consumer")))]
        pub fn forEach<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "forEach", .descriptor == "(Ljava/util/function/Consumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "forEach\0", "(Ljava/util/function/Consumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forEachOrdered](https://developer.android.com/reference/java/util/stream/Stream.html#forEachOrdered(java.util.function.Consumer))
        ///
        /// Required features: "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Consumer")))]
        pub fn forEachOrdered<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "forEachOrdered", .descriptor == "(Ljava/util/function/Consumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "forEachOrdered\0", "(Ljava/util/function/Consumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toArray](https://developer.android.com/reference/java/util/stream/Stream.html#toArray())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn toArray<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "toArray", .descriptor == "()[Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "toArray\0", "()[Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toArray](https://developer.android.com/reference/java/util/stream/Stream.html#toArray(java.util.function.IntFunction))
        ///
        /// Required features: "java-lang-Object", "java-util-function-IntFunction"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-IntFunction")))]
        pub fn toArray_IntFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::IntFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "toArray", .descriptor == "(Ljava/util/function/IntFunction;)[Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "toArray\0", "(Ljava/util/function/IntFunction;)[Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reduce](https://developer.android.com/reference/java/util/stream/Stream.html#reduce(java.lang.Object,%20java.util.function.BinaryOperator))
        ///
        /// Required features: "java-lang-Object", "java-util-function-BinaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-BinaryOperator")))]
        pub fn reduce_Object_BinaryOperator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BinaryOperator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "reduce", .descriptor == "(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "reduce\0", "(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reduce](https://developer.android.com/reference/java/util/stream/Stream.html#reduce(java.util.function.BinaryOperator))
        ///
        /// Required features: "java-util-Optional", "java-util-function-BinaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-util-Optional", feature = "java-util-function-BinaryOperator")))]
        pub fn reduce_BinaryOperator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BinaryOperator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Optional>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "reduce", .descriptor == "(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "reduce\0", "(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reduce](https://developer.android.com/reference/java/util/stream/Stream.html#reduce(java.lang.Object,%20java.util.function.BiFunction,%20java.util.function.BinaryOperator))
        ///
        /// Required features: "java-lang-Object", "java-util-function-BiFunction", "java-util-function-BinaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-BiFunction", feature = "java-util-function-BinaryOperator")))]
        pub fn reduce_Object_BiFunction_BinaryOperator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BinaryOperator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "reduce", .descriptor == "(Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "reduce\0", "(Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [collect](https://developer.android.com/reference/java/util/stream/Stream.html#collect(java.util.function.Supplier,%20java.util.function.BiConsumer,%20java.util.function.BiConsumer))
        ///
        /// Required features: "java-lang-Object", "java-util-function-BiConsumer", "java-util-function-Supplier"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-BiConsumer", feature = "java-util-function-Supplier")))]
        pub fn collect_Supplier_BiConsumer_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Supplier>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "collect", .descriptor == "(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "collect\0", "(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [collect](https://developer.android.com/reference/java/util/stream/Stream.html#collect(java.util.stream.Collector))
        ///
        /// Required features: "java-lang-Object", "java-util-stream-Collector"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-stream-Collector")))]
        pub fn collect_Collector<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::stream::Collector>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "collect", .descriptor == "(Ljava/util/stream/Collector;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "collect\0", "(Ljava/util/stream/Collector;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [min](https://developer.android.com/reference/java/util/stream/Stream.html#min(java.util.Comparator))
        ///
        /// Required features: "java-util-Comparator", "java-util-Optional"
        #[cfg(any(feature = "all", all(feature = "java-util-Comparator", feature = "java-util-Optional")))]
        pub fn min<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Comparator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Optional>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "min", .descriptor == "(Ljava/util/Comparator;)Ljava/util/Optional;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "min\0", "(Ljava/util/Comparator;)Ljava/util/Optional;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [max](https://developer.android.com/reference/java/util/stream/Stream.html#max(java.util.Comparator))
        ///
        /// Required features: "java-util-Comparator", "java-util-Optional"
        #[cfg(any(feature = "all", all(feature = "java-util-Comparator", feature = "java-util-Optional")))]
        pub fn max<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Comparator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Optional>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "max", .descriptor == "(Ljava/util/Comparator;)Ljava/util/Optional;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "max\0", "(Ljava/util/Comparator;)Ljava/util/Optional;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [count](https://developer.android.com/reference/java/util/stream/Stream.html#count())
        pub fn count<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "count", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "count\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [anyMatch](https://developer.android.com/reference/java/util/stream/Stream.html#anyMatch(java.util.function.Predicate))
        ///
        /// Required features: "java-util-function-Predicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Predicate")))]
        pub fn anyMatch<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Predicate>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "anyMatch", .descriptor == "(Ljava/util/function/Predicate;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "anyMatch\0", "(Ljava/util/function/Predicate;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allMatch](https://developer.android.com/reference/java/util/stream/Stream.html#allMatch(java.util.function.Predicate))
        ///
        /// Required features: "java-util-function-Predicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Predicate")))]
        pub fn allMatch<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Predicate>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "allMatch", .descriptor == "(Ljava/util/function/Predicate;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "allMatch\0", "(Ljava/util/function/Predicate;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [noneMatch](https://developer.android.com/reference/java/util/stream/Stream.html#noneMatch(java.util.function.Predicate))
        ///
        /// Required features: "java-util-function-Predicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Predicate")))]
        pub fn noneMatch<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Predicate>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "noneMatch", .descriptor == "(Ljava/util/function/Predicate;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "noneMatch\0", "(Ljava/util/function/Predicate;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findFirst](https://developer.android.com/reference/java/util/stream/Stream.html#findFirst())
        ///
        /// Required features: "java-util-Optional"
        #[cfg(any(feature = "all", all(feature = "java-util-Optional")))]
        pub fn findFirst<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Optional>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "findFirst", .descriptor == "()Ljava/util/Optional;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "findFirst\0", "()Ljava/util/Optional;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findAny](https://developer.android.com/reference/java/util/stream/Stream.html#findAny())
        ///
        /// Required features: "java-util-Optional"
        #[cfg(any(feature = "all", all(feature = "java-util-Optional")))]
        pub fn findAny<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Optional>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | ABSTRACT, .name == "findAny", .descriptor == "()Ljava/util/Optional;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/Stream\0", "findAny\0", "()Ljava/util/Optional;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [builder](https://developer.android.com/reference/java/util/stream/Stream.html#builder())
        ///
        /// Required features: "java-util-stream-Stream_Builder"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-Stream_Builder")))]
        pub fn builder<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | STATIC, .name == "builder", .descriptor == "()Ljava/util/stream/Stream$Builder;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/Stream\0", "builder\0", "()Ljava/util/stream/Stream$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [empty](https://developer.android.com/reference/java/util/stream/Stream.html#empty())
        ///
        /// Required features: "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-Stream")))]
        pub fn empty<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | STATIC, .name == "empty", .descriptor == "()Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/Stream\0", "empty\0", "()Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/util/stream/Stream.html#of(java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-stream-Stream")))]
        pub fn of_Object<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(Ljava/lang/Object;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/Stream\0", "of\0", "(Ljava/lang/Object;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/util/stream/Stream.html#of(java.lang.Object...))
        ///
        /// Required features: "java-lang-Object", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-stream-Stream")))]
        pub fn of_Object_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | STATIC | VARARGS, .name == "of", .descriptor == "([Ljava/lang/Object;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/Stream\0", "of\0", "([Ljava/lang/Object;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iterate](https://developer.android.com/reference/java/util/stream/Stream.html#iterate(java.lang.Object,%20java.util.function.UnaryOperator))
        ///
        /// Required features: "java-lang-Object", "java-util-function-UnaryOperator", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-UnaryOperator", feature = "java-util-stream-Stream")))]
        pub fn iterate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::UnaryOperator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | STATIC, .name == "iterate", .descriptor == "(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/Stream\0", "iterate\0", "(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generate](https://developer.android.com/reference/java/util/stream/Stream.html#generate(java.util.function.Supplier))
        ///
        /// Required features: "java-util-function-Supplier", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Supplier", feature = "java-util-stream-Stream")))]
        pub fn generate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Supplier>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | STATIC, .name == "generate", .descriptor == "(Ljava/util/function/Supplier;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/Stream\0", "generate\0", "(Ljava/util/function/Supplier;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [concat](https://developer.android.com/reference/java/util/stream/Stream.html#concat(java.util.stream.Stream,%20java.util.stream.Stream))
        ///
        /// Required features: "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-Stream")))]
        pub fn concat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::stream::Stream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::stream::Stream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/Stream", java.flags == PUBLIC | STATIC, .name == "concat", .descriptor == "(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/Stream\0", "concat\0", "(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
