// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-stream-DoubleStream"))]
__jni_bindgen! {
    /// public interface [DoubleStream](https://developer.android.com/reference/java/util/stream/DoubleStream.html)
    ///
    /// Required feature: java-util-stream-DoubleStream
    public interface DoubleStream ("java/util/stream/DoubleStream") extends crate::java::lang::Object, implements crate::java::util::stream::BaseStream {

        /// [filter](https://developer.android.com/reference/java/util/stream/DoubleStream.html#filter(java.util.function.DoublePredicate))
        ///
        /// Required features: "java-util-function-DoublePredicate", "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoublePredicate", feature = "java-util-stream-DoubleStream")))]
        pub fn filter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoublePredicate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "filter", .descriptor == "(Ljava/util/function/DoublePredicate;)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "filter\0", "(Ljava/util/function/DoublePredicate;)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [map](https://developer.android.com/reference/java/util/stream/DoubleStream.html#map(java.util.function.DoubleUnaryOperator))
        ///
        /// Required features: "java-util-function-DoubleUnaryOperator", "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleUnaryOperator", feature = "java-util-stream-DoubleStream")))]
        pub fn map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleUnaryOperator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "map", .descriptor == "(Ljava/util/function/DoubleUnaryOperator;)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "map\0", "(Ljava/util/function/DoubleUnaryOperator;)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mapToObj](https://developer.android.com/reference/java/util/stream/DoubleStream.html#mapToObj(java.util.function.DoubleFunction))
        ///
        /// Required features: "java-util-function-DoubleFunction", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleFunction", feature = "java-util-stream-Stream")))]
        pub fn mapToObj<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "mapToObj", .descriptor == "(Ljava/util/function/DoubleFunction;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "mapToObj\0", "(Ljava/util/function/DoubleFunction;)Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mapToInt](https://developer.android.com/reference/java/util/stream/DoubleStream.html#mapToInt(java.util.function.DoubleToIntFunction))
        ///
        /// Required features: "java-util-function-DoubleToIntFunction", "java-util-stream-IntStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleToIntFunction", feature = "java-util-stream-IntStream")))]
        pub fn mapToInt<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleToIntFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::IntStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "mapToInt", .descriptor == "(Ljava/util/function/DoubleToIntFunction;)Ljava/util/stream/IntStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "mapToInt\0", "(Ljava/util/function/DoubleToIntFunction;)Ljava/util/stream/IntStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mapToLong](https://developer.android.com/reference/java/util/stream/DoubleStream.html#mapToLong(java.util.function.DoubleToLongFunction))
        ///
        /// Required features: "java-util-function-DoubleToLongFunction", "java-util-stream-LongStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleToLongFunction", feature = "java-util-stream-LongStream")))]
        pub fn mapToLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleToLongFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::LongStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "mapToLong", .descriptor == "(Ljava/util/function/DoubleToLongFunction;)Ljava/util/stream/LongStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "mapToLong\0", "(Ljava/util/function/DoubleToLongFunction;)Ljava/util/stream/LongStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flatMap](https://developer.android.com/reference/java/util/stream/DoubleStream.html#flatMap(java.util.function.DoubleFunction))
        ///
        /// Required features: "java-util-function-DoubleFunction", "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleFunction", feature = "java-util-stream-DoubleStream")))]
        pub fn flatMap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "flatMap", .descriptor == "(Ljava/util/function/DoubleFunction;)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "flatMap\0", "(Ljava/util/function/DoubleFunction;)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [distinct](https://developer.android.com/reference/java/util/stream/DoubleStream.html#distinct())
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn distinct<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "distinct", .descriptor == "()Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "distinct\0", "()Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sorted](https://developer.android.com/reference/java/util/stream/DoubleStream.html#sorted())
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn sorted<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "sorted", .descriptor == "()Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "sorted\0", "()Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [peek](https://developer.android.com/reference/java/util/stream/DoubleStream.html#peek(java.util.function.DoubleConsumer))
        ///
        /// Required features: "java-util-function-DoubleConsumer", "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleConsumer", feature = "java-util-stream-DoubleStream")))]
        pub fn peek<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "peek", .descriptor == "(Ljava/util/function/DoubleConsumer;)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "peek\0", "(Ljava/util/function/DoubleConsumer;)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [limit](https://developer.android.com/reference/java/util/stream/DoubleStream.html#limit(long))
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn limit<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "limit", .descriptor == "(J)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "limit\0", "(J)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [skip](https://developer.android.com/reference/java/util/stream/DoubleStream.html#skip(long))
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn skip<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "skip", .descriptor == "(J)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "skip\0", "(J)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forEach](https://developer.android.com/reference/java/util/stream/DoubleStream.html#forEach(java.util.function.DoubleConsumer))
        ///
        /// Required features: "java-util-function-DoubleConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleConsumer")))]
        pub fn forEach<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleConsumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "forEach", .descriptor == "(Ljava/util/function/DoubleConsumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "forEach\0", "(Ljava/util/function/DoubleConsumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forEachOrdered](https://developer.android.com/reference/java/util/stream/DoubleStream.html#forEachOrdered(java.util.function.DoubleConsumer))
        ///
        /// Required features: "java-util-function-DoubleConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleConsumer")))]
        pub fn forEachOrdered<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleConsumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "forEachOrdered", .descriptor == "(Ljava/util/function/DoubleConsumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "forEachOrdered\0", "(Ljava/util/function/DoubleConsumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toArray](https://developer.android.com/reference/java/util/stream/DoubleStream.html#toArray())
        pub fn toArray<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::DoubleArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "toArray", .descriptor == "()[D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "toArray\0", "()[D\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reduce](https://developer.android.com/reference/java/util/stream/DoubleStream.html#reduce(double,%20java.util.function.DoubleBinaryOperator))
        ///
        /// Required features: "java-util-function-DoubleBinaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleBinaryOperator")))]
        pub fn reduce_double_DoubleBinaryOperator<'env>(&'env self, arg0: f64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleBinaryOperator>>) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "reduce", .descriptor == "(DLjava/util/function/DoubleBinaryOperator;)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "reduce\0", "(DLjava/util/function/DoubleBinaryOperator;)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reduce](https://developer.android.com/reference/java/util/stream/DoubleStream.html#reduce(java.util.function.DoubleBinaryOperator))
        ///
        /// Required features: "java-util-OptionalDouble", "java-util-function-DoubleBinaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-util-OptionalDouble", feature = "java-util-function-DoubleBinaryOperator")))]
        pub fn reduce_DoubleBinaryOperator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleBinaryOperator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::OptionalDouble>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "reduce", .descriptor == "(Ljava/util/function/DoubleBinaryOperator;)Ljava/util/OptionalDouble;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "reduce\0", "(Ljava/util/function/DoubleBinaryOperator;)Ljava/util/OptionalDouble;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [collect](https://developer.android.com/reference/java/util/stream/DoubleStream.html#collect(java.util.function.Supplier,%20java.util.function.ObjDoubleConsumer,%20java.util.function.BiConsumer))
        ///
        /// Required features: "java-lang-Object", "java-util-function-BiConsumer", "java-util-function-ObjDoubleConsumer", "java-util-function-Supplier"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-BiConsumer", feature = "java-util-function-ObjDoubleConsumer", feature = "java-util-function-Supplier")))]
        pub fn collect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Supplier>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::ObjDoubleConsumer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "collect", .descriptor == "(Ljava/util/function/Supplier;Ljava/util/function/ObjDoubleConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "collect\0", "(Ljava/util/function/Supplier;Ljava/util/function/ObjDoubleConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sum](https://developer.android.com/reference/java/util/stream/DoubleStream.html#sum())
        pub fn sum<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "sum", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "sum\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [min](https://developer.android.com/reference/java/util/stream/DoubleStream.html#min())
        ///
        /// Required features: "java-util-OptionalDouble"
        #[cfg(any(feature = "all", all(feature = "java-util-OptionalDouble")))]
        pub fn min<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::OptionalDouble>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "min", .descriptor == "()Ljava/util/OptionalDouble;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "min\0", "()Ljava/util/OptionalDouble;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [max](https://developer.android.com/reference/java/util/stream/DoubleStream.html#max())
        ///
        /// Required features: "java-util-OptionalDouble"
        #[cfg(any(feature = "all", all(feature = "java-util-OptionalDouble")))]
        pub fn max<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::OptionalDouble>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "max", .descriptor == "()Ljava/util/OptionalDouble;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "max\0", "()Ljava/util/OptionalDouble;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [count](https://developer.android.com/reference/java/util/stream/DoubleStream.html#count())
        pub fn count<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "count", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "count\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [average](https://developer.android.com/reference/java/util/stream/DoubleStream.html#average())
        ///
        /// Required features: "java-util-OptionalDouble"
        #[cfg(any(feature = "all", all(feature = "java-util-OptionalDouble")))]
        pub fn average<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::OptionalDouble>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "average", .descriptor == "()Ljava/util/OptionalDouble;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "average\0", "()Ljava/util/OptionalDouble;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [summaryStatistics](https://developer.android.com/reference/java/util/stream/DoubleStream.html#summaryStatistics())
        ///
        /// Required features: "java-util-DoubleSummaryStatistics"
        #[cfg(any(feature = "all", all(feature = "java-util-DoubleSummaryStatistics")))]
        pub fn summaryStatistics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::DoubleSummaryStatistics>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "summaryStatistics", .descriptor == "()Ljava/util/DoubleSummaryStatistics;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "summaryStatistics\0", "()Ljava/util/DoubleSummaryStatistics;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [anyMatch](https://developer.android.com/reference/java/util/stream/DoubleStream.html#anyMatch(java.util.function.DoublePredicate))
        ///
        /// Required features: "java-util-function-DoublePredicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoublePredicate")))]
        pub fn anyMatch<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoublePredicate>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "anyMatch", .descriptor == "(Ljava/util/function/DoublePredicate;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "anyMatch\0", "(Ljava/util/function/DoublePredicate;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allMatch](https://developer.android.com/reference/java/util/stream/DoubleStream.html#allMatch(java.util.function.DoublePredicate))
        ///
        /// Required features: "java-util-function-DoublePredicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoublePredicate")))]
        pub fn allMatch<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoublePredicate>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "allMatch", .descriptor == "(Ljava/util/function/DoublePredicate;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "allMatch\0", "(Ljava/util/function/DoublePredicate;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [noneMatch](https://developer.android.com/reference/java/util/stream/DoubleStream.html#noneMatch(java.util.function.DoublePredicate))
        ///
        /// Required features: "java-util-function-DoublePredicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoublePredicate")))]
        pub fn noneMatch<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoublePredicate>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "noneMatch", .descriptor == "(Ljava/util/function/DoublePredicate;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "noneMatch\0", "(Ljava/util/function/DoublePredicate;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findFirst](https://developer.android.com/reference/java/util/stream/DoubleStream.html#findFirst())
        ///
        /// Required features: "java-util-OptionalDouble"
        #[cfg(any(feature = "all", all(feature = "java-util-OptionalDouble")))]
        pub fn findFirst<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::OptionalDouble>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "findFirst", .descriptor == "()Ljava/util/OptionalDouble;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "findFirst\0", "()Ljava/util/OptionalDouble;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findAny](https://developer.android.com/reference/java/util/stream/DoubleStream.html#findAny())
        ///
        /// Required features: "java-util-OptionalDouble"
        #[cfg(any(feature = "all", all(feature = "java-util-OptionalDouble")))]
        pub fn findAny<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::OptionalDouble>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "findAny", .descriptor == "()Ljava/util/OptionalDouble;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "findAny\0", "()Ljava/util/OptionalDouble;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [boxed](https://developer.android.com/reference/java/util/stream/DoubleStream.html#boxed())
        ///
        /// Required features: "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-Stream")))]
        pub fn boxed<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "boxed", .descriptor == "()Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "boxed\0", "()Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sequential](https://developer.android.com/reference/java/util/stream/DoubleStream.html#sequential())
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn sequential<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "sequential", .descriptor == "()Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "sequential\0", "()Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parallel](https://developer.android.com/reference/java/util/stream/DoubleStream.html#parallel())
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn parallel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "parallel", .descriptor == "()Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "parallel\0", "()Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iterator](https://developer.android.com/reference/java/util/stream/DoubleStream.html#iterator())
        ///
        /// Required features: "java-util-PrimitiveIterator_OfDouble"
        #[cfg(any(feature = "all", all(feature = "java-util-PrimitiveIterator_OfDouble")))]
        pub fn iterator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::PrimitiveIterator_OfDouble>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "iterator", .descriptor == "()Ljava/util/PrimitiveIterator$OfDouble;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "iterator\0", "()Ljava/util/PrimitiveIterator$OfDouble;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spliterator](https://developer.android.com/reference/java/util/stream/DoubleStream.html#spliterator())
        ///
        /// Required features: "java-util-Spliterator_OfDouble"
        #[cfg(any(feature = "all", all(feature = "java-util-Spliterator_OfDouble")))]
        pub fn spliterator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Spliterator_OfDouble>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | ABSTRACT, .name == "spliterator", .descriptor == "()Ljava/util/Spliterator$OfDouble;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "spliterator\0", "()Ljava/util/Spliterator$OfDouble;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [builder](https://developer.android.com/reference/java/util/stream/DoubleStream.html#builder())
        ///
        /// Required features: "java-util-stream-DoubleStream_Builder"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream_Builder")))]
        pub fn builder<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | STATIC, .name == "builder", .descriptor == "()Ljava/util/stream/DoubleStream$Builder;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/DoubleStream\0", "builder\0", "()Ljava/util/stream/DoubleStream$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [empty](https://developer.android.com/reference/java/util/stream/DoubleStream.html#empty())
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn empty<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | STATIC, .name == "empty", .descriptor == "()Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/DoubleStream\0", "empty\0", "()Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/util/stream/DoubleStream.html#of(double))
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn of_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | STATIC, .name == "of", .descriptor == "(D)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/DoubleStream\0", "of\0", "(D)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [of](https://developer.android.com/reference/java/util/stream/DoubleStream.html#of(double...))
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn of_double_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::DoubleArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | STATIC | VARARGS, .name == "of", .descriptor == "([D)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/DoubleStream\0", "of\0", "([D)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iterate](https://developer.android.com/reference/java/util/stream/DoubleStream.html#iterate(double,%20java.util.function.DoubleUnaryOperator))
        ///
        /// Required features: "java-util-function-DoubleUnaryOperator", "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleUnaryOperator", feature = "java-util-stream-DoubleStream")))]
        pub fn iterate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleUnaryOperator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | STATIC, .name == "iterate", .descriptor == "(DLjava/util/function/DoubleUnaryOperator;)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/DoubleStream\0", "iterate\0", "(DLjava/util/function/DoubleUnaryOperator;)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generate](https://developer.android.com/reference/java/util/stream/DoubleStream.html#generate(java.util.function.DoubleSupplier))
        ///
        /// Required features: "java-util-function-DoubleSupplier", "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoubleSupplier", feature = "java-util-stream-DoubleStream")))]
        pub fn generate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoubleSupplier>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | STATIC, .name == "generate", .descriptor == "(Ljava/util/function/DoubleSupplier;)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/DoubleStream\0", "generate\0", "(Ljava/util/function/DoubleSupplier;)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [concat](https://developer.android.com/reference/java/util/stream/DoubleStream.html#concat(java.util.stream.DoubleStream,%20java.util.stream.DoubleStream))
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn concat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::stream::DoubleStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::stream::DoubleStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | STATIC, .name == "concat", .descriptor == "(Ljava/util/stream/DoubleStream;Ljava/util/stream/DoubleStream;)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/stream/DoubleStream\0", "concat\0", "(Ljava/util/stream/DoubleStream;Ljava/util/stream/DoubleStream;)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [parallel](https://developer.android.com/reference/java/util/stream/DoubleStream.html#parallel())
        // ///
        // /// Required features: "java-util-stream-BaseStream"
        // #[cfg(any(feature = "all", all(feature = "java-util-stream-BaseStream")))]
        // pub fn parallel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::BaseStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "parallel", .descriptor == "()Ljava/util/stream/BaseStream;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "parallel\0", "()Ljava/util/stream/BaseStream;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [sequential](https://developer.android.com/reference/java/util/stream/DoubleStream.html#sequential())
        // ///
        // /// Required features: "java-util-stream-BaseStream"
        // #[cfg(any(feature = "all", all(feature = "java-util-stream-BaseStream")))]
        // pub fn sequential<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::BaseStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "sequential", .descriptor == "()Ljava/util/stream/BaseStream;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "sequential\0", "()Ljava/util/stream/BaseStream;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [spliterator](https://developer.android.com/reference/java/util/stream/DoubleStream.html#spliterator())
        // ///
        // /// Required features: "java-util-Spliterator"
        // #[cfg(any(feature = "all", all(feature = "java-util-Spliterator")))]
        // pub fn spliterator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Spliterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "spliterator", .descriptor == "()Ljava/util/Spliterator;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "spliterator\0", "()Ljava/util/Spliterator;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [iterator](https://developer.android.com/reference/java/util/stream/DoubleStream.html#iterator())
        // ///
        // /// Required features: "java-util-Iterator"
        // #[cfg(any(feature = "all", all(feature = "java-util-Iterator")))]
        // pub fn iterator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Iterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/stream/DoubleStream", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "iterator", .descriptor == "()Ljava/util/Iterator;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/DoubleStream\0", "iterator\0", "()Ljava/util/Iterator;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
