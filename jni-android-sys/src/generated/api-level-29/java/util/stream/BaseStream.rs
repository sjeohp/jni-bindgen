// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-stream-BaseStream"))]
__jni_bindgen! {
    /// public interface [BaseStream](https://developer.android.com/reference/java/util/stream/BaseStream.html)
    ///
    /// Required feature: java-util-stream-BaseStream
    public interface BaseStream ("java/util/stream/BaseStream") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        /// [iterator](https://developer.android.com/reference/java/util/stream/BaseStream.html#iterator())
        ///
        /// Required features: "java-util-Iterator"
        #[cfg(any(feature = "all", all(feature = "java-util-Iterator")))]
        pub fn iterator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Iterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/BaseStream", java.flags == PUBLIC | ABSTRACT, .name == "iterator", .descriptor == "()Ljava/util/Iterator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/BaseStream\0", "iterator\0", "()Ljava/util/Iterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spliterator](https://developer.android.com/reference/java/util/stream/BaseStream.html#spliterator())
        ///
        /// Required features: "java-util-Spliterator"
        #[cfg(any(feature = "all", all(feature = "java-util-Spliterator")))]
        pub fn spliterator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Spliterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/BaseStream", java.flags == PUBLIC | ABSTRACT, .name == "spliterator", .descriptor == "()Ljava/util/Spliterator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/BaseStream\0", "spliterator\0", "()Ljava/util/Spliterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isParallel](https://developer.android.com/reference/java/util/stream/BaseStream.html#isParallel())
        pub fn isParallel<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/BaseStream", java.flags == PUBLIC | ABSTRACT, .name == "isParallel", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/BaseStream\0", "isParallel\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sequential](https://developer.android.com/reference/java/util/stream/BaseStream.html#sequential())
        ///
        /// Required features: "java-util-stream-BaseStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-BaseStream")))]
        pub fn sequential<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::BaseStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/BaseStream", java.flags == PUBLIC | ABSTRACT, .name == "sequential", .descriptor == "()Ljava/util/stream/BaseStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/BaseStream\0", "sequential\0", "()Ljava/util/stream/BaseStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parallel](https://developer.android.com/reference/java/util/stream/BaseStream.html#parallel())
        ///
        /// Required features: "java-util-stream-BaseStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-BaseStream")))]
        pub fn parallel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::BaseStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/BaseStream", java.flags == PUBLIC | ABSTRACT, .name == "parallel", .descriptor == "()Ljava/util/stream/BaseStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/BaseStream\0", "parallel\0", "()Ljava/util/stream/BaseStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unordered](https://developer.android.com/reference/java/util/stream/BaseStream.html#unordered())
        ///
        /// Required features: "java-util-stream-BaseStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-BaseStream")))]
        pub fn unordered<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::BaseStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/BaseStream", java.flags == PUBLIC | ABSTRACT, .name == "unordered", .descriptor == "()Ljava/util/stream/BaseStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/BaseStream\0", "unordered\0", "()Ljava/util/stream/BaseStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onClose](https://developer.android.com/reference/java/util/stream/BaseStream.html#onClose(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-stream-BaseStream"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-stream-BaseStream")))]
        pub fn onClose<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::BaseStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/BaseStream", java.flags == PUBLIC | ABSTRACT, .name == "onClose", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/stream/BaseStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/BaseStream\0", "onClose\0", "(Ljava/lang/Runnable;)Ljava/util/stream/BaseStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/java/util/stream/BaseStream.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/stream/BaseStream", java.flags == PUBLIC | ABSTRACT, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/stream/BaseStream\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
