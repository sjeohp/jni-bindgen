// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-regex-Pattern"))]
__jni_bindgen! {
    /// public final class [Pattern](https://developer.android.com/reference/java/util/regex/Pattern.html)
    ///
    /// Required feature: java-util-regex-Pattern
    public final class Pattern ("java/util/regex/Pattern") extends crate::java::lang::Object, implements crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [Pattern](https://developer.android.com/reference/java/util/regex/Pattern.html#Pattern(java.lang.String,%20int))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::regex::Pattern>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/regex/Pattern", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/String;I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/regex/Pattern\0", "<init>\0", "(Ljava/lang/String;I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [compile](https://developer.android.com/reference/java/util/regex/Pattern.html#compile(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-regex-Pattern"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-regex-Pattern")))]
        pub fn compile_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::regex::Pattern>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC | STATIC, .name == "compile", .descriptor == "(Ljava/lang/String;)Ljava/util/regex/Pattern;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/regex/Pattern\0", "compile\0", "(Ljava/lang/String;)Ljava/util/regex/Pattern;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compile](https://developer.android.com/reference/java/util/regex/Pattern.html#compile(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String", "java-util-regex-Pattern"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-regex-Pattern")))]
        pub fn compile_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::regex::Pattern>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC | STATIC, .name == "compile", .descriptor == "(Ljava/lang/String;I)Ljava/util/regex/Pattern;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/regex/Pattern\0", "compile\0", "(Ljava/lang/String;I)Ljava/util/regex/Pattern;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pattern](https://developer.android.com/reference/java/util/regex/Pattern.html#pattern())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn pattern<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC, .name == "pattern", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/regex/Pattern\0", "pattern\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/util/regex/Pattern.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/regex/Pattern\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [matcher](https://developer.android.com/reference/java/util/regex/Pattern.html#matcher(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-util-regex-Matcher"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-util-regex-Matcher")))]
        pub fn matcher<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::regex::Matcher>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC, .name == "matcher", .descriptor == "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/regex/Pattern\0", "matcher\0", "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flags](https://developer.android.com/reference/java/util/regex/Pattern.html#flags())
        pub fn flags<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC, .name == "flags", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/regex/Pattern\0", "flags\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [matches](https://developer.android.com/reference/java/util/regex/Pattern.html#matches(java.lang.String,%20java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn matches<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC | STATIC, .name == "matches", .descriptor == "(Ljava/lang/String;Ljava/lang/CharSequence;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/regex/Pattern\0", "matches\0", "(Ljava/lang/String;Ljava/lang/CharSequence;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [split](https://developer.android.com/reference/java/util/regex/Pattern.html#split(java.lang.CharSequence,%20int))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn split_CharSequence_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC, .name == "split", .descriptor == "(Ljava/lang/CharSequence;I)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/regex/Pattern\0", "split\0", "(Ljava/lang/CharSequence;I)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [split](https://developer.android.com/reference/java/util/regex/Pattern.html#split(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn split_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC, .name == "split", .descriptor == "(Ljava/lang/CharSequence;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/regex/Pattern\0", "split\0", "(Ljava/lang/CharSequence;)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [quote](https://developer.android.com/reference/java/util/regex/Pattern.html#quote(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn quote<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC | STATIC, .name == "quote", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/regex/Pattern\0", "quote\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asPredicate](https://developer.android.com/reference/java/util/regex/Pattern.html#asPredicate())
        ///
        /// Required features: "java-util-function-Predicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Predicate")))]
        pub fn asPredicate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::function::Predicate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC, .name == "asPredicate", .descriptor == "()Ljava/util/function/Predicate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/regex/Pattern\0", "asPredicate\0", "()Ljava/util/function/Predicate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [splitAsStream](https://developer.android.com/reference/java/util/regex/Pattern.html#splitAsStream(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-util-stream-Stream"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-util-stream-Stream")))]
        pub fn splitAsStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::Stream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/regex/Pattern", java.flags == PUBLIC, .name == "splitAsStream", .descriptor == "(Ljava/lang/CharSequence;)Ljava/util/stream/Stream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/regex/Pattern\0", "splitAsStream\0", "(Ljava/lang/CharSequence;)Ljava/util/stream/Stream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CANON_EQ](https://developer.android.com/reference/java/util/regex/Pattern.html#CANON_EQ)
        pub const CANON_EQ : i32 = 128;

        /// public static final [CASE_INSENSITIVE](https://developer.android.com/reference/java/util/regex/Pattern.html#CASE_INSENSITIVE)
        pub const CASE_INSENSITIVE : i32 = 2;

        /// public static final [COMMENTS](https://developer.android.com/reference/java/util/regex/Pattern.html#COMMENTS)
        pub const COMMENTS : i32 = 4;

        /// public static final [DOTALL](https://developer.android.com/reference/java/util/regex/Pattern.html#DOTALL)
        pub const DOTALL : i32 = 32;

        /// public static final [LITERAL](https://developer.android.com/reference/java/util/regex/Pattern.html#LITERAL)
        pub const LITERAL : i32 = 16;

        /// public static final [MULTILINE](https://developer.android.com/reference/java/util/regex/Pattern.html#MULTILINE)
        pub const MULTILINE : i32 = 8;

        /// public static final [UNICODE_CASE](https://developer.android.com/reference/java/util/regex/Pattern.html#UNICODE_CASE)
        pub const UNICODE_CASE : i32 = 64;

        /// public static final [UNICODE_CHARACTER_CLASS](https://developer.android.com/reference/java/util/regex/Pattern.html#UNICODE_CHARACTER_CLASS)
        pub const UNICODE_CHARACTER_CLASS : i32 = 256;

        /// public static final [UNIX_LINES](https://developer.android.com/reference/java/util/regex/Pattern.html#UNIX_LINES)
        pub const UNIX_LINES : i32 = 1;
    }
}
