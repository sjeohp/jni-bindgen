// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-prefs-NodeChangeListener"))]
__jni_bindgen! {
    /// public interface [NodeChangeListener](https://developer.android.com/reference/java/util/prefs/NodeChangeListener.html)
    ///
    /// Required feature: java-util-prefs-NodeChangeListener
    public interface NodeChangeListener ("java/util/prefs/NodeChangeListener") extends crate::java::lang::Object, implements crate::java::util::EventListener {

        /// [childAdded](https://developer.android.com/reference/java/util/prefs/NodeChangeListener.html#childAdded(java.util.prefs.NodeChangeEvent))
        ///
        /// Required features: "java-util-prefs-NodeChangeEvent"
        #[cfg(any(feature = "all", all(feature = "java-util-prefs-NodeChangeEvent")))]
        pub fn childAdded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::prefs::NodeChangeEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/prefs/NodeChangeListener", java.flags == PUBLIC | ABSTRACT, .name == "childAdded", .descriptor == "(Ljava/util/prefs/NodeChangeEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/prefs/NodeChangeListener\0", "childAdded\0", "(Ljava/util/prefs/NodeChangeEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [childRemoved](https://developer.android.com/reference/java/util/prefs/NodeChangeListener.html#childRemoved(java.util.prefs.NodeChangeEvent))
        ///
        /// Required features: "java-util-prefs-NodeChangeEvent"
        #[cfg(any(feature = "all", all(feature = "java-util-prefs-NodeChangeEvent")))]
        pub fn childRemoved<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::prefs::NodeChangeEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/prefs/NodeChangeListener", java.flags == PUBLIC | ABSTRACT, .name == "childRemoved", .descriptor == "(Ljava/util/prefs/NodeChangeEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/prefs/NodeChangeListener\0", "childRemoved\0", "(Ljava/util/prefs/NodeChangeEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
