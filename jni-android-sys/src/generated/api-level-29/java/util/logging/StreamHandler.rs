// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-logging-StreamHandler"))]
__jni_bindgen! {
    /// public class [StreamHandler](https://developer.android.com/reference/java/util/logging/StreamHandler.html)
    ///
    /// Required feature: java-util-logging-StreamHandler
    public class StreamHandler ("java/util/logging/StreamHandler") extends crate::java::util::logging::Handler {

        /// [StreamHandler](https://developer.android.com/reference/java/util/logging/StreamHandler.html#StreamHandler())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::logging::StreamHandler>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/StreamHandler", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/StreamHandler\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [StreamHandler](https://developer.android.com/reference/java/util/logging/StreamHandler.html#StreamHandler(java.io.OutputStream,%20java.util.logging.Formatter))
        ///
        /// Required features: "java-io-OutputStream", "java-util-logging-Formatter"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream", feature = "java-util-logging-Formatter")))]
        pub fn new_OutputStream_Formatter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::logging::Formatter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::logging::StreamHandler>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/StreamHandler", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/OutputStream;Ljava/util/logging/Formatter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/StreamHandler\0", "<init>\0", "(Ljava/io/OutputStream;Ljava/util/logging/Formatter;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [setOutputStream](https://developer.android.com/reference/java/util/logging/StreamHandler.html#setOutputStream(java.io.OutputStream))
        // ///
        // /// Required features: "java-io-OutputStream"
        // #[cfg(any(feature = "all", all(feature = "java-io-OutputStream")))]
        // fn setOutputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/logging/StreamHandler", java.flags == PROTECTED | SYNCRONIZED, .name == "setOutputStream", .descriptor == "(Ljava/io/OutputStream;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/StreamHandler\0", "setOutputStream\0", "(Ljava/io/OutputStream;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setEncoding](https://developer.android.com/reference/java/util/logging/StreamHandler.html#setEncoding(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setEncoding<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/StreamHandler", java.flags == PUBLIC | SYNCRONIZED, .name == "setEncoding", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/StreamHandler\0", "setEncoding\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [publish](https://developer.android.com/reference/java/util/logging/StreamHandler.html#publish(java.util.logging.LogRecord))
        ///
        /// Required features: "java-util-logging-LogRecord"
        #[cfg(any(feature = "all", all(feature = "java-util-logging-LogRecord")))]
        pub fn publish<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::logging::LogRecord>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/StreamHandler", java.flags == PUBLIC | SYNCRONIZED, .name == "publish", .descriptor == "(Ljava/util/logging/LogRecord;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/StreamHandler\0", "publish\0", "(Ljava/util/logging/LogRecord;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLoggable](https://developer.android.com/reference/java/util/logging/StreamHandler.html#isLoggable(java.util.logging.LogRecord))
        ///
        /// Required features: "java-util-logging-LogRecord"
        #[cfg(any(feature = "all", all(feature = "java-util-logging-LogRecord")))]
        pub fn isLoggable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::logging::LogRecord>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/StreamHandler", java.flags == PUBLIC, .name == "isLoggable", .descriptor == "(Ljava/util/logging/LogRecord;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/StreamHandler\0", "isLoggable\0", "(Ljava/util/logging/LogRecord;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flush](https://developer.android.com/reference/java/util/logging/StreamHandler.html#flush())
        pub fn flush<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/StreamHandler", java.flags == PUBLIC | SYNCRONIZED, .name == "flush", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/StreamHandler\0", "flush\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/java/util/logging/StreamHandler.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/StreamHandler", java.flags == PUBLIC | SYNCRONIZED, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/StreamHandler\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
