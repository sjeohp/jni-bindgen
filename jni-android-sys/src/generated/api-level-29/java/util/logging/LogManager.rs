// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-logging-LogManager"))]
__jni_bindgen! {
    /// public class [LogManager](https://developer.android.com/reference/java/util/logging/LogManager.html)
    ///
    /// Required feature: java-util-logging-LogManager
    public class LogManager ("java/util/logging/LogManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [LogManager](https://developer.android.com/reference/java/util/logging/LogManager.html#LogManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::logging::LogManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/logging/LogManager", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getLogManager](https://developer.android.com/reference/java/util/logging/LogManager.html#getLogManager())
        ///
        /// Required features: "java-util-logging-LogManager"
        #[cfg(any(feature = "all", all(feature = "java-util-logging-LogManager")))]
        pub fn getLogManager<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::logging::LogManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC | STATIC, .name == "getLogManager", .descriptor == "()Ljava/util/logging/LogManager;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/logging/LogManager\0", "getLogManager\0", "()Ljava/util/logging/LogManager;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPropertyChangeListener](https://developer.android.com/reference/java/util/logging/LogManager.html#addPropertyChangeListener(java.beans.PropertyChangeListener))
        ///
        /// Required features: "java-beans-PropertyChangeListener"
        #[cfg(any(feature = "all", all(feature = "java-beans-PropertyChangeListener")))]
        #[deprecated] pub fn addPropertyChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::beans::PropertyChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "addPropertyChangeListener", .descriptor == "(Ljava/beans/PropertyChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "addPropertyChangeListener\0", "(Ljava/beans/PropertyChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removePropertyChangeListener](https://developer.android.com/reference/java/util/logging/LogManager.html#removePropertyChangeListener(java.beans.PropertyChangeListener))
        ///
        /// Required features: "java-beans-PropertyChangeListener"
        #[cfg(any(feature = "all", all(feature = "java-beans-PropertyChangeListener")))]
        #[deprecated] pub fn removePropertyChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::beans::PropertyChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "removePropertyChangeListener", .descriptor == "(Ljava/beans/PropertyChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "removePropertyChangeListener\0", "(Ljava/beans/PropertyChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addLogger](https://developer.android.com/reference/java/util/logging/LogManager.html#addLogger(java.util.logging.Logger))
        ///
        /// Required features: "java-util-logging-Logger"
        #[cfg(any(feature = "all", all(feature = "java-util-logging-Logger")))]
        pub fn addLogger<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::logging::Logger>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "addLogger", .descriptor == "(Ljava/util/logging/Logger;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "addLogger\0", "(Ljava/util/logging/Logger;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLogger](https://developer.android.com/reference/java/util/logging/LogManager.html#getLogger(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-logging-Logger"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-logging-Logger")))]
        pub fn getLogger<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::logging::Logger>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "getLogger", .descriptor == "(Ljava/lang/String;)Ljava/util/logging/Logger;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "getLogger\0", "(Ljava/lang/String;)Ljava/util/logging/Logger;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLoggerNames](https://developer.android.com/reference/java/util/logging/LogManager.html#getLoggerNames())
        ///
        /// Required features: "java-util-Enumeration"
        #[cfg(any(feature = "all", all(feature = "java-util-Enumeration")))]
        pub fn getLoggerNames<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "getLoggerNames", .descriptor == "()Ljava/util/Enumeration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "getLoggerNames\0", "()Ljava/util/Enumeration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readConfiguration](https://developer.android.com/reference/java/util/logging/LogManager.html#readConfiguration())
        pub fn readConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "readConfiguration", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "readConfiguration\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reset](https://developer.android.com/reference/java/util/logging/LogManager.html#reset())
        pub fn reset<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "reset", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "reset\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readConfiguration](https://developer.android.com/reference/java/util/logging/LogManager.html#readConfiguration(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn readConfiguration_InputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "readConfiguration", .descriptor == "(Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "readConfiguration\0", "(Ljava/io/InputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProperty](https://developer.android.com/reference/java/util/logging/LogManager.html#getProperty(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "getProperty", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "getProperty\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkAccess](https://developer.android.com/reference/java/util/logging/LogManager.html#checkAccess())
        pub fn checkAccess<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC, .name == "checkAccess", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/logging/LogManager\0", "checkAccess\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLoggingMXBean](https://developer.android.com/reference/java/util/logging/LogManager.html#getLoggingMXBean())
        ///
        /// Required features: "java-util-logging-LoggingMXBean"
        #[cfg(any(feature = "all", all(feature = "java-util-logging-LoggingMXBean")))]
        pub fn getLoggingMXBean<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::logging::LoggingMXBean>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/logging/LogManager", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "getLoggingMXBean", .descriptor == "()Ljava/util/logging/LoggingMXBean;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/logging/LogManager\0", "getLoggingMXBean\0", "()Ljava/util/logging/LoggingMXBean;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [LOGGING_MXBEAN_NAME](https://developer.android.com/reference/java/util/logging/LogManager.html#LOGGING_MXBEAN_NAME)
        pub const LOGGING_MXBEAN_NAME : &'static str = "java.util.logging:type=Logging";
    }
}
