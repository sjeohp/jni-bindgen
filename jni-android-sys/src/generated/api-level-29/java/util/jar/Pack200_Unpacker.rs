// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-jar-Pack200_Unpacker"))]
__jni_bindgen! {
    /// public interface [Pack200.Unpacker](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html)
    ///
    /// Required feature: java-util-jar-Pack200_Unpacker
    public interface Pack200_Unpacker ("java/util/jar/Pack200$Unpacker") extends crate::java::lang::Object {

        /// [properties](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#properties())
        ///
        /// Required features: "java-util-SortedMap"
        #[cfg(any(feature = "all", all(feature = "java-util-SortedMap")))]
        pub fn properties<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::SortedMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/jar/Pack200$Unpacker", java.flags == PUBLIC | ABSTRACT, .name == "properties", .descriptor == "()Ljava/util/SortedMap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/jar/Pack200$Unpacker\0", "properties\0", "()Ljava/util/SortedMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unpack](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#unpack(java.io.InputStream,%20java.util.jar.JarOutputStream))
        ///
        /// Required features: "java-io-InputStream", "java-util-jar-JarOutputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-util-jar-JarOutputStream")))]
        pub fn unpack_InputStream_JarOutputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::jar::JarOutputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/jar/Pack200$Unpacker", java.flags == PUBLIC | ABSTRACT, .name == "unpack", .descriptor == "(Ljava/io/InputStream;Ljava/util/jar/JarOutputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/jar/Pack200$Unpacker\0", "unpack\0", "(Ljava/io/InputStream;Ljava/util/jar/JarOutputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unpack](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#unpack(java.io.File,%20java.util.jar.JarOutputStream))
        ///
        /// Required features: "java-io-File", "java-util-jar-JarOutputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-util-jar-JarOutputStream")))]
        pub fn unpack_File_JarOutputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::jar::JarOutputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/jar/Pack200$Unpacker", java.flags == PUBLIC | ABSTRACT, .name == "unpack", .descriptor == "(Ljava/io/File;Ljava/util/jar/JarOutputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/jar/Pack200$Unpacker\0", "unpack\0", "(Ljava/io/File;Ljava/util/jar/JarOutputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPropertyChangeListener](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#addPropertyChangeListener(java.beans.PropertyChangeListener))
        ///
        /// Required features: "java-beans-PropertyChangeListener"
        #[cfg(any(feature = "all", all(feature = "java-beans-PropertyChangeListener")))]
        #[deprecated] pub fn addPropertyChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::beans::PropertyChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/jar/Pack200$Unpacker", java.flags == PUBLIC, .name == "addPropertyChangeListener", .descriptor == "(Ljava/beans/PropertyChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/jar/Pack200$Unpacker\0", "addPropertyChangeListener\0", "(Ljava/beans/PropertyChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removePropertyChangeListener](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#removePropertyChangeListener(java.beans.PropertyChangeListener))
        ///
        /// Required features: "java-beans-PropertyChangeListener"
        #[cfg(any(feature = "all", all(feature = "java-beans-PropertyChangeListener")))]
        #[deprecated] pub fn removePropertyChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::beans::PropertyChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/jar/Pack200$Unpacker", java.flags == PUBLIC, .name == "removePropertyChangeListener", .descriptor == "(Ljava/beans/PropertyChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/jar/Pack200$Unpacker\0", "removePropertyChangeListener\0", "(Ljava/beans/PropertyChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [DEFLATE_HINT](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#DEFLATE_HINT)
        pub const DEFLATE_HINT : &'static str = "unpack.deflate.hint";

        /// public static final [FALSE](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#FALSE)
        pub const FALSE : &'static str = "false";

        /// public static final [KEEP](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#KEEP)
        pub const KEEP : &'static str = "keep";

        /// public static final [PROGRESS](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#PROGRESS)
        pub const PROGRESS : &'static str = "unpack.progress";

        /// public static final [TRUE](https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#TRUE)
        pub const TRUE : &'static str = "true";
    }
}
