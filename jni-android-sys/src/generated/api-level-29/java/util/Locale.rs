// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-Locale"))]
__jni_bindgen! {
    /// public final class [Locale](https://developer.android.com/reference/java/util/Locale.html)
    ///
    /// Required feature: java-util-Locale
    public final class Locale ("java/util/Locale") extends crate::java::lang::Object, implements crate::java::lang::Cloneable, crate::java::io::Serializable {

        /// [Locale](https://developer.android.com/reference/java/util/Locale.html#Locale(java.lang.String,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_String_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::Locale>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "<init>\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Locale](https://developer.android.com/reference/java/util/Locale.html#Locale(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::Locale>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "<init>\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Locale](https://developer.android.com/reference/java/util/Locale.html#Locale(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::Locale>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefault](https://developer.android.com/reference/java/util/Locale.html#getDefault())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn getDefault<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "getDefault", .descriptor == "()Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "getDefault\0", "()Ljava/util/Locale;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefault](https://developer.android.com/reference/java/util/Locale.html#getDefault(java.util.Locale.Category))
        ///
        /// Required features: "java-util-Locale", "java-util-Locale_Category"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale", feature = "java-util-Locale_Category")))]
        pub fn getDefault_Category<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale_Category>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "getDefault", .descriptor == "(Ljava/util/Locale$Category;)Ljava/util/Locale;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "getDefault\0", "(Ljava/util/Locale$Category;)Ljava/util/Locale;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDefault](https://developer.android.com/reference/java/util/Locale.html#setDefault(java.util.Locale))
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn setDefault_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "setDefault", .descriptor == "(Ljava/util/Locale;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "setDefault\0", "(Ljava/util/Locale;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDefault](https://developer.android.com/reference/java/util/Locale.html#setDefault(java.util.Locale.Category,%20java.util.Locale))
        ///
        /// Required features: "java-util-Locale", "java-util-Locale_Category"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale", feature = "java-util-Locale_Category")))]
        pub fn setDefault_Category_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale_Category>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "setDefault", .descriptor == "(Ljava/util/Locale$Category;Ljava/util/Locale;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "setDefault\0", "(Ljava/util/Locale$Category;Ljava/util/Locale;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAvailableLocales](https://developer.android.com/reference/java/util/Locale.html#getAvailableLocales())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn getAvailableLocales<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::util::Locale, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "getAvailableLocales", .descriptor == "()[Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "getAvailableLocales\0", "()[Ljava/util/Locale;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getISOCountries](https://developer.android.com/reference/java/util/Locale.html#getISOCountries())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getISOCountries<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "getISOCountries", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "getISOCountries\0", "()[Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getISOLanguages](https://developer.android.com/reference/java/util/Locale.html#getISOLanguages())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getISOLanguages<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "getISOLanguages", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "getISOLanguages\0", "()[Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLanguage](https://developer.android.com/reference/java/util/Locale.html#getLanguage())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLanguage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getLanguage", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getLanguage\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScript](https://developer.android.com/reference/java/util/Locale.html#getScript())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getScript<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getScript", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getScript\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCountry](https://developer.android.com/reference/java/util/Locale.html#getCountry())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCountry<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getCountry", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getCountry\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVariant](https://developer.android.com/reference/java/util/Locale.html#getVariant())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getVariant<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getVariant", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getVariant\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasExtensions](https://developer.android.com/reference/java/util/Locale.html#hasExtensions())
        pub fn hasExtensions<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "hasExtensions", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "hasExtensions\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stripExtensions](https://developer.android.com/reference/java/util/Locale.html#stripExtensions())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn stripExtensions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "stripExtensions", .descriptor == "()Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "stripExtensions\0", "()Ljava/util/Locale;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExtension](https://developer.android.com/reference/java/util/Locale.html#getExtension(char))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getExtension<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getExtension", .descriptor == "(C)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getExtension\0", "(C)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExtensionKeys](https://developer.android.com/reference/java/util/Locale.html#getExtensionKeys())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getExtensionKeys<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getExtensionKeys", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getExtensionKeys\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnicodeLocaleAttributes](https://developer.android.com/reference/java/util/Locale.html#getUnicodeLocaleAttributes())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getUnicodeLocaleAttributes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getUnicodeLocaleAttributes", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getUnicodeLocaleAttributes\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnicodeLocaleType](https://developer.android.com/reference/java/util/Locale.html#getUnicodeLocaleType(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getUnicodeLocaleType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getUnicodeLocaleType", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getUnicodeLocaleType\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnicodeLocaleKeys](https://developer.android.com/reference/java/util/Locale.html#getUnicodeLocaleKeys())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getUnicodeLocaleKeys<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getUnicodeLocaleKeys", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getUnicodeLocaleKeys\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/util/Locale.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toLanguageTag](https://developer.android.com/reference/java/util/Locale.html#toLanguageTag())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toLanguageTag<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "toLanguageTag", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "toLanguageTag\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forLanguageTag](https://developer.android.com/reference/java/util/Locale.html#forLanguageTag(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Locale")))]
        pub fn forLanguageTag<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "forLanguageTag", .descriptor == "(Ljava/lang/String;)Ljava/util/Locale;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "forLanguageTag\0", "(Ljava/lang/String;)Ljava/util/Locale;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getISO3Language](https://developer.android.com/reference/java/util/Locale.html#getISO3Language())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getISO3Language<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getISO3Language", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getISO3Language\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getISO3Country](https://developer.android.com/reference/java/util/Locale.html#getISO3Country())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getISO3Country<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getISO3Country", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getISO3Country\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayLanguage](https://developer.android.com/reference/java/util/Locale.html#getDisplayLanguage())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDisplayLanguage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayLanguage", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayLanguage\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayLanguage](https://developer.android.com/reference/java/util/Locale.html#getDisplayLanguage(java.util.Locale))
        ///
        /// Required features: "java-lang-String", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Locale")))]
        pub fn getDisplayLanguage_Locale<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayLanguage", .descriptor == "(Ljava/util/Locale;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayLanguage\0", "(Ljava/util/Locale;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayScript](https://developer.android.com/reference/java/util/Locale.html#getDisplayScript())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDisplayScript<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayScript", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayScript\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayScript](https://developer.android.com/reference/java/util/Locale.html#getDisplayScript(java.util.Locale))
        ///
        /// Required features: "java-lang-String", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Locale")))]
        pub fn getDisplayScript_Locale<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayScript", .descriptor == "(Ljava/util/Locale;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayScript\0", "(Ljava/util/Locale;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayCountry](https://developer.android.com/reference/java/util/Locale.html#getDisplayCountry())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDisplayCountry<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayCountry", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayCountry\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayCountry](https://developer.android.com/reference/java/util/Locale.html#getDisplayCountry(java.util.Locale))
        ///
        /// Required features: "java-lang-String", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Locale")))]
        pub fn getDisplayCountry_Locale<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayCountry", .descriptor == "(Ljava/util/Locale;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayCountry\0", "(Ljava/util/Locale;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayVariant](https://developer.android.com/reference/java/util/Locale.html#getDisplayVariant())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDisplayVariant<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayVariant", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayVariant\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayVariant](https://developer.android.com/reference/java/util/Locale.html#getDisplayVariant(java.util.Locale))
        ///
        /// Required features: "java-lang-String", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Locale")))]
        pub fn getDisplayVariant_Locale<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayVariant", .descriptor == "(Ljava/util/Locale;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayVariant\0", "(Ljava/util/Locale;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayName](https://developer.android.com/reference/java/util/Locale.html#getDisplayName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDisplayName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayName](https://developer.android.com/reference/java/util/Locale.html#getDisplayName(java.util.Locale))
        ///
        /// Required features: "java-lang-String", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Locale")))]
        pub fn getDisplayName_Locale<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "getDisplayName", .descriptor == "(Ljava/util/Locale;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "getDisplayName\0", "(Ljava/util/Locale;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/java/util/Locale.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/java/util/Locale.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/java/util/Locale.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Locale\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [filter](https://developer.android.com/reference/java/util/Locale.html#filter(java.util.List,%20java.util.Collection,%20java.util.Locale.FilteringMode))
        ///
        /// Required features: "java-util-Collection", "java-util-List", "java-util-Locale_FilteringMode"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-List", feature = "java-util-Locale_FilteringMode")))]
        pub fn filter_List_Collection_FilteringMode<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale_FilteringMode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "filter", .descriptor == "(Ljava/util/List;Ljava/util/Collection;Ljava/util/Locale$FilteringMode;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "filter\0", "(Ljava/util/List;Ljava/util/Collection;Ljava/util/Locale$FilteringMode;)Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [filter](https://developer.android.com/reference/java/util/Locale.html#filter(java.util.List,%20java.util.Collection))
        ///
        /// Required features: "java-util-Collection", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-List")))]
        pub fn filter_List_Collection<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "filter", .descriptor == "(Ljava/util/List;Ljava/util/Collection;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "filter\0", "(Ljava/util/List;Ljava/util/Collection;)Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [filterTags](https://developer.android.com/reference/java/util/Locale.html#filterTags(java.util.List,%20java.util.Collection,%20java.util.Locale.FilteringMode))
        ///
        /// Required features: "java-util-Collection", "java-util-List", "java-util-Locale_FilteringMode"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-List", feature = "java-util-Locale_FilteringMode")))]
        pub fn filterTags_List_Collection_FilteringMode<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale_FilteringMode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "filterTags", .descriptor == "(Ljava/util/List;Ljava/util/Collection;Ljava/util/Locale$FilteringMode;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "filterTags\0", "(Ljava/util/List;Ljava/util/Collection;Ljava/util/Locale$FilteringMode;)Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [filterTags](https://developer.android.com/reference/java/util/Locale.html#filterTags(java.util.List,%20java.util.Collection))
        ///
        /// Required features: "java-util-Collection", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-List")))]
        pub fn filterTags_List_Collection<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "filterTags", .descriptor == "(Ljava/util/List;Ljava/util/Collection;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "filterTags\0", "(Ljava/util/List;Ljava/util/Collection;)Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lookup](https://developer.android.com/reference/java/util/Locale.html#lookup(java.util.List,%20java.util.Collection))
        ///
        /// Required features: "java-util-Collection", "java-util-List", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-List", feature = "java-util-Locale")))]
        pub fn lookup<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "lookup", .descriptor == "(Ljava/util/List;Ljava/util/Collection;)Ljava/util/Locale;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "lookup\0", "(Ljava/util/List;Ljava/util/Collection;)Ljava/util/Locale;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lookupTag](https://developer.android.com/reference/java/util/Locale.html#lookupTag(java.util.List,%20java.util.Collection))
        ///
        /// Required features: "java-lang-String", "java-util-Collection", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Collection", feature = "java-util-List")))]
        pub fn lookupTag<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Locale", java.flags == PUBLIC | STATIC, .name == "lookupTag", .descriptor == "(Ljava/util/List;Ljava/util/Collection;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/Locale\0", "lookupTag\0", "(Ljava/util/List;Ljava/util/Collection;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CANADA](https://developer.android.com/reference/java/util/Locale.html#CANADA)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn CANADA<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "CANADA\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [CANADA_FRENCH](https://developer.android.com/reference/java/util/Locale.html#CANADA_FRENCH)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn CANADA_FRENCH<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "CANADA_FRENCH\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [CHINA](https://developer.android.com/reference/java/util/Locale.html#CHINA)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn CHINA<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "CHINA\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [CHINESE](https://developer.android.com/reference/java/util/Locale.html#CHINESE)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn CHINESE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "CHINESE\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ENGLISH](https://developer.android.com/reference/java/util/Locale.html#ENGLISH)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn ENGLISH<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "ENGLISH\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [FRANCE](https://developer.android.com/reference/java/util/Locale.html#FRANCE)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn FRANCE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "FRANCE\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [FRENCH](https://developer.android.com/reference/java/util/Locale.html#FRENCH)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn FRENCH<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "FRENCH\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [GERMAN](https://developer.android.com/reference/java/util/Locale.html#GERMAN)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn GERMAN<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "GERMAN\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [GERMANY](https://developer.android.com/reference/java/util/Locale.html#GERMANY)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn GERMANY<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "GERMANY\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ITALIAN](https://developer.android.com/reference/java/util/Locale.html#ITALIAN)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn ITALIAN<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "ITALIAN\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ITALY](https://developer.android.com/reference/java/util/Locale.html#ITALY)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn ITALY<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "ITALY\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [JAPAN](https://developer.android.com/reference/java/util/Locale.html#JAPAN)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn JAPAN<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "JAPAN\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [JAPANESE](https://developer.android.com/reference/java/util/Locale.html#JAPANESE)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn JAPANESE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "JAPANESE\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [KOREA](https://developer.android.com/reference/java/util/Locale.html#KOREA)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn KOREA<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "KOREA\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [KOREAN](https://developer.android.com/reference/java/util/Locale.html#KOREAN)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn KOREAN<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "KOREAN\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [PRC](https://developer.android.com/reference/java/util/Locale.html#PRC)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn PRC<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "PRC\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [PRIVATE_USE_EXTENSION](https://developer.android.com/reference/java/util/Locale.html#PRIVATE_USE_EXTENSION)
        pub const PRIVATE_USE_EXTENSION : __jni_bindgen::jchar = __jni_bindgen::jchar(120);

        /// **get** public static final [ROOT](https://developer.android.com/reference/java/util/Locale.html#ROOT)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn ROOT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "ROOT\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [SIMPLIFIED_CHINESE](https://developer.android.com/reference/java/util/Locale.html#SIMPLIFIED_CHINESE)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn SIMPLIFIED_CHINESE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "SIMPLIFIED_CHINESE\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [TAIWAN](https://developer.android.com/reference/java/util/Locale.html#TAIWAN)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn TAIWAN<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "TAIWAN\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [TRADITIONAL_CHINESE](https://developer.android.com/reference/java/util/Locale.html#TRADITIONAL_CHINESE)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn TRADITIONAL_CHINESE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "TRADITIONAL_CHINESE\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [UK](https://developer.android.com/reference/java/util/Locale.html#UK)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn UK<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "UK\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [UNICODE_LOCALE_EXTENSION](https://developer.android.com/reference/java/util/Locale.html#UNICODE_LOCALE_EXTENSION)
        pub const UNICODE_LOCALE_EXTENSION : __jni_bindgen::jchar = __jni_bindgen::jchar(117);

        /// **get** public static final [US](https://developer.android.com/reference/java/util/Locale.html#US)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        pub fn US<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/Locale\0", "US\0", "Ljava/util/Locale;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
