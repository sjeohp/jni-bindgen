// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-Spliterator"))]
__jni_bindgen! {
    /// public interface [Spliterator](https://developer.android.com/reference/java/util/Spliterator.html)
    ///
    /// Required feature: java-util-Spliterator
    public interface Spliterator ("java/util/Spliterator") extends crate::java::lang::Object {

        /// [tryAdvance](https://developer.android.com/reference/java/util/Spliterator.html#tryAdvance(java.util.function.Consumer))
        ///
        /// Required features: "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Consumer")))]
        pub fn tryAdvance<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Spliterator", java.flags == PUBLIC | ABSTRACT, .name == "tryAdvance", .descriptor == "(Ljava/util/function/Consumer;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Spliterator\0", "tryAdvance\0", "(Ljava/util/function/Consumer;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forEachRemaining](https://developer.android.com/reference/java/util/Spliterator.html#forEachRemaining(java.util.function.Consumer))
        ///
        /// Required features: "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Consumer")))]
        pub fn forEachRemaining<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Spliterator", java.flags == PUBLIC, .name == "forEachRemaining", .descriptor == "(Ljava/util/function/Consumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Spliterator\0", "forEachRemaining\0", "(Ljava/util/function/Consumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [trySplit](https://developer.android.com/reference/java/util/Spliterator.html#trySplit())
        ///
        /// Required features: "java-util-Spliterator"
        #[cfg(any(feature = "all", all(feature = "java-util-Spliterator")))]
        pub fn trySplit<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Spliterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Spliterator", java.flags == PUBLIC | ABSTRACT, .name == "trySplit", .descriptor == "()Ljava/util/Spliterator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Spliterator\0", "trySplit\0", "()Ljava/util/Spliterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [estimateSize](https://developer.android.com/reference/java/util/Spliterator.html#estimateSize())
        pub fn estimateSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Spliterator", java.flags == PUBLIC | ABSTRACT, .name == "estimateSize", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Spliterator\0", "estimateSize\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExactSizeIfKnown](https://developer.android.com/reference/java/util/Spliterator.html#getExactSizeIfKnown())
        pub fn getExactSizeIfKnown<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Spliterator", java.flags == PUBLIC, .name == "getExactSizeIfKnown", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Spliterator\0", "getExactSizeIfKnown\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [characteristics](https://developer.android.com/reference/java/util/Spliterator.html#characteristics())
        pub fn characteristics<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Spliterator", java.flags == PUBLIC | ABSTRACT, .name == "characteristics", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Spliterator\0", "characteristics\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasCharacteristics](https://developer.android.com/reference/java/util/Spliterator.html#hasCharacteristics(int))
        pub fn hasCharacteristics<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Spliterator", java.flags == PUBLIC, .name == "hasCharacteristics", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Spliterator\0", "hasCharacteristics\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComparator](https://developer.android.com/reference/java/util/Spliterator.html#getComparator())
        ///
        /// Required features: "java-util-Comparator"
        #[cfg(any(feature = "all", all(feature = "java-util-Comparator")))]
        pub fn getComparator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Comparator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/Spliterator", java.flags == PUBLIC, .name == "getComparator", .descriptor == "()Ljava/util/Comparator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/Spliterator\0", "getComparator\0", "()Ljava/util/Comparator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CONCURRENT](https://developer.android.com/reference/java/util/Spliterator.html#CONCURRENT)
        pub const CONCURRENT : i32 = 4096;

        /// public static final [DISTINCT](https://developer.android.com/reference/java/util/Spliterator.html#DISTINCT)
        pub const DISTINCT : i32 = 1;

        /// public static final [IMMUTABLE](https://developer.android.com/reference/java/util/Spliterator.html#IMMUTABLE)
        pub const IMMUTABLE : i32 = 1024;

        /// public static final [NONNULL](https://developer.android.com/reference/java/util/Spliterator.html#NONNULL)
        pub const NONNULL : i32 = 256;

        /// public static final [ORDERED](https://developer.android.com/reference/java/util/Spliterator.html#ORDERED)
        pub const ORDERED : i32 = 16;

        /// public static final [SIZED](https://developer.android.com/reference/java/util/Spliterator.html#SIZED)
        pub const SIZED : i32 = 64;

        /// public static final [SORTED](https://developer.android.com/reference/java/util/Spliterator.html#SORTED)
        pub const SORTED : i32 = 4;

        /// public static final [SUBSIZED](https://developer.android.com/reference/java/util/Spliterator.html#SUBSIZED)
        pub const SUBSIZED : i32 = 16384;
    }
}
