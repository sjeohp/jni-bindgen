// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-CompletionService"))]
__jni_bindgen! {
    /// public interface [CompletionService](https://developer.android.com/reference/java/util/concurrent/CompletionService.html)
    ///
    /// Required feature: java-util-concurrent-CompletionService
    public interface CompletionService ("java/util/concurrent/CompletionService") extends crate::java::lang::Object {

        /// [submit](https://developer.android.com/reference/java/util/concurrent/CompletionService.html#submit(java.util.concurrent.Callable))
        ///
        /// Required features: "java-util-concurrent-Callable", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Callable", feature = "java-util-concurrent-Future")))]
        pub fn submit_Callable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionService", java.flags == PUBLIC | ABSTRACT, .name == "submit", .descriptor == "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionService\0", "submit\0", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [submit](https://developer.android.com/reference/java/util/concurrent/CompletionService.html#submit(java.lang.Runnable,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-Runnable", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-Runnable", feature = "java-util-concurrent-Future")))]
        pub fn submit_Runnable_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionService", java.flags == PUBLIC | ABSTRACT, .name == "submit", .descriptor == "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionService\0", "submit\0", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [take](https://developer.android.com/reference/java/util/concurrent/CompletionService.html#take())
        ///
        /// Required features: "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Future")))]
        pub fn take<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionService", java.flags == PUBLIC | ABSTRACT, .name == "take", .descriptor == "()Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionService\0", "take\0", "()Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [poll](https://developer.android.com/reference/java/util/concurrent/CompletionService.html#poll())
        ///
        /// Required features: "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Future")))]
        pub fn poll<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionService", java.flags == PUBLIC | ABSTRACT, .name == "poll", .descriptor == "()Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionService\0", "poll\0", "()Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [poll](https://developer.android.com/reference/java/util/concurrent/CompletionService.html#poll(long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-util-concurrent-Future", "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Future", feature = "java-util-concurrent-TimeUnit")))]
        pub fn poll_long_TimeUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionService", java.flags == PUBLIC | ABSTRACT, .name == "poll", .descriptor == "(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionService\0", "poll\0", "(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
