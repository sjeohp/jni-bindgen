// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-ForkJoinPool_ForkJoinWorkerThreadFactory"))]
__jni_bindgen! {
    /// public interface [ForkJoinPool.ForkJoinWorkerThreadFactory](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html)
    ///
    /// Required feature: java-util-concurrent-ForkJoinPool_ForkJoinWorkerThreadFactory
    public interface ForkJoinPool_ForkJoinWorkerThreadFactory ("java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory") extends crate::java::lang::Object {

        /// [newThread](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html#newThread(java.util.concurrent.ForkJoinPool))
        ///
        /// Required features: "java-util-concurrent-ForkJoinPool", "java-util-concurrent-ForkJoinWorkerThread"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinPool", feature = "java-util-concurrent-ForkJoinWorkerThread")))]
        pub fn newThread<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ForkJoinPool>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinWorkerThread>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory", java.flags == PUBLIC | ABSTRACT, .name == "newThread", .descriptor == "(Ljava/util/concurrent/ForkJoinPool;)Ljava/util/concurrent/ForkJoinWorkerThread;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory\0", "newThread\0", "(Ljava/util/concurrent/ForkJoinPool;)Ljava/util/concurrent/ForkJoinWorkerThread;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
