// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-ConcurrentNavigableMap"))]
__jni_bindgen! {
    /// public interface [ConcurrentNavigableMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html)
    ///
    /// Required feature: java-util-concurrent-ConcurrentNavigableMap
    public interface ConcurrentNavigableMap ("java/util/concurrent/ConcurrentNavigableMap") extends crate::java::lang::Object, implements crate::java::util::concurrent::ConcurrentMap, crate::java::util::NavigableMap {

        /// [subMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#subMap(java.lang.Object,%20boolean,%20java.lang.Object,%20boolean))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-ConcurrentNavigableMap"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-ConcurrentNavigableMap")))]
        pub fn subMap_Object_boolean_Object_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ConcurrentNavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "subMap", .descriptor == "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "subMap\0", "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [headMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#headMap(java.lang.Object,%20boolean))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-ConcurrentNavigableMap"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-ConcurrentNavigableMap")))]
        pub fn headMap_Object_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ConcurrentNavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "headMap", .descriptor == "(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "headMap\0", "(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tailMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#tailMap(java.lang.Object,%20boolean))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-ConcurrentNavigableMap"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-ConcurrentNavigableMap")))]
        pub fn tailMap_Object_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ConcurrentNavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "tailMap", .descriptor == "(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "tailMap\0", "(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#subMap(java.lang.Object,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-ConcurrentNavigableMap"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-ConcurrentNavigableMap")))]
        pub fn subMap_Object_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ConcurrentNavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "subMap", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "subMap\0", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [headMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#headMap(java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-ConcurrentNavigableMap"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-ConcurrentNavigableMap")))]
        pub fn headMap_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ConcurrentNavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "headMap", .descriptor == "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "headMap\0", "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tailMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#tailMap(java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-ConcurrentNavigableMap"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-ConcurrentNavigableMap")))]
        pub fn tailMap_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ConcurrentNavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "tailMap", .descriptor == "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "tailMap\0", "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [descendingMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#descendingMap())
        ///
        /// Required features: "java-util-concurrent-ConcurrentNavigableMap"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ConcurrentNavigableMap")))]
        pub fn descendingMap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ConcurrentNavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "descendingMap", .descriptor == "()Ljava/util/concurrent/ConcurrentNavigableMap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "descendingMap\0", "()Ljava/util/concurrent/ConcurrentNavigableMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [navigableKeySet](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#navigableKeySet())
        ///
        /// Required features: "java-util-NavigableSet"
        #[cfg(any(feature = "all", all(feature = "java-util-NavigableSet")))]
        pub fn navigableKeySet<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::NavigableSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "navigableKeySet", .descriptor == "()Ljava/util/NavigableSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "navigableKeySet\0", "()Ljava/util/NavigableSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [keySet](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#keySet())
        ///
        /// Required features: "java-util-NavigableSet"
        #[cfg(any(feature = "all", all(feature = "java-util-NavigableSet")))]
        pub fn keySet<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::NavigableSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "keySet", .descriptor == "()Ljava/util/NavigableSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "keySet\0", "()Ljava/util/NavigableSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [descendingKeySet](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#descendingKeySet())
        ///
        /// Required features: "java-util-NavigableSet"
        #[cfg(any(feature = "all", all(feature = "java-util-NavigableSet")))]
        pub fn descendingKeySet<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::NavigableSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | ABSTRACT, .name == "descendingKeySet", .descriptor == "()Ljava/util/NavigableSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "descendingKeySet\0", "()Ljava/util/NavigableSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [keySet](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#keySet())
        // ///
        // /// Required features: "java-util-Set"
        // #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        // pub fn keySet<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "keySet", .descriptor == "()Ljava/util/Set;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "keySet\0", "()Ljava/util/Set;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [tailMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#tailMap(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object", "java-util-SortedMap"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-SortedMap")))]
        // pub fn tailMap_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::SortedMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "tailMap", .descriptor == "(Ljava/lang/Object;)Ljava/util/SortedMap;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "tailMap\0", "(Ljava/lang/Object;)Ljava/util/SortedMap;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [headMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#headMap(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object", "java-util-SortedMap"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-SortedMap")))]
        // pub fn headMap_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::SortedMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "headMap", .descriptor == "(Ljava/lang/Object;)Ljava/util/SortedMap;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "headMap\0", "(Ljava/lang/Object;)Ljava/util/SortedMap;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [subMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#subMap(java.lang.Object,%20java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object", "java-util-SortedMap"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-SortedMap")))]
        // pub fn subMap_Object_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::SortedMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "subMap", .descriptor == "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "subMap\0", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [tailMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#tailMap(java.lang.Object,%20boolean))
        // ///
        // /// Required features: "java-lang-Object", "java-util-NavigableMap"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-NavigableMap")))]
        // pub fn tailMap_Object_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::NavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "tailMap", .descriptor == "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "tailMap\0", "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [headMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#headMap(java.lang.Object,%20boolean))
        // ///
        // /// Required features: "java-lang-Object", "java-util-NavigableMap"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-NavigableMap")))]
        // pub fn headMap_Object_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::NavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "headMap", .descriptor == "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "headMap\0", "(Ljava/lang/Object;Z)Ljava/util/NavigableMap;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [subMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#subMap(java.lang.Object,%20boolean,%20java.lang.Object,%20boolean))
        // ///
        // /// Required features: "java-lang-Object", "java-util-NavigableMap"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-NavigableMap")))]
        // pub fn subMap_Object_boolean_Object_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::NavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "subMap", .descriptor == "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "subMap\0", "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [descendingMap](https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html#descendingMap())
        // ///
        // /// Required features: "java-util-NavigableMap"
        // #[cfg(any(feature = "all", all(feature = "java-util-NavigableMap")))]
        // pub fn descendingMap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::NavigableMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ConcurrentNavigableMap", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "descendingMap", .descriptor == "()Ljava/util/NavigableMap;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ConcurrentNavigableMap\0", "descendingMap\0", "()Ljava/util/NavigableMap;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
