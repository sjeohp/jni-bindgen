// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-locks-StampedLock"))]
__jni_bindgen! {
    /// public class [StampedLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html)
    ///
    /// Required feature: java-util-concurrent-locks-StampedLock
    public class StampedLock ("java/util/concurrent/locks/StampedLock") extends crate::java::lang::Object, implements crate::java::io::Serializable {

        /// [StampedLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#StampedLock())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::StampedLock>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#writeLock())
        pub fn writeLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "writeLock", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "writeLock\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryWriteLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryWriteLock())
        pub fn tryWriteLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryWriteLock", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryWriteLock\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryWriteLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryWriteLock(long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-TimeUnit")))]
        pub fn tryWriteLock_long_TimeUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryWriteLock", .descriptor == "(JLjava/util/concurrent/TimeUnit;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryWriteLock\0", "(JLjava/util/concurrent/TimeUnit;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeLockInterruptibly](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#writeLockInterruptibly())
        pub fn writeLockInterruptibly<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "writeLockInterruptibly", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "writeLockInterruptibly\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#readLock())
        pub fn readLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "readLock", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "readLock\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryReadLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryReadLock())
        pub fn tryReadLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryReadLock", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryReadLock\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryReadLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryReadLock(long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-TimeUnit")))]
        pub fn tryReadLock_long_TimeUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryReadLock", .descriptor == "(JLjava/util/concurrent/TimeUnit;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryReadLock\0", "(JLjava/util/concurrent/TimeUnit;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readLockInterruptibly](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#readLockInterruptibly())
        pub fn readLockInterruptibly<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "readLockInterruptibly", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "readLockInterruptibly\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryOptimisticRead](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryOptimisticRead())
        pub fn tryOptimisticRead<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryOptimisticRead", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryOptimisticRead\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [validate](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#validate(long))
        pub fn validate<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "validate", .descriptor == "(J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "validate\0", "(J)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unlockWrite](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#unlockWrite(long))
        pub fn unlockWrite<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "unlockWrite", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "unlockWrite\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unlockRead](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#unlockRead(long))
        pub fn unlockRead<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "unlockRead", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "unlockRead\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unlock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#unlock(long))
        pub fn unlock<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "unlock", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "unlock\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryConvertToWriteLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryConvertToWriteLock(long))
        pub fn tryConvertToWriteLock<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryConvertToWriteLock", .descriptor == "(J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryConvertToWriteLock\0", "(J)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryConvertToReadLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryConvertToReadLock(long))
        pub fn tryConvertToReadLock<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryConvertToReadLock", .descriptor == "(J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryConvertToReadLock\0", "(J)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryConvertToOptimisticRead](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryConvertToOptimisticRead(long))
        pub fn tryConvertToOptimisticRead<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryConvertToOptimisticRead", .descriptor == "(J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryConvertToOptimisticRead\0", "(J)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryUnlockWrite](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryUnlockWrite())
        pub fn tryUnlockWrite<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryUnlockWrite", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryUnlockWrite\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryUnlockRead](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#tryUnlockRead())
        pub fn tryUnlockRead<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "tryUnlockRead", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "tryUnlockRead\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWriteLocked](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#isWriteLocked())
        pub fn isWriteLocked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "isWriteLocked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "isWriteLocked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isReadLocked](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#isReadLocked())
        pub fn isReadLocked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "isReadLocked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "isReadLocked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReadLockCount](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#getReadLockCount())
        pub fn getReadLockCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "getReadLockCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "getReadLockCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asReadLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#asReadLock())
        ///
        /// Required features: "java-util-concurrent-locks-Lock"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Lock")))]
        pub fn asReadLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::Lock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "asReadLock", .descriptor == "()Ljava/util/concurrent/locks/Lock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "asReadLock\0", "()Ljava/util/concurrent/locks/Lock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asWriteLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#asWriteLock())
        ///
        /// Required features: "java-util-concurrent-locks-Lock"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Lock")))]
        pub fn asWriteLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::Lock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "asWriteLock", .descriptor == "()Ljava/util/concurrent/locks/Lock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "asWriteLock\0", "()Ljava/util/concurrent/locks/Lock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asReadWriteLock](https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html#asReadWriteLock())
        ///
        /// Required features: "java-util-concurrent-locks-ReadWriteLock"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-ReadWriteLock")))]
        pub fn asReadWriteLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::ReadWriteLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/StampedLock", java.flags == PUBLIC, .name == "asReadWriteLock", .descriptor == "()Ljava/util/concurrent/locks/ReadWriteLock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/StampedLock\0", "asReadWriteLock\0", "()Ljava/util/concurrent/locks/ReadWriteLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
