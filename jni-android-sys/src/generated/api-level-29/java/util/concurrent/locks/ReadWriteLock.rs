// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-locks-ReadWriteLock"))]
__jni_bindgen! {
    /// public interface [ReadWriteLock](https://developer.android.com/reference/java/util/concurrent/locks/ReadWriteLock.html)
    ///
    /// Required feature: java-util-concurrent-locks-ReadWriteLock
    public interface ReadWriteLock ("java/util/concurrent/locks/ReadWriteLock") extends crate::java::lang::Object {

        /// [readLock](https://developer.android.com/reference/java/util/concurrent/locks/ReadWriteLock.html#readLock())
        ///
        /// Required features: "java-util-concurrent-locks-Lock"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Lock")))]
        pub fn readLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::Lock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReadWriteLock", java.flags == PUBLIC | ABSTRACT, .name == "readLock", .descriptor == "()Ljava/util/concurrent/locks/Lock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReadWriteLock\0", "readLock\0", "()Ljava/util/concurrent/locks/Lock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeLock](https://developer.android.com/reference/java/util/concurrent/locks/ReadWriteLock.html#writeLock())
        ///
        /// Required features: "java-util-concurrent-locks-Lock"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Lock")))]
        pub fn writeLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::Lock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReadWriteLock", java.flags == PUBLIC | ABSTRACT, .name == "writeLock", .descriptor == "()Ljava/util/concurrent/locks/Lock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReadWriteLock\0", "writeLock\0", "()Ljava/util/concurrent/locks/Lock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
