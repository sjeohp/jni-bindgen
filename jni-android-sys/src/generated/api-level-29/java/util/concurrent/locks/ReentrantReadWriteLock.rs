// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-locks-ReentrantReadWriteLock"))]
__jni_bindgen! {
    /// public class [ReentrantReadWriteLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html)
    ///
    /// Required feature: java-util-concurrent-locks-ReentrantReadWriteLock
    public class ReentrantReadWriteLock ("java/util/concurrent/locks/ReentrantReadWriteLock") extends crate::java::lang::Object, implements crate::java::util::concurrent::locks::ReadWriteLock, crate::java::io::Serializable {

        /// [ReentrantReadWriteLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#ReentrantReadWriteLock())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::ReentrantReadWriteLock>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ReentrantReadWriteLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#ReentrantReadWriteLock(boolean))
        pub fn new_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::ReentrantReadWriteLock>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "<init>\0", "(Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#writeLock())
        ///
        /// Required features: "java-util-concurrent-locks-ReentrantReadWriteLock_WriteLock"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-ReentrantReadWriteLock_WriteLock")))]
        pub fn writeLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::ReentrantReadWriteLock_WriteLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "writeLock", .descriptor == "()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "writeLock\0", "()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#readLock())
        ///
        /// Required features: "java-util-concurrent-locks-ReentrantReadWriteLock_ReadLock"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-ReentrantReadWriteLock_ReadLock")))]
        pub fn readLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::ReentrantReadWriteLock_ReadLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "readLock", .descriptor == "()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "readLock\0", "()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFair](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#isFair())
        pub fn isFair<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC | FINAL, .name == "isFair", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "isFair\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getOwner](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getOwner())
        // ///
        // /// Required features: "java-lang-Thread"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Thread")))]
        // fn getOwner<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Thread>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PROTECTED, .name == "getOwner", .descriptor == "()Ljava/lang/Thread;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getOwner\0", "()Ljava/lang/Thread;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getReadLockCount](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getReadLockCount())
        pub fn getReadLockCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "getReadLockCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getReadLockCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWriteLocked](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#isWriteLocked())
        pub fn isWriteLocked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "isWriteLocked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "isWriteLocked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWriteLockedByCurrentThread](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#isWriteLockedByCurrentThread())
        pub fn isWriteLockedByCurrentThread<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "isWriteLockedByCurrentThread", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "isWriteLockedByCurrentThread\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWriteHoldCount](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getWriteHoldCount())
        pub fn getWriteHoldCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "getWriteHoldCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getWriteHoldCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReadHoldCount](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getReadHoldCount())
        pub fn getReadHoldCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "getReadHoldCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getReadHoldCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getQueuedWriterThreads](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getQueuedWriterThreads())
        // ///
        // /// Required features: "java-util-Collection"
        // #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        // fn getQueuedWriterThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PROTECTED, .name == "getQueuedWriterThreads", .descriptor == "()Ljava/util/Collection;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getQueuedWriterThreads\0", "()Ljava/util/Collection;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getQueuedReaderThreads](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getQueuedReaderThreads())
        // ///
        // /// Required features: "java-util-Collection"
        // #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        // fn getQueuedReaderThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PROTECTED, .name == "getQueuedReaderThreads", .descriptor == "()Ljava/util/Collection;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getQueuedReaderThreads\0", "()Ljava/util/Collection;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [hasQueuedThreads](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#hasQueuedThreads())
        pub fn hasQueuedThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC | FINAL, .name == "hasQueuedThreads", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "hasQueuedThreads\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasQueuedThread](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#hasQueuedThread(java.lang.Thread))
        ///
        /// Required features: "java-lang-Thread"
        #[cfg(any(feature = "all", all(feature = "java-lang-Thread")))]
        pub fn hasQueuedThread<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Thread>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC | FINAL, .name == "hasQueuedThread", .descriptor == "(Ljava/lang/Thread;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "hasQueuedThread\0", "(Ljava/lang/Thread;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQueueLength](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getQueueLength())
        pub fn getQueueLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC | FINAL, .name == "getQueueLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getQueueLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getQueuedThreads](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getQueuedThreads())
        // ///
        // /// Required features: "java-util-Collection"
        // #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        // fn getQueuedThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PROTECTED, .name == "getQueuedThreads", .descriptor == "()Ljava/util/Collection;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getQueuedThreads\0", "()Ljava/util/Collection;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [hasWaiters](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#hasWaiters(java.util.concurrent.locks.Condition))
        ///
        /// Required features: "java-util-concurrent-locks-Condition"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Condition")))]
        pub fn hasWaiters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::Condition>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "hasWaiters", .descriptor == "(Ljava/util/concurrent/locks/Condition;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "hasWaiters\0", "(Ljava/util/concurrent/locks/Condition;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWaitQueueLength](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getWaitQueueLength(java.util.concurrent.locks.Condition))
        ///
        /// Required features: "java-util-concurrent-locks-Condition"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Condition")))]
        pub fn getWaitQueueLength<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::Condition>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "getWaitQueueLength", .descriptor == "(Ljava/util/concurrent/locks/Condition;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getWaitQueueLength\0", "(Ljava/util/concurrent/locks/Condition;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getWaitingThreads](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#getWaitingThreads(java.util.concurrent.locks.Condition))
        // ///
        // /// Required features: "java-util-Collection", "java-util-concurrent-locks-Condition"
        // #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-concurrent-locks-Condition")))]
        // fn getWaitingThreads<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::Condition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PROTECTED, .name == "getWaitingThreads", .descriptor == "(Ljava/util/concurrent/locks/Condition;)Ljava/util/Collection;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "getWaitingThreads\0", "(Ljava/util/concurrent/locks/Condition;)Ljava/util/Collection;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [toString](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [writeLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#writeLock())
        // ///
        // /// Required features: "java-util-concurrent-locks-Lock"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Lock")))]
        // pub fn writeLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::Lock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "writeLock", .descriptor == "()Ljava/util/concurrent/locks/Lock;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "writeLock\0", "()Ljava/util/concurrent/locks/Lock;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [readLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html#readLock())
        // ///
        // /// Required features: "java-util-concurrent-locks-Lock"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Lock")))]
        // pub fn readLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::Lock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantReadWriteLock", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "readLock", .descriptor == "()Ljava/util/concurrent/locks/Lock;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantReadWriteLock\0", "readLock\0", "()Ljava/util/concurrent/locks/Lock;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
