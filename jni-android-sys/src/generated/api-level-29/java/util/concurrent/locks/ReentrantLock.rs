// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-locks-ReentrantLock"))]
__jni_bindgen! {
    /// public class [ReentrantLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html)
    ///
    /// Required feature: java-util-concurrent-locks-ReentrantLock
    public class ReentrantLock ("java/util/concurrent/locks/ReentrantLock") extends crate::java::lang::Object, implements crate::java::util::concurrent::locks::Lock, crate::java::io::Serializable {

        /// [ReentrantLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#ReentrantLock())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::ReentrantLock>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ReentrantLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#ReentrantLock(boolean))
        pub fn new_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::ReentrantLock>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "<init>\0", "(Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#lock())
        pub fn lock<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "lock", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "lock\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lockInterruptibly](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#lockInterruptibly())
        pub fn lockInterruptibly<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "lockInterruptibly", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "lockInterruptibly\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#tryLock())
        pub fn tryLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "tryLock", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "tryLock\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryLock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#tryLock(long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-TimeUnit")))]
        pub fn tryLock_long_TimeUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "tryLock", .descriptor == "(JLjava/util/concurrent/TimeUnit;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "tryLock\0", "(JLjava/util/concurrent/TimeUnit;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unlock](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#unlock())
        pub fn unlock<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "unlock", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "unlock\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newCondition](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#newCondition())
        ///
        /// Required features: "java-util-concurrent-locks-Condition"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Condition")))]
        pub fn newCondition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::Condition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "newCondition", .descriptor == "()Ljava/util/concurrent/locks/Condition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "newCondition\0", "()Ljava/util/concurrent/locks/Condition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHoldCount](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#getHoldCount())
        pub fn getHoldCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "getHoldCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "getHoldCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHeldByCurrentThread](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#isHeldByCurrentThread())
        pub fn isHeldByCurrentThread<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "isHeldByCurrentThread", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "isHeldByCurrentThread\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLocked](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#isLocked())
        pub fn isLocked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "isLocked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "isLocked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFair](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#isFair())
        pub fn isFair<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC | FINAL, .name == "isFair", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "isFair\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getOwner](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#getOwner())
        // ///
        // /// Required features: "java-lang-Thread"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Thread")))]
        // fn getOwner<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Thread>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PROTECTED, .name == "getOwner", .descriptor == "()Ljava/lang/Thread;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "getOwner\0", "()Ljava/lang/Thread;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [hasQueuedThreads](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#hasQueuedThreads())
        pub fn hasQueuedThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC | FINAL, .name == "hasQueuedThreads", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "hasQueuedThreads\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasQueuedThread](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#hasQueuedThread(java.lang.Thread))
        ///
        /// Required features: "java-lang-Thread"
        #[cfg(any(feature = "all", all(feature = "java-lang-Thread")))]
        pub fn hasQueuedThread<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Thread>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC | FINAL, .name == "hasQueuedThread", .descriptor == "(Ljava/lang/Thread;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "hasQueuedThread\0", "(Ljava/lang/Thread;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQueueLength](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#getQueueLength())
        pub fn getQueueLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC | FINAL, .name == "getQueueLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "getQueueLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getQueuedThreads](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#getQueuedThreads())
        // ///
        // /// Required features: "java-util-Collection"
        // #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        // fn getQueuedThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PROTECTED, .name == "getQueuedThreads", .descriptor == "()Ljava/util/Collection;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "getQueuedThreads\0", "()Ljava/util/Collection;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [hasWaiters](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#hasWaiters(java.util.concurrent.locks.Condition))
        ///
        /// Required features: "java-util-concurrent-locks-Condition"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Condition")))]
        pub fn hasWaiters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::Condition>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "hasWaiters", .descriptor == "(Ljava/util/concurrent/locks/Condition;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "hasWaiters\0", "(Ljava/util/concurrent/locks/Condition;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWaitQueueLength](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#getWaitQueueLength(java.util.concurrent.locks.Condition))
        ///
        /// Required features: "java-util-concurrent-locks-Condition"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-Condition")))]
        pub fn getWaitQueueLength<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::Condition>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "getWaitQueueLength", .descriptor == "(Ljava/util/concurrent/locks/Condition;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "getWaitQueueLength\0", "(Ljava/util/concurrent/locks/Condition;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getWaitingThreads](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#getWaitingThreads(java.util.concurrent.locks.Condition))
        // ///
        // /// Required features: "java-util-Collection", "java-util-concurrent-locks-Condition"
        // #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-concurrent-locks-Condition")))]
        // fn getWaitingThreads<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::Condition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PROTECTED, .name == "getWaitingThreads", .descriptor == "(Ljava/util/concurrent/locks/Condition;)Ljava/util/Collection;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "getWaitingThreads\0", "(Ljava/util/concurrent/locks/Condition;)Ljava/util/Collection;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [toString](https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/ReentrantLock", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/ReentrantLock\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
