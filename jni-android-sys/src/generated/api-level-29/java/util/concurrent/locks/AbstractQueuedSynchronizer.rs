// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-locks-AbstractQueuedSynchronizer"))]
__jni_bindgen! {
    /// public class [AbstractQueuedSynchronizer](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html)
    ///
    /// Required feature: java-util-concurrent-locks-AbstractQueuedSynchronizer
    public class AbstractQueuedSynchronizer ("java/util/concurrent/locks/AbstractQueuedSynchronizer") extends crate::java::util::concurrent::locks::AbstractOwnableSynchronizer, implements crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [AbstractQueuedSynchronizer](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#AbstractQueuedSynchronizer())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::locks::AbstractQueuedSynchronizer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getState](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getState())
        // fn getState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PROTECTED | FINAL, .name == "getState", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "getState\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [setState](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#setState(int))
        // fn setState<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PROTECTED | FINAL, .name == "setState", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "setState\0", "(I)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [compareAndSetState](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#compareAndSetState(int,%20int))
        // fn compareAndSetState<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PROTECTED | FINAL, .name == "compareAndSetState", .descriptor == "(II)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "compareAndSetState\0", "(II)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [tryAcquire](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquire(int))
        // fn tryAcquire<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PROTECTED, .name == "tryAcquire", .descriptor == "(I)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "tryAcquire\0", "(I)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [tryRelease](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryRelease(int))
        // fn tryRelease<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PROTECTED, .name == "tryRelease", .descriptor == "(I)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "tryRelease\0", "(I)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [tryAcquireShared](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquireShared(int))
        // fn tryAcquireShared<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PROTECTED, .name == "tryAcquireShared", .descriptor == "(I)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "tryAcquireShared\0", "(I)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [tryReleaseShared](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryReleaseShared(int))
        // fn tryReleaseShared<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PROTECTED, .name == "tryReleaseShared", .descriptor == "(I)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "tryReleaseShared\0", "(I)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [isHeldExclusively](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#isHeldExclusively())
        // fn isHeldExclusively<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PROTECTED, .name == "isHeldExclusively", .descriptor == "()Z"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "isHeldExclusively\0", "()Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [acquire](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#acquire(int))
        pub fn acquire<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "acquire", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "acquire\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acquireInterruptibly](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#acquireInterruptibly(int))
        pub fn acquireInterruptibly<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "acquireInterruptibly", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "acquireInterruptibly\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryAcquireNanos](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquireNanos(int,%20long))
        pub fn tryAcquireNanos<'env>(&'env self, arg0: i32, arg1: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "tryAcquireNanos", .descriptor == "(IJ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "tryAcquireNanos\0", "(IJ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [release](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#release(int))
        pub fn release<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "release", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "release\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acquireShared](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#acquireShared(int))
        pub fn acquireShared<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "acquireShared", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "acquireShared\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acquireSharedInterruptibly](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#acquireSharedInterruptibly(int))
        pub fn acquireSharedInterruptibly<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "acquireSharedInterruptibly", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "acquireSharedInterruptibly\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryAcquireSharedNanos](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquireSharedNanos(int,%20long))
        pub fn tryAcquireSharedNanos<'env>(&'env self, arg0: i32, arg1: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "tryAcquireSharedNanos", .descriptor == "(IJ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "tryAcquireSharedNanos\0", "(IJ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseShared](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#releaseShared(int))
        pub fn releaseShared<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "releaseShared", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "releaseShared\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasQueuedThreads](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#hasQueuedThreads())
        pub fn hasQueuedThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "hasQueuedThreads", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "hasQueuedThreads\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasContended](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#hasContended())
        pub fn hasContended<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "hasContended", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "hasContended\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFirstQueuedThread](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getFirstQueuedThread())
        ///
        /// Required features: "java-lang-Thread"
        #[cfg(any(feature = "all", all(feature = "java-lang-Thread")))]
        pub fn getFirstQueuedThread<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Thread>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "getFirstQueuedThread", .descriptor == "()Ljava/lang/Thread;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "getFirstQueuedThread\0", "()Ljava/lang/Thread;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isQueued](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#isQueued(java.lang.Thread))
        ///
        /// Required features: "java-lang-Thread"
        #[cfg(any(feature = "all", all(feature = "java-lang-Thread")))]
        pub fn isQueued<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Thread>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "isQueued", .descriptor == "(Ljava/lang/Thread;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "isQueued\0", "(Ljava/lang/Thread;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasQueuedPredecessors](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#hasQueuedPredecessors())
        pub fn hasQueuedPredecessors<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "hasQueuedPredecessors", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "hasQueuedPredecessors\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQueueLength](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getQueueLength())
        pub fn getQueueLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "getQueueLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "getQueueLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQueuedThreads](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getQueuedThreads())
        ///
        /// Required features: "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        pub fn getQueuedThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "getQueuedThreads", .descriptor == "()Ljava/util/Collection;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "getQueuedThreads\0", "()Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExclusiveQueuedThreads](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getExclusiveQueuedThreads())
        ///
        /// Required features: "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        pub fn getExclusiveQueuedThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "getExclusiveQueuedThreads", .descriptor == "()Ljava/util/Collection;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "getExclusiveQueuedThreads\0", "()Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSharedQueuedThreads](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getSharedQueuedThreads())
        ///
        /// Required features: "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        pub fn getSharedQueuedThreads<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "getSharedQueuedThreads", .descriptor == "()Ljava/util/Collection;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "getSharedQueuedThreads\0", "()Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [owns](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#owns(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject))
        ///
        /// Required features: "java-util-concurrent-locks-AbstractQueuedSynchronizer_ConditionObject"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-AbstractQueuedSynchronizer_ConditionObject")))]
        pub fn owns<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::AbstractQueuedSynchronizer_ConditionObject>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "owns", .descriptor == "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "owns\0", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasWaiters](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject))
        ///
        /// Required features: "java-util-concurrent-locks-AbstractQueuedSynchronizer_ConditionObject"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-AbstractQueuedSynchronizer_ConditionObject")))]
        pub fn hasWaiters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::AbstractQueuedSynchronizer_ConditionObject>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "hasWaiters", .descriptor == "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "hasWaiters\0", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWaitQueueLength](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject))
        ///
        /// Required features: "java-util-concurrent-locks-AbstractQueuedSynchronizer_ConditionObject"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-locks-AbstractQueuedSynchronizer_ConditionObject")))]
        pub fn getWaitQueueLength<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::AbstractQueuedSynchronizer_ConditionObject>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "getWaitQueueLength", .descriptor == "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "getWaitQueueLength\0", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWaitingThreads](https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject))
        ///
        /// Required features: "java-util-Collection", "java-util-concurrent-locks-AbstractQueuedSynchronizer_ConditionObject"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-concurrent-locks-AbstractQueuedSynchronizer_ConditionObject")))]
        pub fn getWaitingThreads<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::locks::AbstractQueuedSynchronizer_ConditionObject>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/locks/AbstractQueuedSynchronizer", java.flags == PUBLIC | FINAL, .name == "getWaitingThreads", .descriptor == "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/locks/AbstractQueuedSynchronizer\0", "getWaitingThreads\0", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
