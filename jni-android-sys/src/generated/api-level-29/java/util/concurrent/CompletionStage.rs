// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-CompletionStage"))]
__jni_bindgen! {
    /// public interface [CompletionStage](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html)
    ///
    /// Required feature: java-util-concurrent-CompletionStage
    public interface CompletionStage ("java/util/concurrent/CompletionStage") extends crate::java::lang::Object {

        /// [thenApply](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenApply(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        pub fn thenApply<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenApply", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenApply\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenApplyAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenApplyAsync(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        pub fn thenApplyAsync_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenApplyAsync", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenApplyAsync\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenApplyAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenApplyAsync(java.util.function.Function,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Function")))]
        pub fn thenApplyAsync_Function_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenApplyAsync", .descriptor == "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenApplyAsync\0", "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAccept](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenAccept(java.util.function.Consumer))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        pub fn thenAccept<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenAccept", .descriptor == "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenAccept\0", "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenAcceptAsync(java.util.function.Consumer))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        pub fn thenAcceptAsync_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenAcceptAsync", .descriptor == "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenAcceptAsync\0", "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenAcceptAsync(java.util.function.Consumer,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        pub fn thenAcceptAsync_Consumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenAcceptAsync", .descriptor == "(Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenAcceptAsync\0", "(Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenRun](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenRun(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        pub fn thenRun<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenRun", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenRun\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenRunAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenRunAsync(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        pub fn thenRunAsync_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenRunAsync", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenRunAsync\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenRunAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenRunAsync(java.lang.Runnable,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor")))]
        pub fn thenRunAsync_Runnable_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenRunAsync", .descriptor == "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenRunAsync\0", "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenCombine](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenCombine(java.util.concurrent.CompletionStage,%20java.util.function.BiFunction))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        pub fn thenCombine<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenCombine", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenCombine\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenCombineAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenCombineAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiFunction))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        pub fn thenCombineAsync_CompletionStage_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenCombineAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenCombineAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenCombineAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenCombineAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiFunction,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiFunction")))]
        pub fn thenCombineAsync_CompletionStage_BiFunction_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenCombineAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenCombineAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptBoth](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenAcceptBoth(java.util.concurrent.CompletionStage,%20java.util.function.BiConsumer))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        pub fn thenAcceptBoth<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenAcceptBoth", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenAcceptBoth\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenAcceptBothAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiConsumer))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        pub fn thenAcceptBothAsync_CompletionStage_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenAcceptBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenAcceptBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenAcceptBothAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiConsumer,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiConsumer")))]
        pub fn thenAcceptBothAsync_CompletionStage_BiConsumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenAcceptBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenAcceptBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterBoth](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#runAfterBoth(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        pub fn runAfterBoth<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "runAfterBoth", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "runAfterBoth\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#runAfterBothAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        pub fn runAfterBothAsync_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "runAfterBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "runAfterBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#runAfterBothAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor")))]
        pub fn runAfterBothAsync_CompletionStage_Runnable_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "runAfterBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "runAfterBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyToEither](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#applyToEither(java.util.concurrent.CompletionStage,%20java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        pub fn applyToEither<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "applyToEither", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "applyToEither\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyToEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#applyToEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        pub fn applyToEitherAsync_CompletionStage_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "applyToEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "applyToEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyToEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#applyToEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Function,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Function")))]
        pub fn applyToEitherAsync_CompletionStage_Function_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "applyToEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "applyToEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acceptEither](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#acceptEither(java.util.concurrent.CompletionStage,%20java.util.function.Consumer))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        pub fn acceptEither<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "acceptEither", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "acceptEither\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acceptEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#acceptEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Consumer))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        pub fn acceptEitherAsync_CompletionStage_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "acceptEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "acceptEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acceptEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#acceptEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Consumer,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        pub fn acceptEitherAsync_CompletionStage_Consumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "acceptEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "acceptEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterEither](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#runAfterEither(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        pub fn runAfterEither<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "runAfterEither", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "runAfterEither\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#runAfterEitherAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        pub fn runAfterEitherAsync_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "runAfterEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "runAfterEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#runAfterEitherAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor")))]
        pub fn runAfterEitherAsync_CompletionStage_Runnable_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "runAfterEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "runAfterEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenCompose](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenCompose(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        pub fn thenCompose<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenCompose", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenCompose\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenComposeAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenComposeAsync(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        pub fn thenComposeAsync_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenComposeAsync", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenComposeAsync\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenComposeAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#thenComposeAsync(java.util.function.Function,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Function")))]
        pub fn thenComposeAsync_Function_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "thenComposeAsync", .descriptor == "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "thenComposeAsync\0", "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handle](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#handle(java.util.function.BiFunction))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        pub fn handle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "handle", .descriptor == "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "handle\0", "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handleAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#handleAsync(java.util.function.BiFunction))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        pub fn handleAsync_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "handleAsync", .descriptor == "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "handleAsync\0", "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handleAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#handleAsync(java.util.function.BiFunction,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiFunction")))]
        pub fn handleAsync_BiFunction_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "handleAsync", .descriptor == "(Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "handleAsync\0", "(Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [whenComplete](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#whenComplete(java.util.function.BiConsumer))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        pub fn whenComplete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "whenComplete", .descriptor == "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "whenComplete\0", "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [whenCompleteAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#whenCompleteAsync(java.util.function.BiConsumer))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        pub fn whenCompleteAsync_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "whenCompleteAsync", .descriptor == "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "whenCompleteAsync\0", "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [whenCompleteAsync](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#whenCompleteAsync(java.util.function.BiConsumer,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiConsumer")))]
        pub fn whenCompleteAsync_BiConsumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "whenCompleteAsync", .descriptor == "(Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "whenCompleteAsync\0", "(Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [exceptionally](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#exceptionally(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        pub fn exceptionally<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "exceptionally", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "exceptionally\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toCompletableFuture](https://developer.android.com/reference/java/util/concurrent/CompletionStage.html#toCompletableFuture())
        ///
        /// Required features: "java-util-concurrent-CompletableFuture"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture")))]
        pub fn toCompletableFuture<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletionStage", java.flags == PUBLIC | ABSTRACT, .name == "toCompletableFuture", .descriptor == "()Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletionStage\0", "toCompletableFuture\0", "()Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
