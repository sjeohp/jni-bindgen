// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-Executors"))]
__jni_bindgen! {
    /// public class [Executors](https://developer.android.com/reference/java/util/concurrent/Executors.html)
    ///
    /// Required feature: java-util-concurrent-Executors
    public class Executors ("java/util/concurrent/Executors") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Executors](https://developer.android.com/reference/java/util/concurrent/Executors.html#Executors())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::Executors>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/Executors", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/Executors\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newFixedThreadPool](https://developer.android.com/reference/java/util/concurrent/Executors.html#newFixedThreadPool(int))
        ///
        /// Required features: "java-util-concurrent-ExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ExecutorService")))]
        pub fn newFixedThreadPool_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newFixedThreadPool", .descriptor == "(I)Ljava/util/concurrent/ExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newFixedThreadPool\0", "(I)Ljava/util/concurrent/ExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newWorkStealingPool](https://developer.android.com/reference/java/util/concurrent/Executors.html#newWorkStealingPool(int))
        ///
        /// Required features: "java-util-concurrent-ExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ExecutorService")))]
        pub fn newWorkStealingPool_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newWorkStealingPool", .descriptor == "(I)Ljava/util/concurrent/ExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newWorkStealingPool\0", "(I)Ljava/util/concurrent/ExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newWorkStealingPool](https://developer.android.com/reference/java/util/concurrent/Executors.html#newWorkStealingPool())
        ///
        /// Required features: "java-util-concurrent-ExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ExecutorService")))]
        pub fn newWorkStealingPool<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newWorkStealingPool", .descriptor == "()Ljava/util/concurrent/ExecutorService;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newWorkStealingPool\0", "()Ljava/util/concurrent/ExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newFixedThreadPool](https://developer.android.com/reference/java/util/concurrent/Executors.html#newFixedThreadPool(int,%20java.util.concurrent.ThreadFactory))
        ///
        /// Required features: "java-util-concurrent-ExecutorService", "java-util-concurrent-ThreadFactory"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ExecutorService", feature = "java-util-concurrent-ThreadFactory")))]
        pub fn newFixedThreadPool_int_ThreadFactory<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ThreadFactory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newFixedThreadPool", .descriptor == "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newFixedThreadPool\0", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSingleThreadExecutor](https://developer.android.com/reference/java/util/concurrent/Executors.html#newSingleThreadExecutor())
        ///
        /// Required features: "java-util-concurrent-ExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ExecutorService")))]
        pub fn newSingleThreadExecutor<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newSingleThreadExecutor", .descriptor == "()Ljava/util/concurrent/ExecutorService;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newSingleThreadExecutor\0", "()Ljava/util/concurrent/ExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSingleThreadExecutor](https://developer.android.com/reference/java/util/concurrent/Executors.html#newSingleThreadExecutor(java.util.concurrent.ThreadFactory))
        ///
        /// Required features: "java-util-concurrent-ExecutorService", "java-util-concurrent-ThreadFactory"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ExecutorService", feature = "java-util-concurrent-ThreadFactory")))]
        pub fn newSingleThreadExecutor_ThreadFactory<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ThreadFactory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newSingleThreadExecutor", .descriptor == "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newSingleThreadExecutor\0", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newCachedThreadPool](https://developer.android.com/reference/java/util/concurrent/Executors.html#newCachedThreadPool())
        ///
        /// Required features: "java-util-concurrent-ExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ExecutorService")))]
        pub fn newCachedThreadPool<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newCachedThreadPool", .descriptor == "()Ljava/util/concurrent/ExecutorService;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newCachedThreadPool\0", "()Ljava/util/concurrent/ExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newCachedThreadPool](https://developer.android.com/reference/java/util/concurrent/Executors.html#newCachedThreadPool(java.util.concurrent.ThreadFactory))
        ///
        /// Required features: "java-util-concurrent-ExecutorService", "java-util-concurrent-ThreadFactory"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ExecutorService", feature = "java-util-concurrent-ThreadFactory")))]
        pub fn newCachedThreadPool_ThreadFactory<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ThreadFactory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newCachedThreadPool", .descriptor == "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newCachedThreadPool\0", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSingleThreadScheduledExecutor](https://developer.android.com/reference/java/util/concurrent/Executors.html#newSingleThreadScheduledExecutor())
        ///
        /// Required features: "java-util-concurrent-ScheduledExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ScheduledExecutorService")))]
        pub fn newSingleThreadScheduledExecutor<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ScheduledExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newSingleThreadScheduledExecutor", .descriptor == "()Ljava/util/concurrent/ScheduledExecutorService;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newSingleThreadScheduledExecutor\0", "()Ljava/util/concurrent/ScheduledExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSingleThreadScheduledExecutor](https://developer.android.com/reference/java/util/concurrent/Executors.html#newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory))
        ///
        /// Required features: "java-util-concurrent-ScheduledExecutorService", "java-util-concurrent-ThreadFactory"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ScheduledExecutorService", feature = "java-util-concurrent-ThreadFactory")))]
        pub fn newSingleThreadScheduledExecutor_ThreadFactory<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ThreadFactory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ScheduledExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newSingleThreadScheduledExecutor", .descriptor == "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newSingleThreadScheduledExecutor\0", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newScheduledThreadPool](https://developer.android.com/reference/java/util/concurrent/Executors.html#newScheduledThreadPool(int))
        ///
        /// Required features: "java-util-concurrent-ScheduledExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ScheduledExecutorService")))]
        pub fn newScheduledThreadPool_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ScheduledExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newScheduledThreadPool", .descriptor == "(I)Ljava/util/concurrent/ScheduledExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newScheduledThreadPool\0", "(I)Ljava/util/concurrent/ScheduledExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newScheduledThreadPool](https://developer.android.com/reference/java/util/concurrent/Executors.html#newScheduledThreadPool(int,%20java.util.concurrent.ThreadFactory))
        ///
        /// Required features: "java-util-concurrent-ScheduledExecutorService", "java-util-concurrent-ThreadFactory"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ScheduledExecutorService", feature = "java-util-concurrent-ThreadFactory")))]
        pub fn newScheduledThreadPool_int_ThreadFactory<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ThreadFactory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ScheduledExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "newScheduledThreadPool", .descriptor == "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "newScheduledThreadPool\0", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unconfigurableExecutorService](https://developer.android.com/reference/java/util/concurrent/Executors.html#unconfigurableExecutorService(java.util.concurrent.ExecutorService))
        ///
        /// Required features: "java-util-concurrent-ExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ExecutorService")))]
        pub fn unconfigurableExecutorService<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ExecutorService>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "unconfigurableExecutorService", .descriptor == "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "unconfigurableExecutorService\0", "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unconfigurableScheduledExecutorService](https://developer.android.com/reference/java/util/concurrent/Executors.html#unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService))
        ///
        /// Required features: "java-util-concurrent-ScheduledExecutorService"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ScheduledExecutorService")))]
        pub fn unconfigurableScheduledExecutorService<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ScheduledExecutorService>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ScheduledExecutorService>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "unconfigurableScheduledExecutorService", .descriptor == "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "unconfigurableScheduledExecutorService\0", "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [defaultThreadFactory](https://developer.android.com/reference/java/util/concurrent/Executors.html#defaultThreadFactory())
        ///
        /// Required features: "java-util-concurrent-ThreadFactory"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ThreadFactory")))]
        pub fn defaultThreadFactory<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ThreadFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "defaultThreadFactory", .descriptor == "()Ljava/util/concurrent/ThreadFactory;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "defaultThreadFactory\0", "()Ljava/util/concurrent/ThreadFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [privilegedThreadFactory](https://developer.android.com/reference/java/util/concurrent/Executors.html#privilegedThreadFactory())
        ///
        /// Required features: "java-util-concurrent-ThreadFactory"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ThreadFactory")))]
        pub fn privilegedThreadFactory<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ThreadFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "privilegedThreadFactory", .descriptor == "()Ljava/util/concurrent/ThreadFactory;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "privilegedThreadFactory\0", "()Ljava/util/concurrent/ThreadFactory;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callable](https://developer.android.com/reference/java/util/concurrent/Executors.html#callable(java.lang.Runnable,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-Runnable", "java-util-concurrent-Callable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-Runnable", feature = "java-util-concurrent-Callable")))]
        pub fn callable_Runnable_Object<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Callable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "callable", .descriptor == "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "callable\0", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callable](https://developer.android.com/reference/java/util/concurrent/Executors.html#callable(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-Callable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-Callable")))]
        pub fn callable_Runnable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Callable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "callable", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "callable\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callable](https://developer.android.com/reference/java/util/concurrent/Executors.html#callable(java.security.PrivilegedAction))
        ///
        /// Required features: "java-security-PrivilegedAction", "java-util-concurrent-Callable"
        #[cfg(any(feature = "all", all(feature = "java-security-PrivilegedAction", feature = "java-util-concurrent-Callable")))]
        pub fn callable_PrivilegedAction<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedAction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Callable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "callable", .descriptor == "(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "callable\0", "(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callable](https://developer.android.com/reference/java/util/concurrent/Executors.html#callable(java.security.PrivilegedExceptionAction))
        ///
        /// Required features: "java-security-PrivilegedExceptionAction", "java-util-concurrent-Callable"
        #[cfg(any(feature = "all", all(feature = "java-security-PrivilegedExceptionAction", feature = "java-util-concurrent-Callable")))]
        pub fn callable_PrivilegedExceptionAction<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivilegedExceptionAction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Callable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "callable", .descriptor == "(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "callable\0", "(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [privilegedCallable](https://developer.android.com/reference/java/util/concurrent/Executors.html#privilegedCallable(java.util.concurrent.Callable))
        ///
        /// Required features: "java-util-concurrent-Callable"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Callable")))]
        pub fn privilegedCallable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Callable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "privilegedCallable", .descriptor == "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "privilegedCallable\0", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [privilegedCallableUsingCurrentClassLoader](https://developer.android.com/reference/java/util/concurrent/Executors.html#privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable))
        ///
        /// Required features: "java-util-concurrent-Callable"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Callable")))]
        pub fn privilegedCallableUsingCurrentClassLoader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Callable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/Executors", java.flags == PUBLIC | STATIC, .name == "privilegedCallableUsingCurrentClassLoader", .descriptor == "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/Executors\0", "privilegedCallableUsingCurrentClassLoader\0", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
