// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-ForkJoinWorkerThread"))]
__jni_bindgen! {
    /// public class [ForkJoinWorkerThread](https://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html)
    ///
    /// Required feature: java-util-concurrent-ForkJoinWorkerThread
    public class ForkJoinWorkerThread ("java/util/concurrent/ForkJoinWorkerThread") extends crate::java::lang::Thread {

        // // Not emitting: Non-public method
        // /// [ForkJoinWorkerThread](https://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#ForkJoinWorkerThread(java.util.concurrent.ForkJoinPool))
        // ///
        // /// Required features: "java-util-concurrent-ForkJoinPool"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinPool")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ForkJoinPool>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinWorkerThread>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinWorkerThread", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljava/util/concurrent/ForkJoinPool;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinWorkerThread\0", "<init>\0", "(Ljava/util/concurrent/ForkJoinPool;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getPool](https://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#getPool())
        ///
        /// Required features: "java-util-concurrent-ForkJoinPool"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinPool")))]
        pub fn getPool<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinPool>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinWorkerThread", java.flags == PUBLIC, .name == "getPool", .descriptor == "()Ljava/util/concurrent/ForkJoinPool;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinWorkerThread\0", "getPool\0", "()Ljava/util/concurrent/ForkJoinPool;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPoolIndex](https://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#getPoolIndex())
        pub fn getPoolIndex<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinWorkerThread", java.flags == PUBLIC, .name == "getPoolIndex", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinWorkerThread\0", "getPoolIndex\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onStart](https://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#onStart())
        // fn onStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinWorkerThread", java.flags == PROTECTED, .name == "onStart", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinWorkerThread\0", "onStart\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onTermination](https://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#onTermination(java.lang.Throwable))
        // ///
        // /// Required features: "java-lang-Throwable"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Throwable")))]
        // fn onTermination<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Throwable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinWorkerThread", java.flags == PROTECTED, .name == "onTermination", .descriptor == "(Ljava/lang/Throwable;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinWorkerThread\0", "onTermination\0", "(Ljava/lang/Throwable;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [run](https://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#run())
        pub fn run<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinWorkerThread", java.flags == PUBLIC, .name == "run", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinWorkerThread\0", "run\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
