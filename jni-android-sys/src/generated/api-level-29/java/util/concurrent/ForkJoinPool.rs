// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-ForkJoinPool"))]
__jni_bindgen! {
    /// public class [ForkJoinPool](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html)
    ///
    /// Required feature: java-util-concurrent-ForkJoinPool
    public class ForkJoinPool ("java/util/concurrent/ForkJoinPool") extends crate::java::util::concurrent::AbstractExecutorService {

        /// [ForkJoinPool](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#ForkJoinPool())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinPool>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ForkJoinPool](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#ForkJoinPool(int))
        pub fn new_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinPool>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ForkJoinPool](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#ForkJoinPool(int,%20java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory,%20java.lang.Thread.UncaughtExceptionHandler,%20boolean))
        ///
        /// Required features: "java-lang-Thread_UncaughtExceptionHandler", "java-util-concurrent-ForkJoinPool_ForkJoinWorkerThreadFactory"
        #[cfg(any(feature = "all", all(feature = "java-lang-Thread_UncaughtExceptionHandler", feature = "java-util-concurrent-ForkJoinPool_ForkJoinWorkerThreadFactory")))]
        pub fn new_int_ForkJoinWorkerThreadFactory_UncaughtExceptionHandler_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Thread_UncaughtExceptionHandler>>, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinPool>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "<init>\0", "(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [commonPool](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#commonPool())
        ///
        /// Required features: "java-util-concurrent-ForkJoinPool"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinPool")))]
        pub fn commonPool<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinPool>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC | STATIC, .name == "commonPool", .descriptor == "()Ljava/util/concurrent/ForkJoinPool;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinPool\0", "commonPool\0", "()Ljava/util/concurrent/ForkJoinPool;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invoke](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#invoke(java.util.concurrent.ForkJoinTask))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn invoke<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ForkJoinTask>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "invoke", .descriptor == "(Ljava/util/concurrent/ForkJoinTask;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "invoke\0", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [execute](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#execute(java.util.concurrent.ForkJoinTask))
        ///
        /// Required features: "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn execute_ForkJoinTask<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ForkJoinTask>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "execute", .descriptor == "(Ljava/util/concurrent/ForkJoinTask;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "execute\0", "(Ljava/util/concurrent/ForkJoinTask;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [execute](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#execute(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn execute_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "execute", .descriptor == "(Ljava/lang/Runnable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "execute\0", "(Ljava/lang/Runnable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [submit](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#submit(java.util.concurrent.ForkJoinTask))
        ///
        /// Required features: "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn submit_ForkJoinTask<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ForkJoinTask>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "submit", .descriptor == "(Ljava/util/concurrent/ForkJoinTask;)Ljava/util/concurrent/ForkJoinTask;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "submit\0", "(Ljava/util/concurrent/ForkJoinTask;)Ljava/util/concurrent/ForkJoinTask;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [submit](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#submit(java.util.concurrent.Callable))
        ///
        /// Required features: "java-util-concurrent-Callable", "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Callable", feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn submit_Callable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "submit", .descriptor == "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "submit\0", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [submit](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#submit(java.lang.Runnable,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-Runnable", "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-Runnable", feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn submit_Runnable_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "submit", .descriptor == "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "submit\0", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [submit](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#submit(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn submit_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "submit", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "submit\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeAll](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#invokeAll(java.util.Collection))
        ///
        /// Required features: "java-util-Collection", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-List")))]
        pub fn invokeAll<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "invokeAll", .descriptor == "(Ljava/util/Collection;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "invokeAll\0", "(Ljava/util/Collection;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFactory](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getFactory())
        ///
        /// Required features: "java-util-concurrent-ForkJoinPool_ForkJoinWorkerThreadFactory"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinPool_ForkJoinWorkerThreadFactory")))]
        pub fn getFactory<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getFactory", .descriptor == "()Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getFactory\0", "()Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUncaughtExceptionHandler](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getUncaughtExceptionHandler())
        ///
        /// Required features: "java-lang-Thread_UncaughtExceptionHandler"
        #[cfg(any(feature = "all", all(feature = "java-lang-Thread_UncaughtExceptionHandler")))]
        pub fn getUncaughtExceptionHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Thread_UncaughtExceptionHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getUncaughtExceptionHandler", .descriptor == "()Ljava/lang/Thread$UncaughtExceptionHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getUncaughtExceptionHandler\0", "()Ljava/lang/Thread$UncaughtExceptionHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParallelism](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getParallelism())
        pub fn getParallelism<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getParallelism", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getParallelism\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCommonPoolParallelism](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getCommonPoolParallelism())
        pub fn getCommonPoolParallelism<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC | STATIC, .name == "getCommonPoolParallelism", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinPool\0", "getCommonPoolParallelism\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPoolSize](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getPoolSize())
        pub fn getPoolSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getPoolSize", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getPoolSize\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAsyncMode](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getAsyncMode())
        pub fn getAsyncMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getAsyncMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getAsyncMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunningThreadCount](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getRunningThreadCount())
        pub fn getRunningThreadCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getRunningThreadCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getRunningThreadCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveThreadCount](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getActiveThreadCount())
        pub fn getActiveThreadCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getActiveThreadCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getActiveThreadCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isQuiescent](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#isQuiescent())
        pub fn isQuiescent<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "isQuiescent", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "isQuiescent\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStealCount](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getStealCount())
        pub fn getStealCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getStealCount", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getStealCount\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQueuedTaskCount](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getQueuedTaskCount())
        pub fn getQueuedTaskCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getQueuedTaskCount", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getQueuedTaskCount\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQueuedSubmissionCount](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#getQueuedSubmissionCount())
        pub fn getQueuedSubmissionCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "getQueuedSubmissionCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "getQueuedSubmissionCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasQueuedSubmissions](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#hasQueuedSubmissions())
        pub fn hasQueuedSubmissions<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "hasQueuedSubmissions", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "hasQueuedSubmissions\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [pollSubmission](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#pollSubmission())
        // ///
        // /// Required features: "java-util-concurrent-ForkJoinTask"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinTask")))]
        // fn pollSubmission<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PROTECTED, .name == "pollSubmission", .descriptor == "()Ljava/util/concurrent/ForkJoinTask;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "pollSubmission\0", "()Ljava/util/concurrent/ForkJoinTask;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [drainTasksTo](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#drainTasksTo(java.util.Collection))
        // ///
        // /// Required features: "java-util-Collection"
        // #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        // fn drainTasksTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PROTECTED, .name == "drainTasksTo", .descriptor == "(Ljava/util/Collection;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "drainTasksTo\0", "(Ljava/util/Collection;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [toString](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shutdown](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#shutdown())
        pub fn shutdown<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "shutdown", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "shutdown\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shutdownNow](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#shutdownNow())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn shutdownNow<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "shutdownNow", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "shutdownNow\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTerminated](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#isTerminated())
        pub fn isTerminated<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "isTerminated", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "isTerminated\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTerminating](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#isTerminating())
        pub fn isTerminating<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "isTerminating", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "isTerminating\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isShutdown](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#isShutdown())
        pub fn isShutdown<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "isShutdown", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "isShutdown\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [awaitTermination](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#awaitTermination(long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-TimeUnit")))]
        pub fn awaitTermination<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "awaitTermination", .descriptor == "(JLjava/util/concurrent/TimeUnit;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "awaitTermination\0", "(JLjava/util/concurrent/TimeUnit;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [awaitQuiescence](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#awaitQuiescence(long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-TimeUnit")))]
        pub fn awaitQuiescence<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC, .name == "awaitQuiescence", .descriptor == "(JLjava/util/concurrent/TimeUnit;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "awaitQuiescence\0", "(JLjava/util/concurrent/TimeUnit;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [managedBlock](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker))
        ///
        /// Required features: "java-util-concurrent-ForkJoinPool_ManagedBlocker"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinPool_ManagedBlocker")))]
        pub fn managedBlock<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ForkJoinPool_ManagedBlocker>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC | STATIC, .name == "managedBlock", .descriptor == "(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinPool\0", "managedBlock\0", "(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [newTaskFor](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#newTaskFor(java.lang.Runnable,%20java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object", "java-lang-Runnable", "java-util-concurrent-RunnableFuture"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-Runnable", feature = "java-util-concurrent-RunnableFuture")))]
        // fn newTaskFor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::RunnableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PROTECTED, .name == "newTaskFor", .descriptor == "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "newTaskFor\0", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [newTaskFor](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#newTaskFor(java.util.concurrent.Callable))
        // ///
        // /// Required features: "java-util-concurrent-Callable", "java-util-concurrent-RunnableFuture"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Callable", feature = "java-util-concurrent-RunnableFuture")))]
        // fn newTaskFor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::RunnableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PROTECTED, .name == "newTaskFor", .descriptor == "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "newTaskFor\0", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [submit](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#submit(java.util.concurrent.Callable))
        // ///
        // /// Required features: "java-util-concurrent-Callable", "java-util-concurrent-Future"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Callable", feature = "java-util-concurrent-Future")))]
        // pub fn submit_Callable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "submit", .descriptor == "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "submit\0", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [submit](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#submit(java.lang.Runnable,%20java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object", "java-lang-Runnable", "java-util-concurrent-Future"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-Runnable", feature = "java-util-concurrent-Future")))]
        // pub fn submit_Runnable_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "submit", .descriptor == "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "submit\0", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [submit](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#submit(java.lang.Runnable))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-Future"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-Future")))]
        // pub fn submit_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinPool", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "submit", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinPool\0", "submit\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public static final [defaultForkJoinWorkerThreadFactory](https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html#defaultForkJoinWorkerThreadFactory)
        ///
        /// Required feature: java-util-concurrent-ForkJoinPool_ForkJoinWorkerThreadFactory
        #[cfg(any(feature = "all", feature = "java-util-concurrent-ForkJoinPool_ForkJoinWorkerThreadFactory"))]
        pub fn defaultForkJoinWorkerThreadFactory<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinPool_ForkJoinWorkerThreadFactory>> {
            unsafe {
                let (class, field) = env.require_class_static_field("java/util/concurrent/ForkJoinPool\0", "defaultForkJoinWorkerThreadFactory\0", "Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
