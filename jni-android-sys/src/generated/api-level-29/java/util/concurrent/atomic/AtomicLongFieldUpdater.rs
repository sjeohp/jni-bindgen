// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-atomic-AtomicLongFieldUpdater"))]
__jni_bindgen! {
    /// public class [AtomicLongFieldUpdater](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html)
    ///
    /// Required feature: java-util-concurrent-atomic-AtomicLongFieldUpdater
    public class AtomicLongFieldUpdater ("java/util/concurrent/atomic/AtomicLongFieldUpdater") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AtomicLongFieldUpdater](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#AtomicLongFieldUpdater())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::atomic::AtomicLongFieldUpdater>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newUpdater](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#newUpdater(java.lang.Class,%20java.lang.String))
        ///
        /// Required features: "java-lang-Class", "java-lang-String", "java-util-concurrent-atomic-AtomicLongFieldUpdater"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String", feature = "java-util-concurrent-atomic-AtomicLongFieldUpdater")))]
        pub fn newUpdater<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::atomic::AtomicLongFieldUpdater>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | STATIC, .name == "newUpdater", .descriptor == "(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "newUpdater\0", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareAndSet](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#compareAndSet(java.lang.Object,%20long,%20long))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn compareAndSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | ABSTRACT, .name == "compareAndSet", .descriptor == "(Ljava/lang/Object;JJ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "compareAndSet\0", "(Ljava/lang/Object;JJ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [weakCompareAndSet](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#weakCompareAndSet(java.lang.Object,%20long,%20long))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn weakCompareAndSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | ABSTRACT, .name == "weakCompareAndSet", .descriptor == "(Ljava/lang/Object;JJ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "weakCompareAndSet\0", "(Ljava/lang/Object;JJ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#set(java.lang.Object,%20long))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | ABSTRACT, .name == "set", .descriptor == "(Ljava/lang/Object;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "set\0", "(Ljava/lang/Object;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lazySet](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#lazySet(java.lang.Object,%20long))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn lazySet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | ABSTRACT, .name == "lazySet", .descriptor == "(Ljava/lang/Object;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "lazySet\0", "(Ljava/lang/Object;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#get(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn get<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | ABSTRACT, .name == "get", .descriptor == "(Ljava/lang/Object;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "get\0", "(Ljava/lang/Object;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAndSet](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndSet(java.lang.Object,%20long))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getAndSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC, .name == "getAndSet", .descriptor == "(Ljava/lang/Object;J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "getAndSet\0", "(Ljava/lang/Object;J)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAndIncrement](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndIncrement(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getAndIncrement<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC, .name == "getAndIncrement", .descriptor == "(Ljava/lang/Object;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "getAndIncrement\0", "(Ljava/lang/Object;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAndDecrement](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndDecrement(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getAndDecrement<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC, .name == "getAndDecrement", .descriptor == "(Ljava/lang/Object;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "getAndDecrement\0", "(Ljava/lang/Object;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAndAdd](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndAdd(java.lang.Object,%20long))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getAndAdd<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC, .name == "getAndAdd", .descriptor == "(Ljava/lang/Object;J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "getAndAdd\0", "(Ljava/lang/Object;J)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [incrementAndGet](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#incrementAndGet(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn incrementAndGet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC, .name == "incrementAndGet", .descriptor == "(Ljava/lang/Object;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "incrementAndGet\0", "(Ljava/lang/Object;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [decrementAndGet](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#decrementAndGet(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn decrementAndGet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC, .name == "decrementAndGet", .descriptor == "(Ljava/lang/Object;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "decrementAndGet\0", "(Ljava/lang/Object;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAndGet](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#addAndGet(java.lang.Object,%20long))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn addAndGet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC, .name == "addAndGet", .descriptor == "(Ljava/lang/Object;J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "addAndGet\0", "(Ljava/lang/Object;J)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAndUpdate](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndUpdate(java.lang.Object,%20java.util.function.LongUnaryOperator))
        ///
        /// Required features: "java-lang-Object", "java-util-function-LongUnaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-LongUnaryOperator")))]
        pub fn getAndUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::LongUnaryOperator>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | FINAL, .name == "getAndUpdate", .descriptor == "(Ljava/lang/Object;Ljava/util/function/LongUnaryOperator;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "getAndUpdate\0", "(Ljava/lang/Object;Ljava/util/function/LongUnaryOperator;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAndGet](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#updateAndGet(java.lang.Object,%20java.util.function.LongUnaryOperator))
        ///
        /// Required features: "java-lang-Object", "java-util-function-LongUnaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-LongUnaryOperator")))]
        pub fn updateAndGet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::LongUnaryOperator>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | FINAL, .name == "updateAndGet", .descriptor == "(Ljava/lang/Object;Ljava/util/function/LongUnaryOperator;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "updateAndGet\0", "(Ljava/lang/Object;Ljava/util/function/LongUnaryOperator;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAndAccumulate](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndAccumulate(java.lang.Object,%20long,%20java.util.function.LongBinaryOperator))
        ///
        /// Required features: "java-lang-Object", "java-util-function-LongBinaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-LongBinaryOperator")))]
        pub fn getAndAccumulate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::LongBinaryOperator>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | FINAL, .name == "getAndAccumulate", .descriptor == "(Ljava/lang/Object;JLjava/util/function/LongBinaryOperator;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "getAndAccumulate\0", "(Ljava/lang/Object;JLjava/util/function/LongBinaryOperator;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [accumulateAndGet](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#accumulateAndGet(java.lang.Object,%20long,%20java.util.function.LongBinaryOperator))
        ///
        /// Required features: "java-lang-Object", "java-util-function-LongBinaryOperator"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-function-LongBinaryOperator")))]
        pub fn accumulateAndGet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::LongBinaryOperator>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/atomic/AtomicLongFieldUpdater", java.flags == PUBLIC | FINAL, .name == "accumulateAndGet", .descriptor == "(Ljava/lang/Object;JLjava/util/function/LongBinaryOperator;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/atomic/AtomicLongFieldUpdater\0", "accumulateAndGet\0", "(Ljava/lang/Object;JLjava/util/function/LongBinaryOperator;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
