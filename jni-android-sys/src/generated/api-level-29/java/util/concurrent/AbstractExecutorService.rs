// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-AbstractExecutorService"))]
__jni_bindgen! {
    /// public class [AbstractExecutorService](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html)
    ///
    /// Required feature: java-util-concurrent-AbstractExecutorService
    public class AbstractExecutorService ("java/util/concurrent/AbstractExecutorService") extends crate::java::lang::Object, implements crate::java::util::concurrent::ExecutorService {

        /// [AbstractExecutorService](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#AbstractExecutorService())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::AbstractExecutorService>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [newTaskFor](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#newTaskFor(java.lang.Runnable,%20java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object", "java-lang-Runnable", "java-util-concurrent-RunnableFuture"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-Runnable", feature = "java-util-concurrent-RunnableFuture")))]
        // fn newTaskFor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::RunnableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PROTECTED, .name == "newTaskFor", .descriptor == "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "newTaskFor\0", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [newTaskFor](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#newTaskFor(java.util.concurrent.Callable))
        // ///
        // /// Required features: "java-util-concurrent-Callable", "java-util-concurrent-RunnableFuture"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Callable", feature = "java-util-concurrent-RunnableFuture")))]
        // fn newTaskFor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::RunnableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PROTECTED, .name == "newTaskFor", .descriptor == "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "newTaskFor\0", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [submit](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#submit(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-Future")))]
        pub fn submit_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PUBLIC, .name == "submit", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "submit\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [submit](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#submit(java.lang.Runnable,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-Runnable", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-Runnable", feature = "java-util-concurrent-Future")))]
        pub fn submit_Runnable_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PUBLIC, .name == "submit", .descriptor == "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "submit\0", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [submit](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#submit(java.util.concurrent.Callable))
        ///
        /// Required features: "java-util-concurrent-Callable", "java-util-concurrent-Future"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Callable", feature = "java-util-concurrent-Future")))]
        pub fn submit_Callable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Future>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PUBLIC, .name == "submit", .descriptor == "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "submit\0", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeAny](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#invokeAny(java.util.Collection))
        ///
        /// Required features: "java-lang-Object", "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-Collection")))]
        pub fn invokeAny_Collection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PUBLIC, .name == "invokeAny", .descriptor == "(Ljava/util/Collection;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "invokeAny\0", "(Ljava/util/Collection;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeAny](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#invokeAny(java.util.Collection,%20long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-lang-Object", "java-util-Collection", "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-Collection", feature = "java-util-concurrent-TimeUnit")))]
        pub fn invokeAny_Collection_long_TimeUnit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PUBLIC, .name == "invokeAny", .descriptor == "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "invokeAny\0", "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeAll](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#invokeAll(java.util.Collection))
        ///
        /// Required features: "java-util-Collection", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-List")))]
        pub fn invokeAll_Collection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PUBLIC, .name == "invokeAll", .descriptor == "(Ljava/util/Collection;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "invokeAll\0", "(Ljava/util/Collection;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeAll](https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html#invokeAll(java.util.Collection,%20long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-util-Collection", "java-util-List", "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection", feature = "java-util-List", feature = "java-util-concurrent-TimeUnit")))]
        pub fn invokeAll_Collection_long_TimeUnit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/AbstractExecutorService", java.flags == PUBLIC, .name == "invokeAll", .descriptor == "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/AbstractExecutorService\0", "invokeAll\0", "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
