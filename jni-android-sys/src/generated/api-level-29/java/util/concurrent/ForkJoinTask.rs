// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-ForkJoinTask"))]
__jni_bindgen! {
    /// public class [ForkJoinTask](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html)
    ///
    /// Required feature: java-util-concurrent-ForkJoinTask
    public class ForkJoinTask ("java/util/concurrent/ForkJoinTask") extends crate::java::lang::Object, implements crate::java::util::concurrent::Future, crate::java::io::Serializable {

        /// [ForkJoinTask](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#ForkJoinTask())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fork](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#fork())
        ///
        /// Required features: "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn fork<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "fork", .descriptor == "()Ljava/util/concurrent/ForkJoinTask;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "fork\0", "()Ljava/util/concurrent/ForkJoinTask;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [join](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#join())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn join<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "join", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "join\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invoke](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#invoke())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn invoke<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "invoke", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "invoke\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeAll](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#invokeAll(java.util.concurrent.ForkJoinTask,%20java.util.concurrent.ForkJoinTask))
        ///
        /// Required features: "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn invokeAll_ForkJoinTask_ForkJoinTask<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ForkJoinTask>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::ForkJoinTask>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "invokeAll", .descriptor == "(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinTask;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "invokeAll\0", "(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinTask;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeAll](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#invokeAll(java.util.concurrent.ForkJoinTask...))
        ///
        /// Required features: "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn invokeAll_ForkJoinTask_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::util::concurrent::ForkJoinTask, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC | VARARGS, .name == "invokeAll", .descriptor == "([Ljava/util/concurrent/ForkJoinTask;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "invokeAll\0", "([Ljava/util/concurrent/ForkJoinTask;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeAll](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#invokeAll(java.util.Collection))
        ///
        /// Required features: "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        pub fn invokeAll_Collection<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "invokeAll", .descriptor == "(Ljava/util/Collection;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "invokeAll\0", "(Ljava/util/Collection;)Ljava/util/Collection;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancel](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#cancel(boolean))
        pub fn cancel<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC, .name == "cancel", .descriptor == "(Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "cancel\0", "(Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDone](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#isDone())
        pub fn isDone<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "isDone", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "isDone\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCancelled](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#isCancelled())
        pub fn isCancelled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "isCancelled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "isCancelled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCompletedAbnormally](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#isCompletedAbnormally())
        pub fn isCompletedAbnormally<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "isCompletedAbnormally", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "isCompletedAbnormally\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCompletedNormally](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#isCompletedNormally())
        pub fn isCompletedNormally<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "isCompletedNormally", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "isCompletedNormally\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getException](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getException())
        ///
        /// Required features: "java-lang-Throwable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Throwable")))]
        pub fn getException<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Throwable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "getException", .descriptor == "()Ljava/lang/Throwable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "getException\0", "()Ljava/lang/Throwable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [completeExceptionally](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#completeExceptionally(java.lang.Throwable))
        ///
        /// Required features: "java-lang-Throwable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Throwable")))]
        pub fn completeExceptionally<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Throwable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC, .name == "completeExceptionally", .descriptor == "(Ljava/lang/Throwable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "completeExceptionally\0", "(Ljava/lang/Throwable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [complete](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#complete(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn complete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC, .name == "complete", .descriptor == "(Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "complete\0", "(Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [quietlyComplete](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#quietlyComplete())
        pub fn quietlyComplete<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "quietlyComplete", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "quietlyComplete\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#get())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn get<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "get", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "get\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#get(long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-TimeUnit")))]
        pub fn get_long_TimeUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "get", .descriptor == "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "get\0", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [quietlyJoin](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#quietlyJoin())
        pub fn quietlyJoin<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "quietlyJoin", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "quietlyJoin\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [quietlyInvoke](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#quietlyInvoke())
        pub fn quietlyInvoke<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "quietlyInvoke", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "quietlyInvoke\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [helpQuiesce](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#helpQuiesce())
        pub fn helpQuiesce<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "helpQuiesce", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "helpQuiesce\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reinitialize](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#reinitialize())
        pub fn reinitialize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC, .name == "reinitialize", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "reinitialize\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPool](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getPool())
        ///
        /// Required features: "java-util-concurrent-ForkJoinPool"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinPool")))]
        pub fn getPool<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinPool>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "getPool", .descriptor == "()Ljava/util/concurrent/ForkJoinPool;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "getPool\0", "()Ljava/util/concurrent/ForkJoinPool;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [inForkJoinPool](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#inForkJoinPool())
        pub fn inForkJoinPool<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "inForkJoinPool", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "inForkJoinPool\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [tryUnfork](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#tryUnfork())
        pub fn tryUnfork<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC, .name == "tryUnfork", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "tryUnfork\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQueuedTaskCount](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getQueuedTaskCount())
        pub fn getQueuedTaskCount<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "getQueuedTaskCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "getQueuedTaskCount\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSurplusQueuedTaskCount](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getSurplusQueuedTaskCount())
        pub fn getSurplusQueuedTaskCount<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "getSurplusQueuedTaskCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "getSurplusQueuedTaskCount\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRawResult](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getRawResult())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getRawResult<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | ABSTRACT, .name == "getRawResult", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "getRawResult\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [setRawResult](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#setRawResult(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // fn setRawResult<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PROTECTED | ABSTRACT, .name == "setRawResult", .descriptor == "(Ljava/lang/Object;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "setRawResult\0", "(Ljava/lang/Object;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [exec](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#exec())
        // fn exec<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PROTECTED | ABSTRACT, .name == "exec", .descriptor == "()Z"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "exec\0", "()Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [peekNextLocalTask](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#peekNextLocalTask())
        // ///
        // /// Required features: "java-util-concurrent-ForkJoinTask"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinTask")))]
        // fn peekNextLocalTask<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PROTECTED | STATIC, .name == "peekNextLocalTask", .descriptor == "()Ljava/util/concurrent/ForkJoinTask;"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "peekNextLocalTask\0", "()Ljava/util/concurrent/ForkJoinTask;\0");
        //         __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [pollNextLocalTask](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#pollNextLocalTask())
        // ///
        // /// Required features: "java-util-concurrent-ForkJoinTask"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinTask")))]
        // fn pollNextLocalTask<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PROTECTED | STATIC, .name == "pollNextLocalTask", .descriptor == "()Ljava/util/concurrent/ForkJoinTask;"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "pollNextLocalTask\0", "()Ljava/util/concurrent/ForkJoinTask;\0");
        //         __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [pollTask](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#pollTask())
        // ///
        // /// Required features: "java-util-concurrent-ForkJoinTask"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-ForkJoinTask")))]
        // fn pollTask<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PROTECTED | STATIC, .name == "pollTask", .descriptor == "()Ljava/util/concurrent/ForkJoinTask;"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "pollTask\0", "()Ljava/util/concurrent/ForkJoinTask;\0");
        //         __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getForkJoinTaskTag](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getForkJoinTaskTag())
        pub fn getForkJoinTaskTag<'env>(&'env self) -> __jni_bindgen::std::result::Result<i16, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "getForkJoinTaskTag", .descriptor == "()S"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "getForkJoinTaskTag\0", "()S\0");
                __jni_env.call_short_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setForkJoinTaskTag](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#setForkJoinTaskTag(short))
        pub fn setForkJoinTaskTag<'env>(&'env self, arg0: i16) -> __jni_bindgen::std::result::Result<i16, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "setForkJoinTaskTag", .descriptor == "(S)S"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "setForkJoinTaskTag\0", "(S)S\0");
                __jni_env.call_short_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareAndSetForkJoinTaskTag](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#compareAndSetForkJoinTaskTag(short,%20short))
        pub fn compareAndSetForkJoinTaskTag<'env>(&'env self, arg0: i16, arg1: i16) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | FINAL, .name == "compareAndSetForkJoinTaskTag", .descriptor == "(SS)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/ForkJoinTask\0", "compareAndSetForkJoinTaskTag\0", "(SS)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adapt](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#adapt(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn adapt_Runnable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "adapt", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "adapt\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adapt](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#adapt(java.lang.Runnable,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-Runnable", "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-Runnable", feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn adapt_Runnable_Object<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "adapt", .descriptor == "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "adapt\0", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adapt](https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#adapt(java.util.concurrent.Callable))
        ///
        /// Required features: "java-util-concurrent-Callable", "java-util-concurrent-ForkJoinTask"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Callable", feature = "java-util-concurrent-ForkJoinTask")))]
        pub fn adapt_Callable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Callable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::ForkJoinTask>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/ForkJoinTask", java.flags == PUBLIC | STATIC, .name == "adapt", .descriptor == "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/ForkJoinTask\0", "adapt\0", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
