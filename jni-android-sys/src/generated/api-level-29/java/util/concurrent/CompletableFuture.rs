// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-concurrent-CompletableFuture"))]
__jni_bindgen! {
    /// public class [CompletableFuture](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html)
    ///
    /// Required feature: java-util-concurrent-CompletableFuture
    public class CompletableFuture ("java/util/concurrent/CompletableFuture") extends crate::java::lang::Object, implements crate::java::util::concurrent::Future, crate::java::util::concurrent::CompletionStage {

        /// [CompletableFuture](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#CompletableFuture())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [supplyAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#supplyAsync(java.util.function.Supplier))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-Supplier"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-Supplier")))]
        pub fn supplyAsync_Supplier<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Supplier>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | STATIC, .name == "supplyAsync", .descriptor == "(Ljava/util/function/Supplier;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/CompletableFuture\0", "supplyAsync\0", "(Ljava/util/function/Supplier;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [supplyAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#supplyAsync(java.util.function.Supplier,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-Executor", "java-util-function-Supplier"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-Executor", feature = "java-util-function-Supplier")))]
        pub fn supplyAsync_Supplier_Executor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Supplier>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | STATIC, .name == "supplyAsync", .descriptor == "(Ljava/util/function/Supplier;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/CompletableFuture\0", "supplyAsync\0", "(Ljava/util/function/Supplier;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAsync(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture")))]
        pub fn runAsync_Runnable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | STATIC, .name == "runAsync", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/CompletableFuture\0", "runAsync\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAsync(java.lang.Runnable,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-Executor")))]
        pub fn runAsync_Runnable_Executor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | STATIC, .name == "runAsync", .descriptor == "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/CompletableFuture\0", "runAsync\0", "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [completedFuture](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#completedFuture(java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-CompletableFuture"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-CompletableFuture")))]
        pub fn completedFuture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | STATIC, .name == "completedFuture", .descriptor == "(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/CompletableFuture\0", "completedFuture\0", "(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDone](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#isDone())
        pub fn isDone<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "isDone", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "isDone\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#get())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn get<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "get", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "get\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#get(long,%20java.util.concurrent.TimeUnit))
        ///
        /// Required features: "java-lang-Object", "java-util-concurrent-TimeUnit"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-concurrent-TimeUnit")))]
        pub fn get_long_TimeUnit<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::TimeUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "get", .descriptor == "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "get\0", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [join](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#join())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn join<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "join", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "join\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNow](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#getNow(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getNow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "getNow", .descriptor == "(Ljava/lang/Object;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "getNow\0", "(Ljava/lang/Object;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [complete](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#complete(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn complete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "complete", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "complete\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [completeExceptionally](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#completeExceptionally(java.lang.Throwable))
        ///
        /// Required features: "java-lang-Throwable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Throwable")))]
        pub fn completeExceptionally<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Throwable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "completeExceptionally", .descriptor == "(Ljava/lang/Throwable;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "completeExceptionally\0", "(Ljava/lang/Throwable;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenApply](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenApply(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-Function")))]
        pub fn thenApply_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenApply", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenApply\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenApplyAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenApplyAsync(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-Function")))]
        pub fn thenApplyAsync_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenApplyAsync", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenApplyAsync\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenApplyAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenApplyAsync(java.util.function.Function,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-Executor", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-Executor", feature = "java-util-function-Function")))]
        pub fn thenApplyAsync_Function_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenApplyAsync", .descriptor == "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenApplyAsync\0", "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAccept](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAccept(java.util.function.Consumer))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-Consumer")))]
        pub fn thenAccept_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenAccept", .descriptor == "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAccept\0", "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptAsync(java.util.function.Consumer))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-Consumer")))]
        pub fn thenAcceptAsync_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenAcceptAsync", .descriptor == "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptAsync\0", "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptAsync(java.util.function.Consumer,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-Executor", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        pub fn thenAcceptAsync_Consumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenAcceptAsync", .descriptor == "(Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptAsync\0", "(Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenRun](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenRun(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture")))]
        pub fn thenRun_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenRun", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenRun\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenRunAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenRunAsync(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture")))]
        pub fn thenRunAsync_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenRunAsync", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenRunAsync\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenRunAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenRunAsync(java.lang.Runnable,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-Executor")))]
        pub fn thenRunAsync_Runnable_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenRunAsync", .descriptor == "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenRunAsync\0", "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenCombine](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenCombine(java.util.concurrent.CompletionStage,%20java.util.function.BiFunction))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        pub fn thenCombine_CompletionStage_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenCombine", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenCombine\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenCombineAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenCombineAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiFunction))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        pub fn thenCombineAsync_CompletionStage_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenCombineAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenCombineAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenCombineAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenCombineAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiFunction,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiFunction")))]
        pub fn thenCombineAsync_CompletionStage_BiFunction_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenCombineAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenCombineAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptBoth](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptBoth(java.util.concurrent.CompletionStage,%20java.util.function.BiConsumer))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        pub fn thenAcceptBoth_CompletionStage_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenAcceptBoth", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptBoth\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptBothAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiConsumer))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        pub fn thenAcceptBothAsync_CompletionStage_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenAcceptBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenAcceptBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptBothAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiConsumer,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiConsumer")))]
        pub fn thenAcceptBothAsync_CompletionStage_BiConsumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenAcceptBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterBoth](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterBoth(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage")))]
        pub fn runAfterBoth_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "runAfterBoth", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterBoth\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterBothAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage")))]
        pub fn runAfterBothAsync_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "runAfterBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterBothAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor")))]
        pub fn runAfterBothAsync_CompletionStage_Runnable_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "runAfterBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyToEither](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#applyToEither(java.util.concurrent.CompletionStage,%20java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        pub fn applyToEither_CompletionStage_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "applyToEither", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "applyToEither\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyToEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#applyToEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        pub fn applyToEitherAsync_CompletionStage_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "applyToEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "applyToEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyToEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#applyToEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Function,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Function")))]
        pub fn applyToEitherAsync_CompletionStage_Function_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "applyToEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "applyToEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acceptEither](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#acceptEither(java.util.concurrent.CompletionStage,%20java.util.function.Consumer))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        pub fn acceptEither_CompletionStage_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "acceptEither", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "acceptEither\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acceptEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#acceptEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Consumer))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        pub fn acceptEitherAsync_CompletionStage_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "acceptEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "acceptEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acceptEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#acceptEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Consumer,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        pub fn acceptEitherAsync_CompletionStage_Consumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "acceptEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "acceptEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterEither](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterEither(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage")))]
        pub fn runAfterEither_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "runAfterEither", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterEither\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterEitherAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage")))]
        pub fn runAfterEitherAsync_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "runAfterEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runAfterEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterEitherAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletableFuture", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor")))]
        pub fn runAfterEitherAsync_CompletionStage_Runnable_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "runAfterEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenCompose](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenCompose(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-Function")))]
        pub fn thenCompose_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenCompose", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenCompose\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenComposeAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenComposeAsync(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-Function")))]
        pub fn thenComposeAsync_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenComposeAsync", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenComposeAsync\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [thenComposeAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenComposeAsync(java.util.function.Function,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-Executor", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-Executor", feature = "java-util-function-Function")))]
        pub fn thenComposeAsync_Function_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "thenComposeAsync", .descriptor == "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenComposeAsync\0", "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [whenComplete](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#whenComplete(java.util.function.BiConsumer))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-BiConsumer")))]
        pub fn whenComplete_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "whenComplete", .descriptor == "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "whenComplete\0", "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [whenCompleteAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#whenCompleteAsync(java.util.function.BiConsumer))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-BiConsumer")))]
        pub fn whenCompleteAsync_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "whenCompleteAsync", .descriptor == "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "whenCompleteAsync\0", "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [whenCompleteAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#whenCompleteAsync(java.util.function.BiConsumer,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-Executor", "java-util-function-BiConsumer"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiConsumer")))]
        pub fn whenCompleteAsync_BiConsumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "whenCompleteAsync", .descriptor == "(Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "whenCompleteAsync\0", "(Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handle](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#handle(java.util.function.BiFunction))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-BiFunction")))]
        pub fn handle_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "handle", .descriptor == "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "handle\0", "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handleAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#handleAsync(java.util.function.BiFunction))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-BiFunction")))]
        pub fn handleAsync_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "handleAsync", .descriptor == "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "handleAsync\0", "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handleAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#handleAsync(java.util.function.BiFunction,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-concurrent-Executor", "java-util-function-BiFunction"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiFunction")))]
        pub fn handleAsync_BiFunction_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "handleAsync", .descriptor == "(Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "handleAsync\0", "(Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toCompletableFuture](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#toCompletableFuture())
        ///
        /// Required features: "java-util-concurrent-CompletableFuture"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture")))]
        pub fn toCompletableFuture<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "toCompletableFuture", .descriptor == "()Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "toCompletableFuture\0", "()Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [exceptionally](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#exceptionally(java.util.function.Function))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture", "java-util-function-Function"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture", feature = "java-util-function-Function")))]
        pub fn exceptionally_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "exceptionally", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "exceptionally\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allOf](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#allOf(java.util.concurrent.CompletableFuture...))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture")))]
        pub fn allOf<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::util::concurrent::CompletableFuture, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | STATIC | VARARGS, .name == "allOf", .descriptor == "([Ljava/util/concurrent/CompletableFuture;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/CompletableFuture\0", "allOf\0", "([Ljava/util/concurrent/CompletableFuture;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [anyOf](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#anyOf(java.util.concurrent.CompletableFuture...))
        ///
        /// Required features: "java-util-concurrent-CompletableFuture"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletableFuture")))]
        pub fn anyOf<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::util::concurrent::CompletableFuture, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletableFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | STATIC | VARARGS, .name == "anyOf", .descriptor == "([Ljava/util/concurrent/CompletableFuture;)Ljava/util/concurrent/CompletableFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/util/concurrent/CompletableFuture\0", "anyOf\0", "([Ljava/util/concurrent/CompletableFuture;)Ljava/util/concurrent/CompletableFuture;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancel](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#cancel(boolean))
        pub fn cancel<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "cancel", .descriptor == "(Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "cancel\0", "(Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCancelled](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#isCancelled())
        pub fn isCancelled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "isCancelled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "isCancelled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCompletedExceptionally](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#isCompletedExceptionally())
        pub fn isCompletedExceptionally<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "isCompletedExceptionally", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "isCompletedExceptionally\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtrudeValue](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#obtrudeValue(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn obtrudeValue<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "obtrudeValue", .descriptor == "(Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "obtrudeValue\0", "(Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtrudeException](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#obtrudeException(java.lang.Throwable))
        ///
        /// Required features: "java-lang-Throwable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Throwable")))]
        pub fn obtrudeException<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Throwable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "obtrudeException", .descriptor == "(Ljava/lang/Throwable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "obtrudeException\0", "(Ljava/lang/Throwable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumberOfDependents](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#getNumberOfDependents())
        pub fn getNumberOfDependents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "getNumberOfDependents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "getNumberOfDependents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [exceptionally](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#exceptionally(java.util.function.Function))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        // pub fn exceptionally_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "exceptionally", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "exceptionally\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [whenCompleteAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#whenCompleteAsync(java.util.function.BiConsumer,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiConsumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiConsumer")))]
        // pub fn whenCompleteAsync_BiConsumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "whenCompleteAsync", .descriptor == "(Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "whenCompleteAsync\0", "(Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [whenCompleteAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#whenCompleteAsync(java.util.function.BiConsumer))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        // pub fn whenCompleteAsync_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "whenCompleteAsync", .descriptor == "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "whenCompleteAsync\0", "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [whenComplete](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#whenComplete(java.util.function.BiConsumer))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        // pub fn whenComplete_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "whenComplete", .descriptor == "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "whenComplete\0", "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [handleAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#handleAsync(java.util.function.BiFunction,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiFunction"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiFunction")))]
        // pub fn handleAsync_BiFunction_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "handleAsync", .descriptor == "(Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "handleAsync\0", "(Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [handleAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#handleAsync(java.util.function.BiFunction))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        // pub fn handleAsync_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "handleAsync", .descriptor == "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "handleAsync\0", "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [handle](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#handle(java.util.function.BiFunction))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        // pub fn handle_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "handle", .descriptor == "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "handle\0", "(Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenComposeAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenComposeAsync(java.util.function.Function,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Function")))]
        // pub fn thenComposeAsync_Function_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenComposeAsync", .descriptor == "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenComposeAsync\0", "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenComposeAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenComposeAsync(java.util.function.Function))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        // pub fn thenComposeAsync_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenComposeAsync", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenComposeAsync\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenCompose](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenCompose(java.util.function.Function))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        // pub fn thenCompose_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenCompose", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenCompose\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [runAfterEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterEitherAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor")))]
        // pub fn runAfterEitherAsync_CompletionStage_Runnable_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "runAfterEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [runAfterEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterEitherAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        // pub fn runAfterEitherAsync_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "runAfterEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [runAfterEither](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterEither(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        // pub fn runAfterEither_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "runAfterEither", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterEither\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [acceptEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#acceptEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Consumer,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Consumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        // pub fn acceptEitherAsync_CompletionStage_Consumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "acceptEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "acceptEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [acceptEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#acceptEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Consumer))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        // pub fn acceptEitherAsync_CompletionStage_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "acceptEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "acceptEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [acceptEither](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#acceptEither(java.util.concurrent.CompletionStage,%20java.util.function.Consumer))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        // pub fn acceptEither_CompletionStage_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "acceptEither", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "acceptEither\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [applyToEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#applyToEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Function,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Function")))]
        // pub fn applyToEitherAsync_CompletionStage_Function_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "applyToEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "applyToEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [applyToEitherAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#applyToEitherAsync(java.util.concurrent.CompletionStage,%20java.util.function.Function))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        // pub fn applyToEitherAsync_CompletionStage_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "applyToEitherAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "applyToEitherAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [applyToEither](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#applyToEither(java.util.concurrent.CompletionStage,%20java.util.function.Function))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        // pub fn applyToEither_CompletionStage_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "applyToEither", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "applyToEither\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [runAfterBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterBothAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor")))]
        // pub fn runAfterBothAsync_CompletionStage_Runnable_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "runAfterBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [runAfterBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterBothAsync(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        // pub fn runAfterBothAsync_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "runAfterBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [runAfterBoth](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#runAfterBoth(java.util.concurrent.CompletionStage,%20java.lang.Runnable))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        // pub fn runAfterBoth_CompletionStage_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "runAfterBoth", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "runAfterBoth\0", "(Ljava/util/concurrent/CompletionStage;Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenAcceptBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptBothAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiConsumer,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiConsumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiConsumer")))]
        // pub fn thenAcceptBothAsync_CompletionStage_BiConsumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenAcceptBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenAcceptBothAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptBothAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiConsumer))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        // pub fn thenAcceptBothAsync_CompletionStage_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenAcceptBothAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptBothAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenAcceptBoth](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptBoth(java.util.concurrent.CompletionStage,%20java.util.function.BiConsumer))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiConsumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiConsumer")))]
        // pub fn thenAcceptBoth_CompletionStage_BiConsumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiConsumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenAcceptBoth", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptBoth\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenCombineAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenCombineAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiFunction,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-BiFunction"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-BiFunction")))]
        // pub fn thenCombineAsync_CompletionStage_BiFunction_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenCombineAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenCombineAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenCombineAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenCombineAsync(java.util.concurrent.CompletionStage,%20java.util.function.BiFunction))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        // pub fn thenCombineAsync_CompletionStage_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenCombineAsync", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenCombineAsync\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenCombine](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenCombine(java.util.concurrent.CompletionStage,%20java.util.function.BiFunction))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-BiFunction"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-BiFunction")))]
        // pub fn thenCombine_CompletionStage_BiFunction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::CompletionStage>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::BiFunction>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenCombine", .descriptor == "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenCombine\0", "(Ljava/util/concurrent/CompletionStage;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenRunAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenRunAsync(java.lang.Runnable,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor")))]
        // pub fn thenRunAsync_Runnable_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenRunAsync", .descriptor == "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenRunAsync\0", "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenRunAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenRunAsync(java.lang.Runnable))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        // pub fn thenRunAsync_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenRunAsync", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenRunAsync\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenRun](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenRun(java.lang.Runnable))
        // ///
        // /// Required features: "java-lang-Runnable", "java-util-concurrent-CompletionStage"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Runnable", feature = "java-util-concurrent-CompletionStage")))]
        // pub fn thenRun_Runnable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenRun", .descriptor == "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenRun\0", "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenAcceptAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptAsync(java.util.function.Consumer,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Consumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        // pub fn thenAcceptAsync_Consumer_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenAcceptAsync", .descriptor == "(Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptAsync\0", "(Ljava/util/function/Consumer;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenAcceptAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAcceptAsync(java.util.function.Consumer))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        // pub fn thenAcceptAsync_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenAcceptAsync", .descriptor == "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAcceptAsync\0", "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenAccept](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenAccept(java.util.function.Consumer))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Consumer"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Consumer")))]
        // pub fn thenAccept_Consumer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenAccept", .descriptor == "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenAccept\0", "(Ljava/util/function/Consumer;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenApplyAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenApplyAsync(java.util.function.Function,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-concurrent-Executor", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-concurrent-Executor", feature = "java-util-function-Function")))]
        // pub fn thenApplyAsync_Function_Executor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenApplyAsync", .descriptor == "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenApplyAsync\0", "(Ljava/util/function/Function;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenApplyAsync](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenApplyAsync(java.util.function.Function))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        // pub fn thenApplyAsync_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenApplyAsync", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenApplyAsync\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [thenApply](https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html#thenApply(java.util.function.Function))
        // ///
        // /// Required features: "java-util-concurrent-CompletionStage", "java-util-function-Function"
        // #[cfg(any(feature = "all", all(feature = "java-util-concurrent-CompletionStage", feature = "java-util-function-Function")))]
        // pub fn thenApply_Function<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Function>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::CompletionStage>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/concurrent/CompletableFuture", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "thenApply", .descriptor == "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/concurrent/CompletableFuture\0", "thenApply\0", "(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
