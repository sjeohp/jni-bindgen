// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-SplittableRandom"))]
__jni_bindgen! {
    /// public final class [SplittableRandom](https://developer.android.com/reference/java/util/SplittableRandom.html)
    ///
    /// Required feature: java-util-SplittableRandom
    public final class SplittableRandom ("java/util/SplittableRandom") extends crate::java::lang::Object {

        /// [SplittableRandom](https://developer.android.com/reference/java/util/SplittableRandom.html#SplittableRandom(long))
        pub fn new_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::SplittableRandom>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "<init>", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "<init>\0", "(J)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SplittableRandom](https://developer.android.com/reference/java/util/SplittableRandom.html#SplittableRandom())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::SplittableRandom>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [split](https://developer.android.com/reference/java/util/SplittableRandom.html#split())
        ///
        /// Required features: "java-util-SplittableRandom"
        #[cfg(any(feature = "all", all(feature = "java-util-SplittableRandom")))]
        pub fn split<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::SplittableRandom>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "split", .descriptor == "()Ljava/util/SplittableRandom;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "split\0", "()Ljava/util/SplittableRandom;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextInt](https://developer.android.com/reference/java/util/SplittableRandom.html#nextInt())
        pub fn nextInt<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextInt", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextInt\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextInt](https://developer.android.com/reference/java/util/SplittableRandom.html#nextInt(int))
        pub fn nextInt_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextInt", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextInt\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextInt](https://developer.android.com/reference/java/util/SplittableRandom.html#nextInt(int,%20int))
        pub fn nextInt_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextInt", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextInt\0", "(II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextLong](https://developer.android.com/reference/java/util/SplittableRandom.html#nextLong())
        pub fn nextLong<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextLong", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextLong\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextLong](https://developer.android.com/reference/java/util/SplittableRandom.html#nextLong(long))
        pub fn nextLong_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextLong", .descriptor == "(J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextLong\0", "(J)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextLong](https://developer.android.com/reference/java/util/SplittableRandom.html#nextLong(long,%20long))
        pub fn nextLong_long_long<'env>(&'env self, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextLong", .descriptor == "(JJ)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextLong\0", "(JJ)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextDouble](https://developer.android.com/reference/java/util/SplittableRandom.html#nextDouble())
        pub fn nextDouble<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextDouble", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextDouble\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextDouble](https://developer.android.com/reference/java/util/SplittableRandom.html#nextDouble(double))
        pub fn nextDouble_double<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextDouble", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextDouble\0", "(D)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextDouble](https://developer.android.com/reference/java/util/SplittableRandom.html#nextDouble(double,%20double))
        pub fn nextDouble_double_double<'env>(&'env self, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextDouble", .descriptor == "(DD)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextDouble\0", "(DD)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextBoolean](https://developer.android.com/reference/java/util/SplittableRandom.html#nextBoolean())
        pub fn nextBoolean<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "nextBoolean", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "nextBoolean\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ints](https://developer.android.com/reference/java/util/SplittableRandom.html#ints(long))
        ///
        /// Required features: "java-util-stream-IntStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-IntStream")))]
        pub fn ints_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::IntStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "ints", .descriptor == "(J)Ljava/util/stream/IntStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "ints\0", "(J)Ljava/util/stream/IntStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ints](https://developer.android.com/reference/java/util/SplittableRandom.html#ints())
        ///
        /// Required features: "java-util-stream-IntStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-IntStream")))]
        pub fn ints<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::IntStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "ints", .descriptor == "()Ljava/util/stream/IntStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "ints\0", "()Ljava/util/stream/IntStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ints](https://developer.android.com/reference/java/util/SplittableRandom.html#ints(long,%20int,%20int))
        ///
        /// Required features: "java-util-stream-IntStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-IntStream")))]
        pub fn ints_long_int_int<'env>(&'env self, arg0: i64, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::IntStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "ints", .descriptor == "(JII)Ljava/util/stream/IntStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "ints\0", "(JII)Ljava/util/stream/IntStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ints](https://developer.android.com/reference/java/util/SplittableRandom.html#ints(int,%20int))
        ///
        /// Required features: "java-util-stream-IntStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-IntStream")))]
        pub fn ints_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::IntStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "ints", .descriptor == "(II)Ljava/util/stream/IntStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "ints\0", "(II)Ljava/util/stream/IntStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [longs](https://developer.android.com/reference/java/util/SplittableRandom.html#longs(long))
        ///
        /// Required features: "java-util-stream-LongStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-LongStream")))]
        pub fn longs_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::LongStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "longs", .descriptor == "(J)Ljava/util/stream/LongStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "longs\0", "(J)Ljava/util/stream/LongStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [longs](https://developer.android.com/reference/java/util/SplittableRandom.html#longs())
        ///
        /// Required features: "java-util-stream-LongStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-LongStream")))]
        pub fn longs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::LongStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "longs", .descriptor == "()Ljava/util/stream/LongStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "longs\0", "()Ljava/util/stream/LongStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [longs](https://developer.android.com/reference/java/util/SplittableRandom.html#longs(long,%20long,%20long))
        ///
        /// Required features: "java-util-stream-LongStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-LongStream")))]
        pub fn longs_long_long_long<'env>(&'env self, arg0: i64, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::LongStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "longs", .descriptor == "(JJJ)Ljava/util/stream/LongStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "longs\0", "(JJJ)Ljava/util/stream/LongStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [longs](https://developer.android.com/reference/java/util/SplittableRandom.html#longs(long,%20long))
        ///
        /// Required features: "java-util-stream-LongStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-LongStream")))]
        pub fn longs_long_long<'env>(&'env self, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::LongStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "longs", .descriptor == "(JJ)Ljava/util/stream/LongStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "longs\0", "(JJ)Ljava/util/stream/LongStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doubles](https://developer.android.com/reference/java/util/SplittableRandom.html#doubles(long))
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn doubles_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "doubles", .descriptor == "(J)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "doubles\0", "(J)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doubles](https://developer.android.com/reference/java/util/SplittableRandom.html#doubles())
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn doubles<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "doubles", .descriptor == "()Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "doubles\0", "()Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doubles](https://developer.android.com/reference/java/util/SplittableRandom.html#doubles(long,%20double,%20double))
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn doubles_long_double_double<'env>(&'env self, arg0: i64, arg1: f64, arg2: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "doubles", .descriptor == "(JDD)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "doubles\0", "(JDD)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doubles](https://developer.android.com/reference/java/util/SplittableRandom.html#doubles(double,%20double))
        ///
        /// Required features: "java-util-stream-DoubleStream"
        #[cfg(any(feature = "all", all(feature = "java-util-stream-DoubleStream")))]
        pub fn doubles_double_double<'env>(&'env self, arg0: f64, arg1: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::stream::DoubleStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/SplittableRandom", java.flags == PUBLIC, .name == "doubles", .descriptor == "(DD)Ljava/util/stream/DoubleStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/SplittableRandom\0", "doubles\0", "(DD)Ljava/util/stream/DoubleStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
