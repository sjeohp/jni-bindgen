// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-function-DoublePredicate"))]
__jni_bindgen! {
    /// public interface [DoublePredicate](https://developer.android.com/reference/java/util/function/DoublePredicate.html)
    ///
    /// Required feature: java-util-function-DoublePredicate
    public interface DoublePredicate ("java/util/function/DoublePredicate") extends crate::java::lang::Object {

        /// [test](https://developer.android.com/reference/java/util/function/DoublePredicate.html#test(double))
        pub fn test<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/function/DoublePredicate", java.flags == PUBLIC | ABSTRACT, .name == "test", .descriptor == "(D)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/function/DoublePredicate\0", "test\0", "(D)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [and](https://developer.android.com/reference/java/util/function/DoublePredicate.html#and(java.util.function.DoublePredicate))
        ///
        /// Required features: "java-util-function-DoublePredicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoublePredicate")))]
        pub fn and<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoublePredicate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::function::DoublePredicate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/function/DoublePredicate", java.flags == PUBLIC, .name == "and", .descriptor == "(Ljava/util/function/DoublePredicate;)Ljava/util/function/DoublePredicate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/function/DoublePredicate\0", "and\0", "(Ljava/util/function/DoublePredicate;)Ljava/util/function/DoublePredicate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [negate](https://developer.android.com/reference/java/util/function/DoublePredicate.html#negate())
        ///
        /// Required features: "java-util-function-DoublePredicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoublePredicate")))]
        pub fn negate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::function::DoublePredicate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/function/DoublePredicate", java.flags == PUBLIC, .name == "negate", .descriptor == "()Ljava/util/function/DoublePredicate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/function/DoublePredicate\0", "negate\0", "()Ljava/util/function/DoublePredicate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [or](https://developer.android.com/reference/java/util/function/DoublePredicate.html#or(java.util.function.DoublePredicate))
        ///
        /// Required features: "java-util-function-DoublePredicate"
        #[cfg(any(feature = "all", all(feature = "java-util-function-DoublePredicate")))]
        pub fn or<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::DoublePredicate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::function::DoublePredicate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/function/DoublePredicate", java.flags == PUBLIC, .name == "or", .descriptor == "(Ljava/util/function/DoublePredicate;)Ljava/util/function/DoublePredicate;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/function/DoublePredicate\0", "or\0", "(Ljava/util/function/DoublePredicate;)Ljava/util/function/DoublePredicate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
