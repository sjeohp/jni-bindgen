// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-zip-GZIPInputStream"))]
__jni_bindgen! {
    /// public class [GZIPInputStream](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html)
    ///
    /// Required feature: java-util-zip-GZIPInputStream
    public class GZIPInputStream ("java/util/zip/GZIPInputStream") extends crate::java::util::zip::InflaterInputStream {

        /// [GZIPInputStream](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html#GZIPInputStream(java.io.InputStream,%20int))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn new_InputStream_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::GZIPInputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/GZIPInputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/InputStream;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/GZIPInputStream\0", "<init>\0", "(Ljava/io/InputStream;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GZIPInputStream](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html#GZIPInputStream(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn new_InputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::GZIPInputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/GZIPInputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/GZIPInputStream\0", "<init>\0", "(Ljava/io/InputStream;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html#read(byte%5B%5D,%20int,%20int))
        pub fn read<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/GZIPInputStream", java.flags == PUBLIC, .name == "read", .descriptor == "([BII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/GZIPInputStream\0", "read\0", "([BII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/GZIPInputStream", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/GZIPInputStream\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [GZIP_MAGIC](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html#GZIP_MAGIC)
        pub const GZIP_MAGIC : i32 = 35615;

        // // Not emitting: Non-public field
        // /// **get** protected [crc](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html#crc)
        // ///
        // /// Required feature: java-util-zip-CRC32
        // #[cfg(any(feature = "all", feature = "java-util-zip-CRC32"))]
        // pub fn crc<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::zip::CRC32>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/zip/GZIPInputStream\0", "crc\0", "Ljava/util/zip/CRC32;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [crc](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html#crc)
        // ///
        // /// Required feature: java-util-zip-CRC32
        // #[cfg(any(feature = "all", feature = "java-util-zip-CRC32"))]
        // pub fn set_crc<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::zip::CRC32>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/zip/GZIPInputStream\0", "crc\0", "Ljava/util/zip/CRC32;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [eos](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html#eos)
        // pub fn eos<'env>(&'env self) -> bool {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/zip/GZIPInputStream\0", "eos\0", "Z\0");
        //         env.get_boolean_field(class, field)
        //     }
        // }

        // /// **set** protected [eos](https://developer.android.com/reference/java/util/zip/GZIPInputStream.html#eos)
        // pub fn set_eos<'env>(&'env self, value: bool) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/zip/GZIPInputStream\0", "eos\0", "Z\0");
        //         env.set_boolean_field(class, field, value)
        //     }
        // }
    }
}
