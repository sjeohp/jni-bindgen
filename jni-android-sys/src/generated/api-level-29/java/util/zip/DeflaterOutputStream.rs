// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-zip-DeflaterOutputStream"))]
__jni_bindgen! {
    /// public class [DeflaterOutputStream](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html)
    ///
    /// Required feature: java-util-zip-DeflaterOutputStream
    public class DeflaterOutputStream ("java/util/zip/DeflaterOutputStream") extends crate::java::io::FilterOutputStream {

        /// [DeflaterOutputStream](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#DeflaterOutputStream(java.io.OutputStream,%20java.util.zip.Deflater,%20int,%20boolean))
        ///
        /// Required features: "java-io-OutputStream", "java-util-zip-Deflater"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream", feature = "java-util-zip-Deflater")))]
        pub fn new_OutputStream_Deflater_int_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::zip::Deflater>>, arg2: i32, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::DeflaterOutputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "<init>\0", "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;IZ)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DeflaterOutputStream](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#DeflaterOutputStream(java.io.OutputStream,%20java.util.zip.Deflater,%20int))
        ///
        /// Required features: "java-io-OutputStream", "java-util-zip-Deflater"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream", feature = "java-util-zip-Deflater")))]
        pub fn new_OutputStream_Deflater_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::zip::Deflater>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::DeflaterOutputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "<init>\0", "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DeflaterOutputStream](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#DeflaterOutputStream(java.io.OutputStream,%20java.util.zip.Deflater,%20boolean))
        ///
        /// Required features: "java-io-OutputStream", "java-util-zip-Deflater"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream", feature = "java-util-zip-Deflater")))]
        pub fn new_OutputStream_Deflater_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::zip::Deflater>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::DeflaterOutputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "<init>\0", "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DeflaterOutputStream](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#DeflaterOutputStream(java.io.OutputStream,%20java.util.zip.Deflater))
        ///
        /// Required features: "java-io-OutputStream", "java-util-zip-Deflater"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream", feature = "java-util-zip-Deflater")))]
        pub fn new_OutputStream_Deflater<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::zip::Deflater>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::DeflaterOutputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "<init>\0", "(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DeflaterOutputStream](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#DeflaterOutputStream(java.io.OutputStream,%20boolean))
        ///
        /// Required features: "java-io-OutputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream")))]
        pub fn new_OutputStream_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::DeflaterOutputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/OutputStream;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "<init>\0", "(Ljava/io/OutputStream;Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DeflaterOutputStream](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#DeflaterOutputStream(java.io.OutputStream))
        ///
        /// Required features: "java-io-OutputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream")))]
        pub fn new_OutputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::DeflaterOutputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/OutputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "<init>\0", "(Ljava/io/OutputStream;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#write(int))
        pub fn write_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "write", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "write\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#write(byte%5B%5D,%20int,%20int))
        pub fn write_byte_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "write", .descriptor == "([BII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "write\0", "([BII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [finish](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#finish())
        pub fn finish<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "finish", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "finish\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [deflate](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#deflate())
        // fn deflate<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PROTECTED, .name == "deflate", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "deflate\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [flush](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#flush())
        pub fn flush<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/DeflaterOutputStream", java.flags == PUBLIC, .name == "flush", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/DeflaterOutputStream\0", "flush\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public field
        // /// **get** protected [buf](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#buf)
        // pub fn buf<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/zip/DeflaterOutputStream\0", "buf\0", "[B\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [buf](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#buf)
        // pub fn set_buf<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ByteArray>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/zip/DeflaterOutputStream\0", "buf\0", "[B\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [def](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#def)
        // ///
        // /// Required feature: java-util-zip-Deflater
        // #[cfg(any(feature = "all", feature = "java-util-zip-Deflater"))]
        // pub fn def<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::zip::Deflater>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/zip/DeflaterOutputStream\0", "def\0", "Ljava/util/zip/Deflater;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [def](https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html#def)
        // ///
        // /// Required feature: java-util-zip-Deflater
        // #[cfg(any(feature = "all", feature = "java-util-zip-Deflater"))]
        // pub fn set_def<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::zip::Deflater>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("java/util/zip/DeflaterOutputStream\0", "def\0", "Ljava/util/zip/Deflater;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }
    }
}
