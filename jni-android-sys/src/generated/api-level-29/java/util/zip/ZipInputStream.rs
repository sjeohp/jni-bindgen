// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-util-zip-ZipInputStream"))]
__jni_bindgen! {
    /// public class [ZipInputStream](https://developer.android.com/reference/java/util/zip/ZipInputStream.html)
    ///
    /// Required feature: java-util-zip-ZipInputStream
    public class ZipInputStream ("java/util/zip/ZipInputStream") extends crate::java::util::zip::InflaterInputStream {

        /// [ZipInputStream](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#ZipInputStream(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn new_InputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::ZipInputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/ZipInputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/ZipInputStream\0", "<init>\0", "(Ljava/io/InputStream;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZipInputStream](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#ZipInputStream(java.io.InputStream,%20java.nio.charset.Charset))
        ///
        /// Required features: "java-io-InputStream", "java-nio-charset-Charset"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-nio-charset-Charset")))]
        pub fn new_InputStream_Charset<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::charset::Charset>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::util::zip::ZipInputStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/ZipInputStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/ZipInputStream\0", "<init>\0", "(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNextEntry](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#getNextEntry())
        ///
        /// Required features: "java-util-zip-ZipEntry"
        #[cfg(any(feature = "all", all(feature = "java-util-zip-ZipEntry")))]
        pub fn getNextEntry<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::zip::ZipEntry>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/ZipInputStream", java.flags == PUBLIC, .name == "getNextEntry", .descriptor == "()Ljava/util/zip/ZipEntry;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/ZipInputStream\0", "getNextEntry\0", "()Ljava/util/zip/ZipEntry;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closeEntry](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#closeEntry())
        pub fn closeEntry<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/ZipInputStream", java.flags == PUBLIC, .name == "closeEntry", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/ZipInputStream\0", "closeEntry\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [available](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#available())
        pub fn available<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/ZipInputStream", java.flags == PUBLIC, .name == "available", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/ZipInputStream\0", "available\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#read(byte%5B%5D,%20int,%20int))
        pub fn read<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/ZipInputStream", java.flags == PUBLIC, .name == "read", .descriptor == "([BII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/ZipInputStream\0", "read\0", "([BII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [skip](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#skip(long))
        pub fn skip<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/ZipInputStream", java.flags == PUBLIC, .name == "skip", .descriptor == "(J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/ZipInputStream\0", "skip\0", "(J)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/util/zip/ZipInputStream", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/ZipInputStream\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [createZipEntry](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#createZipEntry(java.lang.String))
        // ///
        // /// Required features: "java-lang-String", "java-util-zip-ZipEntry"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-zip-ZipEntry")))]
        // fn createZipEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::zip::ZipEntry>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/util/zip/ZipInputStream", java.flags == PROTECTED, .name == "createZipEntry", .descriptor == "(Ljava/lang/String;)Ljava/util/zip/ZipEntry;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/util/zip/ZipInputStream\0", "createZipEntry\0", "(Ljava/lang/String;)Ljava/util/zip/ZipEntry;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [CENATT](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENATT)
        pub const CENATT : i32 = 36;

        /// public static final [CENATX](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENATX)
        pub const CENATX : i32 = 38;

        /// public static final [CENCOM](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENCOM)
        pub const CENCOM : i32 = 32;

        /// public static final [CENCRC](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENCRC)
        pub const CENCRC : i32 = 16;

        /// public static final [CENDSK](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENDSK)
        pub const CENDSK : i32 = 34;

        /// public static final [CENEXT](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENEXT)
        pub const CENEXT : i32 = 30;

        /// public static final [CENFLG](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENFLG)
        pub const CENFLG : i32 = 8;

        /// public static final [CENHDR](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENHDR)
        pub const CENHDR : i32 = 46;

        /// public static final [CENHOW](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENHOW)
        pub const CENHOW : i32 = 10;

        /// public static final [CENLEN](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENLEN)
        pub const CENLEN : i32 = 24;

        /// public static final [CENNAM](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENNAM)
        pub const CENNAM : i32 = 28;

        /// public static final [CENOFF](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENOFF)
        pub const CENOFF : i32 = 42;

        /// public static final [CENSIG](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENSIG)
        pub const CENSIG : i64 = 33639248i64;

        /// public static final [CENSIZ](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENSIZ)
        pub const CENSIZ : i32 = 20;

        /// public static final [CENTIM](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENTIM)
        pub const CENTIM : i32 = 12;

        /// public static final [CENVEM](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENVEM)
        pub const CENVEM : i32 = 4;

        /// public static final [CENVER](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#CENVER)
        pub const CENVER : i32 = 6;

        /// public static final [ENDCOM](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#ENDCOM)
        pub const ENDCOM : i32 = 20;

        /// public static final [ENDHDR](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#ENDHDR)
        pub const ENDHDR : i32 = 22;

        /// public static final [ENDOFF](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#ENDOFF)
        pub const ENDOFF : i32 = 16;

        /// public static final [ENDSIG](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#ENDSIG)
        pub const ENDSIG : i64 = 101010256i64;

        /// public static final [ENDSIZ](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#ENDSIZ)
        pub const ENDSIZ : i32 = 12;

        /// public static final [ENDSUB](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#ENDSUB)
        pub const ENDSUB : i32 = 8;

        /// public static final [ENDTOT](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#ENDTOT)
        pub const ENDTOT : i32 = 10;

        /// public static final [EXTCRC](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#EXTCRC)
        pub const EXTCRC : i32 = 4;

        /// public static final [EXTHDR](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#EXTHDR)
        pub const EXTHDR : i32 = 16;

        /// public static final [EXTLEN](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#EXTLEN)
        pub const EXTLEN : i32 = 12;

        /// public static final [EXTSIG](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#EXTSIG)
        pub const EXTSIG : i64 = 134695760i64;

        /// public static final [EXTSIZ](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#EXTSIZ)
        pub const EXTSIZ : i32 = 8;

        /// public static final [LOCCRC](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCCRC)
        pub const LOCCRC : i32 = 14;

        /// public static final [LOCEXT](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCEXT)
        pub const LOCEXT : i32 = 28;

        /// public static final [LOCFLG](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCFLG)
        pub const LOCFLG : i32 = 6;

        /// public static final [LOCHDR](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCHDR)
        pub const LOCHDR : i32 = 30;

        /// public static final [LOCHOW](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCHOW)
        pub const LOCHOW : i32 = 8;

        /// public static final [LOCLEN](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCLEN)
        pub const LOCLEN : i32 = 22;

        /// public static final [LOCNAM](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCNAM)
        pub const LOCNAM : i32 = 26;

        /// public static final [LOCSIG](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCSIG)
        pub const LOCSIG : i64 = 67324752i64;

        /// public static final [LOCSIZ](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCSIZ)
        pub const LOCSIZ : i32 = 18;

        /// public static final [LOCTIM](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCTIM)
        pub const LOCTIM : i32 = 10;

        /// public static final [LOCVER](https://developer.android.com/reference/java/util/zip/ZipInputStream.html#LOCVER)
        pub const LOCVER : i32 = 4;
    }
}
