// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-sql-SQLData"))]
__jni_bindgen! {
    /// public interface [SQLData](https://developer.android.com/reference/java/sql/SQLData.html)
    ///
    /// Required feature: java-sql-SQLData
    public interface SQLData ("java/sql/SQLData") extends crate::java::lang::Object {

        /// [getSQLTypeName](https://developer.android.com/reference/java/sql/SQLData.html#getSQLTypeName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSQLTypeName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/SQLData", java.flags == PUBLIC | ABSTRACT, .name == "getSQLTypeName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/SQLData\0", "getSQLTypeName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readSQL](https://developer.android.com/reference/java/sql/SQLData.html#readSQL(java.sql.SQLInput,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-SQLInput"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-SQLInput")))]
        pub fn readSQL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::SQLInput>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/SQLData", java.flags == PUBLIC | ABSTRACT, .name == "readSQL", .descriptor == "(Ljava/sql/SQLInput;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/SQLData\0", "readSQL\0", "(Ljava/sql/SQLInput;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeSQL](https://developer.android.com/reference/java/sql/SQLData.html#writeSQL(java.sql.SQLOutput))
        ///
        /// Required features: "java-sql-SQLOutput"
        #[cfg(any(feature = "all", all(feature = "java-sql-SQLOutput")))]
        pub fn writeSQL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::SQLOutput>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/SQLData", java.flags == PUBLIC | ABSTRACT, .name == "writeSQL", .descriptor == "(Ljava/sql/SQLOutput;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/SQLData\0", "writeSQL\0", "(Ljava/sql/SQLOutput;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
