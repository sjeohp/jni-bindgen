// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-sql-ResultSet"))]
__jni_bindgen! {
    /// public interface [ResultSet](https://developer.android.com/reference/java/sql/ResultSet.html)
    ///
    /// Required feature: java-sql-ResultSet
    public interface ResultSet ("java/sql/ResultSet") extends crate::java::lang::Object, implements crate::java::sql::Wrapper, crate::java::lang::AutoCloseable {

        /// [next](https://developer.android.com/reference/java/sql/ResultSet.html#next())
        pub fn next<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "next", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "next\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/java/sql/ResultSet.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [wasNull](https://developer.android.com/reference/java/sql/ResultSet.html#wasNull())
        pub fn wasNull<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "wasNull", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "wasNull\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/java/sql/ResultSet.html#getString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getString_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBoolean](https://developer.android.com/reference/java/sql/ResultSet.html#getBoolean(int))
        pub fn getBoolean_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBoolean", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBoolean\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getByte](https://developer.android.com/reference/java/sql/ResultSet.html#getByte(int))
        pub fn getByte_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i8, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getByte", .descriptor == "(I)B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getByte\0", "(I)B\0");
                __jni_env.call_byte_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShort](https://developer.android.com/reference/java/sql/ResultSet.html#getShort(int))
        pub fn getShort_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i16, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getShort", .descriptor == "(I)S"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getShort\0", "(I)S\0");
                __jni_env.call_short_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/java/sql/ResultSet.html#getInt(int))
        pub fn getInt_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getInt", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getInt\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/java/sql/ResultSet.html#getLong(int))
        pub fn getLong_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getLong", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getLong\0", "(I)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/java/sql/ResultSet.html#getFloat(int))
        pub fn getFloat_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getFloat", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getFloat\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDouble](https://developer.android.com/reference/java/sql/ResultSet.html#getDouble(int))
        pub fn getDouble_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getDouble", .descriptor == "(I)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getDouble\0", "(I)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBigDecimal](https://developer.android.com/reference/java/sql/ResultSet.html#getBigDecimal(int,%20int))
        ///
        /// Required features: "java-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "java-math-BigDecimal")))]
        #[deprecated] pub fn getBigDecimal_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBigDecimal", .descriptor == "(II)Ljava/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBigDecimal\0", "(II)Ljava/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBytes](https://developer.android.com/reference/java/sql/ResultSet.html#getBytes(int))
        pub fn getBytes_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBytes", .descriptor == "(I)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBytes\0", "(I)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDate](https://developer.android.com/reference/java/sql/ResultSet.html#getDate(int))
        ///
        /// Required features: "java-sql-Date"
        #[cfg(any(feature = "all", all(feature = "java-sql-Date")))]
        pub fn getDate_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getDate", .descriptor == "(I)Ljava/sql/Date;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getDate\0", "(I)Ljava/sql/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTime](https://developer.android.com/reference/java/sql/ResultSet.html#getTime(int))
        ///
        /// Required features: "java-sql-Time"
        #[cfg(any(feature = "all", all(feature = "java-sql-Time")))]
        pub fn getTime_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Time>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getTime", .descriptor == "(I)Ljava/sql/Time;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getTime\0", "(I)Ljava/sql/Time;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimestamp](https://developer.android.com/reference/java/sql/ResultSet.html#getTimestamp(int))
        ///
        /// Required features: "java-sql-Timestamp"
        #[cfg(any(feature = "all", all(feature = "java-sql-Timestamp")))]
        pub fn getTimestamp_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Timestamp>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getTimestamp", .descriptor == "(I)Ljava/sql/Timestamp;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getTimestamp\0", "(I)Ljava/sql/Timestamp;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAsciiStream](https://developer.android.com/reference/java/sql/ResultSet.html#getAsciiStream(int))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn getAsciiStream_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getAsciiStream", .descriptor == "(I)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getAsciiStream\0", "(I)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnicodeStream](https://developer.android.com/reference/java/sql/ResultSet.html#getUnicodeStream(int))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        #[deprecated] pub fn getUnicodeStream_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getUnicodeStream", .descriptor == "(I)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getUnicodeStream\0", "(I)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBinaryStream](https://developer.android.com/reference/java/sql/ResultSet.html#getBinaryStream(int))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn getBinaryStream_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBinaryStream", .descriptor == "(I)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBinaryStream\0", "(I)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/java/sql/ResultSet.html#getString(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getString_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getString", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getString\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBoolean](https://developer.android.com/reference/java/sql/ResultSet.html#getBoolean(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getBoolean_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBoolean", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBoolean\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getByte](https://developer.android.com/reference/java/sql/ResultSet.html#getByte(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getByte_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i8, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getByte", .descriptor == "(Ljava/lang/String;)B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getByte\0", "(Ljava/lang/String;)B\0");
                __jni_env.call_byte_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShort](https://developer.android.com/reference/java/sql/ResultSet.html#getShort(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getShort_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i16, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getShort", .descriptor == "(Ljava/lang/String;)S"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getShort\0", "(Ljava/lang/String;)S\0");
                __jni_env.call_short_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/java/sql/ResultSet.html#getInt(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getInt_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getInt", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getInt\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/java/sql/ResultSet.html#getLong(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLong_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getLong", .descriptor == "(Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getLong\0", "(Ljava/lang/String;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/java/sql/ResultSet.html#getFloat(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFloat_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getFloat", .descriptor == "(Ljava/lang/String;)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getFloat\0", "(Ljava/lang/String;)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDouble](https://developer.android.com/reference/java/sql/ResultSet.html#getDouble(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDouble_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getDouble", .descriptor == "(Ljava/lang/String;)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getDouble\0", "(Ljava/lang/String;)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBigDecimal](https://developer.android.com/reference/java/sql/ResultSet.html#getBigDecimal(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String", "java-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-math-BigDecimal")))]
        #[deprecated] pub fn getBigDecimal_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBigDecimal", .descriptor == "(Ljava/lang/String;I)Ljava/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBigDecimal\0", "(Ljava/lang/String;I)Ljava/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBytes](https://developer.android.com/reference/java/sql/ResultSet.html#getBytes(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getBytes_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBytes", .descriptor == "(Ljava/lang/String;)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBytes\0", "(Ljava/lang/String;)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDate](https://developer.android.com/reference/java/sql/ResultSet.html#getDate(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Date"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Date")))]
        pub fn getDate_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getDate", .descriptor == "(Ljava/lang/String;)Ljava/sql/Date;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getDate\0", "(Ljava/lang/String;)Ljava/sql/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTime](https://developer.android.com/reference/java/sql/ResultSet.html#getTime(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Time"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Time")))]
        pub fn getTime_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Time>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getTime", .descriptor == "(Ljava/lang/String;)Ljava/sql/Time;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getTime\0", "(Ljava/lang/String;)Ljava/sql/Time;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimestamp](https://developer.android.com/reference/java/sql/ResultSet.html#getTimestamp(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Timestamp"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Timestamp")))]
        pub fn getTimestamp_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Timestamp>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getTimestamp", .descriptor == "(Ljava/lang/String;)Ljava/sql/Timestamp;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getTimestamp\0", "(Ljava/lang/String;)Ljava/sql/Timestamp;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAsciiStream](https://developer.android.com/reference/java/sql/ResultSet.html#getAsciiStream(java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn getAsciiStream_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getAsciiStream", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getAsciiStream\0", "(Ljava/lang/String;)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnicodeStream](https://developer.android.com/reference/java/sql/ResultSet.html#getUnicodeStream(java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        #[deprecated] pub fn getUnicodeStream_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getUnicodeStream", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getUnicodeStream\0", "(Ljava/lang/String;)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBinaryStream](https://developer.android.com/reference/java/sql/ResultSet.html#getBinaryStream(java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn getBinaryStream_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBinaryStream", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBinaryStream\0", "(Ljava/lang/String;)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWarnings](https://developer.android.com/reference/java/sql/ResultSet.html#getWarnings())
        ///
        /// Required features: "java-sql-SQLWarning"
        #[cfg(any(feature = "all", all(feature = "java-sql-SQLWarning")))]
        pub fn getWarnings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::SQLWarning>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getWarnings", .descriptor == "()Ljava/sql/SQLWarning;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getWarnings\0", "()Ljava/sql/SQLWarning;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearWarnings](https://developer.android.com/reference/java/sql/ResultSet.html#clearWarnings())
        pub fn clearWarnings<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "clearWarnings", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "clearWarnings\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCursorName](https://developer.android.com/reference/java/sql/ResultSet.html#getCursorName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCursorName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getCursorName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getCursorName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetaData](https://developer.android.com/reference/java/sql/ResultSet.html#getMetaData())
        ///
        /// Required features: "java-sql-ResultSetMetaData"
        #[cfg(any(feature = "all", all(feature = "java-sql-ResultSetMetaData")))]
        pub fn getMetaData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::ResultSetMetaData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getMetaData", .descriptor == "()Ljava/sql/ResultSetMetaData;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getMetaData\0", "()Ljava/sql/ResultSetMetaData;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getObject](https://developer.android.com/reference/java/sql/ResultSet.html#getObject(int))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getObject_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getObject", .descriptor == "(I)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getObject\0", "(I)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getObject](https://developer.android.com/reference/java/sql/ResultSet.html#getObject(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getObject_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getObject", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getObject\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findColumn](https://developer.android.com/reference/java/sql/ResultSet.html#findColumn(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn findColumn<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "findColumn", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "findColumn\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#getCharacterStream(int))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn getCharacterStream_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::Reader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getCharacterStream", .descriptor == "(I)Ljava/io/Reader;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getCharacterStream\0", "(I)Ljava/io/Reader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#getCharacterStream(java.lang.String))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn getCharacterStream_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::Reader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getCharacterStream", .descriptor == "(Ljava/lang/String;)Ljava/io/Reader;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getCharacterStream\0", "(Ljava/lang/String;)Ljava/io/Reader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBigDecimal](https://developer.android.com/reference/java/sql/ResultSet.html#getBigDecimal(int))
        ///
        /// Required features: "java-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "java-math-BigDecimal")))]
        pub fn getBigDecimal_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBigDecimal", .descriptor == "(I)Ljava/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBigDecimal\0", "(I)Ljava/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBigDecimal](https://developer.android.com/reference/java/sql/ResultSet.html#getBigDecimal(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-math-BigDecimal")))]
        pub fn getBigDecimal_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBigDecimal", .descriptor == "(Ljava/lang/String;)Ljava/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBigDecimal\0", "(Ljava/lang/String;)Ljava/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBeforeFirst](https://developer.android.com/reference/java/sql/ResultSet.html#isBeforeFirst())
        pub fn isBeforeFirst<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "isBeforeFirst", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "isBeforeFirst\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAfterLast](https://developer.android.com/reference/java/sql/ResultSet.html#isAfterLast())
        pub fn isAfterLast<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "isAfterLast", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "isAfterLast\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFirst](https://developer.android.com/reference/java/sql/ResultSet.html#isFirst())
        pub fn isFirst<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "isFirst", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "isFirst\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLast](https://developer.android.com/reference/java/sql/ResultSet.html#isLast())
        pub fn isLast<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "isLast", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "isLast\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [beforeFirst](https://developer.android.com/reference/java/sql/ResultSet.html#beforeFirst())
        pub fn beforeFirst<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "beforeFirst", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "beforeFirst\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [afterLast](https://developer.android.com/reference/java/sql/ResultSet.html#afterLast())
        pub fn afterLast<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "afterLast", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "afterLast\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [first](https://developer.android.com/reference/java/sql/ResultSet.html#first())
        pub fn first<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "first", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "first\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [last](https://developer.android.com/reference/java/sql/ResultSet.html#last())
        pub fn last<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "last", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "last\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRow](https://developer.android.com/reference/java/sql/ResultSet.html#getRow())
        pub fn getRow<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getRow", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getRow\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [absolute](https://developer.android.com/reference/java/sql/ResultSet.html#absolute(int))
        pub fn absolute<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "absolute", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "absolute\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [relative](https://developer.android.com/reference/java/sql/ResultSet.html#relative(int))
        pub fn relative<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "relative", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "relative\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [previous](https://developer.android.com/reference/java/sql/ResultSet.html#previous())
        pub fn previous<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "previous", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "previous\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFetchDirection](https://developer.android.com/reference/java/sql/ResultSet.html#setFetchDirection(int))
        pub fn setFetchDirection<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "setFetchDirection", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "setFetchDirection\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFetchDirection](https://developer.android.com/reference/java/sql/ResultSet.html#getFetchDirection())
        pub fn getFetchDirection<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getFetchDirection", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getFetchDirection\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFetchSize](https://developer.android.com/reference/java/sql/ResultSet.html#setFetchSize(int))
        pub fn setFetchSize<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "setFetchSize", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "setFetchSize\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFetchSize](https://developer.android.com/reference/java/sql/ResultSet.html#getFetchSize())
        pub fn getFetchSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getFetchSize", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getFetchSize\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/java/sql/ResultSet.html#getType())
        pub fn getType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConcurrency](https://developer.android.com/reference/java/sql/ResultSet.html#getConcurrency())
        pub fn getConcurrency<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getConcurrency", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getConcurrency\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rowUpdated](https://developer.android.com/reference/java/sql/ResultSet.html#rowUpdated())
        pub fn rowUpdated<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "rowUpdated", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "rowUpdated\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rowInserted](https://developer.android.com/reference/java/sql/ResultSet.html#rowInserted())
        pub fn rowInserted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "rowInserted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "rowInserted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rowDeleted](https://developer.android.com/reference/java/sql/ResultSet.html#rowDeleted())
        pub fn rowDeleted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "rowDeleted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "rowDeleted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNull](https://developer.android.com/reference/java/sql/ResultSet.html#updateNull(int))
        pub fn updateNull_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNull", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNull\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBoolean](https://developer.android.com/reference/java/sql/ResultSet.html#updateBoolean(int,%20boolean))
        pub fn updateBoolean_int_boolean<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBoolean", .descriptor == "(IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBoolean\0", "(IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateByte](https://developer.android.com/reference/java/sql/ResultSet.html#updateByte(int,%20byte))
        pub fn updateByte_int_byte<'env>(&'env self, arg0: i32, arg1: i8) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateByte", .descriptor == "(IB)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateByte\0", "(IB)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateShort](https://developer.android.com/reference/java/sql/ResultSet.html#updateShort(int,%20short))
        pub fn updateShort_int_short<'env>(&'env self, arg0: i32, arg1: i16) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateShort", .descriptor == "(IS)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateShort\0", "(IS)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateInt](https://developer.android.com/reference/java/sql/ResultSet.html#updateInt(int,%20int))
        pub fn updateInt_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateInt", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateInt\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateLong](https://developer.android.com/reference/java/sql/ResultSet.html#updateLong(int,%20long))
        pub fn updateLong_int_long<'env>(&'env self, arg0: i32, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateLong", .descriptor == "(IJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateLong\0", "(IJ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateFloat](https://developer.android.com/reference/java/sql/ResultSet.html#updateFloat(int,%20float))
        pub fn updateFloat_int_float<'env>(&'env self, arg0: i32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateFloat", .descriptor == "(IF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateFloat\0", "(IF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateDouble](https://developer.android.com/reference/java/sql/ResultSet.html#updateDouble(int,%20double))
        pub fn updateDouble_int_double<'env>(&'env self, arg0: i32, arg1: f64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateDouble", .descriptor == "(ID)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateDouble\0", "(ID)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBigDecimal](https://developer.android.com/reference/java/sql/ResultSet.html#updateBigDecimal(int,%20java.math.BigDecimal))
        ///
        /// Required features: "java-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "java-math-BigDecimal")))]
        pub fn updateBigDecimal_int_BigDecimal<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBigDecimal", .descriptor == "(ILjava/math/BigDecimal;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBigDecimal\0", "(ILjava/math/BigDecimal;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateString](https://developer.android.com/reference/java/sql/ResultSet.html#updateString(int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateString_int_String<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateString", .descriptor == "(ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateString\0", "(ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBytes](https://developer.android.com/reference/java/sql/ResultSet.html#updateBytes(int,%20byte%5B%5D))
        pub fn updateBytes_int_byte_array<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBytes", .descriptor == "(I[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBytes\0", "(I[B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateDate](https://developer.android.com/reference/java/sql/ResultSet.html#updateDate(int,%20java.sql.Date))
        ///
        /// Required features: "java-sql-Date"
        #[cfg(any(feature = "all", all(feature = "java-sql-Date")))]
        pub fn updateDate_int_Date<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Date>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateDate", .descriptor == "(ILjava/sql/Date;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateDate\0", "(ILjava/sql/Date;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateTime](https://developer.android.com/reference/java/sql/ResultSet.html#updateTime(int,%20java.sql.Time))
        ///
        /// Required features: "java-sql-Time"
        #[cfg(any(feature = "all", all(feature = "java-sql-Time")))]
        pub fn updateTime_int_Time<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Time>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateTime", .descriptor == "(ILjava/sql/Time;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateTime\0", "(ILjava/sql/Time;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateTimestamp](https://developer.android.com/reference/java/sql/ResultSet.html#updateTimestamp(int,%20java.sql.Timestamp))
        ///
        /// Required features: "java-sql-Timestamp"
        #[cfg(any(feature = "all", all(feature = "java-sql-Timestamp")))]
        pub fn updateTimestamp_int_Timestamp<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Timestamp>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateTimestamp", .descriptor == "(ILjava/sql/Timestamp;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateTimestamp\0", "(ILjava/sql/Timestamp;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAsciiStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateAsciiStream(int,%20java.io.InputStream,%20int))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn updateAsciiStream_int_InputStream_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateAsciiStream", .descriptor == "(ILjava/io/InputStream;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateAsciiStream\0", "(ILjava/io/InputStream;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBinaryStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateBinaryStream(int,%20java.io.InputStream,%20int))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn updateBinaryStream_int_InputStream_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBinaryStream", .descriptor == "(ILjava/io/InputStream;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBinaryStream\0", "(ILjava/io/InputStream;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateCharacterStream(int,%20java.io.Reader,%20int))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn updateCharacterStream_int_Reader_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateCharacterStream", .descriptor == "(ILjava/io/Reader;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateCharacterStream\0", "(ILjava/io/Reader;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateObject](https://developer.android.com/reference/java/sql/ResultSet.html#updateObject(int,%20java.lang.Object,%20int))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn updateObject_int_Object_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateObject", .descriptor == "(ILjava/lang/Object;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateObject\0", "(ILjava/lang/Object;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateObject](https://developer.android.com/reference/java/sql/ResultSet.html#updateObject(int,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn updateObject_int_Object<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateObject", .descriptor == "(ILjava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateObject\0", "(ILjava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNull](https://developer.android.com/reference/java/sql/ResultSet.html#updateNull(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateNull_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNull", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNull\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBoolean](https://developer.android.com/reference/java/sql/ResultSet.html#updateBoolean(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateBoolean_String_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBoolean", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBoolean\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateByte](https://developer.android.com/reference/java/sql/ResultSet.html#updateByte(java.lang.String,%20byte))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateByte_String_byte<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i8) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateByte", .descriptor == "(Ljava/lang/String;B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateByte\0", "(Ljava/lang/String;B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateShort](https://developer.android.com/reference/java/sql/ResultSet.html#updateShort(java.lang.String,%20short))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateShort_String_short<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i16) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateShort", .descriptor == "(Ljava/lang/String;S)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateShort\0", "(Ljava/lang/String;S)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateInt](https://developer.android.com/reference/java/sql/ResultSet.html#updateInt(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateInt_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateInt", .descriptor == "(Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateInt\0", "(Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateLong](https://developer.android.com/reference/java/sql/ResultSet.html#updateLong(java.lang.String,%20long))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateLong_String_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateLong", .descriptor == "(Ljava/lang/String;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateLong\0", "(Ljava/lang/String;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateFloat](https://developer.android.com/reference/java/sql/ResultSet.html#updateFloat(java.lang.String,%20float))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateFloat_String_float<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateFloat", .descriptor == "(Ljava/lang/String;F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateFloat\0", "(Ljava/lang/String;F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateDouble](https://developer.android.com/reference/java/sql/ResultSet.html#updateDouble(java.lang.String,%20double))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateDouble_String_double<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: f64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateDouble", .descriptor == "(Ljava/lang/String;D)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateDouble\0", "(Ljava/lang/String;D)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBigDecimal](https://developer.android.com/reference/java/sql/ResultSet.html#updateBigDecimal(java.lang.String,%20java.math.BigDecimal))
        ///
        /// Required features: "java-lang-String", "java-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-math-BigDecimal")))]
        pub fn updateBigDecimal_String_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBigDecimal", .descriptor == "(Ljava/lang/String;Ljava/math/BigDecimal;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBigDecimal\0", "(Ljava/lang/String;Ljava/math/BigDecimal;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateString](https://developer.android.com/reference/java/sql/ResultSet.html#updateString(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateString_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateString", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateString\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBytes](https://developer.android.com/reference/java/sql/ResultSet.html#updateBytes(java.lang.String,%20byte%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateBytes_String_byte_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBytes", .descriptor == "(Ljava/lang/String;[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBytes\0", "(Ljava/lang/String;[B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateDate](https://developer.android.com/reference/java/sql/ResultSet.html#updateDate(java.lang.String,%20java.sql.Date))
        ///
        /// Required features: "java-lang-String", "java-sql-Date"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Date")))]
        pub fn updateDate_String_Date<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Date>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateDate", .descriptor == "(Ljava/lang/String;Ljava/sql/Date;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateDate\0", "(Ljava/lang/String;Ljava/sql/Date;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateTime](https://developer.android.com/reference/java/sql/ResultSet.html#updateTime(java.lang.String,%20java.sql.Time))
        ///
        /// Required features: "java-lang-String", "java-sql-Time"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Time")))]
        pub fn updateTime_String_Time<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Time>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateTime", .descriptor == "(Ljava/lang/String;Ljava/sql/Time;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateTime\0", "(Ljava/lang/String;Ljava/sql/Time;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateTimestamp](https://developer.android.com/reference/java/sql/ResultSet.html#updateTimestamp(java.lang.String,%20java.sql.Timestamp))
        ///
        /// Required features: "java-lang-String", "java-sql-Timestamp"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Timestamp")))]
        pub fn updateTimestamp_String_Timestamp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Timestamp>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateTimestamp", .descriptor == "(Ljava/lang/String;Ljava/sql/Timestamp;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateTimestamp\0", "(Ljava/lang/String;Ljava/sql/Timestamp;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAsciiStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateAsciiStream(java.lang.String,%20java.io.InputStream,%20int))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn updateAsciiStream_String_InputStream_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateAsciiStream", .descriptor == "(Ljava/lang/String;Ljava/io/InputStream;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateAsciiStream\0", "(Ljava/lang/String;Ljava/io/InputStream;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBinaryStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateBinaryStream(java.lang.String,%20java.io.InputStream,%20int))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn updateBinaryStream_String_InputStream_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBinaryStream", .descriptor == "(Ljava/lang/String;Ljava/io/InputStream;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBinaryStream\0", "(Ljava/lang/String;Ljava/io/InputStream;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateCharacterStream(java.lang.String,%20java.io.Reader,%20int))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn updateCharacterStream_String_Reader_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateCharacterStream", .descriptor == "(Ljava/lang/String;Ljava/io/Reader;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateCharacterStream\0", "(Ljava/lang/String;Ljava/io/Reader;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateObject](https://developer.android.com/reference/java/sql/ResultSet.html#updateObject(java.lang.String,%20java.lang.Object,%20int))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn updateObject_String_Object_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateObject", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateObject\0", "(Ljava/lang/String;Ljava/lang/Object;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateObject](https://developer.android.com/reference/java/sql/ResultSet.html#updateObject(java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn updateObject_String_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateObject", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateObject\0", "(Ljava/lang/String;Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [insertRow](https://developer.android.com/reference/java/sql/ResultSet.html#insertRow())
        pub fn insertRow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "insertRow", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "insertRow\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateRow](https://developer.android.com/reference/java/sql/ResultSet.html#updateRow())
        pub fn updateRow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateRow", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateRow\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteRow](https://developer.android.com/reference/java/sql/ResultSet.html#deleteRow())
        pub fn deleteRow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "deleteRow", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "deleteRow\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [refreshRow](https://developer.android.com/reference/java/sql/ResultSet.html#refreshRow())
        pub fn refreshRow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "refreshRow", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "refreshRow\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelRowUpdates](https://developer.android.com/reference/java/sql/ResultSet.html#cancelRowUpdates())
        pub fn cancelRowUpdates<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "cancelRowUpdates", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "cancelRowUpdates\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveToInsertRow](https://developer.android.com/reference/java/sql/ResultSet.html#moveToInsertRow())
        pub fn moveToInsertRow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "moveToInsertRow", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "moveToInsertRow\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveToCurrentRow](https://developer.android.com/reference/java/sql/ResultSet.html#moveToCurrentRow())
        pub fn moveToCurrentRow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "moveToCurrentRow", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "moveToCurrentRow\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStatement](https://developer.android.com/reference/java/sql/ResultSet.html#getStatement())
        ///
        /// Required features: "java-sql-Statement"
        #[cfg(any(feature = "all", all(feature = "java-sql-Statement")))]
        pub fn getStatement<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Statement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getStatement", .descriptor == "()Ljava/sql/Statement;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getStatement\0", "()Ljava/sql/Statement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getObject](https://developer.android.com/reference/java/sql/ResultSet.html#getObject(int,%20java.util.Map))
        ///
        /// Required features: "java-lang-Object", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-Map")))]
        pub fn getObject_int_Map<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getObject", .descriptor == "(ILjava/util/Map;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getObject\0", "(ILjava/util/Map;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRef](https://developer.android.com/reference/java/sql/ResultSet.html#getRef(int))
        ///
        /// Required features: "java-sql-Ref"
        #[cfg(any(feature = "all", all(feature = "java-sql-Ref")))]
        pub fn getRef_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Ref>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getRef", .descriptor == "(I)Ljava/sql/Ref;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getRef\0", "(I)Ljava/sql/Ref;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBlob](https://developer.android.com/reference/java/sql/ResultSet.html#getBlob(int))
        ///
        /// Required features: "java-sql-Blob"
        #[cfg(any(feature = "all", all(feature = "java-sql-Blob")))]
        pub fn getBlob_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Blob>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBlob", .descriptor == "(I)Ljava/sql/Blob;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBlob\0", "(I)Ljava/sql/Blob;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClob](https://developer.android.com/reference/java/sql/ResultSet.html#getClob(int))
        ///
        /// Required features: "java-sql-Clob"
        #[cfg(any(feature = "all", all(feature = "java-sql-Clob")))]
        pub fn getClob_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Clob>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getClob", .descriptor == "(I)Ljava/sql/Clob;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getClob\0", "(I)Ljava/sql/Clob;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getArray](https://developer.android.com/reference/java/sql/ResultSet.html#getArray(int))
        ///
        /// Required features: "java-sql-Array"
        #[cfg(any(feature = "all", all(feature = "java-sql-Array")))]
        pub fn getArray_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Array>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getArray", .descriptor == "(I)Ljava/sql/Array;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getArray\0", "(I)Ljava/sql/Array;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getObject](https://developer.android.com/reference/java/sql/ResultSet.html#getObject(java.lang.String,%20java.util.Map))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-util-Map")))]
        pub fn getObject_String_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getObject", .descriptor == "(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getObject\0", "(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRef](https://developer.android.com/reference/java/sql/ResultSet.html#getRef(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Ref"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Ref")))]
        pub fn getRef_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Ref>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getRef", .descriptor == "(Ljava/lang/String;)Ljava/sql/Ref;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getRef\0", "(Ljava/lang/String;)Ljava/sql/Ref;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBlob](https://developer.android.com/reference/java/sql/ResultSet.html#getBlob(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Blob"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Blob")))]
        pub fn getBlob_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Blob>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getBlob", .descriptor == "(Ljava/lang/String;)Ljava/sql/Blob;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getBlob\0", "(Ljava/lang/String;)Ljava/sql/Blob;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClob](https://developer.android.com/reference/java/sql/ResultSet.html#getClob(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Clob"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Clob")))]
        pub fn getClob_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Clob>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getClob", .descriptor == "(Ljava/lang/String;)Ljava/sql/Clob;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getClob\0", "(Ljava/lang/String;)Ljava/sql/Clob;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getArray](https://developer.android.com/reference/java/sql/ResultSet.html#getArray(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Array"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Array")))]
        pub fn getArray_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Array>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getArray", .descriptor == "(Ljava/lang/String;)Ljava/sql/Array;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getArray\0", "(Ljava/lang/String;)Ljava/sql/Array;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDate](https://developer.android.com/reference/java/sql/ResultSet.html#getDate(int,%20java.util.Calendar))
        ///
        /// Required features: "java-sql-Date", "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-sql-Date", feature = "java-util-Calendar")))]
        pub fn getDate_int_Calendar<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Calendar>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getDate", .descriptor == "(ILjava/util/Calendar;)Ljava/sql/Date;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getDate\0", "(ILjava/util/Calendar;)Ljava/sql/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDate](https://developer.android.com/reference/java/sql/ResultSet.html#getDate(java.lang.String,%20java.util.Calendar))
        ///
        /// Required features: "java-lang-String", "java-sql-Date", "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Date", feature = "java-util-Calendar")))]
        pub fn getDate_String_Calendar<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Calendar>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getDate", .descriptor == "(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getDate\0", "(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTime](https://developer.android.com/reference/java/sql/ResultSet.html#getTime(int,%20java.util.Calendar))
        ///
        /// Required features: "java-sql-Time", "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-sql-Time", feature = "java-util-Calendar")))]
        pub fn getTime_int_Calendar<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Calendar>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Time>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getTime", .descriptor == "(ILjava/util/Calendar;)Ljava/sql/Time;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getTime\0", "(ILjava/util/Calendar;)Ljava/sql/Time;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTime](https://developer.android.com/reference/java/sql/ResultSet.html#getTime(java.lang.String,%20java.util.Calendar))
        ///
        /// Required features: "java-lang-String", "java-sql-Time", "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Time", feature = "java-util-Calendar")))]
        pub fn getTime_String_Calendar<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Calendar>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Time>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getTime", .descriptor == "(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getTime\0", "(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimestamp](https://developer.android.com/reference/java/sql/ResultSet.html#getTimestamp(int,%20java.util.Calendar))
        ///
        /// Required features: "java-sql-Timestamp", "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-sql-Timestamp", feature = "java-util-Calendar")))]
        pub fn getTimestamp_int_Calendar<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Calendar>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Timestamp>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getTimestamp", .descriptor == "(ILjava/util/Calendar;)Ljava/sql/Timestamp;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getTimestamp\0", "(ILjava/util/Calendar;)Ljava/sql/Timestamp;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimestamp](https://developer.android.com/reference/java/sql/ResultSet.html#getTimestamp(java.lang.String,%20java.util.Calendar))
        ///
        /// Required features: "java-lang-String", "java-sql-Timestamp", "java-util-Calendar"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Timestamp", feature = "java-util-Calendar")))]
        pub fn getTimestamp_String_Calendar<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Calendar>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Timestamp>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getTimestamp", .descriptor == "(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getTimestamp\0", "(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getURL](https://developer.android.com/reference/java/sql/ResultSet.html#getURL(int))
        ///
        /// Required features: "java-net-URL"
        #[cfg(any(feature = "all", all(feature = "java-net-URL")))]
        pub fn getURL_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::URL>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getURL", .descriptor == "(I)Ljava/net/URL;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getURL\0", "(I)Ljava/net/URL;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getURL](https://developer.android.com/reference/java/sql/ResultSet.html#getURL(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-net-URL"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-net-URL")))]
        pub fn getURL_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::net::URL>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getURL", .descriptor == "(Ljava/lang/String;)Ljava/net/URL;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getURL\0", "(Ljava/lang/String;)Ljava/net/URL;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateRef](https://developer.android.com/reference/java/sql/ResultSet.html#updateRef(int,%20java.sql.Ref))
        ///
        /// Required features: "java-sql-Ref"
        #[cfg(any(feature = "all", all(feature = "java-sql-Ref")))]
        pub fn updateRef_int_Ref<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Ref>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateRef", .descriptor == "(ILjava/sql/Ref;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateRef\0", "(ILjava/sql/Ref;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateRef](https://developer.android.com/reference/java/sql/ResultSet.html#updateRef(java.lang.String,%20java.sql.Ref))
        ///
        /// Required features: "java-lang-String", "java-sql-Ref"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Ref")))]
        pub fn updateRef_String_Ref<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Ref>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateRef", .descriptor == "(Ljava/lang/String;Ljava/sql/Ref;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateRef\0", "(Ljava/lang/String;Ljava/sql/Ref;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBlob](https://developer.android.com/reference/java/sql/ResultSet.html#updateBlob(int,%20java.sql.Blob))
        ///
        /// Required features: "java-sql-Blob"
        #[cfg(any(feature = "all", all(feature = "java-sql-Blob")))]
        pub fn updateBlob_int_Blob<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Blob>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBlob", .descriptor == "(ILjava/sql/Blob;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBlob\0", "(ILjava/sql/Blob;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBlob](https://developer.android.com/reference/java/sql/ResultSet.html#updateBlob(java.lang.String,%20java.sql.Blob))
        ///
        /// Required features: "java-lang-String", "java-sql-Blob"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Blob")))]
        pub fn updateBlob_String_Blob<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Blob>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBlob", .descriptor == "(Ljava/lang/String;Ljava/sql/Blob;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBlob\0", "(Ljava/lang/String;Ljava/sql/Blob;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateClob(int,%20java.sql.Clob))
        ///
        /// Required features: "java-sql-Clob"
        #[cfg(any(feature = "all", all(feature = "java-sql-Clob")))]
        pub fn updateClob_int_Clob<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Clob>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateClob", .descriptor == "(ILjava/sql/Clob;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateClob\0", "(ILjava/sql/Clob;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateClob(java.lang.String,%20java.sql.Clob))
        ///
        /// Required features: "java-lang-String", "java-sql-Clob"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Clob")))]
        pub fn updateClob_String_Clob<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Clob>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateClob", .descriptor == "(Ljava/lang/String;Ljava/sql/Clob;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateClob\0", "(Ljava/lang/String;Ljava/sql/Clob;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateArray](https://developer.android.com/reference/java/sql/ResultSet.html#updateArray(int,%20java.sql.Array))
        ///
        /// Required features: "java-sql-Array"
        #[cfg(any(feature = "all", all(feature = "java-sql-Array")))]
        pub fn updateArray_int_Array<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Array>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateArray", .descriptor == "(ILjava/sql/Array;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateArray\0", "(ILjava/sql/Array;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateArray](https://developer.android.com/reference/java/sql/ResultSet.html#updateArray(java.lang.String,%20java.sql.Array))
        ///
        /// Required features: "java-lang-String", "java-sql-Array"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Array")))]
        pub fn updateArray_String_Array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Array>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateArray", .descriptor == "(Ljava/lang/String;Ljava/sql/Array;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateArray\0", "(Ljava/lang/String;Ljava/sql/Array;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRowId](https://developer.android.com/reference/java/sql/ResultSet.html#getRowId(int))
        ///
        /// Required features: "java-sql-RowId"
        #[cfg(any(feature = "all", all(feature = "java-sql-RowId")))]
        pub fn getRowId_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::RowId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getRowId", .descriptor == "(I)Ljava/sql/RowId;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getRowId\0", "(I)Ljava/sql/RowId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRowId](https://developer.android.com/reference/java/sql/ResultSet.html#getRowId(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-RowId"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-RowId")))]
        pub fn getRowId_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::RowId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getRowId", .descriptor == "(Ljava/lang/String;)Ljava/sql/RowId;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getRowId\0", "(Ljava/lang/String;)Ljava/sql/RowId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateRowId](https://developer.android.com/reference/java/sql/ResultSet.html#updateRowId(int,%20java.sql.RowId))
        ///
        /// Required features: "java-sql-RowId"
        #[cfg(any(feature = "all", all(feature = "java-sql-RowId")))]
        pub fn updateRowId_int_RowId<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::RowId>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateRowId", .descriptor == "(ILjava/sql/RowId;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateRowId\0", "(ILjava/sql/RowId;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateRowId](https://developer.android.com/reference/java/sql/ResultSet.html#updateRowId(java.lang.String,%20java.sql.RowId))
        ///
        /// Required features: "java-lang-String", "java-sql-RowId"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-RowId")))]
        pub fn updateRowId_String_RowId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::RowId>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateRowId", .descriptor == "(Ljava/lang/String;Ljava/sql/RowId;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateRowId\0", "(Ljava/lang/String;Ljava/sql/RowId;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHoldability](https://developer.android.com/reference/java/sql/ResultSet.html#getHoldability())
        pub fn getHoldability<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getHoldability", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getHoldability\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isClosed](https://developer.android.com/reference/java/sql/ResultSet.html#isClosed())
        pub fn isClosed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "isClosed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "isClosed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNString](https://developer.android.com/reference/java/sql/ResultSet.html#updateNString(int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateNString_int_String<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNString", .descriptor == "(ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNString\0", "(ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNString](https://developer.android.com/reference/java/sql/ResultSet.html#updateNString(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn updateNString_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNString", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNString\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateNClob(int,%20java.sql.NClob))
        ///
        /// Required features: "java-sql-NClob"
        #[cfg(any(feature = "all", all(feature = "java-sql-NClob")))]
        pub fn updateNClob_int_NClob<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::NClob>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNClob", .descriptor == "(ILjava/sql/NClob;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNClob\0", "(ILjava/sql/NClob;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateNClob(java.lang.String,%20java.sql.NClob))
        ///
        /// Required features: "java-lang-String", "java-sql-NClob"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-NClob")))]
        pub fn updateNClob_String_NClob<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::NClob>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNClob", .descriptor == "(Ljava/lang/String;Ljava/sql/NClob;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNClob\0", "(Ljava/lang/String;Ljava/sql/NClob;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNClob](https://developer.android.com/reference/java/sql/ResultSet.html#getNClob(int))
        ///
        /// Required features: "java-sql-NClob"
        #[cfg(any(feature = "all", all(feature = "java-sql-NClob")))]
        pub fn getNClob_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::NClob>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getNClob", .descriptor == "(I)Ljava/sql/NClob;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getNClob\0", "(I)Ljava/sql/NClob;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNClob](https://developer.android.com/reference/java/sql/ResultSet.html#getNClob(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-NClob"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-NClob")))]
        pub fn getNClob_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::NClob>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getNClob", .descriptor == "(Ljava/lang/String;)Ljava/sql/NClob;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getNClob\0", "(Ljava/lang/String;)Ljava/sql/NClob;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSQLXML](https://developer.android.com/reference/java/sql/ResultSet.html#getSQLXML(int))
        ///
        /// Required features: "java-sql-SQLXML"
        #[cfg(any(feature = "all", all(feature = "java-sql-SQLXML")))]
        pub fn getSQLXML_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::SQLXML>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getSQLXML", .descriptor == "(I)Ljava/sql/SQLXML;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getSQLXML\0", "(I)Ljava/sql/SQLXML;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSQLXML](https://developer.android.com/reference/java/sql/ResultSet.html#getSQLXML(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-SQLXML"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-SQLXML")))]
        pub fn getSQLXML_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::SQLXML>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getSQLXML", .descriptor == "(Ljava/lang/String;)Ljava/sql/SQLXML;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getSQLXML\0", "(Ljava/lang/String;)Ljava/sql/SQLXML;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateSQLXML](https://developer.android.com/reference/java/sql/ResultSet.html#updateSQLXML(int,%20java.sql.SQLXML))
        ///
        /// Required features: "java-sql-SQLXML"
        #[cfg(any(feature = "all", all(feature = "java-sql-SQLXML")))]
        pub fn updateSQLXML_int_SQLXML<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::SQLXML>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateSQLXML", .descriptor == "(ILjava/sql/SQLXML;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateSQLXML\0", "(ILjava/sql/SQLXML;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateSQLXML](https://developer.android.com/reference/java/sql/ResultSet.html#updateSQLXML(java.lang.String,%20java.sql.SQLXML))
        ///
        /// Required features: "java-lang-String", "java-sql-SQLXML"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-SQLXML")))]
        pub fn updateSQLXML_String_SQLXML<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::SQLXML>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateSQLXML", .descriptor == "(Ljava/lang/String;Ljava/sql/SQLXML;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateSQLXML\0", "(Ljava/lang/String;Ljava/sql/SQLXML;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNString](https://developer.android.com/reference/java/sql/ResultSet.html#getNString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNString_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getNString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getNString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNString](https://developer.android.com/reference/java/sql/ResultSet.html#getNString(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNString_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getNString", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getNString\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#getNCharacterStream(int))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn getNCharacterStream_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::Reader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getNCharacterStream", .descriptor == "(I)Ljava/io/Reader;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getNCharacterStream\0", "(I)Ljava/io/Reader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#getNCharacterStream(java.lang.String))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn getNCharacterStream_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::Reader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "getNCharacterStream", .descriptor == "(Ljava/lang/String;)Ljava/io/Reader;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "getNCharacterStream\0", "(Ljava/lang/String;)Ljava/io/Reader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateNCharacterStream(int,%20java.io.Reader,%20long))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn updateNCharacterStream_int_Reader_long<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNCharacterStream", .descriptor == "(ILjava/io/Reader;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNCharacterStream\0", "(ILjava/io/Reader;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateNCharacterStream(java.lang.String,%20java.io.Reader,%20long))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn updateNCharacterStream_String_Reader_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNCharacterStream", .descriptor == "(Ljava/lang/String;Ljava/io/Reader;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNCharacterStream\0", "(Ljava/lang/String;Ljava/io/Reader;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAsciiStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateAsciiStream(int,%20java.io.InputStream,%20long))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn updateAsciiStream_int_InputStream_long<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateAsciiStream", .descriptor == "(ILjava/io/InputStream;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateAsciiStream\0", "(ILjava/io/InputStream;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBinaryStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateBinaryStream(int,%20java.io.InputStream,%20long))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn updateBinaryStream_int_InputStream_long<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBinaryStream", .descriptor == "(ILjava/io/InputStream;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBinaryStream\0", "(ILjava/io/InputStream;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateCharacterStream(int,%20java.io.Reader,%20long))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn updateCharacterStream_int_Reader_long<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateCharacterStream", .descriptor == "(ILjava/io/Reader;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateCharacterStream\0", "(ILjava/io/Reader;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAsciiStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateAsciiStream(java.lang.String,%20java.io.InputStream,%20long))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn updateAsciiStream_String_InputStream_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateAsciiStream", .descriptor == "(Ljava/lang/String;Ljava/io/InputStream;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateAsciiStream\0", "(Ljava/lang/String;Ljava/io/InputStream;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBinaryStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateBinaryStream(java.lang.String,%20java.io.InputStream,%20long))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn updateBinaryStream_String_InputStream_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBinaryStream", .descriptor == "(Ljava/lang/String;Ljava/io/InputStream;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBinaryStream\0", "(Ljava/lang/String;Ljava/io/InputStream;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateCharacterStream(java.lang.String,%20java.io.Reader,%20long))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn updateCharacterStream_String_Reader_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateCharacterStream", .descriptor == "(Ljava/lang/String;Ljava/io/Reader;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateCharacterStream\0", "(Ljava/lang/String;Ljava/io/Reader;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBlob](https://developer.android.com/reference/java/sql/ResultSet.html#updateBlob(int,%20java.io.InputStream,%20long))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn updateBlob_int_InputStream_long<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBlob", .descriptor == "(ILjava/io/InputStream;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBlob\0", "(ILjava/io/InputStream;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBlob](https://developer.android.com/reference/java/sql/ResultSet.html#updateBlob(java.lang.String,%20java.io.InputStream,%20long))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn updateBlob_String_InputStream_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBlob", .descriptor == "(Ljava/lang/String;Ljava/io/InputStream;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBlob\0", "(Ljava/lang/String;Ljava/io/InputStream;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateClob(int,%20java.io.Reader,%20long))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn updateClob_int_Reader_long<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateClob", .descriptor == "(ILjava/io/Reader;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateClob\0", "(ILjava/io/Reader;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateClob(java.lang.String,%20java.io.Reader,%20long))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn updateClob_String_Reader_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateClob", .descriptor == "(Ljava/lang/String;Ljava/io/Reader;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateClob\0", "(Ljava/lang/String;Ljava/io/Reader;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateNClob(int,%20java.io.Reader,%20long))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn updateNClob_int_Reader_long<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNClob", .descriptor == "(ILjava/io/Reader;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNClob\0", "(ILjava/io/Reader;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateNClob(java.lang.String,%20java.io.Reader,%20long))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn updateNClob_String_Reader_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNClob", .descriptor == "(Ljava/lang/String;Ljava/io/Reader;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNClob\0", "(Ljava/lang/String;Ljava/io/Reader;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateNCharacterStream(int,%20java.io.Reader))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn updateNCharacterStream_int_Reader<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNCharacterStream", .descriptor == "(ILjava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNCharacterStream\0", "(ILjava/io/Reader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateNCharacterStream(java.lang.String,%20java.io.Reader))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn updateNCharacterStream_String_Reader<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNCharacterStream", .descriptor == "(Ljava/lang/String;Ljava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNCharacterStream\0", "(Ljava/lang/String;Ljava/io/Reader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAsciiStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateAsciiStream(int,%20java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn updateAsciiStream_int_InputStream<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateAsciiStream", .descriptor == "(ILjava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateAsciiStream\0", "(ILjava/io/InputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBinaryStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateBinaryStream(int,%20java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn updateBinaryStream_int_InputStream<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBinaryStream", .descriptor == "(ILjava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBinaryStream\0", "(ILjava/io/InputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateCharacterStream(int,%20java.io.Reader))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn updateCharacterStream_int_Reader<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateCharacterStream", .descriptor == "(ILjava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateCharacterStream\0", "(ILjava/io/Reader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAsciiStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateAsciiStream(java.lang.String,%20java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn updateAsciiStream_String_InputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateAsciiStream", .descriptor == "(Ljava/lang/String;Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateAsciiStream\0", "(Ljava/lang/String;Ljava/io/InputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBinaryStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateBinaryStream(java.lang.String,%20java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn updateBinaryStream_String_InputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBinaryStream", .descriptor == "(Ljava/lang/String;Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBinaryStream\0", "(Ljava/lang/String;Ljava/io/InputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCharacterStream](https://developer.android.com/reference/java/sql/ResultSet.html#updateCharacterStream(java.lang.String,%20java.io.Reader))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn updateCharacterStream_String_Reader<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateCharacterStream", .descriptor == "(Ljava/lang/String;Ljava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateCharacterStream\0", "(Ljava/lang/String;Ljava/io/Reader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBlob](https://developer.android.com/reference/java/sql/ResultSet.html#updateBlob(int,%20java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn updateBlob_int_InputStream<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBlob", .descriptor == "(ILjava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBlob\0", "(ILjava/io/InputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateBlob](https://developer.android.com/reference/java/sql/ResultSet.html#updateBlob(java.lang.String,%20java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn updateBlob_String_InputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateBlob", .descriptor == "(Ljava/lang/String;Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateBlob\0", "(Ljava/lang/String;Ljava/io/InputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateClob(int,%20java.io.Reader))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn updateClob_int_Reader<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateClob", .descriptor == "(ILjava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateClob\0", "(ILjava/io/Reader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateClob(java.lang.String,%20java.io.Reader))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn updateClob_String_Reader<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateClob", .descriptor == "(Ljava/lang/String;Ljava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateClob\0", "(Ljava/lang/String;Ljava/io/Reader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateNClob(int,%20java.io.Reader))
        ///
        /// Required features: "java-io-Reader"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader")))]
        pub fn updateNClob_int_Reader<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNClob", .descriptor == "(ILjava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNClob\0", "(ILjava/io/Reader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNClob](https://developer.android.com/reference/java/sql/ResultSet.html#updateNClob(java.lang.String,%20java.io.Reader))
        ///
        /// Required features: "java-io-Reader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "java-lang-String")))]
        pub fn updateNClob_String_Reader<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/ResultSet", java.flags == PUBLIC | ABSTRACT, .name == "updateNClob", .descriptor == "(Ljava/lang/String;Ljava/io/Reader;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/ResultSet\0", "updateNClob\0", "(Ljava/lang/String;Ljava/io/Reader;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CLOSE_CURSORS_AT_COMMIT](https://developer.android.com/reference/java/sql/ResultSet.html#CLOSE_CURSORS_AT_COMMIT)
        pub const CLOSE_CURSORS_AT_COMMIT : i32 = 2;

        /// public static final [CONCUR_READ_ONLY](https://developer.android.com/reference/java/sql/ResultSet.html#CONCUR_READ_ONLY)
        pub const CONCUR_READ_ONLY : i32 = 1007;

        /// public static final [CONCUR_UPDATABLE](https://developer.android.com/reference/java/sql/ResultSet.html#CONCUR_UPDATABLE)
        pub const CONCUR_UPDATABLE : i32 = 1008;

        /// public static final [FETCH_FORWARD](https://developer.android.com/reference/java/sql/ResultSet.html#FETCH_FORWARD)
        pub const FETCH_FORWARD : i32 = 1000;

        /// public static final [FETCH_REVERSE](https://developer.android.com/reference/java/sql/ResultSet.html#FETCH_REVERSE)
        pub const FETCH_REVERSE : i32 = 1001;

        /// public static final [FETCH_UNKNOWN](https://developer.android.com/reference/java/sql/ResultSet.html#FETCH_UNKNOWN)
        pub const FETCH_UNKNOWN : i32 = 1002;

        /// public static final [HOLD_CURSORS_OVER_COMMIT](https://developer.android.com/reference/java/sql/ResultSet.html#HOLD_CURSORS_OVER_COMMIT)
        pub const HOLD_CURSORS_OVER_COMMIT : i32 = 1;

        /// public static final [TYPE_FORWARD_ONLY](https://developer.android.com/reference/java/sql/ResultSet.html#TYPE_FORWARD_ONLY)
        pub const TYPE_FORWARD_ONLY : i32 = 1003;

        /// public static final [TYPE_SCROLL_INSENSITIVE](https://developer.android.com/reference/java/sql/ResultSet.html#TYPE_SCROLL_INSENSITIVE)
        pub const TYPE_SCROLL_INSENSITIVE : i32 = 1004;

        /// public static final [TYPE_SCROLL_SENSITIVE](https://developer.android.com/reference/java/sql/ResultSet.html#TYPE_SCROLL_SENSITIVE)
        pub const TYPE_SCROLL_SENSITIVE : i32 = 1005;
    }
}
