// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-sql-Connection"))]
__jni_bindgen! {
    /// public interface [Connection](https://developer.android.com/reference/java/sql/Connection.html)
    ///
    /// Required feature: java-sql-Connection
    public interface Connection ("java/sql/Connection") extends crate::java::lang::Object, implements crate::java::sql::Wrapper, crate::java::lang::AutoCloseable {

        /// [createStatement](https://developer.android.com/reference/java/sql/Connection.html#createStatement())
        ///
        /// Required features: "java-sql-Statement"
        #[cfg(any(feature = "all", all(feature = "java-sql-Statement")))]
        pub fn createStatement<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Statement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "createStatement", .descriptor == "()Ljava/sql/Statement;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "createStatement\0", "()Ljava/sql/Statement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareStatement](https://developer.android.com/reference/java/sql/Connection.html#prepareStatement(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-PreparedStatement"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-PreparedStatement")))]
        pub fn prepareStatement_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::PreparedStatement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "prepareStatement", .descriptor == "(Ljava/lang/String;)Ljava/sql/PreparedStatement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "prepareStatement\0", "(Ljava/lang/String;)Ljava/sql/PreparedStatement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareCall](https://developer.android.com/reference/java/sql/Connection.html#prepareCall(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-CallableStatement"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-CallableStatement")))]
        pub fn prepareCall_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::CallableStatement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "prepareCall", .descriptor == "(Ljava/lang/String;)Ljava/sql/CallableStatement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "prepareCall\0", "(Ljava/lang/String;)Ljava/sql/CallableStatement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nativeSQL](https://developer.android.com/reference/java/sql/Connection.html#nativeSQL(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn nativeSQL<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "nativeSQL", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "nativeSQL\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutoCommit](https://developer.android.com/reference/java/sql/Connection.html#setAutoCommit(boolean))
        pub fn setAutoCommit<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setAutoCommit", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setAutoCommit\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutoCommit](https://developer.android.com/reference/java/sql/Connection.html#getAutoCommit())
        pub fn getAutoCommit<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "getAutoCommit", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "getAutoCommit\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [commit](https://developer.android.com/reference/java/sql/Connection.html#commit())
        pub fn commit<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "commit", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "commit\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rollback](https://developer.android.com/reference/java/sql/Connection.html#rollback())
        pub fn rollback<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "rollback", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "rollback\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/java/sql/Connection.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isClosed](https://developer.android.com/reference/java/sql/Connection.html#isClosed())
        pub fn isClosed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "isClosed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "isClosed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetaData](https://developer.android.com/reference/java/sql/Connection.html#getMetaData())
        ///
        /// Required features: "java-sql-DatabaseMetaData"
        #[cfg(any(feature = "all", all(feature = "java-sql-DatabaseMetaData")))]
        pub fn getMetaData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::DatabaseMetaData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "getMetaData", .descriptor == "()Ljava/sql/DatabaseMetaData;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "getMetaData\0", "()Ljava/sql/DatabaseMetaData;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setReadOnly](https://developer.android.com/reference/java/sql/Connection.html#setReadOnly(boolean))
        pub fn setReadOnly<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setReadOnly", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setReadOnly\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isReadOnly](https://developer.android.com/reference/java/sql/Connection.html#isReadOnly())
        pub fn isReadOnly<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "isReadOnly", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "isReadOnly\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCatalog](https://developer.android.com/reference/java/sql/Connection.html#setCatalog(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setCatalog<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setCatalog", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setCatalog\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCatalog](https://developer.android.com/reference/java/sql/Connection.html#getCatalog())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCatalog<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "getCatalog", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "getCatalog\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTransactionIsolation](https://developer.android.com/reference/java/sql/Connection.html#setTransactionIsolation(int))
        pub fn setTransactionIsolation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setTransactionIsolation", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setTransactionIsolation\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransactionIsolation](https://developer.android.com/reference/java/sql/Connection.html#getTransactionIsolation())
        pub fn getTransactionIsolation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "getTransactionIsolation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "getTransactionIsolation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWarnings](https://developer.android.com/reference/java/sql/Connection.html#getWarnings())
        ///
        /// Required features: "java-sql-SQLWarning"
        #[cfg(any(feature = "all", all(feature = "java-sql-SQLWarning")))]
        pub fn getWarnings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::SQLWarning>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "getWarnings", .descriptor == "()Ljava/sql/SQLWarning;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "getWarnings\0", "()Ljava/sql/SQLWarning;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearWarnings](https://developer.android.com/reference/java/sql/Connection.html#clearWarnings())
        pub fn clearWarnings<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "clearWarnings", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "clearWarnings\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createStatement](https://developer.android.com/reference/java/sql/Connection.html#createStatement(int,%20int))
        ///
        /// Required features: "java-sql-Statement"
        #[cfg(any(feature = "all", all(feature = "java-sql-Statement")))]
        pub fn createStatement_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Statement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "createStatement", .descriptor == "(II)Ljava/sql/Statement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "createStatement\0", "(II)Ljava/sql/Statement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareStatement](https://developer.android.com/reference/java/sql/Connection.html#prepareStatement(java.lang.String,%20int,%20int))
        ///
        /// Required features: "java-lang-String", "java-sql-PreparedStatement"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-PreparedStatement")))]
        pub fn prepareStatement_String_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::PreparedStatement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "prepareStatement", .descriptor == "(Ljava/lang/String;II)Ljava/sql/PreparedStatement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "prepareStatement\0", "(Ljava/lang/String;II)Ljava/sql/PreparedStatement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareCall](https://developer.android.com/reference/java/sql/Connection.html#prepareCall(java.lang.String,%20int,%20int))
        ///
        /// Required features: "java-lang-String", "java-sql-CallableStatement"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-CallableStatement")))]
        pub fn prepareCall_String_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::CallableStatement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "prepareCall", .descriptor == "(Ljava/lang/String;II)Ljava/sql/CallableStatement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "prepareCall\0", "(Ljava/lang/String;II)Ljava/sql/CallableStatement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTypeMap](https://developer.android.com/reference/java/sql/Connection.html#getTypeMap())
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn getTypeMap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "getTypeMap", .descriptor == "()Ljava/util/Map;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "getTypeMap\0", "()Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTypeMap](https://developer.android.com/reference/java/sql/Connection.html#setTypeMap(java.util.Map))
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn setTypeMap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setTypeMap", .descriptor == "(Ljava/util/Map;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setTypeMap\0", "(Ljava/util/Map;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHoldability](https://developer.android.com/reference/java/sql/Connection.html#setHoldability(int))
        pub fn setHoldability<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setHoldability", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setHoldability\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHoldability](https://developer.android.com/reference/java/sql/Connection.html#getHoldability())
        pub fn getHoldability<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "getHoldability", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "getHoldability\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSavepoint](https://developer.android.com/reference/java/sql/Connection.html#setSavepoint())
        ///
        /// Required features: "java-sql-Savepoint"
        #[cfg(any(feature = "all", all(feature = "java-sql-Savepoint")))]
        pub fn setSavepoint<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Savepoint>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setSavepoint", .descriptor == "()Ljava/sql/Savepoint;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setSavepoint\0", "()Ljava/sql/Savepoint;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSavepoint](https://developer.android.com/reference/java/sql/Connection.html#setSavepoint(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Savepoint"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Savepoint")))]
        pub fn setSavepoint_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Savepoint>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setSavepoint", .descriptor == "(Ljava/lang/String;)Ljava/sql/Savepoint;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setSavepoint\0", "(Ljava/lang/String;)Ljava/sql/Savepoint;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rollback](https://developer.android.com/reference/java/sql/Connection.html#rollback(java.sql.Savepoint))
        ///
        /// Required features: "java-sql-Savepoint"
        #[cfg(any(feature = "all", all(feature = "java-sql-Savepoint")))]
        pub fn rollback_Savepoint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Savepoint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "rollback", .descriptor == "(Ljava/sql/Savepoint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "rollback\0", "(Ljava/sql/Savepoint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseSavepoint](https://developer.android.com/reference/java/sql/Connection.html#releaseSavepoint(java.sql.Savepoint))
        ///
        /// Required features: "java-sql-Savepoint"
        #[cfg(any(feature = "all", all(feature = "java-sql-Savepoint")))]
        pub fn releaseSavepoint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Savepoint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "releaseSavepoint", .descriptor == "(Ljava/sql/Savepoint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "releaseSavepoint\0", "(Ljava/sql/Savepoint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createStatement](https://developer.android.com/reference/java/sql/Connection.html#createStatement(int,%20int,%20int))
        ///
        /// Required features: "java-sql-Statement"
        #[cfg(any(feature = "all", all(feature = "java-sql-Statement")))]
        pub fn createStatement_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Statement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "createStatement", .descriptor == "(III)Ljava/sql/Statement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "createStatement\0", "(III)Ljava/sql/Statement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareStatement](https://developer.android.com/reference/java/sql/Connection.html#prepareStatement(java.lang.String,%20int,%20int,%20int))
        ///
        /// Required features: "java-lang-String", "java-sql-PreparedStatement"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-PreparedStatement")))]
        pub fn prepareStatement_String_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::PreparedStatement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "prepareStatement", .descriptor == "(Ljava/lang/String;III)Ljava/sql/PreparedStatement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "prepareStatement\0", "(Ljava/lang/String;III)Ljava/sql/PreparedStatement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareCall](https://developer.android.com/reference/java/sql/Connection.html#prepareCall(java.lang.String,%20int,%20int,%20int))
        ///
        /// Required features: "java-lang-String", "java-sql-CallableStatement"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-CallableStatement")))]
        pub fn prepareCall_String_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::CallableStatement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "prepareCall", .descriptor == "(Ljava/lang/String;III)Ljava/sql/CallableStatement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "prepareCall\0", "(Ljava/lang/String;III)Ljava/sql/CallableStatement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareStatement](https://developer.android.com/reference/java/sql/Connection.html#prepareStatement(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String", "java-sql-PreparedStatement"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-PreparedStatement")))]
        pub fn prepareStatement_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::PreparedStatement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "prepareStatement", .descriptor == "(Ljava/lang/String;I)Ljava/sql/PreparedStatement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "prepareStatement\0", "(Ljava/lang/String;I)Ljava/sql/PreparedStatement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareStatement](https://developer.android.com/reference/java/sql/Connection.html#prepareStatement(java.lang.String,%20int%5B%5D))
        ///
        /// Required features: "java-lang-String", "java-sql-PreparedStatement"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-PreparedStatement")))]
        pub fn prepareStatement_String_int_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::PreparedStatement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "prepareStatement", .descriptor == "(Ljava/lang/String;[I)Ljava/sql/PreparedStatement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "prepareStatement\0", "(Ljava/lang/String;[I)Ljava/sql/PreparedStatement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareStatement](https://developer.android.com/reference/java/sql/Connection.html#prepareStatement(java.lang.String,%20java.lang.String%5B%5D))
        ///
        /// Required features: "java-lang-String", "java-sql-PreparedStatement"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-PreparedStatement")))]
        pub fn prepareStatement_String_String_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::PreparedStatement>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "prepareStatement", .descriptor == "(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "prepareStatement\0", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createClob](https://developer.android.com/reference/java/sql/Connection.html#createClob())
        ///
        /// Required features: "java-sql-Clob"
        #[cfg(any(feature = "all", all(feature = "java-sql-Clob")))]
        pub fn createClob<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Clob>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "createClob", .descriptor == "()Ljava/sql/Clob;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "createClob\0", "()Ljava/sql/Clob;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createBlob](https://developer.android.com/reference/java/sql/Connection.html#createBlob())
        ///
        /// Required features: "java-sql-Blob"
        #[cfg(any(feature = "all", all(feature = "java-sql-Blob")))]
        pub fn createBlob<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Blob>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "createBlob", .descriptor == "()Ljava/sql/Blob;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "createBlob\0", "()Ljava/sql/Blob;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createNClob](https://developer.android.com/reference/java/sql/Connection.html#createNClob())
        ///
        /// Required features: "java-sql-NClob"
        #[cfg(any(feature = "all", all(feature = "java-sql-NClob")))]
        pub fn createNClob<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::NClob>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "createNClob", .descriptor == "()Ljava/sql/NClob;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "createNClob\0", "()Ljava/sql/NClob;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSQLXML](https://developer.android.com/reference/java/sql/Connection.html#createSQLXML())
        ///
        /// Required features: "java-sql-SQLXML"
        #[cfg(any(feature = "all", all(feature = "java-sql-SQLXML")))]
        pub fn createSQLXML<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::SQLXML>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "createSQLXML", .descriptor == "()Ljava/sql/SQLXML;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "createSQLXML\0", "()Ljava/sql/SQLXML;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isValid](https://developer.android.com/reference/java/sql/Connection.html#isValid(int))
        pub fn isValid<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "isValid", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "isValid\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClientInfo](https://developer.android.com/reference/java/sql/Connection.html#setClientInfo(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setClientInfo_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setClientInfo", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setClientInfo\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClientInfo](https://developer.android.com/reference/java/sql/Connection.html#setClientInfo(java.util.Properties))
        ///
        /// Required features: "java-util-Properties"
        #[cfg(any(feature = "all", all(feature = "java-util-Properties")))]
        pub fn setClientInfo_Properties<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Properties>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "setClientInfo", .descriptor == "(Ljava/util/Properties;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "setClientInfo\0", "(Ljava/util/Properties;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClientInfo](https://developer.android.com/reference/java/sql/Connection.html#getClientInfo(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getClientInfo_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "getClientInfo", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "getClientInfo\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClientInfo](https://developer.android.com/reference/java/sql/Connection.html#getClientInfo())
        ///
        /// Required features: "java-util-Properties"
        #[cfg(any(feature = "all", all(feature = "java-util-Properties")))]
        pub fn getClientInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Properties>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "getClientInfo", .descriptor == "()Ljava/util/Properties;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "getClientInfo\0", "()Ljava/util/Properties;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createArrayOf](https://developer.android.com/reference/java/sql/Connection.html#createArrayOf(java.lang.String,%20java.lang.Object%5B%5D))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-sql-Array"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-sql-Array")))]
        pub fn createArrayOf<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Array>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "createArrayOf", .descriptor == "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Array;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "createArrayOf\0", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Array;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createStruct](https://developer.android.com/reference/java/sql/Connection.html#createStruct(java.lang.String,%20java.lang.Object%5B%5D))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-sql-Struct"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-sql-Struct")))]
        pub fn createStruct<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Struct>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Connection", java.flags == PUBLIC | ABSTRACT, .name == "createStruct", .descriptor == "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Struct;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Connection\0", "createStruct\0", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Struct;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [TRANSACTION_NONE](https://developer.android.com/reference/java/sql/Connection.html#TRANSACTION_NONE)
        pub const TRANSACTION_NONE : i32 = 0;

        /// public static final [TRANSACTION_READ_COMMITTED](https://developer.android.com/reference/java/sql/Connection.html#TRANSACTION_READ_COMMITTED)
        pub const TRANSACTION_READ_COMMITTED : i32 = 2;

        /// public static final [TRANSACTION_READ_UNCOMMITTED](https://developer.android.com/reference/java/sql/Connection.html#TRANSACTION_READ_UNCOMMITTED)
        pub const TRANSACTION_READ_UNCOMMITTED : i32 = 1;

        /// public static final [TRANSACTION_REPEATABLE_READ](https://developer.android.com/reference/java/sql/Connection.html#TRANSACTION_REPEATABLE_READ)
        pub const TRANSACTION_REPEATABLE_READ : i32 = 4;

        /// public static final [TRANSACTION_SERIALIZABLE](https://developer.android.com/reference/java/sql/Connection.html#TRANSACTION_SERIALIZABLE)
        pub const TRANSACTION_SERIALIZABLE : i32 = 8;
    }
}
