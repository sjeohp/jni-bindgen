// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-sql-DriverManager"))]
__jni_bindgen! {
    /// public class [DriverManager](https://developer.android.com/reference/java/sql/DriverManager.html)
    ///
    /// Required feature: java-sql-DriverManager
    public class DriverManager ("java/sql/DriverManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [DriverManager](https://developer.android.com/reference/java/sql/DriverManager.html#DriverManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::java::sql::DriverManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "java/sql/DriverManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/DriverManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getLogWriter](https://developer.android.com/reference/java/sql/DriverManager.html#getLogWriter())
        ///
        /// Required features: "java-io-PrintWriter"
        #[cfg(any(feature = "all", all(feature = "java-io-PrintWriter")))]
        pub fn getLogWriter<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::PrintWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "getLogWriter", .descriptor == "()Ljava/io/PrintWriter;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "getLogWriter\0", "()Ljava/io/PrintWriter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLogWriter](https://developer.android.com/reference/java/sql/DriverManager.html#setLogWriter(java.io.PrintWriter))
        ///
        /// Required features: "java-io-PrintWriter"
        #[cfg(any(feature = "all", all(feature = "java-io-PrintWriter")))]
        pub fn setLogWriter<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintWriter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "setLogWriter", .descriptor == "(Ljava/io/PrintWriter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "setLogWriter\0", "(Ljava/io/PrintWriter;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConnection](https://developer.android.com/reference/java/sql/DriverManager.html#getConnection(java.lang.String,%20java.util.Properties))
        ///
        /// Required features: "java-lang-String", "java-sql-Connection", "java-util-Properties"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Connection", feature = "java-util-Properties")))]
        pub fn getConnection_String_Properties<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Properties>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Connection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "getConnection", .descriptor == "(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "getConnection\0", "(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConnection](https://developer.android.com/reference/java/sql/DriverManager.html#getConnection(java.lang.String,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Connection"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Connection")))]
        pub fn getConnection_String_String_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Connection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "getConnection", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "getConnection\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConnection](https://developer.android.com/reference/java/sql/DriverManager.html#getConnection(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Connection"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Connection")))]
        pub fn getConnection_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Connection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "getConnection", .descriptor == "(Ljava/lang/String;)Ljava/sql/Connection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "getConnection\0", "(Ljava/lang/String;)Ljava/sql/Connection;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDriver](https://developer.android.com/reference/java/sql/DriverManager.html#getDriver(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-sql-Driver"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-sql-Driver")))]
        pub fn getDriver<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::Driver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "getDriver", .descriptor == "(Ljava/lang/String;)Ljava/sql/Driver;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "getDriver\0", "(Ljava/lang/String;)Ljava/sql/Driver;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerDriver](https://developer.android.com/reference/java/sql/DriverManager.html#registerDriver(java.sql.Driver))
        ///
        /// Required features: "java-sql-Driver"
        #[cfg(any(feature = "all", all(feature = "java-sql-Driver")))]
        pub fn registerDriver<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Driver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "registerDriver", .descriptor == "(Ljava/sql/Driver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "registerDriver\0", "(Ljava/sql/Driver;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deregisterDriver](https://developer.android.com/reference/java/sql/DriverManager.html#deregisterDriver(java.sql.Driver))
        ///
        /// Required features: "java-sql-Driver"
        #[cfg(any(feature = "all", all(feature = "java-sql-Driver")))]
        pub fn deregisterDriver<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::sql::Driver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "deregisterDriver", .descriptor == "(Ljava/sql/Driver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "deregisterDriver\0", "(Ljava/sql/Driver;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrivers](https://developer.android.com/reference/java/sql/DriverManager.html#getDrivers())
        ///
        /// Required features: "java-util-Enumeration"
        #[cfg(any(feature = "all", all(feature = "java-util-Enumeration")))]
        pub fn getDrivers<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Enumeration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "getDrivers", .descriptor == "()Ljava/util/Enumeration;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "getDrivers\0", "()Ljava/util/Enumeration;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLoginTimeout](https://developer.android.com/reference/java/sql/DriverManager.html#setLoginTimeout(int))
        pub fn setLoginTimeout<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "setLoginTimeout", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "setLoginTimeout\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLoginTimeout](https://developer.android.com/reference/java/sql/DriverManager.html#getLoginTimeout())
        pub fn getLoginTimeout<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "getLoginTimeout", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "getLoginTimeout\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLogStream](https://developer.android.com/reference/java/sql/DriverManager.html#setLogStream(java.io.PrintStream))
        ///
        /// Required features: "java-io-PrintStream"
        #[cfg(any(feature = "all", all(feature = "java-io-PrintStream")))]
        #[deprecated] pub fn setLogStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "setLogStream", .descriptor == "(Ljava/io/PrintStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "setLogStream\0", "(Ljava/io/PrintStream;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLogStream](https://developer.android.com/reference/java/sql/DriverManager.html#getLogStream())
        ///
        /// Required features: "java-io-PrintStream"
        #[cfg(any(feature = "all", all(feature = "java-io-PrintStream")))]
        #[deprecated] pub fn getLogStream<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::PrintStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "getLogStream", .descriptor == "()Ljava/io/PrintStream;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "getLogStream\0", "()Ljava/io/PrintStream;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [println](https://developer.android.com/reference/java/sql/DriverManager.html#println(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn println<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/DriverManager", java.flags == PUBLIC | STATIC, .name == "println", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("java/sql/DriverManager\0", "println\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
