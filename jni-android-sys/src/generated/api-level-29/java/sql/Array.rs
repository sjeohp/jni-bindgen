// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "java-sql-Array"))]
__jni_bindgen! {
    /// public interface [Array](https://developer.android.com/reference/java/sql/Array.html)
    ///
    /// Required feature: java-sql-Array
    public interface Array ("java/sql/Array") extends crate::java::lang::Object {

        /// [getBaseTypeName](https://developer.android.com/reference/java/sql/Array.html#getBaseTypeName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getBaseTypeName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getBaseTypeName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getBaseTypeName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBaseType](https://developer.android.com/reference/java/sql/Array.html#getBaseType())
        pub fn getBaseType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getBaseType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getBaseType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getArray](https://developer.android.com/reference/java/sql/Array.html#getArray())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getArray<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getArray", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getArray\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getArray](https://developer.android.com/reference/java/sql/Array.html#getArray(java.util.Map))
        ///
        /// Required features: "java-lang-Object", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-Map")))]
        pub fn getArray_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getArray", .descriptor == "(Ljava/util/Map;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getArray\0", "(Ljava/util/Map;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getArray](https://developer.android.com/reference/java/sql/Array.html#getArray(long,%20int))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getArray_long_int<'env>(&'env self, arg0: i64, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getArray", .descriptor == "(JI)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getArray\0", "(JI)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getArray](https://developer.android.com/reference/java/sql/Array.html#getArray(long,%20int,%20java.util.Map))
        ///
        /// Required features: "java-lang-Object", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-util-Map")))]
        pub fn getArray_long_int_Map<'env>(&'env self, arg0: i64, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getArray", .descriptor == "(JILjava/util/Map;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getArray\0", "(JILjava/util/Map;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResultSet](https://developer.android.com/reference/java/sql/Array.html#getResultSet())
        ///
        /// Required features: "java-sql-ResultSet"
        #[cfg(any(feature = "all", all(feature = "java-sql-ResultSet")))]
        pub fn getResultSet<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::ResultSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getResultSet", .descriptor == "()Ljava/sql/ResultSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getResultSet\0", "()Ljava/sql/ResultSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResultSet](https://developer.android.com/reference/java/sql/Array.html#getResultSet(java.util.Map))
        ///
        /// Required features: "java-sql-ResultSet", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-sql-ResultSet", feature = "java-util-Map")))]
        pub fn getResultSet_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::ResultSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getResultSet", .descriptor == "(Ljava/util/Map;)Ljava/sql/ResultSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getResultSet\0", "(Ljava/util/Map;)Ljava/sql/ResultSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResultSet](https://developer.android.com/reference/java/sql/Array.html#getResultSet(long,%20int))
        ///
        /// Required features: "java-sql-ResultSet"
        #[cfg(any(feature = "all", all(feature = "java-sql-ResultSet")))]
        pub fn getResultSet_long_int<'env>(&'env self, arg0: i64, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::ResultSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getResultSet", .descriptor == "(JI)Ljava/sql/ResultSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getResultSet\0", "(JI)Ljava/sql/ResultSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResultSet](https://developer.android.com/reference/java/sql/Array.html#getResultSet(long,%20int,%20java.util.Map))
        ///
        /// Required features: "java-sql-ResultSet", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-sql-ResultSet", feature = "java-util-Map")))]
        pub fn getResultSet_long_int_Map<'env>(&'env self, arg0: i64, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::sql::ResultSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "getResultSet", .descriptor == "(JILjava/util/Map;)Ljava/sql/ResultSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "getResultSet\0", "(JILjava/util/Map;)Ljava/sql/ResultSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [free](https://developer.android.com/reference/java/sql/Array.html#free())
        pub fn free<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "java/sql/Array", java.flags == PUBLIC | ABSTRACT, .name == "free", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("java/sql/Array\0", "free\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
